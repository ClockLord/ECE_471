
ECE471_Hw5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007308  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080074d8  080074d8  000174d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075f4  080075f4  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  080075f4  080075f4  000175f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075fc  080075fc  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075fc  080075fc  000175fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007600  08007600  00017600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  08007614  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  080076b4  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000046f8  20000150  08007754  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20004848  08007754  00024848  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001db9c  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003d73  00000000  00000000  0003dd5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000018e0  00000000  00000000  00041ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000135e  00000000  00000000  000433b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a086  00000000  00000000  00044716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001d5bc  00000000  00000000  0006e79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010676a  00000000  00000000  0008bd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000069d8  00000000  00000000  001924c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  00198e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000150 	.word	0x20000150
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080074c0 	.word	0x080074c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000154 	.word	0x20000154
 800020c:	080074c0 	.word	0x080074c0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000016c 	.word	0x2000016c
 800053c:	200001c0 	.word	0x200001c0

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b0b2      	sub	sp, #200	; 0xc8
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fe46 	bl	80011d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f8bb 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 fa1f 	bl	8000990 <MX_GPIO_Init>
  MX_ETH_Init();
 8000552:	f000 f971 	bl	8000838 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000556:	f000 f9bd 	bl	80008d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055a:	f000 f9eb 	bl	8000934 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800055e:	f000 f919 	bl	8000794 <MX_ADC1_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Switch */
  osMessageQDef(Switch, 5, uint8_t);
 8000562:	4b48      	ldr	r3, [pc, #288]	; (8000684 <main+0x144>)
 8000564:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000568:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800056a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SwitchHandle = osMessageCreate(osMessageQ(Switch), NULL);
 800056e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f004 fd5a 	bl	800502e <osMessageCreate>
 800057a:	4603      	mov	r3, r0
 800057c:	4a42      	ldr	r2, [pc, #264]	; (8000688 <main+0x148>)
 800057e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Throttle */
  osMessageQDef(Throttle, 5, uint16_t);
 8000580:	4b42      	ldr	r3, [pc, #264]	; (800068c <main+0x14c>)
 8000582:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ThrottleHandle = osMessageCreate(osMessageQ(Throttle), NULL);
 800058c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fd4b 	bl	800502e <osMessageCreate>
 8000598:	4603      	mov	r3, r0
 800059a:	4a3d      	ldr	r2, [pc, #244]	; (8000690 <main+0x150>)
 800059c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059e:	4b3d      	ldr	r3, [pc, #244]	; (8000694 <main+0x154>)
 80005a0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80005a4:	461d      	mov	r5, r3
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f004 fcd8 	bl	8004f6e <osThreadCreate>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a35      	ldr	r2, [pc, #212]	; (8000698 <main+0x158>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of alive */
  osThreadDef(alive, alive_init, osPriorityBelowNormal, 0, 128);
 80005c4:	4b35      	ldr	r3, [pc, #212]	; (800069c <main+0x15c>)
 80005c6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80005ca:	461d      	mov	r5, r3
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  aliveHandle = osThreadCreate(osThread(alive), NULL);
 80005d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 fcc5 	bl	8004f6e <osThreadCreate>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a2e      	ldr	r2, [pc, #184]	; (80006a0 <main+0x160>)
 80005e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of button */
  osThreadDef(button, button_init, osPriorityNormal, 0, 128);
 80005ea:	4b2e      	ldr	r3, [pc, #184]	; (80006a4 <main+0x164>)
 80005ec:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005f0:	461d      	mov	r5, r3
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonHandle = osThreadCreate(osThread(button), NULL);
 80005fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f004 fcb2 	bl	8004f6e <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a26      	ldr	r2, [pc, #152]	; (80006a8 <main+0x168>)
 800060e:	6013      	str	r3, [r2, #0]

  /* definition and creation of light */
  osThreadDef(light, light_init, osPriorityAboveNormal, 0, 128);
 8000610:	4b26      	ldr	r3, [pc, #152]	; (80006ac <main+0x16c>)
 8000612:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lightHandle = osThreadCreate(osThread(light), NULL);
 8000624:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fc9f 	bl	8004f6e <osThreadCreate>
 8000630:	4603      	mov	r3, r0
 8000632:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <main+0x170>)
 8000634:	6013      	str	r3, [r2, #0]

  /* definition and creation of analog */
  osThreadDef(analog, analog_init, osPriorityAboveNormal, 0, 128);
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <main+0x174>)
 8000638:	f107 041c 	add.w	r4, r7, #28
 800063c:	461d      	mov	r5, r3
 800063e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  analogHandle = osThreadCreate(osThread(analog), NULL);
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f004 fc8c 	bl	8004f6e <osThreadCreate>
 8000656:	4603      	mov	r3, r0
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <main+0x178>)
 800065a:	6013      	str	r3, [r2, #0]

  /* definition and creation of control */
  osThreadDef(control, control_init, osPriorityHigh, 0, 128);
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <main+0x17c>)
 800065e:	463c      	mov	r4, r7
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlHandle = osThreadCreate(osThread(control), NULL);
 800066e:	463b      	mov	r3, r7
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f004 fc7b 	bl	8004f6e <osThreadCreate>
 8000678:	4603      	mov	r3, r0
 800067a:	4a11      	ldr	r2, [pc, #68]	; (80006c0 <main+0x180>)
 800067c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800067e:	f004 fc6f 	bl	8004f60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000682:	e7fe      	b.n	8000682 <main+0x142>
 8000684:	080074d8 	.word	0x080074d8
 8000688:	20000a98 	.word	0x20000a98
 800068c:	080074e8 	.word	0x080074e8
 8000690:	20000a9c 	.word	0x20000a9c
 8000694:	08007504 	.word	0x08007504
 8000698:	20000a80 	.word	0x20000a80
 800069c:	08007528 	.word	0x08007528
 80006a0:	20000a84 	.word	0x20000a84
 80006a4:	0800754c 	.word	0x0800754c
 80006a8:	20000a88 	.word	0x20000a88
 80006ac:	08007570 	.word	0x08007570
 80006b0:	20000a8c 	.word	0x20000a8c
 80006b4:	08007594 	.word	0x08007594
 80006b8:	20000a90 	.word	0x20000a90
 80006bc:	080075b8 	.word	0x080075b8
 80006c0:	20000a94 	.word	0x20000a94

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f006 feba 	bl	800744c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e8:	f002 f8ee 	bl	80028c8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <SystemClock_Config+0xc8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a26      	ldr	r2, [pc, #152]	; (800078c <SystemClock_Config+0xc8>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <SystemClock_Config+0xc8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <SystemClock_Config+0xcc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800070c:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemClock_Config+0xcc>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemClock_Config+0xcc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000724:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000738:	2348      	movs	r3, #72	; 0x48
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000740:	2303      	movs	r3, #3
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f002 f8cd 	bl	80028e8 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 fa74 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2102      	movs	r1, #2
 8000774:	4618      	mov	r0, r3
 8000776:	f002 fb5b 	bl	8002e30 <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000780:	f000 fa5e 	bl	8000c40 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3750      	adds	r7, #80	; 0x50
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_ADC1_Init+0x98>)
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <MX_ADC1_Init+0x9c>)
 80007aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_ADC1_Init+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_ADC1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_ADC1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007be:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_ADC1_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_ADC1_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_ADC1_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_ADC1_Init+0x98>)
 80007d4:	4a17      	ldr	r2, [pc, #92]	; (8000834 <MX_ADC1_Init+0xa0>)
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_ADC1_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_ADC1_Init+0x98>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_ADC1_Init+0x98>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_ADC1_Init+0x98>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f2:	480e      	ldr	r0, [pc, #56]	; (800082c <MX_ADC1_Init+0x98>)
 80007f4:	f000 fd40 	bl	8001278 <HAL_ADC_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007fe:	f000 fa1f 	bl	8000c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000806:	2301      	movs	r3, #1
 8000808:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_ADC1_Init+0x98>)
 8000814:	f000 feda 	bl	80015cc <HAL_ADC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800081e:	f000 fa0f 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200003f8 	.word	0x200003f8
 8000830:	40012000 	.word	0x40012000
 8000834:	0f000001 	.word	0x0f000001

08000838 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_ETH_Init+0x84>)
 800083e:	4a20      	ldr	r2, [pc, #128]	; (80008c0 <MX_ETH_Init+0x88>)
 8000840:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_ETH_Init+0x8c>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_ETH_Init+0x8c>)
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_ETH_Init+0x8c>)
 8000850:	22e1      	movs	r2, #225	; 0xe1
 8000852:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_ETH_Init+0x8c>)
 8000856:	2200      	movs	r2, #0
 8000858:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_ETH_Init+0x8c>)
 800085c:	2200      	movs	r2, #0
 800085e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_ETH_Init+0x8c>)
 8000862:	2200      	movs	r2, #0
 8000864:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_ETH_Init+0x84>)
 8000868:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <MX_ETH_Init+0x8c>)
 800086a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_ETH_Init+0x84>)
 800086e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000872:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_ETH_Init+0x84>)
 8000876:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <MX_ETH_Init+0x90>)
 8000878:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <MX_ETH_Init+0x84>)
 800087c:	4a13      	ldr	r2, [pc, #76]	; (80008cc <MX_ETH_Init+0x94>)
 800087e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_ETH_Init+0x84>)
 8000882:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000886:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_ETH_Init+0x84>)
 800088a:	f001 f9d1 	bl	8001c30 <HAL_ETH_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000894:	f000 f9d4 	bl	8000c40 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000898:	2238      	movs	r2, #56	; 0x38
 800089a:	2100      	movs	r1, #0
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_ETH_Init+0x98>)
 800089e:	f006 fdd5 	bl	800744c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_ETH_Init+0x98>)
 80008a4:	2221      	movs	r2, #33	; 0x21
 80008a6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_ETH_Init+0x98>)
 80008aa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80008ae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_ETH_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000440 	.word	0x20000440
 80008c0:	40028000 	.word	0x40028000
 80008c4:	20000aa4 	.word	0x20000aa4
 80008c8:	200000b0 	.word	0x200000b0
 80008cc:	20000010 	.word	0x20000010
 80008d0:	200003c0 	.word	0x200003c0

080008d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008da:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_USART3_UART_Init+0x5c>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART3_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000918:	f003 fbb2 	bl	8004080 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000922:	f000 f98d 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200004f0 	.word	0x200004f0
 8000930:	40004800 	.word	0x40004800

08000934 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800093e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2206      	movs	r2, #6
 8000944:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	2202      	movs	r2, #2
 800094a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000954:	2202      	movs	r2, #2
 8000956:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	2201      	movs	r2, #1
 800095c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096c:	2201      	movs	r2, #1
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000978:	f001 fe5d 	bl	8002636 <HAL_PCD_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000982:	f000 f95d 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000578 	.word	0x20000578

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b47      	ldr	r3, [pc, #284]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a46      	ldr	r2, [pc, #280]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b44      	ldr	r3, [pc, #272]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	61bb      	str	r3, [r7, #24]
 80009bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a40      	ldr	r2, [pc, #256]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a3a      	ldr	r2, [pc, #232]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b35      	ldr	r3, [pc, #212]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a34      	ldr	r2, [pc, #208]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <MX_GPIO_Init+0x134>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <MX_GPIO_Init+0x134>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <MX_GPIO_Init+0x134>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1e:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <MX_GPIO_Init+0x134>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a28      	ldr	r2, [pc, #160]	; (8000ac4 <MX_GPIO_Init+0x134>)
 8000a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <MX_GPIO_Init+0x134>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a3c:	4822      	ldr	r0, [pc, #136]	; (8000ac8 <MX_GPIO_Init+0x138>)
 8000a3e:	f001 fde1 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2140      	movs	r1, #64	; 0x40
 8000a46:	4821      	ldr	r0, [pc, #132]	; (8000acc <MX_GPIO_Init+0x13c>)
 8000a48:	f001 fddc 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	481b      	ldr	r0, [pc, #108]	; (8000ad0 <MX_GPIO_Init+0x140>)
 8000a64:	f001 fc0a 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a68:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_GPIO_Init+0x138>)
 8000a82:	f001 fbfb 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a86:	2340      	movs	r3, #64	; 0x40
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <MX_GPIO_Init+0x13c>)
 8000a9e:	f001 fbed 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_GPIO_Init+0x13c>)
 8000ab6:	f001 fbe1 	bl	800227c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aba:	bf00      	nop
 8000abc:	3730      	adds	r7, #48	; 0x30
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	40021800 	.word	0x40021800
 8000ad0:	40020800 	.word	0x40020800

08000ad4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f004 fa92 	bl	8005006 <osDelay>
 8000ae2:	e7fb      	b.n	8000adc <StartDefaultTask+0x8>

08000ae4 <alive_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_alive_init */
void alive_init(void const * argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


  for(;;) //1000 = 1 sec
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //red
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af2:	4809      	ldr	r0, [pc, #36]	; (8000b18 <alive_init+0x34>)
 8000af4:	f001 fd86 	bl	8002604 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000afc:	f004 fa83 	bl	8005006 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //red
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b06:	4804      	ldr	r0, [pc, #16]	; (8000b18 <alive_init+0x34>)
 8000b08:	f001 fd7c 	bl	8002604 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000b0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b10:	f004 fa79 	bl	8005006 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //red
 8000b14:	e7ea      	b.n	8000aec <alive_init+0x8>
 8000b16:	bf00      	nop
 8000b18:	40020400 	.word	0x40020400

08000b1c <button_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_button_init */
void button_init(void const * argument)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN button_init */
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8000b24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <button_init+0x44>)
 8000b2a:	f001 fd53 	bl	80025d4 <HAL_GPIO_ReadPin>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d103      	bne.n	8000b3c <button_init+0x20>
		Toggle = true;
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <button_init+0x48>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	e002      	b.n	8000b42 <button_init+0x26>

	}
	else{
		Toggle = false;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <button_init+0x48>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
	}
	osStatus status = osMessagePut(SwitchHandle, Toggle, osWaitForever);
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <button_init+0x4c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <button_init+0x48>)
 8000b48:	7812      	ldrb	r2, [r2, #0]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b50:	4618      	mov	r0, r3
 8000b52:	f004 fa95 	bl	8005080 <osMessagePut>
 8000b56:	60f8      	str	r0, [r7, #12]
    osDelay(10);
 8000b58:	200a      	movs	r0, #10
 8000b5a:	f004 fa54 	bl	8005006 <osDelay>
  {
 8000b5e:	e7e1      	b.n	8000b24 <button_init+0x8>
 8000b60:	40020800 	.word	0x40020800
 8000b64:	20000aa0 	.word	0x20000aa0
 8000b68:	20000a98 	.word	0x20000a98

08000b6c <light_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_light_init */
void light_init(void const * argument)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN light_init */
  /* Infinite loop */
  for(;;)
  {
	osEvent messageEvent = osMessageGet(SwitchHandle, osWaitForever);
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <light_init+0x50>)
 8000b76:	6819      	ldr	r1, [r3, #0]
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b80:	4618      	mov	r0, r3
 8000b82:	f004 fabd 	bl	8005100 <osMessageGet>
	Toggle = (bool)messageEvent.value.p;
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	bf14      	ite	ne
 8000b8c:	2301      	movne	r3, #1
 8000b8e:	2300      	moveq	r3, #0
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <light_init+0x54>)
 8000b94:	701a      	strb	r2, [r3, #0]

	if(Toggle){
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <light_init+0x54>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d005      	beq.n	8000baa <light_init+0x3e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //green
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <light_init+0x58>)
 8000ba4:	f001 fd2e 	bl	8002604 <HAL_GPIO_WritePin>
 8000ba8:	e004      	b.n	8000bb4 <light_init+0x48>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //green
 8000baa:	2200      	movs	r2, #0
 8000bac:	2101      	movs	r1, #1
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <light_init+0x58>)
 8000bb0:	f001 fd28 	bl	8002604 <HAL_GPIO_WritePin>
	}

    osDelay(1);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f004 fa26 	bl	8005006 <osDelay>
  {
 8000bba:	e7db      	b.n	8000b74 <light_init+0x8>
 8000bbc:	20000a98 	.word	0x20000a98
 8000bc0:	20000aa0 	.word	0x20000aa0
 8000bc4:	40020400 	.word	0x40020400

08000bc8 <analog_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_analog_init */
void analog_init(void const * argument)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN analog_init */
  /* Infinite loop */
  for(;;)
  {
	  	  HAL_ADC_Start(&hadc1);
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <analog_init+0x3c>)
 8000bd2:	f000 fb95 	bl	8001300 <HAL_ADC_Start>

	  	  // Wait for the ADC conversion to complete (blocking)
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000bd6:	f04f 31ff 	mov.w	r1, #4294967295
 8000bda:	480a      	ldr	r0, [pc, #40]	; (8000c04 <analog_init+0x3c>)
 8000bdc:	f000 fc5e 	bl	800149c <HAL_ADC_PollForConversion>

	  	  // Read the raw ADC value
	  	  uint16_t raw = HAL_ADC_GetValue(&hadc1);
 8000be0:	4808      	ldr	r0, [pc, #32]	; (8000c04 <analog_init+0x3c>)
 8000be2:	f000 fce6 	bl	80015b2 <HAL_ADC_GetValue>
 8000be6:	4603      	mov	r3, r0
 8000be8:	81fb      	strh	r3, [r7, #14]
	  	  osStatus status = osMessagePut(ThrottleHandle, raw, osWaitForever);
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <analog_init+0x40>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	89f9      	ldrh	r1, [r7, #14]
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f004 fa43 	bl	8005080 <osMessagePut>
 8000bfa:	60b8      	str	r0, [r7, #8]
	  	  // transmit on uart3 for
	  	  //HAL_UART_Transmit(&huart3, *voltage, 1, 100);



    osDelay(1);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f004 fa02 	bl	8005006 <osDelay>
  {
 8000c02:	e7e5      	b.n	8000bd0 <analog_init+0x8>
 8000c04:	200003f8 	.word	0x200003f8
 8000c08:	20000a9c 	.word	0x20000a9c

08000c0c <control_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_control_init */
void control_init(void const * argument)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN control_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f004 f9f6 	bl	8005006 <osDelay>
 8000c1a:	e7fb      	b.n	8000c14 <control_init+0x8>

08000c1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c2e:	f000 fadf 	bl	80011f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40010000 	.word	0x40010000

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <Error_Handler+0x8>
	...

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	210f      	movs	r1, #15
 8000c86:	f06f 0001 	mvn.w	r0, #1
 8000c8a:	f000 ffa7 	bl	8001bdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a15      	ldr	r2, [pc, #84]	; (8000d10 <HAL_ADC_MspInit+0x74>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d123      	bne.n	8000d06 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_ADC_MspInit+0x78>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a14      	ldr	r2, [pc, #80]	; (8000d14 <HAL_ADC_MspInit+0x78>)
 8000cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_ADC_MspInit+0x78>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_ADC_MspInit+0x78>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_ADC_MspInit+0x78>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_ADC_MspInit+0x78>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	; (8000d18 <HAL_ADC_MspInit+0x7c>)
 8000d02:	f001 fabb 	bl	800227c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	; 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40012000 	.word	0x40012000
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000

08000d1c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a4e      	ldr	r2, [pc, #312]	; (8000e74 <HAL_ETH_MspInit+0x158>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	f040 8096 	bne.w	8000e6c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d40:	4b4d      	ldr	r3, [pc, #308]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	4a4c      	ldr	r2, [pc, #304]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000d46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4c:	4b4a      	ldr	r3, [pc, #296]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d54:	623b      	str	r3, [r7, #32]
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	4b47      	ldr	r3, [pc, #284]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	4a46      	ldr	r2, [pc, #280]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000d5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d62:	6313      	str	r3, [r2, #48]	; 0x30
 8000d64:	4b44      	ldr	r3, [pc, #272]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d6c:	61fb      	str	r3, [r7, #28]
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	4b41      	ldr	r3, [pc, #260]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4a40      	ldr	r2, [pc, #256]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000d76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7c:	4b3e      	ldr	r3, [pc, #248]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d84:	61bb      	str	r3, [r7, #24]
 8000d86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d88:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	4a3a      	ldr	r2, [pc, #232]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6313      	str	r3, [r2, #48]	; 0x30
 8000d94:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a34      	ldr	r2, [pc, #208]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	4a2e      	ldr	r2, [pc, #184]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd0:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	4a28      	ldr	r2, [pc, #160]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dda:	6313      	str	r3, [r2, #48]	; 0x30
 8000ddc:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <HAL_ETH_MspInit+0x15c>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000de8:	2332      	movs	r3, #50	; 0x32
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df8:	230b      	movs	r3, #11
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	481e      	ldr	r0, [pc, #120]	; (8000e7c <HAL_ETH_MspInit+0x160>)
 8000e04:	f001 fa3a 	bl	800227c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e08:	2386      	movs	r3, #134	; 0x86
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e18:	230b      	movs	r3, #11
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	4817      	ldr	r0, [pc, #92]	; (8000e80 <HAL_ETH_MspInit+0x164>)
 8000e24:	f001 fa2a 	bl	800227c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3a:	230b      	movs	r3, #11
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	480f      	ldr	r0, [pc, #60]	; (8000e84 <HAL_ETH_MspInit+0x168>)
 8000e46:	f001 fa19 	bl	800227c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5c:	230b      	movs	r3, #11
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4808      	ldr	r0, [pc, #32]	; (8000e88 <HAL_ETH_MspInit+0x16c>)
 8000e68:	f001 fa08 	bl	800227c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e6c:	bf00      	nop
 8000e6e:	3738      	adds	r7, #56	; 0x38
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40028000 	.word	0x40028000
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020800 	.word	0x40020800
 8000e80:	40020000 	.word	0x40020000
 8000e84:	40020400 	.word	0x40020400
 8000e88:	40021800 	.word	0x40021800

08000e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0aa      	sub	sp, #168	; 0xa8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	2284      	movs	r2, #132	; 0x84
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f006 facd 	bl	800744c <memset>
  if(huart->Instance==USART3)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a22      	ldr	r2, [pc, #136]	; (8000f40 <HAL_UART_MspInit+0xb4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d13c      	bne.n	8000f36 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 fa08 	bl	80032e0 <HAL_RCCEx_PeriphCLKConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ed6:	f7ff feb3 	bl	8000c40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <HAL_UART_MspInit+0xb8>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a19      	ldr	r2, [pc, #100]	; (8000f44 <HAL_UART_MspInit+0xb8>)
 8000ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_UART_MspInit+0xb8>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_UART_MspInit+0xb8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <HAL_UART_MspInit+0xb8>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_UART_MspInit+0xb8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f24:	2307      	movs	r3, #7
 8000f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <HAL_UART_MspInit+0xbc>)
 8000f32:	f001 f9a3 	bl	800227c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	37a8      	adds	r7, #168	; 0xa8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40004800 	.word	0x40004800
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020c00 	.word	0x40020c00

08000f4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0ac      	sub	sp, #176	; 0xb0
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f64:	f107 0318 	add.w	r3, r7, #24
 8000f68:	2284      	movs	r2, #132	; 0x84
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f006 fa6d 	bl	800744c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f7a:	d159      	bne.n	8001030 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f80:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 f9a7 	bl	80032e0 <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f98:	f7ff fe52 	bl	8000c40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_PCD_MspInit+0xec>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4a25      	ldr	r2, [pc, #148]	; (8001038 <HAL_PCD_MspInit+0xec>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <HAL_PCD_MspInit+0xec>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fb4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fce:	230a      	movs	r3, #10
 8000fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4818      	ldr	r0, [pc, #96]	; (800103c <HAL_PCD_MspInit+0xf0>)
 8000fdc:	f001 f94e 	bl	800227c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4810      	ldr	r0, [pc, #64]	; (800103c <HAL_PCD_MspInit+0xf0>)
 8000ffc:	f001 f93e 	bl	800227c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_PCD_MspInit+0xec>)
 8001002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001004:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <HAL_PCD_MspInit+0xec>)
 8001006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100a:	6353      	str	r3, [r2, #52]	; 0x34
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_PCD_MspInit+0xec>)
 800100e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <HAL_PCD_MspInit+0xec>)
 800101a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_PCD_MspInit+0xec>)
 800101e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001022:	6453      	str	r3, [r2, #68]	; 0x44
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <HAL_PCD_MspInit+0xec>)
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	37b0      	adds	r7, #176	; 0xb0
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000

08001040 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001050:	4b2e      	ldr	r3, [pc, #184]	; (800110c <HAL_InitTick+0xcc>)
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	4a2d      	ldr	r2, [pc, #180]	; (800110c <HAL_InitTick+0xcc>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6453      	str	r3, [r2, #68]	; 0x44
 800105c:	4b2b      	ldr	r3, [pc, #172]	; (800110c <HAL_InitTick+0xcc>)
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001068:	f107 020c 	add.w	r2, r7, #12
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f002 f902 	bl	800327c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001078:	f002 f8ec 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 800107c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800107e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001080:	4a23      	ldr	r2, [pc, #140]	; (8001110 <HAL_InitTick+0xd0>)
 8001082:	fba2 2303 	umull	r2, r3, r2, r3
 8001086:	0c9b      	lsrs	r3, r3, #18
 8001088:	3b01      	subs	r3, #1
 800108a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <HAL_InitTick+0xd4>)
 800108e:	4a22      	ldr	r2, [pc, #136]	; (8001118 <HAL_InitTick+0xd8>)
 8001090:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <HAL_InitTick+0xd4>)
 8001094:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001098:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800109a:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <HAL_InitTick+0xd4>)
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_InitTick+0xd4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_InitTick+0xd4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_InitTick+0xd4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80010b2:	4818      	ldr	r0, [pc, #96]	; (8001114 <HAL_InitTick+0xd4>)
 80010b4:	f002 fd04 	bl	8003ac0 <HAL_TIM_Base_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80010be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d11b      	bne.n	80010fe <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80010c6:	4813      	ldr	r0, [pc, #76]	; (8001114 <HAL_InitTick+0xd4>)
 80010c8:	f002 fd5c 	bl	8003b84 <HAL_TIM_Base_Start_IT>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80010d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d111      	bne.n	80010fe <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010da:	2019      	movs	r0, #25
 80010dc:	f000 fd9a 	bl	8001c14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b0f      	cmp	r3, #15
 80010e4:	d808      	bhi.n	80010f8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80010e6:	2200      	movs	r2, #0
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	2019      	movs	r0, #25
 80010ec:	f000 fd76 	bl	8001bdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010f0:	4a0a      	ldr	r2, [pc, #40]	; (800111c <HAL_InitTick+0xdc>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e002      	b.n	80010fe <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001102:	4618      	mov	r0, r3
 8001104:	3730      	adds	r7, #48	; 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800
 8001110:	431bde83 	.word	0x431bde83
 8001114:	20000aac 	.word	0x20000aac
 8001118:	40010000 	.word	0x40010000
 800111c:	20000004 	.word	0x20000004

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001152:	f002 fd8f 	bl	8003c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000aac 	.word	0x20000aac

08001160 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <SystemInit+0x20>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <SystemInit+0x20>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800118a:	490e      	ldr	r1, [pc, #56]	; (80011c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800118c:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011a0:	4c0b      	ldr	r4, [pc, #44]	; (80011d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ae:	f7ff ffd7 	bl	8001160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b2:	f006 f953 	bl	800745c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b6:	f7ff f9c3 	bl	8000540 <main>
  bx  lr    
 80011ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011bc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80011c8:	08007604 	.word	0x08007604
  ldr r2, =_sbss
 80011cc:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80011d0:	20004848 	.word	0x20004848

080011d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC_IRQHandler>

080011d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011da:	2003      	movs	r0, #3
 80011dc:	f000 fcf3 	bl	8001bc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e0:	200f      	movs	r0, #15
 80011e2:	f7ff ff2d 	bl	8001040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e6:	f7ff fd31 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x24>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_IncTick+0x24>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008
 8001214:	20000af8 	.word	0x20000af8

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_GetTick+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000af8 	.word	0x20000af8

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff ffee 	bl	8001218 <HAL_GetTick>
 800123c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001248:	d005      	beq.n	8001256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_Delay+0x44>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001256:	bf00      	nop
 8001258:	f7ff ffde 	bl	8001218 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d8f7      	bhi.n	8001258 <HAL_Delay+0x28>
  {
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008

08001278 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e031      	b.n	80012f2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fd00 	bl	8000c9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 0310 	and.w	r3, r3, #16
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d116      	bne.n	80012e4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_ADC_Init+0x84>)
 80012bc:	4013      	ands	r3, r2
 80012be:	f043 0202 	orr.w	r2, r3, #2
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 fad6 	bl	8001878 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f023 0303 	bic.w	r3, r3, #3
 80012da:	f043 0201 	orr.w	r2, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
 80012e2:	e001      	b.n	80012e8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	ffffeefd 	.word	0xffffeefd

08001300 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001312:	2b01      	cmp	r3, #1
 8001314:	d101      	bne.n	800131a <HAL_ADC_Start+0x1a>
 8001316:	2302      	movs	r3, #2
 8001318:	e0ad      	b.n	8001476 <HAL_ADC_Start+0x176>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b01      	cmp	r3, #1
 800132e:	d018      	beq.n	8001362 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0201 	orr.w	r2, r2, #1
 800133e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001340:	4b50      	ldr	r3, [pc, #320]	; (8001484 <HAL_ADC_Start+0x184>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a50      	ldr	r2, [pc, #320]	; (8001488 <HAL_ADC_Start+0x188>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	0c9a      	lsrs	r2, r3, #18
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001354:	e002      	b.n	800135c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3b01      	subs	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f9      	bne.n	8001356 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b01      	cmp	r3, #1
 800136e:	d175      	bne.n	800145c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001374:	4b45      	ldr	r3, [pc, #276]	; (800148c <HAL_ADC_Start+0x18c>)
 8001376:	4013      	ands	r3, r2
 8001378:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138a:	2b00      	cmp	r3, #0
 800138c:	d007      	beq.n	800139e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001396:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013aa:	d106      	bne.n	80013ba <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	f023 0206 	bic.w	r2, r3, #6
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	645a      	str	r2, [r3, #68]	; 0x44
 80013b8:	e002      	b.n	80013c0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80013d2:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <HAL_ADC_Start+0x190>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 031f 	and.w	r3, r3, #31
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10f      	bne.n	80013fe <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d143      	bne.n	8001474 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	e03a      	b.n	8001474 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a24      	ldr	r2, [pc, #144]	; (8001494 <HAL_ADC_Start+0x194>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d10e      	bne.n	8001426 <HAL_ADC_Start+0x126>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d107      	bne.n	8001426 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001424:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <HAL_ADC_Start+0x190>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	2b00      	cmp	r3, #0
 8001430:	d120      	bne.n	8001474 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a18      	ldr	r2, [pc, #96]	; (8001498 <HAL_ADC_Start+0x198>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d11b      	bne.n	8001474 <HAL_ADC_Start+0x174>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d114      	bne.n	8001474 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	e00b      	b.n	8001474 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f043 0210 	orr.w	r2, r3, #16
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	f043 0201 	orr.w	r2, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000000 	.word	0x20000000
 8001488:	431bde83 	.word	0x431bde83
 800148c:	fffff8fe 	.word	0xfffff8fe
 8001490:	40012300 	.word	0x40012300
 8001494:	40012000 	.word	0x40012000
 8001498:	40012200 	.word	0x40012200

0800149c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b8:	d113      	bne.n	80014e2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c8:	d10b      	bne.n	80014e2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f043 0220 	orr.w	r2, r3, #32
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e063      	b.n	80015aa <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80014e2:	f7ff fe99 	bl	8001218 <HAL_GetTick>
 80014e6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014e8:	e021      	b.n	800152e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f0:	d01d      	beq.n	800152e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <HAL_ADC_PollForConversion+0x6c>
 80014f8:	f7ff fe8e 	bl	8001218 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d212      	bcs.n	800152e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b02      	cmp	r3, #2
 8001514:	d00b      	beq.n	800152e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f043 0204 	orr.w	r2, r3, #4
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e03d      	b.n	80015aa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b02      	cmp	r3, #2
 800153a:	d1d6      	bne.n	80014ea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f06f 0212 	mvn.w	r2, #18
 8001544:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d123      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11f      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d105      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f043 0201 	orr.w	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x1c>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e136      	b.n	8001856 <HAL_ADC_ConfigChannel+0x28a>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b09      	cmp	r3, #9
 80015f6:	d93a      	bls.n	800166e <HAL_ADC_ConfigChannel+0xa2>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001600:	d035      	beq.n	800166e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68d9      	ldr	r1, [r3, #12]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	3b1e      	subs	r3, #30
 8001618:	2207      	movs	r2, #7
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	400a      	ands	r2, r1
 8001626:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a8d      	ldr	r2, [pc, #564]	; (8001864 <HAL_ADC_ConfigChannel+0x298>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d10a      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68d9      	ldr	r1, [r3, #12]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	061a      	lsls	r2, r3, #24
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001646:	e035      	b.n	80016b4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68d9      	ldr	r1, [r3, #12]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	4618      	mov	r0, r3
 800165a:	4603      	mov	r3, r0
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4403      	add	r3, r0
 8001660:	3b1e      	subs	r3, #30
 8001662:	409a      	lsls	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800166c:	e022      	b.n	80016b4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6919      	ldr	r1, [r3, #16]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	461a      	mov	r2, r3
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	2207      	movs	r2, #7
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43da      	mvns	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	400a      	ands	r2, r1
 8001690:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6919      	ldr	r1, [r3, #16]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	4603      	mov	r3, r0
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4403      	add	r3, r0
 80016aa:	409a      	lsls	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b06      	cmp	r3, #6
 80016ba:	d824      	bhi.n	8001706 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	3b05      	subs	r3, #5
 80016ce:	221f      	movs	r2, #31
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43da      	mvns	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	400a      	ands	r2, r1
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3b05      	subs	r3, #5
 80016f8:	fa00 f203 	lsl.w	r2, r0, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	635a      	str	r2, [r3, #52]	; 0x34
 8001704:	e04c      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b0c      	cmp	r3, #12
 800170c:	d824      	bhi.n	8001758 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b23      	subs	r3, #35	; 0x23
 8001720:	221f      	movs	r2, #31
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	400a      	ands	r2, r1
 800172e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b23      	subs	r3, #35	; 0x23
 800174a:	fa00 f203 	lsl.w	r2, r0, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
 8001756:	e023      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3b41      	subs	r3, #65	; 0x41
 800176a:	221f      	movs	r2, #31
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43da      	mvns	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	400a      	ands	r2, r1
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	3b41      	subs	r3, #65	; 0x41
 8001794:	fa00 f203 	lsl.w	r2, r0, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a30      	ldr	r2, [pc, #192]	; (8001868 <HAL_ADC_ConfigChannel+0x29c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d10a      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x1f4>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017b2:	d105      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80017b4:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_ADC_ConfigChannel+0x2a0>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a2c      	ldr	r2, [pc, #176]	; (800186c <HAL_ADC_ConfigChannel+0x2a0>)
 80017ba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80017be:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a28      	ldr	r2, [pc, #160]	; (8001868 <HAL_ADC_ConfigChannel+0x29c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10f      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x21e>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b12      	cmp	r3, #18
 80017d0:	d10b      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_ADC_ConfigChannel+0x2a0>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4a25      	ldr	r2, [pc, #148]	; (800186c <HAL_ADC_ConfigChannel+0x2a0>)
 80017d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017dc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_ADC_ConfigChannel+0x2a0>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4a22      	ldr	r2, [pc, #136]	; (800186c <HAL_ADC_ConfigChannel+0x2a0>)
 80017e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017e8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <HAL_ADC_ConfigChannel+0x29c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d12b      	bne.n	800184c <HAL_ADC_ConfigChannel+0x280>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1a      	ldr	r2, [pc, #104]	; (8001864 <HAL_ADC_ConfigChannel+0x298>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d003      	beq.n	8001806 <HAL_ADC_ConfigChannel+0x23a>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b11      	cmp	r3, #17
 8001804:	d122      	bne.n	800184c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_ADC_ConfigChannel+0x2a0>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4a18      	ldr	r2, [pc, #96]	; (800186c <HAL_ADC_ConfigChannel+0x2a0>)
 800180c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001810:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_ADC_ConfigChannel+0x2a0>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4a15      	ldr	r2, [pc, #84]	; (800186c <HAL_ADC_ConfigChannel+0x2a0>)
 8001818:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800181c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <HAL_ADC_ConfigChannel+0x298>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d111      	bne.n	800184c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_ADC_ConfigChannel+0x2a4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a11      	ldr	r2, [pc, #68]	; (8001874 <HAL_ADC_ConfigChannel+0x2a8>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	0c9a      	lsrs	r2, r3, #18
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800183e:	e002      	b.n	8001846 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3b01      	subs	r3, #1
 8001844:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f9      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	10000012 	.word	0x10000012
 8001868:	40012000 	.word	0x40012000
 800186c:	40012300 	.word	0x40012300
 8001870:	20000000 	.word	0x20000000
 8001874:	431bde83 	.word	0x431bde83

08001878 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001880:	4b78      	ldr	r3, [pc, #480]	; (8001a64 <ADC_Init+0x1ec>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a77      	ldr	r2, [pc, #476]	; (8001a64 <ADC_Init+0x1ec>)
 8001886:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800188a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800188c:	4b75      	ldr	r3, [pc, #468]	; (8001a64 <ADC_Init+0x1ec>)
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4973      	ldr	r1, [pc, #460]	; (8001a64 <ADC_Init+0x1ec>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	021a      	lsls	r2, r3, #8
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6899      	ldr	r1, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <ADC_Init+0x1f0>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d022      	beq.n	8001952 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800191a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6899      	ldr	r1, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800193c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6899      	ldr	r1, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	e00f      	b.n	8001972 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001970:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0202 	bic.w	r2, r2, #2
 8001980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6899      	ldr	r1, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	005a      	lsls	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d01b      	beq.n	80019d8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6859      	ldr	r1, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	3b01      	subs	r3, #1
 80019cc:	035a      	lsls	r2, r3, #13
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	e007      	b.n	80019e8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	051a      	lsls	r2, r3, #20
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6899      	ldr	r1, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a2a:	025a      	lsls	r2, r3, #9
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6899      	ldr	r1, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	029a      	lsls	r2, r3, #10
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	609a      	str	r2, [r3, #8]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40012300 	.word	0x40012300
 8001a68:	0f000001 	.word	0x0f000001

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <__NVIC_SetPriorityGrouping+0x40>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	; (8001aac <__NVIC_SetPriorityGrouping+0x40>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00
 8001ab0:	05fa0000 	.word	0x05fa0000

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0b      	blt.n	8001afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	4907      	ldr	r1, [pc, #28]	; (8001b08 <__NVIC_EnableIRQ+0x38>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	2001      	movs	r0, #1
 8001af2:	fa00 f202 	lsl.w	r2, r0, r2
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000e100 	.word	0xe000e100

08001b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	490c      	ldr	r1, [pc, #48]	; (8001b58 <__NVIC_SetPriority+0x4c>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b34:	e00a      	b.n	8001b4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4908      	ldr	r1, [pc, #32]	; (8001b5c <__NVIC_SetPriority+0x50>)
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	3b04      	subs	r3, #4
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	440b      	add	r3, r1
 8001b4a:	761a      	strb	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f1c3 0307 	rsb	r3, r3, #7
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	bf28      	it	cs
 8001b7e:	2304      	movcs	r3, #4
 8001b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3304      	adds	r3, #4
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d902      	bls.n	8001b90 <NVIC_EncodePriority+0x30>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3b03      	subs	r3, #3
 8001b8e:	e000      	b.n	8001b92 <NVIC_EncodePriority+0x32>
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43d9      	mvns	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	4313      	orrs	r3, r2
         );
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3724      	adds	r7, #36	; 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ff4c 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bee:	f7ff ff61 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001bf2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	68b9      	ldr	r1, [r7, #8]
 8001bf8:	6978      	ldr	r0, [r7, #20]
 8001bfa:	f7ff ffb1 	bl	8001b60 <NVIC_EncodePriority>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff80 	bl	8001b0c <__NVIC_SetPriority>
}
 8001c0c:	bf00      	nop
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff54 	bl	8001ad0 <__NVIC_EnableIRQ>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e06a      	b.n	8001d18 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d106      	bne.n	8001c5a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2223      	movs	r2, #35	; 0x23
 8001c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff f861 	bl	8000d1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <HAL_ETH_Init+0xf0>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a30      	ldr	r2, [pc, #192]	; (8001d20 <HAL_ETH_Init+0xf0>)
 8001c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <HAL_ETH_Init+0xf0>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c72:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <HAL_ETH_Init+0xf4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4a2b      	ldr	r2, [pc, #172]	; (8001d24 <HAL_ETH_Init+0xf4>)
 8001c78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c7c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_ETH_Init+0xf4>)
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	4927      	ldr	r1, [pc, #156]	; (8001d24 <HAL_ETH_Init+0xf4>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001c8c:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <HAL_ETH_Init+0xf4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ca6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca8:	f7ff fab6 	bl	8001218 <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001cae:	e011      	b.n	8001cd4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001cb0:	f7ff fab2 	bl	8001218 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cbe:	d909      	bls.n	8001cd4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	22e0      	movs	r2, #224	; 0xe0
 8001ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e021      	b.n	8001d18 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1e4      	bne.n	8001cb0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f958 	bl	8001f9c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f9ff 	bl	80020f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fa55 	bl	80021a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2100      	movs	r1, #0
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f9bd 	bl	8002080 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2210      	movs	r2, #16
 8001d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40013800 	.word	0x40013800

08001d28 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4b51      	ldr	r3, [pc, #324]	; (8001e84 <ETH_SetMACConfig+0x15c>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	7c1b      	ldrb	r3, [r3, #16]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <ETH_SetMACConfig+0x28>
 8001d4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d4e:	e000      	b.n	8001d52 <ETH_SetMACConfig+0x2a>
 8001d50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	7c5b      	ldrb	r3, [r3, #17]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <ETH_SetMACConfig+0x38>
 8001d5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d5e:	e000      	b.n	8001d62 <ETH_SetMACConfig+0x3a>
 8001d60:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d62:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d68:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	7fdb      	ldrb	r3, [r3, #31]
 8001d6e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001d70:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	7f92      	ldrb	r2, [r2, #30]
 8001d7c:	2a00      	cmp	r2, #0
 8001d7e:	d102      	bne.n	8001d86 <ETH_SetMACConfig+0x5e>
 8001d80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d84:	e000      	b.n	8001d88 <ETH_SetMACConfig+0x60>
 8001d86:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	7f1b      	ldrb	r3, [r3, #28]
 8001d8e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d90:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	791b      	ldrb	r3, [r3, #4]
 8001d9c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001da6:	2a00      	cmp	r2, #0
 8001da8:	d102      	bne.n	8001db0 <ETH_SetMACConfig+0x88>
 8001daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dae:	e000      	b.n	8001db2 <ETH_SetMACConfig+0x8a>
 8001db0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001db2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	7bdb      	ldrb	r3, [r3, #15]
 8001db8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001dba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001dc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001dc8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f7ff fa24 	bl	8001230 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001dfe:	4013      	ands	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e06:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d101      	bne.n	8001e16 <ETH_SetMACConfig+0xee>
 8001e12:	2280      	movs	r2, #128	; 0x80
 8001e14:	e000      	b.n	8001e18 <ETH_SetMACConfig+0xf0>
 8001e16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e18:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001e26:	2a01      	cmp	r2, #1
 8001e28:	d101      	bne.n	8001e2e <ETH_SetMACConfig+0x106>
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	e000      	b.n	8001e30 <ETH_SetMACConfig+0x108>
 8001e2e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e30:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001e38:	2a01      	cmp	r2, #1
 8001e3a:	d101      	bne.n	8001e40 <ETH_SetMACConfig+0x118>
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	e000      	b.n	8001e42 <ETH_SetMACConfig+0x11a>
 8001e40:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001e4a:	2a01      	cmp	r2, #1
 8001e4c:	d101      	bne.n	8001e52 <ETH_SetMACConfig+0x12a>
 8001e4e:	2202      	movs	r2, #2
 8001e50:	e000      	b.n	8001e54 <ETH_SetMACConfig+0x12c>
 8001e52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e54:	4313      	orrs	r3, r2
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f7ff f9df 	bl	8001230 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	619a      	str	r2, [r3, #24]
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	ff20810f 	.word	0xff20810f

08001e88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4b3d      	ldr	r3, [pc, #244]	; (8001f98 <ETH_SetDMAConfig+0x110>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	7b1b      	ldrb	r3, [r3, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <ETH_SetDMAConfig+0x2c>
 8001eae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001eb2:	e000      	b.n	8001eb6 <ETH_SetDMAConfig+0x2e>
 8001eb4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	7b5b      	ldrb	r3, [r3, #13]
 8001eba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ebc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	7f52      	ldrb	r2, [r2, #29]
 8001ec2:	2a00      	cmp	r2, #0
 8001ec4:	d102      	bne.n	8001ecc <ETH_SetDMAConfig+0x44>
 8001ec6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001eca:	e000      	b.n	8001ece <ETH_SetDMAConfig+0x46>
 8001ecc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ece:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	7b9b      	ldrb	r3, [r3, #14]
 8001ed4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ed6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001edc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	7f1b      	ldrb	r3, [r3, #28]
 8001ee2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ee4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	7f9b      	ldrb	r3, [r3, #30]
 8001eea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001eec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ef2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001efa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001efc:	4313      	orrs	r3, r2
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f7ff f986 	bl	8001230 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	791b      	ldrb	r3, [r3, #4]
 8001f36:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f3c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f42:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f48:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f50:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f52:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f5a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f60:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f6e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7ff f957 	bl	8001230 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6013      	str	r3, [r2, #0]
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	f8de3f23 	.word	0xf8de3f23

08001f9c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b0a6      	sub	sp, #152	; 0x98
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001faa:	2301      	movs	r3, #1
 8001fac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ffe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002002:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002008:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002010:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002014:	4619      	mov	r1, r3
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff fe86 	bl	8001d28 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800201c:	2301      	movs	r3, #1
 800201e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002020:	2301      	movs	r3, #1
 8002022:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002024:	2301      	movs	r3, #1
 8002026:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800202a:	2301      	movs	r3, #1
 800202c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800203e:	2300      	movs	r3, #0
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002042:	2301      	movs	r3, #1
 8002044:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002048:	2301      	movs	r3, #1
 800204a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800204c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002050:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002056:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800205c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800205e:	2301      	movs	r3, #1
 8002060:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002064:	2300      	movs	r3, #0
 8002066:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800206c:	f107 0308 	add.w	r3, r7, #8
 8002070:	4619      	mov	r1, r3
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ff08 	bl	8001e88 <ETH_SetDMAConfig>
}
 8002078:	bf00      	nop
 800207a:	3798      	adds	r7, #152	; 0x98
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3305      	adds	r3, #5
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	3204      	adds	r2, #4
 8002098:	7812      	ldrb	r2, [r2, #0]
 800209a:	4313      	orrs	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <ETH_MACAddressConfig+0x68>)
 80020a2:	4413      	add	r3, r2
 80020a4:	461a      	mov	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3303      	adds	r3, #3
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	061a      	lsls	r2, r3, #24
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3302      	adds	r3, #2
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	041b      	lsls	r3, r3, #16
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3301      	adds	r3, #1
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	4313      	orrs	r3, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <ETH_MACAddressConfig+0x6c>)
 80020d2:	4413      	add	r3, r2
 80020d4:	461a      	mov	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	6013      	str	r3, [r2, #0]
}
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40028040 	.word	0x40028040
 80020ec:	40028044 	.word	0x40028044

080020f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e03e      	b.n	800217c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68d9      	ldr	r1, [r3, #12]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	440b      	add	r3, r1
 800210e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2200      	movs	r2, #0
 800211a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2200      	movs	r2, #0
 8002126:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	3206      	adds	r2, #6
 8002130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d80c      	bhi.n	8002160 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68d9      	ldr	r1, [r3, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	461a      	mov	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	e004      	b.n	800216a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3301      	adds	r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d9bd      	bls.n	80020fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002194:	611a      	str	r2, [r3, #16]
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b085      	sub	sp, #20
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	e046      	b.n	800223e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6919      	ldr	r1, [r3, #16]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	440b      	add	r3, r1
 80021c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2200      	movs	r2, #0
 80021cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2200      	movs	r2, #0
 80021de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2200      	movs	r2, #0
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80021ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80021f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	3212      	adds	r2, #18
 800220a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d80c      	bhi.n	800222e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6919      	ldr	r1, [r3, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	461a      	mov	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60da      	str	r2, [r3, #12]
 800222c:	e004      	b.n	8002238 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	461a      	mov	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3301      	adds	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d9b5      	bls.n	80021b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226e:	60da      	str	r2, [r3, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	e175      	b.n	8002588 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	f040 8164 	bne.w	8002582 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d005      	beq.n	80022d2 <HAL_GPIO_Init+0x56>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d130      	bne.n	8002334 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002308:	2201      	movs	r2, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 0201 	and.w	r2, r3, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b03      	cmp	r3, #3
 800233e:	d017      	beq.n	8002370 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d123      	bne.n	80023c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	08da      	lsrs	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3208      	adds	r2, #8
 8002384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	220f      	movs	r2, #15
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	69b9      	ldr	r1, [r7, #24]
 80023c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0203 	and.w	r2, r3, #3
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80be 	beq.w	8002582 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	4b66      	ldr	r3, [pc, #408]	; (80025a0 <HAL_GPIO_Init+0x324>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	4a65      	ldr	r2, [pc, #404]	; (80025a0 <HAL_GPIO_Init+0x324>)
 800240c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002410:	6453      	str	r3, [r2, #68]	; 0x44
 8002412:	4b63      	ldr	r3, [pc, #396]	; (80025a0 <HAL_GPIO_Init+0x324>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800241e:	4a61      	ldr	r2, [pc, #388]	; (80025a4 <HAL_GPIO_Init+0x328>)
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3302      	adds	r3, #2
 8002426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	220f      	movs	r2, #15
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a58      	ldr	r2, [pc, #352]	; (80025a8 <HAL_GPIO_Init+0x32c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d037      	beq.n	80024ba <HAL_GPIO_Init+0x23e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a57      	ldr	r2, [pc, #348]	; (80025ac <HAL_GPIO_Init+0x330>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d031      	beq.n	80024b6 <HAL_GPIO_Init+0x23a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a56      	ldr	r2, [pc, #344]	; (80025b0 <HAL_GPIO_Init+0x334>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d02b      	beq.n	80024b2 <HAL_GPIO_Init+0x236>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a55      	ldr	r2, [pc, #340]	; (80025b4 <HAL_GPIO_Init+0x338>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d025      	beq.n	80024ae <HAL_GPIO_Init+0x232>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a54      	ldr	r2, [pc, #336]	; (80025b8 <HAL_GPIO_Init+0x33c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01f      	beq.n	80024aa <HAL_GPIO_Init+0x22e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a53      	ldr	r2, [pc, #332]	; (80025bc <HAL_GPIO_Init+0x340>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d019      	beq.n	80024a6 <HAL_GPIO_Init+0x22a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a52      	ldr	r2, [pc, #328]	; (80025c0 <HAL_GPIO_Init+0x344>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0x226>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a51      	ldr	r2, [pc, #324]	; (80025c4 <HAL_GPIO_Init+0x348>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00d      	beq.n	800249e <HAL_GPIO_Init+0x222>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a50      	ldr	r2, [pc, #320]	; (80025c8 <HAL_GPIO_Init+0x34c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d007      	beq.n	800249a <HAL_GPIO_Init+0x21e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4f      	ldr	r2, [pc, #316]	; (80025cc <HAL_GPIO_Init+0x350>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <HAL_GPIO_Init+0x21a>
 8002492:	2309      	movs	r3, #9
 8002494:	e012      	b.n	80024bc <HAL_GPIO_Init+0x240>
 8002496:	230a      	movs	r3, #10
 8002498:	e010      	b.n	80024bc <HAL_GPIO_Init+0x240>
 800249a:	2308      	movs	r3, #8
 800249c:	e00e      	b.n	80024bc <HAL_GPIO_Init+0x240>
 800249e:	2307      	movs	r3, #7
 80024a0:	e00c      	b.n	80024bc <HAL_GPIO_Init+0x240>
 80024a2:	2306      	movs	r3, #6
 80024a4:	e00a      	b.n	80024bc <HAL_GPIO_Init+0x240>
 80024a6:	2305      	movs	r3, #5
 80024a8:	e008      	b.n	80024bc <HAL_GPIO_Init+0x240>
 80024aa:	2304      	movs	r3, #4
 80024ac:	e006      	b.n	80024bc <HAL_GPIO_Init+0x240>
 80024ae:	2303      	movs	r3, #3
 80024b0:	e004      	b.n	80024bc <HAL_GPIO_Init+0x240>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e002      	b.n	80024bc <HAL_GPIO_Init+0x240>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_GPIO_Init+0x240>
 80024ba:	2300      	movs	r3, #0
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	f002 0203 	and.w	r2, r2, #3
 80024c2:	0092      	lsls	r2, r2, #2
 80024c4:	4093      	lsls	r3, r2
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024cc:	4935      	ldr	r1, [pc, #212]	; (80025a4 <HAL_GPIO_Init+0x328>)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	3302      	adds	r3, #2
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024da:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <HAL_GPIO_Init+0x354>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024fe:	4a34      	ldr	r2, [pc, #208]	; (80025d0 <HAL_GPIO_Init+0x354>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002504:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <HAL_GPIO_Init+0x354>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002528:	4a29      	ldr	r2, [pc, #164]	; (80025d0 <HAL_GPIO_Init+0x354>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800252e:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <HAL_GPIO_Init+0x354>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002552:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <HAL_GPIO_Init+0x354>)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002558:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <HAL_GPIO_Init+0x354>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800257c:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <HAL_GPIO_Init+0x354>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3301      	adds	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b0f      	cmp	r3, #15
 800258c:	f67f ae86 	bls.w	800229c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3724      	adds	r7, #36	; 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40013800 	.word	0x40013800
 80025a8:	40020000 	.word	0x40020000
 80025ac:	40020400 	.word	0x40020400
 80025b0:	40020800 	.word	0x40020800
 80025b4:	40020c00 	.word	0x40020c00
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40021400 	.word	0x40021400
 80025c0:	40021800 	.word	0x40021800
 80025c4:	40021c00 	.word	0x40021c00
 80025c8:	40022000 	.word	0x40022000
 80025cc:	40022400 	.word	0x40022400
 80025d0:	40013c00 	.word	0x40013c00

080025d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	887b      	ldrh	r3, [r7, #2]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	e001      	b.n	80025f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	807b      	strh	r3, [r7, #2]
 8002610:	4613      	mov	r3, r2
 8002612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002614:	787b      	ldrb	r3, [r7, #1]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261a:	887a      	ldrh	r2, [r7, #2]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002620:	e003      	b.n	800262a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002622:	887b      	ldrh	r3, [r7, #2]
 8002624:	041a      	lsls	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	619a      	str	r2, [r3, #24]
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002636:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002638:	b08f      	sub	sp, #60	; 0x3c
 800263a:	af0a      	add	r7, sp, #40	; 0x28
 800263c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e116      	b.n	8002876 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fe fc72 	bl	8000f4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2203      	movs	r2, #3
 800266c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f002 f9a4 	bl	80049d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	603b      	str	r3, [r7, #0]
 8002692:	687e      	ldr	r6, [r7, #4]
 8002694:	466d      	mov	r5, sp
 8002696:	f106 0410 	add.w	r4, r6, #16
 800269a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800269c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80026aa:	1d33      	adds	r3, r6, #4
 80026ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ae:	6838      	ldr	r0, [r7, #0]
 80026b0:	f002 f938 	bl	8004924 <USB_CoreInit>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2202      	movs	r2, #2
 80026be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0d7      	b.n	8002876 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f002 f992 	bl	80049f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	e04a      	b.n	800276e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	333d      	adds	r3, #61	; 0x3d
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	333c      	adds	r3, #60	; 0x3c
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	b298      	uxth	r0, r3
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	3344      	adds	r3, #68	; 0x44
 8002714:	4602      	mov	r2, r0
 8002716:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002718:	7bfa      	ldrb	r2, [r7, #15]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	3340      	adds	r3, #64	; 0x40
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	3348      	adds	r3, #72	; 0x48
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	334c      	adds	r3, #76	; 0x4c
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	3354      	adds	r3, #84	; 0x54
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	3301      	adds	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	429a      	cmp	r2, r3
 8002776:	d3af      	bcc.n	80026d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002778:	2300      	movs	r3, #0
 800277a:	73fb      	strb	r3, [r7, #15]
 800277c:	e044      	b.n	8002808 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800277e:	7bfa      	ldrb	r2, [r7, #15]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027c0:	7bfa      	ldrb	r2, [r7, #15]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	3301      	adds	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	429a      	cmp	r2, r3
 8002810:	d3b5      	bcc.n	800277e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	687e      	ldr	r6, [r7, #4]
 800281a:	466d      	mov	r5, sp
 800281c:	f106 0410 	add.w	r4, r6, #16
 8002820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002828:	e894 0003 	ldmia.w	r4, {r0, r1}
 800282c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002830:	1d33      	adds	r3, r6, #4
 8002832:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002834:	6838      	ldr	r0, [r7, #0]
 8002836:	f002 f92b 	bl	8004a90 <USB_DevInit>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e014      	b.n	8002876 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f80b 	bl	8002880 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f002 fae9 	bl	8004e46 <USB_DevDisconnect>

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002880 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	10000003 	.word	0x10000003

080028c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40007000 	.word	0x40007000

080028e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e291      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8087 	beq.w	8002a1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800290c:	4b96      	ldr	r3, [pc, #600]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b04      	cmp	r3, #4
 8002916:	d00c      	beq.n	8002932 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002918:	4b93      	ldr	r3, [pc, #588]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b08      	cmp	r3, #8
 8002922:	d112      	bne.n	800294a <HAL_RCC_OscConfig+0x62>
 8002924:	4b90      	ldr	r3, [pc, #576]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002930:	d10b      	bne.n	800294a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002932:	4b8d      	ldr	r3, [pc, #564]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d06c      	beq.n	8002a18 <HAL_RCC_OscConfig+0x130>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d168      	bne.n	8002a18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e26b      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x7a>
 8002954:	4b84      	ldr	r3, [pc, #528]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a83      	ldr	r2, [pc, #524]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 800295a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	e02e      	b.n	80029c0 <HAL_RCC_OscConfig+0xd8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0x9c>
 800296a:	4b7f      	ldr	r3, [pc, #508]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a7e      	ldr	r2, [pc, #504]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b7c      	ldr	r3, [pc, #496]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a7b      	ldr	r2, [pc, #492]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 800297c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e01d      	b.n	80029c0 <HAL_RCC_OscConfig+0xd8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0xc0>
 800298e:	4b76      	ldr	r3, [pc, #472]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a75      	ldr	r2, [pc, #468]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	4b73      	ldr	r3, [pc, #460]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a72      	ldr	r2, [pc, #456]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e00b      	b.n	80029c0 <HAL_RCC_OscConfig+0xd8>
 80029a8:	4b6f      	ldr	r3, [pc, #444]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a6e      	ldr	r2, [pc, #440]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 80029ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4b6c      	ldr	r3, [pc, #432]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a6b      	ldr	r2, [pc, #428]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 80029ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d013      	beq.n	80029f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe fc26 	bl	8001218 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d0:	f7fe fc22 	bl	8001218 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	; 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e21f      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	4b61      	ldr	r3, [pc, #388]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0xe8>
 80029ee:	e014      	b.n	8002a1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe fc12 	bl	8001218 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f8:	f7fe fc0e 	bl	8001218 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e20b      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0a:	4b57      	ldr	r3, [pc, #348]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x110>
 8002a16:	e000      	b.n	8002a1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d069      	beq.n	8002afa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a26:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a32:	4b4d      	ldr	r3, [pc, #308]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d11c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x190>
 8002a3e:	4b4a      	ldr	r3, [pc, #296]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d116      	bne.n	8002a78 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4a:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_RCC_OscConfig+0x17a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e1df      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a62:	4b41      	ldr	r3, [pc, #260]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	493d      	ldr	r1, [pc, #244]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a76:	e040      	b.n	8002afa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d023      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a80:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a38      	ldr	r2, [pc, #224]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fbc4 	bl	8001218 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a94:	f7fe fbc0 	bl	8001218 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e1bd      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa6:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab2:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4929      	ldr	r1, [pc, #164]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
 8002ac6:	e018      	b.n	8002afa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a26      	ldr	r2, [pc, #152]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fba0 	bl	8001218 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002adc:	f7fe fb9c 	bl	8001218 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e199      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aee:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d038      	beq.n	8002b78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d019      	beq.n	8002b42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b12:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fb7d 	bl	8001218 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b22:	f7fe fb79 	bl	8001218 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e176      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x23a>
 8002b40:	e01a      	b.n	8002b78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b46:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fb63 	bl	8001218 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b56:	f7fe fb5f 	bl	8001218 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d903      	bls.n	8002b6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e15c      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>
 8002b68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6c:	4b91      	ldr	r3, [pc, #580]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ee      	bne.n	8002b56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80a4 	beq.w	8002cce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b86:	4b8b      	ldr	r3, [pc, #556]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	4b88      	ldr	r3, [pc, #544]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	4a87      	ldr	r2, [pc, #540]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9e:	4b85      	ldr	r3, [pc, #532]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bae:	4b82      	ldr	r3, [pc, #520]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d118      	bne.n	8002bec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bba:	4b7f      	ldr	r3, [pc, #508]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7e      	ldr	r2, [pc, #504]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fb27 	bl	8001218 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bce:	f7fe fb23 	bl	8001218 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b64      	cmp	r3, #100	; 0x64
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e120      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be0:	4b75      	ldr	r3, [pc, #468]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x31a>
 8002bf4:	4b6f      	ldr	r3, [pc, #444]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	4a6e      	ldr	r2, [pc, #440]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002c00:	e02d      	b.n	8002c5e <HAL_RCC_OscConfig+0x376>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x33c>
 8002c0a:	4b6a      	ldr	r3, [pc, #424]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	4a69      	ldr	r2, [pc, #420]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	6713      	str	r3, [r2, #112]	; 0x70
 8002c16:	4b67      	ldr	r3, [pc, #412]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a66      	ldr	r2, [pc, #408]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002c1c:	f023 0304 	bic.w	r3, r3, #4
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70
 8002c22:	e01c      	b.n	8002c5e <HAL_RCC_OscConfig+0x376>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x35e>
 8002c2c:	4b61      	ldr	r3, [pc, #388]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	4a60      	ldr	r2, [pc, #384]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002c32:	f043 0304 	orr.w	r3, r3, #4
 8002c36:	6713      	str	r3, [r2, #112]	; 0x70
 8002c38:	4b5e      	ldr	r3, [pc, #376]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4a5d      	ldr	r2, [pc, #372]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70
 8002c44:	e00b      	b.n	8002c5e <HAL_RCC_OscConfig+0x376>
 8002c46:	4b5b      	ldr	r3, [pc, #364]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4a:	4a5a      	ldr	r2, [pc, #360]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	6713      	str	r3, [r2, #112]	; 0x70
 8002c52:	4b58      	ldr	r3, [pc, #352]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a57      	ldr	r2, [pc, #348]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d015      	beq.n	8002c92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c66:	f7fe fad7 	bl	8001218 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fe fad3 	bl	8001218 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e0ce      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	4b4b      	ldr	r3, [pc, #300]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ee      	beq.n	8002c6e <HAL_RCC_OscConfig+0x386>
 8002c90:	e014      	b.n	8002cbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c92:	f7fe fac1 	bl	8001218 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fe fabd 	bl	8001218 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0b8      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb0:	4b40      	ldr	r3, [pc, #256]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ee      	bne.n	8002c9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d105      	bne.n	8002cce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc2:	4b3c      	ldr	r3, [pc, #240]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4a3b      	ldr	r2, [pc, #236]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80a4 	beq.w	8002e20 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd8:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 030c 	and.w	r3, r3, #12
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d06b      	beq.n	8002dbc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d149      	bne.n	8002d80 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cec:	4b31      	ldr	r3, [pc, #196]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a30      	ldr	r2, [pc, #192]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fa8e 	bl	8001218 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d00:	f7fe fa8a 	bl	8001218 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e087      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d12:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69da      	ldr	r2, [r3, #28]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	019b      	lsls	r3, r3, #6
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	3b01      	subs	r3, #1
 8002d38:	041b      	lsls	r3, r3, #16
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	061b      	lsls	r3, r3, #24
 8002d42:	4313      	orrs	r3, r2
 8002d44:	4a1b      	ldr	r2, [pc, #108]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002d46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d4a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7fe fa5e 	bl	8001218 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fe fa5a 	bl	8001218 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e057      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x478>
 8002d7e:	e04f      	b.n	8002e20 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fa44 	bl	8001218 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d94:	f7fe fa40 	bl	8001218 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e03d      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da6:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_RCC_OscConfig+0x4cc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x4ac>
 8002db2:	e035      	b.n	8002e20 <HAL_RCC_OscConfig+0x538>
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_RCC_OscConfig+0x544>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d028      	beq.n	8002e1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d121      	bne.n	8002e1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d11a      	bne.n	8002e1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dec:	4013      	ands	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002df2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d111      	bne.n	8002e1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	085b      	lsrs	r3, r3, #1
 8002e04:	3b01      	subs	r3, #1
 8002e06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800

08002e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0d0      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e48:	4b6a      	ldr	r3, [pc, #424]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d910      	bls.n	8002e78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b67      	ldr	r3, [pc, #412]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 020f 	bic.w	r2, r3, #15
 8002e5e:	4965      	ldr	r1, [pc, #404]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b63      	ldr	r3, [pc, #396]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0b8      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d020      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e90:	4b59      	ldr	r3, [pc, #356]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4a58      	ldr	r2, [pc, #352]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea8:	4b53      	ldr	r3, [pc, #332]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4a52      	ldr	r2, [pc, #328]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb4:	4b50      	ldr	r3, [pc, #320]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	494d      	ldr	r1, [pc, #308]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d040      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d115      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e07f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e073      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f02:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e06b      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f12:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f023 0203 	bic.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4936      	ldr	r1, [pc, #216]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f24:	f7fe f978 	bl	8001218 <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2c:	f7fe f974 	bl	8001218 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e053      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 020c 	and.w	r2, r3, #12
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d1eb      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f54:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d210      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 020f 	bic.w	r2, r3, #15
 8002f6a:	4922      	ldr	r1, [pc, #136]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e032      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4916      	ldr	r1, [pc, #88]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fae:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	490e      	ldr	r1, [pc, #56]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fc2:	f000 f821 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	490a      	ldr	r1, [pc, #40]	; (8002ffc <HAL_RCC_ClockConfig+0x1cc>)
 8002fd4:	5ccb      	ldrb	r3, [r1, r3]
 8002fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1d0>)
 8002fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_RCC_ClockConfig+0x1d4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe f82c 	bl	8001040 <HAL_InitTick>

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023c00 	.word	0x40023c00
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	080075dc 	.word	0x080075dc
 8003000:	20000000 	.word	0x20000000
 8003004:	20000004 	.word	0x20000004

08003008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800300c:	b094      	sub	sp, #80	; 0x50
 800300e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	647b      	str	r3, [r7, #68]	; 0x44
 8003014:	2300      	movs	r3, #0
 8003016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003018:	2300      	movs	r3, #0
 800301a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003020:	4b79      	ldr	r3, [pc, #484]	; (8003208 <HAL_RCC_GetSysClockFreq+0x200>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b08      	cmp	r3, #8
 800302a:	d00d      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x40>
 800302c:	2b08      	cmp	r3, #8
 800302e:	f200 80e1 	bhi.w	80031f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x34>
 8003036:	2b04      	cmp	r3, #4
 8003038:	d003      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x3a>
 800303a:	e0db      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b73      	ldr	r3, [pc, #460]	; (800320c <HAL_RCC_GetSysClockFreq+0x204>)
 800303e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003040:	e0db      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003042:	4b73      	ldr	r3, [pc, #460]	; (8003210 <HAL_RCC_GetSysClockFreq+0x208>)
 8003044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003046:	e0d8      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003048:	4b6f      	ldr	r3, [pc, #444]	; (8003208 <HAL_RCC_GetSysClockFreq+0x200>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003052:	4b6d      	ldr	r3, [pc, #436]	; (8003208 <HAL_RCC_GetSysClockFreq+0x200>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d063      	beq.n	8003126 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305e:	4b6a      	ldr	r3, [pc, #424]	; (8003208 <HAL_RCC_GetSysClockFreq+0x200>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	099b      	lsrs	r3, r3, #6
 8003064:	2200      	movs	r2, #0
 8003066:	63bb      	str	r3, [r7, #56]	; 0x38
 8003068:	63fa      	str	r2, [r7, #60]	; 0x3c
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003070:	633b      	str	r3, [r7, #48]	; 0x30
 8003072:	2300      	movs	r3, #0
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
 8003076:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800307a:	4622      	mov	r2, r4
 800307c:	462b      	mov	r3, r5
 800307e:	f04f 0000 	mov.w	r0, #0
 8003082:	f04f 0100 	mov.w	r1, #0
 8003086:	0159      	lsls	r1, r3, #5
 8003088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800308c:	0150      	lsls	r0, r2, #5
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4621      	mov	r1, r4
 8003094:	1a51      	subs	r1, r2, r1
 8003096:	6139      	str	r1, [r7, #16]
 8003098:	4629      	mov	r1, r5
 800309a:	eb63 0301 	sbc.w	r3, r3, r1
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030ac:	4659      	mov	r1, fp
 80030ae:	018b      	lsls	r3, r1, #6
 80030b0:	4651      	mov	r1, sl
 80030b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030b6:	4651      	mov	r1, sl
 80030b8:	018a      	lsls	r2, r1, #6
 80030ba:	4651      	mov	r1, sl
 80030bc:	ebb2 0801 	subs.w	r8, r2, r1
 80030c0:	4659      	mov	r1, fp
 80030c2:	eb63 0901 	sbc.w	r9, r3, r1
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030da:	4690      	mov	r8, r2
 80030dc:	4699      	mov	r9, r3
 80030de:	4623      	mov	r3, r4
 80030e0:	eb18 0303 	adds.w	r3, r8, r3
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	462b      	mov	r3, r5
 80030e8:	eb49 0303 	adc.w	r3, r9, r3
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030fa:	4629      	mov	r1, r5
 80030fc:	024b      	lsls	r3, r1, #9
 80030fe:	4621      	mov	r1, r4
 8003100:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003104:	4621      	mov	r1, r4
 8003106:	024a      	lsls	r2, r1, #9
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310e:	2200      	movs	r2, #0
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
 8003112:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003114:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003118:	f7fd f87a 	bl	8000210 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4613      	mov	r3, r2
 8003122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003124:	e058      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003126:	4b38      	ldr	r3, [pc, #224]	; (8003208 <HAL_RCC_GetSysClockFreq+0x200>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	099b      	lsrs	r3, r3, #6
 800312c:	2200      	movs	r2, #0
 800312e:	4618      	mov	r0, r3
 8003130:	4611      	mov	r1, r2
 8003132:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003136:	623b      	str	r3, [r7, #32]
 8003138:	2300      	movs	r3, #0
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
 800313c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003140:	4642      	mov	r2, r8
 8003142:	464b      	mov	r3, r9
 8003144:	f04f 0000 	mov.w	r0, #0
 8003148:	f04f 0100 	mov.w	r1, #0
 800314c:	0159      	lsls	r1, r3, #5
 800314e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003152:	0150      	lsls	r0, r2, #5
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4641      	mov	r1, r8
 800315a:	ebb2 0a01 	subs.w	sl, r2, r1
 800315e:	4649      	mov	r1, r9
 8003160:	eb63 0b01 	sbc.w	fp, r3, r1
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003170:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003174:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003178:	ebb2 040a 	subs.w	r4, r2, sl
 800317c:	eb63 050b 	sbc.w	r5, r3, fp
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	00eb      	lsls	r3, r5, #3
 800318a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800318e:	00e2      	lsls	r2, r4, #3
 8003190:	4614      	mov	r4, r2
 8003192:	461d      	mov	r5, r3
 8003194:	4643      	mov	r3, r8
 8003196:	18e3      	adds	r3, r4, r3
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	464b      	mov	r3, r9
 800319c:	eb45 0303 	adc.w	r3, r5, r3
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ae:	4629      	mov	r1, r5
 80031b0:	028b      	lsls	r3, r1, #10
 80031b2:	4621      	mov	r1, r4
 80031b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031b8:	4621      	mov	r1, r4
 80031ba:	028a      	lsls	r2, r1, #10
 80031bc:	4610      	mov	r0, r2
 80031be:	4619      	mov	r1, r3
 80031c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c2:	2200      	movs	r2, #0
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	61fa      	str	r2, [r7, #28]
 80031c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031cc:	f7fd f820 	bl	8000210 <__aeabi_uldivmod>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4613      	mov	r3, r2
 80031d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_GetSysClockFreq+0x200>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	0c1b      	lsrs	r3, r3, #16
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	3301      	adds	r3, #1
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80031e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031f2:	e002      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCC_GetSysClockFreq+0x204>)
 80031f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3750      	adds	r7, #80	; 0x50
 8003200:	46bd      	mov	sp, r7
 8003202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800
 800320c:	00f42400 	.word	0x00f42400
 8003210:	007a1200 	.word	0x007a1200

08003214 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <HAL_RCC_GetHCLKFreq+0x14>)
 800321a:	681b      	ldr	r3, [r3, #0]
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000000 	.word	0x20000000

0800322c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003230:	f7ff fff0 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	0a9b      	lsrs	r3, r3, #10
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4903      	ldr	r1, [pc, #12]	; (8003250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40023800 	.word	0x40023800
 8003250:	080075ec 	.word	0x080075ec

08003254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003258:	f7ff ffdc 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	0b5b      	lsrs	r3, r3, #13
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4903      	ldr	r1, [pc, #12]	; (8003278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40023800 	.word	0x40023800
 8003278:	080075ec 	.word	0x080075ec

0800327c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	220f      	movs	r2, #15
 800328a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800328c:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <HAL_RCC_GetClockConfig+0x5c>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0203 	and.w	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <HAL_RCC_GetClockConfig+0x5c>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <HAL_RCC_GetClockConfig+0x5c>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_GetClockConfig+0x5c>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	08db      	lsrs	r3, r3, #3
 80032b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032be:	4b07      	ldr	r3, [pc, #28]	; (80032dc <HAL_RCC_GetClockConfig+0x60>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 020f 	and.w	r2, r3, #15
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	601a      	str	r2, [r3, #0]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40023c00 	.word	0x40023c00

080032e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d012      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003308:	4b69      	ldr	r3, [pc, #420]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a68      	ldr	r2, [pc, #416]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003312:	6093      	str	r3, [r2, #8]
 8003314:	4b66      	ldr	r3, [pc, #408]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331c:	4964      	ldr	r1, [pc, #400]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800332a:	2301      	movs	r3, #1
 800332c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d017      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800333a:	4b5d      	ldr	r3, [pc, #372]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003340:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003348:	4959      	ldr	r1, [pc, #356]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003358:	d101      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800335a:	2301      	movs	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003366:	2301      	movs	r3, #1
 8003368:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d017      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003376:	4b4e      	ldr	r3, [pc, #312]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800337c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	494a      	ldr	r1, [pc, #296]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003394:	d101      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003396:	2301      	movs	r3, #1
 8003398:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033a2:	2301      	movs	r3, #1
 80033a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 808b 	beq.w	80034da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033c4:	4b3a      	ldr	r3, [pc, #232]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	4a39      	ldr	r2, [pc, #228]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ce:	6413      	str	r3, [r2, #64]	; 0x40
 80033d0:	4b37      	ldr	r3, [pc, #220]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033dc:	4b35      	ldr	r3, [pc, #212]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a34      	ldr	r2, [pc, #208]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e8:	f7fd ff16 	bl	8001218 <HAL_GetTick>
 80033ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f0:	f7fd ff12 	bl	8001218 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e357      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003402:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800340e:	4b28      	ldr	r3, [pc, #160]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003416:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d035      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	429a      	cmp	r2, r3
 800342a:	d02e      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800342c:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003434:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003436:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a1d      	ldr	r2, [pc, #116]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003442:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	4a1a      	ldr	r2, [pc, #104]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800344e:	4a18      	ldr	r2, [pc, #96]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003454:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	d114      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fd feda 	bl	8001218 <HAL_GetTick>
 8003464:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003466:	e00a      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003468:	f7fd fed6 	bl	8001218 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e319      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347e:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0ee      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003496:	d111      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034a6:	400b      	ands	r3, r1
 80034a8:	4901      	ldr	r1, [pc, #4]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
 80034ae:	e00b      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40007000 	.word	0x40007000
 80034b8:	0ffffcff 	.word	0x0ffffcff
 80034bc:	4baa      	ldr	r3, [pc, #680]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4aa9      	ldr	r2, [pc, #676]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034c6:	6093      	str	r3, [r2, #8]
 80034c8:	4ba7      	ldr	r3, [pc, #668]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d4:	49a4      	ldr	r1, [pc, #656]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d010      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034e6:	4ba0      	ldr	r3, [pc, #640]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ec:	4a9e      	ldr	r2, [pc, #632]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80034f6:	4b9c      	ldr	r3, [pc, #624]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	4999      	ldr	r1, [pc, #612]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003514:	4b94      	ldr	r3, [pc, #592]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003522:	4991      	ldr	r1, [pc, #580]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003536:	4b8c      	ldr	r3, [pc, #560]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003544:	4988      	ldr	r1, [pc, #544]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003558:	4b83      	ldr	r3, [pc, #524]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003566:	4980      	ldr	r1, [pc, #512]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800357a:	4b7b      	ldr	r3, [pc, #492]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003588:	4977      	ldr	r1, [pc, #476]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800359c:	4b72      	ldr	r3, [pc, #456]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f023 0203 	bic.w	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	496f      	ldr	r1, [pc, #444]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035be:	4b6a      	ldr	r3, [pc, #424]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c4:	f023 020c 	bic.w	r2, r3, #12
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035cc:	4966      	ldr	r1, [pc, #408]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035e0:	4b61      	ldr	r3, [pc, #388]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ee:	495e      	ldr	r1, [pc, #376]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003602:	4b59      	ldr	r3, [pc, #356]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003608:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003610:	4955      	ldr	r1, [pc, #340]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003624:	4b50      	ldr	r3, [pc, #320]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003632:	494d      	ldr	r1, [pc, #308]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003646:	4b48      	ldr	r3, [pc, #288]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	4944      	ldr	r1, [pc, #272]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003668:	4b3f      	ldr	r3, [pc, #252]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	493c      	ldr	r1, [pc, #240]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800368a:	4b37      	ldr	r3, [pc, #220]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800368c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003690:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003698:	4933      	ldr	r1, [pc, #204]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036ac:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ba:	492b      	ldr	r1, [pc, #172]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d011      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80036ce:	4b26      	ldr	r3, [pc, #152]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036dc:	4922      	ldr	r1, [pc, #136]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ec:	d101      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80036ee:	2301      	movs	r3, #1
 80036f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80036fe:	2301      	movs	r3, #1
 8003700:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800370e:	4b16      	ldr	r3, [pc, #88]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371c:	4912      	ldr	r1, [pc, #72]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00b      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003730:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003740:	4909      	ldr	r1, [pc, #36]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d006      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80d9 	beq.w	800390e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800375c:	4b02      	ldr	r3, [pc, #8]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a01      	ldr	r2, [pc, #4]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003762:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003766:	e001      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003768:	40023800 	.word	0x40023800
 800376c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376e:	f7fd fd53 	bl	8001218 <HAL_GetTick>
 8003772:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003776:	f7fd fd4f 	bl	8001218 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b64      	cmp	r3, #100	; 0x64
 8003782:	d901      	bls.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e194      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003788:	4b6c      	ldr	r3, [pc, #432]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f0      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d021      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d11d      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037a8:	4b64      	ldr	r3, [pc, #400]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ae:	0c1b      	lsrs	r3, r3, #16
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037b6:	4b61      	ldr	r3, [pc, #388]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037bc:	0e1b      	lsrs	r3, r3, #24
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	019a      	lsls	r2, r3, #6
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	041b      	lsls	r3, r3, #16
 80037ce:	431a      	orrs	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	061b      	lsls	r3, r3, #24
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	071b      	lsls	r3, r3, #28
 80037dc:	4957      	ldr	r1, [pc, #348]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d004      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02e      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380e:	d129      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003810:	4b4a      	ldr	r3, [pc, #296]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003816:	0c1b      	lsrs	r3, r3, #16
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800381e:	4b47      	ldr	r3, [pc, #284]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003824:	0f1b      	lsrs	r3, r3, #28
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	019a      	lsls	r2, r3, #6
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	041b      	lsls	r3, r3, #16
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	061b      	lsls	r3, r3, #24
 800383e:	431a      	orrs	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	071b      	lsls	r3, r3, #28
 8003844:	493d      	ldr	r1, [pc, #244]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800384c:	4b3b      	ldr	r3, [pc, #236]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800384e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003852:	f023 021f 	bic.w	r2, r3, #31
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	3b01      	subs	r3, #1
 800385c:	4937      	ldr	r1, [pc, #220]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01d      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003870:	4b32      	ldr	r3, [pc, #200]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003876:	0e1b      	lsrs	r3, r3, #24
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800387e:	4b2f      	ldr	r3, [pc, #188]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003884:	0f1b      	lsrs	r3, r3, #28
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	019a      	lsls	r2, r3, #6
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	041b      	lsls	r3, r3, #16
 8003898:	431a      	orrs	r2, r3
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	061b      	lsls	r3, r3, #24
 800389e:	431a      	orrs	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	071b      	lsls	r3, r3, #28
 80038a4:	4925      	ldr	r1, [pc, #148]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d011      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	019a      	lsls	r2, r3, #6
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	061b      	lsls	r3, r3, #24
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	071b      	lsls	r3, r3, #28
 80038d4:	4919      	ldr	r1, [pc, #100]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038dc:	4b17      	ldr	r3, [pc, #92]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a16      	ldr	r2, [pc, #88]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e8:	f7fd fc96 	bl	8001218 <HAL_GetTick>
 80038ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038f0:	f7fd fc92 	bl	8001218 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e0d7      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003902:	4b0e      	ldr	r3, [pc, #56]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b01      	cmp	r3, #1
 8003912:	f040 80cd 	bne.w	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a08      	ldr	r2, [pc, #32]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800391c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003922:	f7fd fc79 	bl	8001218 <HAL_GetTick>
 8003926:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003928:	e00a      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800392a:	f7fd fc75 	bl	8001218 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b64      	cmp	r3, #100	; 0x64
 8003936:	d903      	bls.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e0ba      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800393c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003940:	4b5e      	ldr	r3, [pc, #376]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800394c:	d0ed      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800396a:	2b00      	cmp	r3, #0
 800396c:	d02e      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d12a      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003976:	4b51      	ldr	r3, [pc, #324]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003984:	4b4d      	ldr	r3, [pc, #308]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398a:	0f1b      	lsrs	r3, r3, #28
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	019a      	lsls	r2, r3, #6
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	061b      	lsls	r3, r3, #24
 80039a4:	431a      	orrs	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	071b      	lsls	r3, r3, #28
 80039aa:	4944      	ldr	r1, [pc, #272]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039b2:	4b42      	ldr	r3, [pc, #264]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	3b01      	subs	r3, #1
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	493d      	ldr	r1, [pc, #244]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d022      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039e0:	d11d      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039e2:	4b36      	ldr	r3, [pc, #216]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e8:	0e1b      	lsrs	r3, r3, #24
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039f0:	4b32      	ldr	r3, [pc, #200]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	0f1b      	lsrs	r3, r3, #28
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	019a      	lsls	r2, r3, #6
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	041b      	lsls	r3, r3, #16
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	061b      	lsls	r3, r3, #24
 8003a10:	431a      	orrs	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	071b      	lsls	r3, r3, #28
 8003a16:	4929      	ldr	r1, [pc, #164]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d028      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a2a:	4b24      	ldr	r3, [pc, #144]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	0e1b      	lsrs	r3, r3, #24
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a38:	4b20      	ldr	r3, [pc, #128]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	0c1b      	lsrs	r3, r3, #16
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	019a      	lsls	r2, r3, #6
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	041b      	lsls	r3, r3, #16
 8003a50:	431a      	orrs	r2, r3
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	071b      	lsls	r3, r3, #28
 8003a5e:	4917      	ldr	r1, [pc, #92]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	4911      	ldr	r1, [pc, #68]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a88:	f7fd fbc6 	bl	8001218 <HAL_GetTick>
 8003a8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a90:	f7fd fbc2 	bl	8001218 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	; 0x64
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e007      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aae:	d1ef      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3720      	adds	r7, #32
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800

08003ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e049      	b.n	8003b66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f841 	bl	8003b6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f000 fa00 	bl	8003f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d001      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e054      	b.n	8003c46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d022      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x80>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc6:	d01d      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x80>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d018      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x80>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a21      	ldr	r2, [pc, #132]	; (8003c5c <HAL_TIM_Base_Start_IT+0xd8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d013      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x80>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <HAL_TIM_Base_Start_IT+0xdc>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00e      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x80>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <HAL_TIM_Base_Start_IT+0xe0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d009      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x80>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <HAL_TIM_Base_Start_IT+0xe4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d004      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x80>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1b      	ldr	r2, [pc, #108]	; (8003c6c <HAL_TIM_Base_Start_IT+0xe8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d115      	bne.n	8003c30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_TIM_Base_Start_IT+0xec>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d015      	beq.n	8003c42 <HAL_TIM_Base_Start_IT+0xbe>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1c:	d011      	beq.n	8003c42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0201 	orr.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2e:	e008      	b.n	8003c42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e000      	b.n	8003c44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40010000 	.word	0x40010000
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800
 8003c60:	40000c00 	.word	0x40000c00
 8003c64:	40010400 	.word	0x40010400
 8003c68:	40014000 	.word	0x40014000
 8003c6c:	40001800 	.word	0x40001800
 8003c70:	00010007 	.word	0x00010007

08003c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d122      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d11b      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0202 	mvn.w	r2, #2
 8003ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f905 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 8003cbc:	e005      	b.n	8003cca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f8f7 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f908 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d122      	bne.n	8003d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d11b      	bne.n	8003d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0204 	mvn.w	r2, #4
 8003cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f8db 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 8003d10:	e005      	b.n	8003d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f8cd 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f8de 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d122      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d11b      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0208 	mvn.w	r2, #8
 8003d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f8b1 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 8003d64:	e005      	b.n	8003d72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f8a3 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f8b4 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b10      	cmp	r3, #16
 8003d84:	d122      	bne.n	8003dcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d11b      	bne.n	8003dcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0210 	mvn.w	r2, #16
 8003d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2208      	movs	r2, #8
 8003da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f887 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 8003db8:	e005      	b.n	8003dc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f879 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f88a 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d10e      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d107      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0201 	mvn.w	r2, #1
 8003df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fc ff12 	bl	8000c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	2b80      	cmp	r3, #128	; 0x80
 8003e04:	d10e      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e10:	2b80      	cmp	r3, #128	; 0x80
 8003e12:	d107      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f91a 	bl	8004058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e32:	d10e      	bne.n	8003e52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	2b80      	cmp	r3, #128	; 0x80
 8003e40:	d107      	bne.n	8003e52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f90d 	bl	800406c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5c:	2b40      	cmp	r3, #64	; 0x40
 8003e5e:	d10e      	bne.n	8003e7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b40      	cmp	r3, #64	; 0x40
 8003e6c:	d107      	bne.n	8003e7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f838 	bl	8003eee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d10e      	bne.n	8003eaa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d107      	bne.n	8003eaa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f06f 0220 	mvn.w	r2, #32
 8003ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f8cd 	bl	8004044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a40      	ldr	r2, [pc, #256]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d00f      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a3d      	ldr	r2, [pc, #244]	; (800401c <TIM_Base_SetConfig+0x118>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a3c      	ldr	r2, [pc, #240]	; (8004020 <TIM_Base_SetConfig+0x11c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d007      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a3b      	ldr	r2, [pc, #236]	; (8004024 <TIM_Base_SetConfig+0x120>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d003      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a3a      	ldr	r2, [pc, #232]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d108      	bne.n	8003f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a2f      	ldr	r2, [pc, #188]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d02b      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f64:	d027      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a2c      	ldr	r2, [pc, #176]	; (800401c <TIM_Base_SetConfig+0x118>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d023      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2b      	ldr	r2, [pc, #172]	; (8004020 <TIM_Base_SetConfig+0x11c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01f      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a2a      	ldr	r2, [pc, #168]	; (8004024 <TIM_Base_SetConfig+0x120>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01b      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a29      	ldr	r2, [pc, #164]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d017      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a28      	ldr	r2, [pc, #160]	; (800402c <TIM_Base_SetConfig+0x128>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a27      	ldr	r2, [pc, #156]	; (8004030 <TIM_Base_SetConfig+0x12c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00f      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a26      	ldr	r2, [pc, #152]	; (8004034 <TIM_Base_SetConfig+0x130>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00b      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a25      	ldr	r2, [pc, #148]	; (8004038 <TIM_Base_SetConfig+0x134>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a24      	ldr	r2, [pc, #144]	; (800403c <TIM_Base_SetConfig+0x138>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a23      	ldr	r2, [pc, #140]	; (8004040 <TIM_Base_SetConfig+0x13c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d108      	bne.n	8003fc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_Base_SetConfig+0xf8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d103      	bne.n	8004004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	615a      	str	r2, [r3, #20]
}
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40010000 	.word	0x40010000
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800
 8004024:	40000c00 	.word	0x40000c00
 8004028:	40010400 	.word	0x40010400
 800402c:	40014000 	.word	0x40014000
 8004030:	40014400 	.word	0x40014400
 8004034:	40014800 	.word	0x40014800
 8004038:	40001800 	.word	0x40001800
 800403c:	40001c00 	.word	0x40001c00
 8004040:	40002000 	.word	0x40002000

08004044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e040      	b.n	8004114 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fc fef2 	bl	8000e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2224      	movs	r2, #36	; 0x24
 80040ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f82c 	bl	800411c <UART_SetConfig>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e022      	b.n	8004114 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fa84 	bl	80045e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fb0b 	bl	8004728 <UART_CheckIdleState>
 8004112:	4603      	mov	r3, r0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4ba6      	ldr	r3, [pc, #664]	; (80043e0 <UART_SetConfig+0x2c4>)
 8004148:	4013      	ands	r3, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	6979      	ldr	r1, [r7, #20]
 8004150:	430b      	orrs	r3, r1
 8004152:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	430a      	orrs	r2, r1
 800418c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a94      	ldr	r2, [pc, #592]	; (80043e4 <UART_SetConfig+0x2c8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d120      	bne.n	80041da <UART_SetConfig+0xbe>
 8004198:	4b93      	ldr	r3, [pc, #588]	; (80043e8 <UART_SetConfig+0x2cc>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d816      	bhi.n	80041d4 <UART_SetConfig+0xb8>
 80041a6:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <UART_SetConfig+0x90>)
 80041a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ac:	080041bd 	.word	0x080041bd
 80041b0:	080041c9 	.word	0x080041c9
 80041b4:	080041c3 	.word	0x080041c3
 80041b8:	080041cf 	.word	0x080041cf
 80041bc:	2301      	movs	r3, #1
 80041be:	77fb      	strb	r3, [r7, #31]
 80041c0:	e150      	b.n	8004464 <UART_SetConfig+0x348>
 80041c2:	2302      	movs	r3, #2
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e14d      	b.n	8004464 <UART_SetConfig+0x348>
 80041c8:	2304      	movs	r3, #4
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e14a      	b.n	8004464 <UART_SetConfig+0x348>
 80041ce:	2308      	movs	r3, #8
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e147      	b.n	8004464 <UART_SetConfig+0x348>
 80041d4:	2310      	movs	r3, #16
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e144      	b.n	8004464 <UART_SetConfig+0x348>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a83      	ldr	r2, [pc, #524]	; (80043ec <UART_SetConfig+0x2d0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d132      	bne.n	800424a <UART_SetConfig+0x12e>
 80041e4:	4b80      	ldr	r3, [pc, #512]	; (80043e8 <UART_SetConfig+0x2cc>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b0c      	cmp	r3, #12
 80041f0:	d828      	bhi.n	8004244 <UART_SetConfig+0x128>
 80041f2:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <UART_SetConfig+0xdc>)
 80041f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f8:	0800422d 	.word	0x0800422d
 80041fc:	08004245 	.word	0x08004245
 8004200:	08004245 	.word	0x08004245
 8004204:	08004245 	.word	0x08004245
 8004208:	08004239 	.word	0x08004239
 800420c:	08004245 	.word	0x08004245
 8004210:	08004245 	.word	0x08004245
 8004214:	08004245 	.word	0x08004245
 8004218:	08004233 	.word	0x08004233
 800421c:	08004245 	.word	0x08004245
 8004220:	08004245 	.word	0x08004245
 8004224:	08004245 	.word	0x08004245
 8004228:	0800423f 	.word	0x0800423f
 800422c:	2300      	movs	r3, #0
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e118      	b.n	8004464 <UART_SetConfig+0x348>
 8004232:	2302      	movs	r3, #2
 8004234:	77fb      	strb	r3, [r7, #31]
 8004236:	e115      	b.n	8004464 <UART_SetConfig+0x348>
 8004238:	2304      	movs	r3, #4
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e112      	b.n	8004464 <UART_SetConfig+0x348>
 800423e:	2308      	movs	r3, #8
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e10f      	b.n	8004464 <UART_SetConfig+0x348>
 8004244:	2310      	movs	r3, #16
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e10c      	b.n	8004464 <UART_SetConfig+0x348>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a68      	ldr	r2, [pc, #416]	; (80043f0 <UART_SetConfig+0x2d4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d120      	bne.n	8004296 <UART_SetConfig+0x17a>
 8004254:	4b64      	ldr	r3, [pc, #400]	; (80043e8 <UART_SetConfig+0x2cc>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800425e:	2b30      	cmp	r3, #48	; 0x30
 8004260:	d013      	beq.n	800428a <UART_SetConfig+0x16e>
 8004262:	2b30      	cmp	r3, #48	; 0x30
 8004264:	d814      	bhi.n	8004290 <UART_SetConfig+0x174>
 8004266:	2b20      	cmp	r3, #32
 8004268:	d009      	beq.n	800427e <UART_SetConfig+0x162>
 800426a:	2b20      	cmp	r3, #32
 800426c:	d810      	bhi.n	8004290 <UART_SetConfig+0x174>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <UART_SetConfig+0x15c>
 8004272:	2b10      	cmp	r3, #16
 8004274:	d006      	beq.n	8004284 <UART_SetConfig+0x168>
 8004276:	e00b      	b.n	8004290 <UART_SetConfig+0x174>
 8004278:	2300      	movs	r3, #0
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e0f2      	b.n	8004464 <UART_SetConfig+0x348>
 800427e:	2302      	movs	r3, #2
 8004280:	77fb      	strb	r3, [r7, #31]
 8004282:	e0ef      	b.n	8004464 <UART_SetConfig+0x348>
 8004284:	2304      	movs	r3, #4
 8004286:	77fb      	strb	r3, [r7, #31]
 8004288:	e0ec      	b.n	8004464 <UART_SetConfig+0x348>
 800428a:	2308      	movs	r3, #8
 800428c:	77fb      	strb	r3, [r7, #31]
 800428e:	e0e9      	b.n	8004464 <UART_SetConfig+0x348>
 8004290:	2310      	movs	r3, #16
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	e0e6      	b.n	8004464 <UART_SetConfig+0x348>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a56      	ldr	r2, [pc, #344]	; (80043f4 <UART_SetConfig+0x2d8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d120      	bne.n	80042e2 <UART_SetConfig+0x1c6>
 80042a0:	4b51      	ldr	r3, [pc, #324]	; (80043e8 <UART_SetConfig+0x2cc>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042aa:	2bc0      	cmp	r3, #192	; 0xc0
 80042ac:	d013      	beq.n	80042d6 <UART_SetConfig+0x1ba>
 80042ae:	2bc0      	cmp	r3, #192	; 0xc0
 80042b0:	d814      	bhi.n	80042dc <UART_SetConfig+0x1c0>
 80042b2:	2b80      	cmp	r3, #128	; 0x80
 80042b4:	d009      	beq.n	80042ca <UART_SetConfig+0x1ae>
 80042b6:	2b80      	cmp	r3, #128	; 0x80
 80042b8:	d810      	bhi.n	80042dc <UART_SetConfig+0x1c0>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <UART_SetConfig+0x1a8>
 80042be:	2b40      	cmp	r3, #64	; 0x40
 80042c0:	d006      	beq.n	80042d0 <UART_SetConfig+0x1b4>
 80042c2:	e00b      	b.n	80042dc <UART_SetConfig+0x1c0>
 80042c4:	2300      	movs	r3, #0
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e0cc      	b.n	8004464 <UART_SetConfig+0x348>
 80042ca:	2302      	movs	r3, #2
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e0c9      	b.n	8004464 <UART_SetConfig+0x348>
 80042d0:	2304      	movs	r3, #4
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e0c6      	b.n	8004464 <UART_SetConfig+0x348>
 80042d6:	2308      	movs	r3, #8
 80042d8:	77fb      	strb	r3, [r7, #31]
 80042da:	e0c3      	b.n	8004464 <UART_SetConfig+0x348>
 80042dc:	2310      	movs	r3, #16
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e0c0      	b.n	8004464 <UART_SetConfig+0x348>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a44      	ldr	r2, [pc, #272]	; (80043f8 <UART_SetConfig+0x2dc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d125      	bne.n	8004338 <UART_SetConfig+0x21c>
 80042ec:	4b3e      	ldr	r3, [pc, #248]	; (80043e8 <UART_SetConfig+0x2cc>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fa:	d017      	beq.n	800432c <UART_SetConfig+0x210>
 80042fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004300:	d817      	bhi.n	8004332 <UART_SetConfig+0x216>
 8004302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004306:	d00b      	beq.n	8004320 <UART_SetConfig+0x204>
 8004308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800430c:	d811      	bhi.n	8004332 <UART_SetConfig+0x216>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <UART_SetConfig+0x1fe>
 8004312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004316:	d006      	beq.n	8004326 <UART_SetConfig+0x20a>
 8004318:	e00b      	b.n	8004332 <UART_SetConfig+0x216>
 800431a:	2300      	movs	r3, #0
 800431c:	77fb      	strb	r3, [r7, #31]
 800431e:	e0a1      	b.n	8004464 <UART_SetConfig+0x348>
 8004320:	2302      	movs	r3, #2
 8004322:	77fb      	strb	r3, [r7, #31]
 8004324:	e09e      	b.n	8004464 <UART_SetConfig+0x348>
 8004326:	2304      	movs	r3, #4
 8004328:	77fb      	strb	r3, [r7, #31]
 800432a:	e09b      	b.n	8004464 <UART_SetConfig+0x348>
 800432c:	2308      	movs	r3, #8
 800432e:	77fb      	strb	r3, [r7, #31]
 8004330:	e098      	b.n	8004464 <UART_SetConfig+0x348>
 8004332:	2310      	movs	r3, #16
 8004334:	77fb      	strb	r3, [r7, #31]
 8004336:	e095      	b.n	8004464 <UART_SetConfig+0x348>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2f      	ldr	r2, [pc, #188]	; (80043fc <UART_SetConfig+0x2e0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d125      	bne.n	800438e <UART_SetConfig+0x272>
 8004342:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <UART_SetConfig+0x2cc>)
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004348:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800434c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004350:	d017      	beq.n	8004382 <UART_SetConfig+0x266>
 8004352:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004356:	d817      	bhi.n	8004388 <UART_SetConfig+0x26c>
 8004358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435c:	d00b      	beq.n	8004376 <UART_SetConfig+0x25a>
 800435e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004362:	d811      	bhi.n	8004388 <UART_SetConfig+0x26c>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <UART_SetConfig+0x254>
 8004368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436c:	d006      	beq.n	800437c <UART_SetConfig+0x260>
 800436e:	e00b      	b.n	8004388 <UART_SetConfig+0x26c>
 8004370:	2301      	movs	r3, #1
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e076      	b.n	8004464 <UART_SetConfig+0x348>
 8004376:	2302      	movs	r3, #2
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e073      	b.n	8004464 <UART_SetConfig+0x348>
 800437c:	2304      	movs	r3, #4
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e070      	b.n	8004464 <UART_SetConfig+0x348>
 8004382:	2308      	movs	r3, #8
 8004384:	77fb      	strb	r3, [r7, #31]
 8004386:	e06d      	b.n	8004464 <UART_SetConfig+0x348>
 8004388:	2310      	movs	r3, #16
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e06a      	b.n	8004464 <UART_SetConfig+0x348>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1b      	ldr	r2, [pc, #108]	; (8004400 <UART_SetConfig+0x2e4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d138      	bne.n	800440a <UART_SetConfig+0x2ee>
 8004398:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <UART_SetConfig+0x2cc>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80043a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043a6:	d017      	beq.n	80043d8 <UART_SetConfig+0x2bc>
 80043a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043ac:	d82a      	bhi.n	8004404 <UART_SetConfig+0x2e8>
 80043ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b2:	d00b      	beq.n	80043cc <UART_SetConfig+0x2b0>
 80043b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b8:	d824      	bhi.n	8004404 <UART_SetConfig+0x2e8>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <UART_SetConfig+0x2aa>
 80043be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c2:	d006      	beq.n	80043d2 <UART_SetConfig+0x2b6>
 80043c4:	e01e      	b.n	8004404 <UART_SetConfig+0x2e8>
 80043c6:	2300      	movs	r3, #0
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e04b      	b.n	8004464 <UART_SetConfig+0x348>
 80043cc:	2302      	movs	r3, #2
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	e048      	b.n	8004464 <UART_SetConfig+0x348>
 80043d2:	2304      	movs	r3, #4
 80043d4:	77fb      	strb	r3, [r7, #31]
 80043d6:	e045      	b.n	8004464 <UART_SetConfig+0x348>
 80043d8:	2308      	movs	r3, #8
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e042      	b.n	8004464 <UART_SetConfig+0x348>
 80043de:	bf00      	nop
 80043e0:	efff69f3 	.word	0xefff69f3
 80043e4:	40011000 	.word	0x40011000
 80043e8:	40023800 	.word	0x40023800
 80043ec:	40004400 	.word	0x40004400
 80043f0:	40004800 	.word	0x40004800
 80043f4:	40004c00 	.word	0x40004c00
 80043f8:	40005000 	.word	0x40005000
 80043fc:	40011400 	.word	0x40011400
 8004400:	40007800 	.word	0x40007800
 8004404:	2310      	movs	r3, #16
 8004406:	77fb      	strb	r3, [r7, #31]
 8004408:	e02c      	b.n	8004464 <UART_SetConfig+0x348>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a72      	ldr	r2, [pc, #456]	; (80045d8 <UART_SetConfig+0x4bc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d125      	bne.n	8004460 <UART_SetConfig+0x344>
 8004414:	4b71      	ldr	r3, [pc, #452]	; (80045dc <UART_SetConfig+0x4c0>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800441e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004422:	d017      	beq.n	8004454 <UART_SetConfig+0x338>
 8004424:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004428:	d817      	bhi.n	800445a <UART_SetConfig+0x33e>
 800442a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800442e:	d00b      	beq.n	8004448 <UART_SetConfig+0x32c>
 8004430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004434:	d811      	bhi.n	800445a <UART_SetConfig+0x33e>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <UART_SetConfig+0x326>
 800443a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800443e:	d006      	beq.n	800444e <UART_SetConfig+0x332>
 8004440:	e00b      	b.n	800445a <UART_SetConfig+0x33e>
 8004442:	2300      	movs	r3, #0
 8004444:	77fb      	strb	r3, [r7, #31]
 8004446:	e00d      	b.n	8004464 <UART_SetConfig+0x348>
 8004448:	2302      	movs	r3, #2
 800444a:	77fb      	strb	r3, [r7, #31]
 800444c:	e00a      	b.n	8004464 <UART_SetConfig+0x348>
 800444e:	2304      	movs	r3, #4
 8004450:	77fb      	strb	r3, [r7, #31]
 8004452:	e007      	b.n	8004464 <UART_SetConfig+0x348>
 8004454:	2308      	movs	r3, #8
 8004456:	77fb      	strb	r3, [r7, #31]
 8004458:	e004      	b.n	8004464 <UART_SetConfig+0x348>
 800445a:	2310      	movs	r3, #16
 800445c:	77fb      	strb	r3, [r7, #31]
 800445e:	e001      	b.n	8004464 <UART_SetConfig+0x348>
 8004460:	2310      	movs	r3, #16
 8004462:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800446c:	d15b      	bne.n	8004526 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800446e:	7ffb      	ldrb	r3, [r7, #31]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d828      	bhi.n	80044c6 <UART_SetConfig+0x3aa>
 8004474:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0x360>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	080044a1 	.word	0x080044a1
 8004480:	080044a9 	.word	0x080044a9
 8004484:	080044b1 	.word	0x080044b1
 8004488:	080044c7 	.word	0x080044c7
 800448c:	080044b7 	.word	0x080044b7
 8004490:	080044c7 	.word	0x080044c7
 8004494:	080044c7 	.word	0x080044c7
 8004498:	080044c7 	.word	0x080044c7
 800449c:	080044bf 	.word	0x080044bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a0:	f7fe fec4 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 80044a4:	61b8      	str	r0, [r7, #24]
        break;
 80044a6:	e013      	b.n	80044d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044a8:	f7fe fed4 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 80044ac:	61b8      	str	r0, [r7, #24]
        break;
 80044ae:	e00f      	b.n	80044d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b0:	4b4b      	ldr	r3, [pc, #300]	; (80045e0 <UART_SetConfig+0x4c4>)
 80044b2:	61bb      	str	r3, [r7, #24]
        break;
 80044b4:	e00c      	b.n	80044d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044b6:	f7fe fda7 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 80044ba:	61b8      	str	r0, [r7, #24]
        break;
 80044bc:	e008      	b.n	80044d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c2:	61bb      	str	r3, [r7, #24]
        break;
 80044c4:	e004      	b.n	80044d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	77bb      	strb	r3, [r7, #30]
        break;
 80044ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d074      	beq.n	80045c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	005a      	lsls	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	085b      	lsrs	r3, r3, #1
 80044e0:	441a      	add	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b0f      	cmp	r3, #15
 80044f0:	d916      	bls.n	8004520 <UART_SetConfig+0x404>
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f8:	d212      	bcs.n	8004520 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	f023 030f 	bic.w	r3, r3, #15
 8004502:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	b29b      	uxth	r3, r3
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	b29a      	uxth	r2, r3
 8004510:	89fb      	ldrh	r3, [r7, #14]
 8004512:	4313      	orrs	r3, r2
 8004514:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	89fa      	ldrh	r2, [r7, #14]
 800451c:	60da      	str	r2, [r3, #12]
 800451e:	e04f      	b.n	80045c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	77bb      	strb	r3, [r7, #30]
 8004524:	e04c      	b.n	80045c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004526:	7ffb      	ldrb	r3, [r7, #31]
 8004528:	2b08      	cmp	r3, #8
 800452a:	d828      	bhi.n	800457e <UART_SetConfig+0x462>
 800452c:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <UART_SetConfig+0x418>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	08004559 	.word	0x08004559
 8004538:	08004561 	.word	0x08004561
 800453c:	08004569 	.word	0x08004569
 8004540:	0800457f 	.word	0x0800457f
 8004544:	0800456f 	.word	0x0800456f
 8004548:	0800457f 	.word	0x0800457f
 800454c:	0800457f 	.word	0x0800457f
 8004550:	0800457f 	.word	0x0800457f
 8004554:	08004577 	.word	0x08004577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004558:	f7fe fe68 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 800455c:	61b8      	str	r0, [r7, #24]
        break;
 800455e:	e013      	b.n	8004588 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004560:	f7fe fe78 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 8004564:	61b8      	str	r0, [r7, #24]
        break;
 8004566:	e00f      	b.n	8004588 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004568:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <UART_SetConfig+0x4c4>)
 800456a:	61bb      	str	r3, [r7, #24]
        break;
 800456c:	e00c      	b.n	8004588 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456e:	f7fe fd4b 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8004572:	61b8      	str	r0, [r7, #24]
        break;
 8004574:	e008      	b.n	8004588 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457a:	61bb      	str	r3, [r7, #24]
        break;
 800457c:	e004      	b.n	8004588 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	77bb      	strb	r3, [r7, #30]
        break;
 8004586:	bf00      	nop
    }

    if (pclk != 0U)
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d018      	beq.n	80045c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	085a      	lsrs	r2, r3, #1
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	441a      	add	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b0f      	cmp	r3, #15
 80045a6:	d909      	bls.n	80045bc <UART_SetConfig+0x4a0>
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ae:	d205      	bcs.n	80045bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	e001      	b.n	80045c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40007c00 	.word	0x40007c00
 80045dc:	40023800 	.word	0x40023800
 80045e0:	00f42400 	.word	0x00f42400

080045e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01a      	beq.n	80046fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e2:	d10a      	bne.n	80046fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
  }
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af02      	add	r7, sp, #8
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004738:	f7fc fd6e 	bl	8001218 <HAL_GetTick>
 800473c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b08      	cmp	r3, #8
 800474a:	d10e      	bne.n	800476a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800474c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f81b 	bl	8004796 <UART_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e011      	b.n	800478e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b09c      	sub	sp, #112	; 0x70
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	4613      	mov	r3, r2
 80047a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a6:	e0a7      	b.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	f000 80a3 	beq.w	80048f8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b2:	f7fc fd31 	bl	8001218 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047be:	429a      	cmp	r2, r3
 80047c0:	d302      	bcc.n	80047c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80047c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d13f      	bne.n	8004848 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047dc:	667b      	str	r3, [r7, #100]	; 0x64
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1e6      	bne.n	80047c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3308      	adds	r3, #8
 8004800:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800480a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	663b      	str	r3, [r7, #96]	; 0x60
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3308      	adds	r3, #8
 8004818:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800481a:	64ba      	str	r2, [r7, #72]	; 0x48
 800481c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e5      	bne.n	80047fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2220      	movs	r2, #32
 8004838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e068      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d050      	beq.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004864:	d148      	bne.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800486e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004884:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488e:	637b      	str	r3, [r7, #52]	; 0x34
 8004890:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e6      	bne.n	8004870 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3308      	adds	r3, #8
 80048a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	613b      	str	r3, [r7, #16]
   return(result);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3308      	adds	r3, #8
 80048c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048c2:	623a      	str	r2, [r7, #32]
 80048c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	69f9      	ldr	r1, [r7, #28]
 80048c8:	6a3a      	ldr	r2, [r7, #32]
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e5      	bne.n	80048a2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e010      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69da      	ldr	r2, [r3, #28]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4013      	ands	r3, r2
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	429a      	cmp	r2, r3
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	429a      	cmp	r2, r3
 8004914:	f43f af48 	beq.w	80047a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3770      	adds	r7, #112	; 0x70
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004924:	b084      	sub	sp, #16
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	f107 001c 	add.w	r0, r7, #28
 8004932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	2b01      	cmp	r3, #1
 800493a:	d120      	bne.n	800497e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	4b20      	ldr	r3, [pc, #128]	; (80049d0 <USB_CoreInit+0xac>)
 800494e:	4013      	ands	r3, r2
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004962:	2b01      	cmp	r3, #1
 8004964:	d105      	bne.n	8004972 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fa96 	bl	8004ea4 <USB_CoreReset>
 8004978:	4603      	mov	r3, r0
 800497a:	73fb      	strb	r3, [r7, #15]
 800497c:	e010      	b.n	80049a0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fa8a 	bl	8004ea4 <USB_CoreReset>
 8004990:	4603      	mov	r3, r0
 8004992:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d10b      	bne.n	80049be <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f043 0206 	orr.w	r2, r3, #6
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f043 0220 	orr.w	r2, r3, #32
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049be:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049ca:	b004      	add	sp, #16
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	ffbdffbf 	.word	0xffbdffbf

080049d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f023 0201 	bic.w	r2, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	460b      	mov	r3, r1
 8004a00:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d115      	bne.n	8004a44 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a24:	2001      	movs	r0, #1
 8004a26:	f7fc fc03 	bl	8001230 <HAL_Delay>
      ms++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fa29 	bl	8004e88 <USB_GetMode>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d01e      	beq.n	8004a7a <USB_SetCurrentMode+0x84>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b31      	cmp	r3, #49	; 0x31
 8004a40:	d9f0      	bls.n	8004a24 <USB_SetCurrentMode+0x2e>
 8004a42:	e01a      	b.n	8004a7a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d115      	bne.n	8004a76 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a56:	2001      	movs	r0, #1
 8004a58:	f7fc fbea 	bl	8001230 <HAL_Delay>
      ms++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fa10 	bl	8004e88 <USB_GetMode>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <USB_SetCurrentMode+0x84>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b31      	cmp	r3, #49	; 0x31
 8004a72:	d9f0      	bls.n	8004a56 <USB_SetCurrentMode+0x60>
 8004a74:	e001      	b.n	8004a7a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e005      	b.n	8004a86 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b32      	cmp	r3, #50	; 0x32
 8004a7e:	d101      	bne.n	8004a84 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a90:	b084      	sub	sp, #16
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	e009      	b.n	8004ac4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	3340      	adds	r3, #64	; 0x40
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	2200      	movs	r2, #0
 8004abc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b0e      	cmp	r3, #14
 8004ac8:	d9f2      	bls.n	8004ab0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d11c      	bne.n	8004b0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ade:	f043 0302 	orr.w	r3, r3, #2
 8004ae2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	e005      	b.n	8004b16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	2300      	movs	r3, #0
 8004b20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b28:	4619      	mov	r1, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b30:	461a      	mov	r2, r3
 8004b32:	680b      	ldr	r3, [r1, #0]
 8004b34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d10c      	bne.n	8004b56 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d104      	bne.n	8004b4c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b42:	2100      	movs	r1, #0
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f965 	bl	8004e14 <USB_SetDevSpeed>
 8004b4a:	e008      	b.n	8004b5e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f960 	bl	8004e14 <USB_SetDevSpeed>
 8004b54:	e003      	b.n	8004b5e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b56:	2103      	movs	r1, #3
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f95b 	bl	8004e14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b5e:	2110      	movs	r1, #16
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f8f3 	bl	8004d4c <USB_FlushTxFifo>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f91f 	bl	8004db4 <USB_FlushRxFifo>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b86:	461a      	mov	r2, r3
 8004b88:	2300      	movs	r3, #0
 8004b8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b92:	461a      	mov	r2, r3
 8004b94:	2300      	movs	r3, #0
 8004b96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	e043      	b.n	8004c32 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bc0:	d118      	bne.n	8004bf4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	e013      	b.n	8004c06 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bea:	461a      	mov	r2, r3
 8004bec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	e008      	b.n	8004c06 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	461a      	mov	r2, r3
 8004c02:	2300      	movs	r3, #0
 8004c04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c12:	461a      	mov	r2, r3
 8004c14:	2300      	movs	r3, #0
 8004c16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	461a      	mov	r2, r3
 8004c26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d3b7      	bcc.n	8004baa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	e043      	b.n	8004cc8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c56:	d118      	bne.n	8004c8a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10a      	bne.n	8004c74 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	e013      	b.n	8004c9c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c80:	461a      	mov	r2, r3
 8004c82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	e008      	b.n	8004c9c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c96:	461a      	mov	r2, r3
 8004c98:	2300      	movs	r3, #0
 8004c9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca8:	461a      	mov	r2, r3
 8004caa:	2300      	movs	r3, #0
 8004cac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d3b7      	bcc.n	8004c40 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004cf0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d105      	bne.n	8004d04 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f043 0210 	orr.w	r2, r3, #16
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699a      	ldr	r2, [r3, #24]
 8004d08:	4b0e      	ldr	r3, [pc, #56]	; (8004d44 <USB_DevInit+0x2b4>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f043 0208 	orr.w	r2, r3, #8
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d105      	bne.n	8004d34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699a      	ldr	r2, [r3, #24]
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <USB_DevInit+0x2b8>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d40:	b004      	add	sp, #16
 8004d42:	4770      	bx	lr
 8004d44:	803c3800 	.word	0x803c3800
 8004d48:	40000004 	.word	0x40000004

08004d4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <USB_FlushTxFifo+0x64>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d901      	bls.n	8004d6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e01b      	b.n	8004da4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	daf2      	bge.n	8004d5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	019b      	lsls	r3, r3, #6
 8004d7c:	f043 0220 	orr.w	r2, r3, #32
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3301      	adds	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <USB_FlushTxFifo+0x64>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d901      	bls.n	8004d96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e006      	b.n	8004da4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d0f0      	beq.n	8004d84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	00030d40 	.word	0x00030d40

08004db4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4a11      	ldr	r2, [pc, #68]	; (8004e10 <USB_FlushRxFifo+0x5c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d901      	bls.n	8004dd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e018      	b.n	8004e04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	daf2      	bge.n	8004dc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2210      	movs	r2, #16
 8004de2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3301      	adds	r3, #1
 8004de8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4a08      	ldr	r2, [pc, #32]	; (8004e10 <USB_FlushRxFifo+0x5c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d901      	bls.n	8004df6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e006      	b.n	8004e04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	2b10      	cmp	r3, #16
 8004e00:	d0f0      	beq.n	8004de4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	00030d40 	.word	0x00030d40

08004e14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	68f9      	ldr	r1, [r7, #12]
 8004e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e34:	4313      	orrs	r3, r2
 8004e36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b085      	sub	sp, #20
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e60:	f023 0303 	bic.w	r3, r3, #3
 8004e64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e74:	f043 0302 	orr.w	r3, r3, #2
 8004e78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f003 0301 	and.w	r3, r3, #1
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a13      	ldr	r2, [pc, #76]	; (8004f08 <USB_CoreReset+0x64>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d901      	bls.n	8004ec2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e01b      	b.n	8004efa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	daf2      	bge.n	8004eb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f043 0201 	orr.w	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3301      	adds	r3, #1
 8004ede:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <USB_CoreReset+0x64>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d901      	bls.n	8004eec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e006      	b.n	8004efa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d0f0      	beq.n	8004eda <USB_CoreReset+0x36>

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	00030d40 	.word	0x00030d40

08004f0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f1e:	2b84      	cmp	r3, #132	; 0x84
 8004f20:	d005      	beq.n	8004f2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4413      	add	r3, r2
 8004f2a:	3303      	adds	r3, #3
 8004f2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f42:	f3ef 8305 	mrs	r3, IPSR
 8004f46:	607b      	str	r3, [r7, #4]
  return(result);
 8004f48:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bf14      	ite	ne
 8004f4e:	2301      	movne	r3, #1
 8004f50:	2300      	moveq	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f64:	f001 f936 	bl	80061d4 <vTaskStartScheduler>
  
  return osOK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f70:	b089      	sub	sp, #36	; 0x24
 8004f72:	af04      	add	r7, sp, #16
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d020      	beq.n	8004fc2 <osThreadCreate+0x54>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01c      	beq.n	8004fc2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685c      	ldr	r4, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691e      	ldr	r6, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff ffb6 	bl	8004f0c <makeFreeRtosPriority>
 8004fa0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004faa:	9202      	str	r2, [sp, #8]
 8004fac:	9301      	str	r3, [sp, #4]
 8004fae:	9100      	str	r1, [sp, #0]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	4632      	mov	r2, r6
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 ff3a 	bl	8005e30 <xTaskCreateStatic>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e01c      	b.n	8004ffc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685c      	ldr	r4, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff ff98 	bl	8004f0c <makeFreeRtosPriority>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	f107 030c 	add.w	r3, r7, #12
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	9200      	str	r2, [sp, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	4632      	mov	r2, r6
 8004fea:	4629      	mov	r1, r5
 8004fec:	4620      	mov	r0, r4
 8004fee:	f000 ff82 	bl	8005ef6 <xTaskCreate>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d001      	beq.n	8004ffc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e000      	b.n	8004ffe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005006 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <osDelay+0x16>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	e000      	b.n	800501e <osDelay+0x18>
 800501c:	2301      	movs	r3, #1
 800501e:	4618      	mov	r0, r3
 8005020:	f001 f8a2 	bl	8006168 <vTaskDelay>
  
  return osOK;
 8005024:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800502e:	b590      	push	{r4, r7, lr}
 8005030:	b085      	sub	sp, #20
 8005032:	af02      	add	r7, sp, #8
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d011      	beq.n	8005064 <osMessageCreate+0x36>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00d      	beq.n	8005064 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6859      	ldr	r1, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2400      	movs	r4, #0
 800505a:	9400      	str	r4, [sp, #0]
 800505c:	f000 f9e2 	bl	8005424 <xQueueGenericCreateStatic>
 8005060:	4603      	mov	r3, r0
 8005062:	e008      	b.n	8005076 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	4619      	mov	r1, r3
 8005070:	f000 fa5a 	bl	8005528 <xQueueGenericCreate>
 8005074:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	bd90      	pop	{r4, r7, pc}
	...

08005080 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800508c:	2300      	movs	r3, #0
 800508e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <osMessagePut+0x1e>
    ticks = 1;
 800509a:	2301      	movs	r3, #1
 800509c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800509e:	f7ff ff4d 	bl	8004f3c <inHandlerMode>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d018      	beq.n	80050da <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80050a8:	f107 0210 	add.w	r2, r7, #16
 80050ac:	f107 0108 	add.w	r1, r7, #8
 80050b0:	2300      	movs	r3, #0
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 fba0 	bl	80057f8 <xQueueGenericSendFromISR>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d001      	beq.n	80050c2 <osMessagePut+0x42>
      return osErrorOS;
 80050be:	23ff      	movs	r3, #255	; 0xff
 80050c0:	e018      	b.n	80050f4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d014      	beq.n	80050f2 <osMessagePut+0x72>
 80050c8:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <osMessagePut+0x7c>)
 80050ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	e00b      	b.n	80050f2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80050da:	f107 0108 	add.w	r1, r7, #8
 80050de:	2300      	movs	r3, #0
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fa82 	bl	80055ec <xQueueGenericSend>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d001      	beq.n	80050f2 <osMessagePut+0x72>
      return osErrorOS;
 80050ee:	23ff      	movs	r3, #255	; 0xff
 80050f0:	e000      	b.n	80050f4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	e000ed04 	.word	0xe000ed04

08005100 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005100:	b590      	push	{r4, r7, lr}
 8005102:	b08b      	sub	sp, #44	; 0x2c
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10a      	bne.n	8005130 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	617b      	str	r3, [r7, #20]
    return event;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	461c      	mov	r4, r3
 8005122:	f107 0314 	add.w	r3, r7, #20
 8005126:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800512a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800512e:	e054      	b.n	80051da <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005130:	2300      	movs	r3, #0
 8005132:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005134:	2300      	movs	r3, #0
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513e:	d103      	bne.n	8005148 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005140:	f04f 33ff 	mov.w	r3, #4294967295
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
 8005146:	e009      	b.n	800515c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d006      	beq.n	800515c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <osMessageGet+0x5c>
      ticks = 1;
 8005158:	2301      	movs	r3, #1
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800515c:	f7ff feee 	bl	8004f3c <inHandlerMode>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d01c      	beq.n	80051a0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005166:	f107 0220 	add.w	r2, r7, #32
 800516a:	f107 0314 	add.w	r3, r7, #20
 800516e:	3304      	adds	r3, #4
 8005170:	4619      	mov	r1, r3
 8005172:	68b8      	ldr	r0, [r7, #8]
 8005174:	f000 fcc6 	bl	8005b04 <xQueueReceiveFromISR>
 8005178:	4603      	mov	r3, r0
 800517a:	2b01      	cmp	r3, #1
 800517c:	d102      	bne.n	8005184 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800517e:	2310      	movs	r3, #16
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	e001      	b.n	8005188 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01d      	beq.n	80051ca <osMessageGet+0xca>
 800518e:	4b15      	ldr	r3, [pc, #84]	; (80051e4 <osMessageGet+0xe4>)
 8005190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	e014      	b.n	80051ca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80051a0:	f107 0314 	add.w	r3, r7, #20
 80051a4:	3304      	adds	r3, #4
 80051a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a8:	4619      	mov	r1, r3
 80051aa:	68b8      	ldr	r0, [r7, #8]
 80051ac:	f000 fbc4 	bl	8005938 <xQueueReceive>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d102      	bne.n	80051bc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80051b6:	2310      	movs	r3, #16
 80051b8:	617b      	str	r3, [r7, #20]
 80051ba:	e006      	b.n	80051ca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <osMessageGet+0xc6>
 80051c2:	2300      	movs	r3, #0
 80051c4:	e000      	b.n	80051c8 <osMessageGet+0xc8>
 80051c6:	2340      	movs	r3, #64	; 0x40
 80051c8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	461c      	mov	r4, r3
 80051ce:	f107 0314 	add.w	r3, r7, #20
 80051d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80051d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	372c      	adds	r7, #44	; 0x2c
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd90      	pop	{r4, r7, pc}
 80051e2:	bf00      	nop
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f103 0208 	add.w	r2, r3, #8
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005200:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f103 0208 	add.w	r2, r3, #8
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f103 0208 	add.w	r2, r3, #8
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	601a      	str	r2, [r3, #0]
}
 800527e:	bf00      	nop
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800528a:	b480      	push	{r7}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d103      	bne.n	80052aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	e00c      	b.n	80052c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3308      	adds	r3, #8
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	e002      	b.n	80052b8 <vListInsert+0x2e>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d2f6      	bcs.n	80052b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	601a      	str	r2, [r3, #0]
}
 80052f0:	bf00      	nop
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6892      	ldr	r2, [r2, #8]
 8005312:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6852      	ldr	r2, [r2, #4]
 800531c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	429a      	cmp	r2, r3
 8005326:	d103      	bne.n	8005330 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	1e5a      	subs	r2, r3, #1
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10c      	bne.n	800537e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	b672      	cpsid	i
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	b662      	cpsie	i
 8005378:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800537a:	bf00      	nop
 800537c:	e7fe      	b.n	800537c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800537e:	f001 fd55 	bl	8006e2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538a:	68f9      	ldr	r1, [r7, #12]
 800538c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800538e:	fb01 f303 	mul.w	r3, r1, r3
 8005392:	441a      	add	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ae:	3b01      	subs	r3, #1
 80053b0:	68f9      	ldr	r1, [r7, #12]
 80053b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	441a      	add	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	22ff      	movs	r2, #255	; 0xff
 80053c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	22ff      	movs	r2, #255	; 0xff
 80053ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d114      	bne.n	80053fe <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01a      	beq.n	8005412 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3310      	adds	r3, #16
 80053e0:	4618      	mov	r0, r3
 80053e2:	f001 f945 	bl	8006670 <xTaskRemoveFromEventList>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d012      	beq.n	8005412 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053ec:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <xQueueGenericReset+0xd0>)
 80053ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	e009      	b.n	8005412 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3310      	adds	r3, #16
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff fef0 	bl	80051e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3324      	adds	r3, #36	; 0x24
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff feeb 	bl	80051e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005412:	f001 fd3f 	bl	8006e94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005416:	2301      	movs	r3, #1
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08e      	sub	sp, #56	; 0x38
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10c      	bne.n	8005452 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	b672      	cpsid	i
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	b662      	cpsie	i
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10c      	bne.n	8005472 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	b672      	cpsid	i
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	b662      	cpsie	i
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800546e:	bf00      	nop
 8005470:	e7fe      	b.n	8005470 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <xQueueGenericCreateStatic+0x5a>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <xQueueGenericCreateStatic+0x5e>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <xQueueGenericCreateStatic+0x60>
 8005482:	2300      	movs	r3, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10c      	bne.n	80054a2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	b672      	cpsid	i
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	b662      	cpsie	i
 800549c:	623b      	str	r3, [r7, #32]
}
 800549e:	bf00      	nop
 80054a0:	e7fe      	b.n	80054a0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <xQueueGenericCreateStatic+0x8a>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <xQueueGenericCreateStatic+0x8e>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <xQueueGenericCreateStatic+0x90>
 80054b2:	2300      	movs	r3, #0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10c      	bne.n	80054d2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	b672      	cpsid	i
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	b662      	cpsie	i
 80054cc:	61fb      	str	r3, [r7, #28]
}
 80054ce:	bf00      	nop
 80054d0:	e7fe      	b.n	80054d0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054d2:	2348      	movs	r3, #72	; 0x48
 80054d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b48      	cmp	r3, #72	; 0x48
 80054da:	d00c      	beq.n	80054f6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	b672      	cpsid	i
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	b662      	cpsie	i
 80054f0:	61bb      	str	r3, [r7, #24]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80054f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00d      	beq.n	800551e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800550a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	4613      	mov	r3, r2
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f847 	bl	80055ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005520:	4618      	mov	r0, r3
 8005522:	3730      	adds	r7, #48	; 0x30
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af02      	add	r7, sp, #8
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	4613      	mov	r3, r2
 8005534:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10c      	bne.n	8005556 <xQueueGenericCreate+0x2e>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	b672      	cpsid	i
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	b662      	cpsie	i
 8005550:	613b      	str	r3, [r7, #16]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d102      	bne.n	8005562 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800555c:	2300      	movs	r3, #0
 800555e:	61fb      	str	r3, [r7, #28]
 8005560:	e004      	b.n	800556c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	3348      	adds	r3, #72	; 0x48
 8005570:	4618      	mov	r0, r3
 8005572:	f001 fd87 	bl	8007084 <pvPortMalloc>
 8005576:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d011      	beq.n	80055a2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	3348      	adds	r3, #72	; 0x48
 8005586:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005590:	79fa      	ldrb	r2, [r7, #7]
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	4613      	mov	r3, r2
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f805 	bl	80055ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055a2:	69bb      	ldr	r3, [r7, #24]
	}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3720      	adds	r7, #32
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d103      	bne.n	80055c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	e002      	b.n	80055ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055da:	2101      	movs	r1, #1
 80055dc:	69b8      	ldr	r0, [r7, #24]
 80055de:	f7ff feb7 	bl	8005350 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055e2:	bf00      	nop
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08e      	sub	sp, #56	; 0x38
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055fa:	2300      	movs	r3, #0
 80055fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10c      	bne.n	8005622 <xQueueGenericSend+0x36>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	b672      	cpsid	i
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	b662      	cpsie	i
 800561c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d103      	bne.n	8005630 <xQueueGenericSend+0x44>
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <xQueueGenericSend+0x48>
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <xQueueGenericSend+0x4a>
 8005634:	2300      	movs	r3, #0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10c      	bne.n	8005654 <xQueueGenericSend+0x68>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	b672      	cpsid	i
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	b662      	cpsie	i
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005650:	bf00      	nop
 8005652:	e7fe      	b.n	8005652 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d103      	bne.n	8005662 <xQueueGenericSend+0x76>
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <xQueueGenericSend+0x7a>
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <xQueueGenericSend+0x7c>
 8005666:	2300      	movs	r3, #0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10c      	bne.n	8005686 <xQueueGenericSend+0x9a>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	b672      	cpsid	i
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	b662      	cpsie	i
 8005680:	623b      	str	r3, [r7, #32]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005686:	f001 f9b7 	bl	80069f8 <xTaskGetSchedulerState>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d102      	bne.n	8005696 <xQueueGenericSend+0xaa>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <xQueueGenericSend+0xae>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <xQueueGenericSend+0xb0>
 800569a:	2300      	movs	r3, #0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10c      	bne.n	80056ba <xQueueGenericSend+0xce>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	b672      	cpsid	i
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	b662      	cpsie	i
 80056b4:	61fb      	str	r3, [r7, #28]
}
 80056b6:	bf00      	nop
 80056b8:	e7fe      	b.n	80056b8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ba:	f001 fbb7 	bl	8006e2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d302      	bcc.n	80056d0 <xQueueGenericSend+0xe4>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d129      	bne.n	8005724 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056d6:	f000 fa9b 	bl	8005c10 <prvCopyDataToQueue>
 80056da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d010      	beq.n	8005706 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	3324      	adds	r3, #36	; 0x24
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 ffc1 	bl	8006670 <xTaskRemoveFromEventList>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d013      	beq.n	800571c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056f4:	4b3f      	ldr	r3, [pc, #252]	; (80057f4 <xQueueGenericSend+0x208>)
 80056f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	e00a      	b.n	800571c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800570c:	4b39      	ldr	r3, [pc, #228]	; (80057f4 <xQueueGenericSend+0x208>)
 800570e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800571c:	f001 fbba 	bl	8006e94 <vPortExitCritical>
				return pdPASS;
 8005720:	2301      	movs	r3, #1
 8005722:	e063      	b.n	80057ec <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d103      	bne.n	8005732 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800572a:	f001 fbb3 	bl	8006e94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800572e:	2300      	movs	r3, #0
 8005730:	e05c      	b.n	80057ec <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005738:	f107 0314 	add.w	r3, r7, #20
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fffb 	bl	8006738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005742:	2301      	movs	r3, #1
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005746:	f001 fba5 	bl	8006e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800574a:	f000 fda7 	bl	800629c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800574e:	f001 fb6d 	bl	8006e2c <vPortEnterCritical>
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005758:	b25b      	sxtb	r3, r3
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d103      	bne.n	8005768 <xQueueGenericSend+0x17c>
 8005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800576e:	b25b      	sxtb	r3, r3
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d103      	bne.n	800577e <xQueueGenericSend+0x192>
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800577e:	f001 fb89 	bl	8006e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005782:	1d3a      	adds	r2, r7, #4
 8005784:	f107 0314 	add.w	r3, r7, #20
 8005788:	4611      	mov	r1, r2
 800578a:	4618      	mov	r0, r3
 800578c:	f000 ffea 	bl	8006764 <xTaskCheckForTimeOut>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d124      	bne.n	80057e0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005798:	f000 fb32 	bl	8005e00 <prvIsQueueFull>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d018      	beq.n	80057d4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	3310      	adds	r3, #16
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	4611      	mov	r1, r2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 ff3a 	bl	8006624 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057b2:	f000 fabd 	bl	8005d30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057b6:	f000 fd7f 	bl	80062b8 <xTaskResumeAll>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f47f af7c 	bne.w	80056ba <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80057c2:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <xQueueGenericSend+0x208>)
 80057c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	e772      	b.n	80056ba <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057d6:	f000 faab 	bl	8005d30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057da:	f000 fd6d 	bl	80062b8 <xTaskResumeAll>
 80057de:	e76c      	b.n	80056ba <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057e2:	f000 faa5 	bl	8005d30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057e6:	f000 fd67 	bl	80062b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3738      	adds	r7, #56	; 0x38
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	e000ed04 	.word	0xe000ed04

080057f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08e      	sub	sp, #56	; 0x38
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10c      	bne.n	800582a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	b672      	cpsid	i
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	b662      	cpsie	i
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005826:	bf00      	nop
 8005828:	e7fe      	b.n	8005828 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d103      	bne.n	8005838 <xQueueGenericSendFromISR+0x40>
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <xQueueGenericSendFromISR+0x44>
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <xQueueGenericSendFromISR+0x46>
 800583c:	2300      	movs	r3, #0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10c      	bne.n	800585c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005846:	b672      	cpsid	i
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	b662      	cpsie	i
 8005856:	623b      	str	r3, [r7, #32]
}
 8005858:	bf00      	nop
 800585a:	e7fe      	b.n	800585a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d103      	bne.n	800586a <xQueueGenericSendFromISR+0x72>
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <xQueueGenericSendFromISR+0x76>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <xQueueGenericSendFromISR+0x78>
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10c      	bne.n	800588e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	b672      	cpsid	i
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	b662      	cpsie	i
 8005888:	61fb      	str	r3, [r7, #28]
}
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800588e:	f001 fbb5 	bl	8006ffc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005892:	f3ef 8211 	mrs	r2, BASEPRI
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	b672      	cpsid	i
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	b662      	cpsie	i
 80058aa:	61ba      	str	r2, [r7, #24]
 80058ac:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058ae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d302      	bcc.n	80058c4 <xQueueGenericSendFromISR+0xcc>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d12c      	bne.n	800591e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058d4:	f000 f99c 	bl	8005c10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058d8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e0:	d112      	bne.n	8005908 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d016      	beq.n	8005918 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	3324      	adds	r3, #36	; 0x24
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 febe 	bl	8006670 <xTaskRemoveFromEventList>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00e      	beq.n	8005918 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00b      	beq.n	8005918 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	e007      	b.n	8005918 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005908:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800590c:	3301      	adds	r3, #1
 800590e:	b2db      	uxtb	r3, r3
 8005910:	b25a      	sxtb	r2, r3
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005918:	2301      	movs	r3, #1
 800591a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800591c:	e001      	b.n	8005922 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800591e:	2300      	movs	r3, #0
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800592c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800592e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005930:	4618      	mov	r0, r3
 8005932:	3738      	adds	r7, #56	; 0x38
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08c      	sub	sp, #48	; 0x30
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005944:	2300      	movs	r3, #0
 8005946:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10c      	bne.n	800596c <xQueueReceive+0x34>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	b672      	cpsid	i
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	b662      	cpsie	i
 8005966:	623b      	str	r3, [r7, #32]
}
 8005968:	bf00      	nop
 800596a:	e7fe      	b.n	800596a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <xQueueReceive+0x42>
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <xQueueReceive+0x46>
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <xQueueReceive+0x48>
 800597e:	2300      	movs	r3, #0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10c      	bne.n	800599e <xQueueReceive+0x66>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	b672      	cpsid	i
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	b662      	cpsie	i
 8005998:	61fb      	str	r3, [r7, #28]
}
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800599e:	f001 f82b 	bl	80069f8 <xTaskGetSchedulerState>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <xQueueReceive+0x76>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <xQueueReceive+0x7a>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <xQueueReceive+0x7c>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10c      	bne.n	80059d2 <xQueueReceive+0x9a>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	b672      	cpsid	i
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	b662      	cpsie	i
 80059cc:	61bb      	str	r3, [r7, #24]
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059d2:	f001 fa2b 	bl	8006e2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01f      	beq.n	8005a22 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059e6:	f000 f97d 	bl	8005ce4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	1e5a      	subs	r2, r3, #1
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00f      	beq.n	8005a1a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	3310      	adds	r3, #16
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fe36 	bl	8006670 <xTaskRemoveFromEventList>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a0a:	4b3d      	ldr	r3, [pc, #244]	; (8005b00 <xQueueReceive+0x1c8>)
 8005a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a1a:	f001 fa3b 	bl	8006e94 <vPortExitCritical>
				return pdPASS;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e069      	b.n	8005af6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d103      	bne.n	8005a30 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a28:	f001 fa34 	bl	8006e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e062      	b.n	8005af6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a36:	f107 0310 	add.w	r3, r7, #16
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fe7c 	bl	8006738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a40:	2301      	movs	r3, #1
 8005a42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a44:	f001 fa26 	bl	8006e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a48:	f000 fc28 	bl	800629c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a4c:	f001 f9ee 	bl	8006e2c <vPortEnterCritical>
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a56:	b25b      	sxtb	r3, r3
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5c:	d103      	bne.n	8005a66 <xQueueReceive+0x12e>
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a6c:	b25b      	sxtb	r3, r3
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d103      	bne.n	8005a7c <xQueueReceive+0x144>
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a7c:	f001 fa0a 	bl	8006e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a80:	1d3a      	adds	r2, r7, #4
 8005a82:	f107 0310 	add.w	r3, r7, #16
 8005a86:	4611      	mov	r1, r2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 fe6b 	bl	8006764 <xTaskCheckForTimeOut>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d123      	bne.n	8005adc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a96:	f000 f99d 	bl	8005dd4 <prvIsQueueEmpty>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d017      	beq.n	8005ad0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa2:	3324      	adds	r3, #36	; 0x24
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fdbb 	bl	8006624 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab0:	f000 f93e 	bl	8005d30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ab4:	f000 fc00 	bl	80062b8 <xTaskResumeAll>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d189      	bne.n	80059d2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005abe:	4b10      	ldr	r3, [pc, #64]	; (8005b00 <xQueueReceive+0x1c8>)
 8005ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	e780      	b.n	80059d2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ad2:	f000 f92d 	bl	8005d30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ad6:	f000 fbef 	bl	80062b8 <xTaskResumeAll>
 8005ada:	e77a      	b.n	80059d2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ade:	f000 f927 	bl	8005d30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ae2:	f000 fbe9 	bl	80062b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae8:	f000 f974 	bl	8005dd4 <prvIsQueueEmpty>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f43f af6f 	beq.w	80059d2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005af4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3730      	adds	r7, #48	; 0x30
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	e000ed04 	.word	0xe000ed04

08005b04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08e      	sub	sp, #56	; 0x38
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10c      	bne.n	8005b34 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	b672      	cpsid	i
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	b662      	cpsie	i
 8005b2e:	623b      	str	r3, [r7, #32]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d103      	bne.n	8005b42 <xQueueReceiveFromISR+0x3e>
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <xQueueReceiveFromISR+0x42>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <xQueueReceiveFromISR+0x44>
 8005b46:	2300      	movs	r3, #0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10c      	bne.n	8005b66 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	b672      	cpsid	i
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	b662      	cpsie	i
 8005b60:	61fb      	str	r3, [r7, #28]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b66:	f001 fa49 	bl	8006ffc <vPortValidateInterruptPriority>
	__asm volatile
 8005b6a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	b672      	cpsid	i
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	b662      	cpsie	i
 8005b82:	61ba      	str	r2, [r7, #24]
 8005b84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005b86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d02f      	beq.n	8005bf6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ba4:	f000 f89e 	bl	8005ce4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	1e5a      	subs	r2, r3, #1
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005bb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d112      	bne.n	8005be0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d016      	beq.n	8005bf0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	3310      	adds	r3, #16
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fd52 	bl	8006670 <xTaskRemoveFromEventList>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00e      	beq.n	8005bf0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e007      	b.n	8005bf0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005be4:	3301      	adds	r3, #1
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	b25a      	sxtb	r2, r3
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf4:	e001      	b.n	8005bfa <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f383 8811 	msr	BASEPRI, r3
}
 8005c04:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3738      	adds	r7, #56	; 0x38
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10d      	bne.n	8005c4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d14d      	bne.n	8005cd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fefa 	bl	8006a34 <xTaskPriorityDisinherit>
 8005c40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	609a      	str	r2, [r3, #8]
 8005c48:	e043      	b.n	8005cd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d119      	bne.n	8005c84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6858      	ldr	r0, [r3, #4]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	461a      	mov	r2, r3
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	f001 fc22 	bl	80074a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c68:	441a      	add	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d32b      	bcc.n	8005cd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	605a      	str	r2, [r3, #4]
 8005c82:	e026      	b.n	8005cd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	68d8      	ldr	r0, [r3, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	f001 fc08 	bl	80074a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	425b      	negs	r3, r3
 8005c9e:	441a      	add	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d207      	bcs.n	8005cc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	425b      	negs	r3, r3
 8005cba:	441a      	add	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d105      	bne.n	8005cd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005cda:	697b      	ldr	r3, [r7, #20]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d018      	beq.n	8005d28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	441a      	add	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d303      	bcc.n	8005d18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68d9      	ldr	r1, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d20:	461a      	mov	r2, r3
 8005d22:	6838      	ldr	r0, [r7, #0]
 8005d24:	f001 fbbe 	bl	80074a4 <memcpy>
	}
}
 8005d28:	bf00      	nop
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d38:	f001 f878 	bl	8006e2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d44:	e011      	b.n	8005d6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d012      	beq.n	8005d74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3324      	adds	r3, #36	; 0x24
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fc8c 	bl	8006670 <xTaskRemoveFromEventList>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d5e:	f000 fd67 	bl	8006830 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	dce9      	bgt.n	8005d46 <prvUnlockQueue+0x16>
 8005d72:	e000      	b.n	8005d76 <prvUnlockQueue+0x46>
					break;
 8005d74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	22ff      	movs	r2, #255	; 0xff
 8005d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d7e:	f001 f889 	bl	8006e94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d82:	f001 f853 	bl	8006e2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d8e:	e011      	b.n	8005db4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d012      	beq.n	8005dbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3310      	adds	r3, #16
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 fc67 	bl	8006670 <xTaskRemoveFromEventList>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005da8:	f000 fd42 	bl	8006830 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dac:	7bbb      	ldrb	r3, [r7, #14]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005db4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	dce9      	bgt.n	8005d90 <prvUnlockQueue+0x60>
 8005dbc:	e000      	b.n	8005dc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005dbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	22ff      	movs	r2, #255	; 0xff
 8005dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005dc8:	f001 f864 	bl	8006e94 <vPortExitCritical>
}
 8005dcc:	bf00      	nop
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ddc:	f001 f826 	bl	8006e2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d102      	bne.n	8005dee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005de8:	2301      	movs	r3, #1
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	e001      	b.n	8005df2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005df2:	f001 f84f 	bl	8006e94 <vPortExitCritical>

	return xReturn;
 8005df6:	68fb      	ldr	r3, [r7, #12]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e08:	f001 f810 	bl	8006e2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d102      	bne.n	8005e1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	e001      	b.n	8005e22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e22:	f001 f837 	bl	8006e94 <vPortExitCritical>

	return xReturn;
 8005e26:	68fb      	ldr	r3, [r7, #12]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08e      	sub	sp, #56	; 0x38
 8005e34:	af04      	add	r7, sp, #16
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10c      	bne.n	8005e5e <xTaskCreateStatic+0x2e>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	b672      	cpsid	i
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	b662      	cpsie	i
 8005e58:	623b      	str	r3, [r7, #32]
}
 8005e5a:	bf00      	nop
 8005e5c:	e7fe      	b.n	8005e5c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10c      	bne.n	8005e7e <xTaskCreateStatic+0x4e>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	b672      	cpsid	i
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	b662      	cpsie	i
 8005e78:	61fb      	str	r3, [r7, #28]
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e7e:	2354      	movs	r3, #84	; 0x54
 8005e80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b54      	cmp	r3, #84	; 0x54
 8005e86:	d00c      	beq.n	8005ea2 <xTaskCreateStatic+0x72>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	b672      	cpsid	i
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	b662      	cpsie	i
 8005e9c:	61bb      	str	r3, [r7, #24]
}
 8005e9e:	bf00      	nop
 8005ea0:	e7fe      	b.n	8005ea0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ea2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d01e      	beq.n	8005ee8 <xTaskCreateStatic+0xb8>
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01b      	beq.n	8005ee8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	9303      	str	r3, [sp, #12]
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	9302      	str	r3, [sp, #8]
 8005eca:	f107 0314 	add.w	r3, r7, #20
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f850 	bl	8005f80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ee2:	f000 f8d7 	bl	8006094 <prvAddNewTaskToReadyList>
 8005ee6:	e001      	b.n	8005eec <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005eec:	697b      	ldr	r3, [r7, #20]
	}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3728      	adds	r7, #40	; 0x28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b08c      	sub	sp, #48	; 0x30
 8005efa:	af04      	add	r7, sp, #16
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
 8005f00:	603b      	str	r3, [r7, #0]
 8005f02:	4613      	mov	r3, r2
 8005f04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 f8ba 	bl	8007084 <pvPortMalloc>
 8005f10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00e      	beq.n	8005f36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f18:	2054      	movs	r0, #84	; 0x54
 8005f1a:	f001 f8b3 	bl	8007084 <pvPortMalloc>
 8005f1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f2c:	e005      	b.n	8005f3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f2e:	6978      	ldr	r0, [r7, #20]
 8005f30:	f001 f972 	bl	8007218 <vPortFree>
 8005f34:	e001      	b.n	8005f3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d017      	beq.n	8005f70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f48:	88fa      	ldrh	r2, [r7, #6]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	9303      	str	r3, [sp, #12]
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	9302      	str	r3, [sp, #8]
 8005f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 f80e 	bl	8005f80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f64:	69f8      	ldr	r0, [r7, #28]
 8005f66:	f000 f895 	bl	8006094 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	e002      	b.n	8005f76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f70:	f04f 33ff 	mov.w	r3, #4294967295
 8005f74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f76:	69bb      	ldr	r3, [r7, #24]
	}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005f98:	440b      	add	r3, r1
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	f023 0307 	bic.w	r3, r3, #7
 8005fa6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	f003 0307 	and.w	r3, r3, #7
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00c      	beq.n	8005fcc <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb6:	b672      	cpsid	i
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	b662      	cpsie	i
 8005fc6:	617b      	str	r3, [r7, #20]
}
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d01f      	beq.n	8006012 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	61fb      	str	r3, [r7, #28]
 8005fd6:	e012      	b.n	8005ffe <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	7819      	ldrb	r1, [r3, #0]
 8005fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	3334      	adds	r3, #52	; 0x34
 8005fe8:	460a      	mov	r2, r1
 8005fea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d006      	beq.n	8006006 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	61fb      	str	r3, [r7, #28]
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b0f      	cmp	r3, #15
 8006002:	d9e9      	bls.n	8005fd8 <prvInitialiseNewTask+0x58>
 8006004:	e000      	b.n	8006008 <prvInitialiseNewTask+0x88>
			{
				break;
 8006006:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006010:	e003      	b.n	800601a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	2b06      	cmp	r3, #6
 800601e:	d901      	bls.n	8006024 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006020:	2306      	movs	r3, #6
 8006022:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006028:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800602e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	2200      	movs	r2, #0
 8006034:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	3304      	adds	r3, #4
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff f8f4 	bl	8005228 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	3318      	adds	r3, #24
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff f8ef 	bl	8005228 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800604e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	f1c3 0207 	rsb	r2, r3, #7
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	2200      	movs	r2, #0
 8006064:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	68f9      	ldr	r1, [r7, #12]
 8006072:	69b8      	ldr	r0, [r7, #24]
 8006074:	f000 fdce 	bl	8006c14 <pxPortInitialiseStack>
 8006078:	4602      	mov	r2, r0
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006088:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800608a:	bf00      	nop
 800608c:	3720      	adds	r7, #32
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800609c:	f000 fec6 	bl	8006e2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060a0:	4b2a      	ldr	r3, [pc, #168]	; (800614c <prvAddNewTaskToReadyList+0xb8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	4a29      	ldr	r2, [pc, #164]	; (800614c <prvAddNewTaskToReadyList+0xb8>)
 80060a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060aa:	4b29      	ldr	r3, [pc, #164]	; (8006150 <prvAddNewTaskToReadyList+0xbc>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060b2:	4a27      	ldr	r2, [pc, #156]	; (8006150 <prvAddNewTaskToReadyList+0xbc>)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060b8:	4b24      	ldr	r3, [pc, #144]	; (800614c <prvAddNewTaskToReadyList+0xb8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d110      	bne.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060c0:	f000 fbda 	bl	8006878 <prvInitialiseTaskLists>
 80060c4:	e00d      	b.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060c6:	4b23      	ldr	r3, [pc, #140]	; (8006154 <prvAddNewTaskToReadyList+0xc0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060ce:	4b20      	ldr	r3, [pc, #128]	; (8006150 <prvAddNewTaskToReadyList+0xbc>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	429a      	cmp	r2, r3
 80060da:	d802      	bhi.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060dc:	4a1c      	ldr	r2, [pc, #112]	; (8006150 <prvAddNewTaskToReadyList+0xbc>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060e2:	4b1d      	ldr	r3, [pc, #116]	; (8006158 <prvAddNewTaskToReadyList+0xc4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3301      	adds	r3, #1
 80060e8:	4a1b      	ldr	r2, [pc, #108]	; (8006158 <prvAddNewTaskToReadyList+0xc4>)
 80060ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	2201      	movs	r2, #1
 80060f2:	409a      	lsls	r2, r3
 80060f4:	4b19      	ldr	r3, [pc, #100]	; (800615c <prvAddNewTaskToReadyList+0xc8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	4a18      	ldr	r2, [pc, #96]	; (800615c <prvAddNewTaskToReadyList+0xc8>)
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4a15      	ldr	r2, [pc, #84]	; (8006160 <prvAddNewTaskToReadyList+0xcc>)
 800610c:	441a      	add	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3304      	adds	r3, #4
 8006112:	4619      	mov	r1, r3
 8006114:	4610      	mov	r0, r2
 8006116:	f7ff f894 	bl	8005242 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800611a:	f000 febb 	bl	8006e94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800611e:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <prvAddNewTaskToReadyList+0xc0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00e      	beq.n	8006144 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006126:	4b0a      	ldr	r3, [pc, #40]	; (8006150 <prvAddNewTaskToReadyList+0xbc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	429a      	cmp	r2, r3
 8006132:	d207      	bcs.n	8006144 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006134:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <prvAddNewTaskToReadyList+0xd0>)
 8006136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20000bfc 	.word	0x20000bfc
 8006150:	20000afc 	.word	0x20000afc
 8006154:	20000c08 	.word	0x20000c08
 8006158:	20000c18 	.word	0x20000c18
 800615c:	20000c04 	.word	0x20000c04
 8006160:	20000b00 	.word	0x20000b00
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006170:	2300      	movs	r3, #0
 8006172:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d019      	beq.n	80061ae <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800617a:	4b14      	ldr	r3, [pc, #80]	; (80061cc <vTaskDelay+0x64>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00c      	beq.n	800619c <vTaskDelay+0x34>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	b672      	cpsid	i
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	b662      	cpsie	i
 8006196:	60bb      	str	r3, [r7, #8]
}
 8006198:	bf00      	nop
 800619a:	e7fe      	b.n	800619a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800619c:	f000 f87e 	bl	800629c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061a0:	2100      	movs	r1, #0
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fcd0 	bl	8006b48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061a8:	f000 f886 	bl	80062b8 <xTaskResumeAll>
 80061ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d107      	bne.n	80061c4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80061b4:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <vTaskDelay+0x68>)
 80061b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20000c24 	.word	0x20000c24
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08a      	sub	sp, #40	; 0x28
 80061d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061da:	2300      	movs	r3, #0
 80061dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061e2:	463a      	mov	r2, r7
 80061e4:	1d39      	adds	r1, r7, #4
 80061e6:	f107 0308 	add.w	r3, r7, #8
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fa f98e 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	9202      	str	r2, [sp, #8]
 80061f8:	9301      	str	r3, [sp, #4]
 80061fa:	2300      	movs	r3, #0
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	2300      	movs	r3, #0
 8006200:	460a      	mov	r2, r1
 8006202:	4920      	ldr	r1, [pc, #128]	; (8006284 <vTaskStartScheduler+0xb0>)
 8006204:	4820      	ldr	r0, [pc, #128]	; (8006288 <vTaskStartScheduler+0xb4>)
 8006206:	f7ff fe13 	bl	8005e30 <xTaskCreateStatic>
 800620a:	4603      	mov	r3, r0
 800620c:	4a1f      	ldr	r2, [pc, #124]	; (800628c <vTaskStartScheduler+0xb8>)
 800620e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006210:	4b1e      	ldr	r3, [pc, #120]	; (800628c <vTaskStartScheduler+0xb8>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006218:	2301      	movs	r3, #1
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e001      	b.n	8006222 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d118      	bne.n	800625a <vTaskStartScheduler+0x86>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	b672      	cpsid	i
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	b662      	cpsie	i
 800623c:	613b      	str	r3, [r7, #16]
}
 800623e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006240:	4b13      	ldr	r3, [pc, #76]	; (8006290 <vTaskStartScheduler+0xbc>)
 8006242:	f04f 32ff 	mov.w	r2, #4294967295
 8006246:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006248:	4b12      	ldr	r3, [pc, #72]	; (8006294 <vTaskStartScheduler+0xc0>)
 800624a:	2201      	movs	r2, #1
 800624c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800624e:	4b12      	ldr	r3, [pc, #72]	; (8006298 <vTaskStartScheduler+0xc4>)
 8006250:	2200      	movs	r2, #0
 8006252:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006254:	f000 fd6c 	bl	8006d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006258:	e010      	b.n	800627c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006260:	d10c      	bne.n	800627c <vTaskStartScheduler+0xa8>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	b672      	cpsid	i
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	b662      	cpsie	i
 8006276:	60fb      	str	r3, [r7, #12]
}
 8006278:	bf00      	nop
 800627a:	e7fe      	b.n	800627a <vTaskStartScheduler+0xa6>
}
 800627c:	bf00      	nop
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	080075d4 	.word	0x080075d4
 8006288:	08006849 	.word	0x08006849
 800628c:	20000c20 	.word	0x20000c20
 8006290:	20000c1c 	.word	0x20000c1c
 8006294:	20000c08 	.word	0x20000c08
 8006298:	20000c00 	.word	0x20000c00

0800629c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80062a0:	4b04      	ldr	r3, [pc, #16]	; (80062b4 <vTaskSuspendAll+0x18>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	4a03      	ldr	r2, [pc, #12]	; (80062b4 <vTaskSuspendAll+0x18>)
 80062a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80062aa:	bf00      	nop
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	20000c24 	.word	0x20000c24

080062b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062c6:	4b42      	ldr	r3, [pc, #264]	; (80063d0 <xTaskResumeAll+0x118>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10c      	bne.n	80062e8 <xTaskResumeAll+0x30>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	b672      	cpsid	i
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	b662      	cpsie	i
 80062e2:	603b      	str	r3, [r7, #0]
}
 80062e4:	bf00      	nop
 80062e6:	e7fe      	b.n	80062e6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062e8:	f000 fda0 	bl	8006e2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062ec:	4b38      	ldr	r3, [pc, #224]	; (80063d0 <xTaskResumeAll+0x118>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	4a37      	ldr	r2, [pc, #220]	; (80063d0 <xTaskResumeAll+0x118>)
 80062f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062f6:	4b36      	ldr	r3, [pc, #216]	; (80063d0 <xTaskResumeAll+0x118>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d161      	bne.n	80063c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062fe:	4b35      	ldr	r3, [pc, #212]	; (80063d4 <xTaskResumeAll+0x11c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d05d      	beq.n	80063c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006306:	e02e      	b.n	8006366 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006308:	4b33      	ldr	r3, [pc, #204]	; (80063d8 <xTaskResumeAll+0x120>)
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3318      	adds	r3, #24
 8006314:	4618      	mov	r0, r3
 8006316:	f7fe fff1 	bl	80052fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3304      	adds	r3, #4
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe ffec 	bl	80052fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	2201      	movs	r2, #1
 800632a:	409a      	lsls	r2, r3
 800632c:	4b2b      	ldr	r3, [pc, #172]	; (80063dc <xTaskResumeAll+0x124>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4313      	orrs	r3, r2
 8006332:	4a2a      	ldr	r2, [pc, #168]	; (80063dc <xTaskResumeAll+0x124>)
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633a:	4613      	mov	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4a27      	ldr	r2, [pc, #156]	; (80063e0 <xTaskResumeAll+0x128>)
 8006344:	441a      	add	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3304      	adds	r3, #4
 800634a:	4619      	mov	r1, r3
 800634c:	4610      	mov	r0, r2
 800634e:	f7fe ff78 	bl	8005242 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006356:	4b23      	ldr	r3, [pc, #140]	; (80063e4 <xTaskResumeAll+0x12c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	429a      	cmp	r2, r3
 800635e:	d302      	bcc.n	8006366 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006360:	4b21      	ldr	r3, [pc, #132]	; (80063e8 <xTaskResumeAll+0x130>)
 8006362:	2201      	movs	r2, #1
 8006364:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006366:	4b1c      	ldr	r3, [pc, #112]	; (80063d8 <xTaskResumeAll+0x120>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1cc      	bne.n	8006308 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006374:	f000 fb20 	bl	80069b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006378:	4b1c      	ldr	r3, [pc, #112]	; (80063ec <xTaskResumeAll+0x134>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d010      	beq.n	80063a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006384:	f000 f836 	bl	80063f4 <xTaskIncrementTick>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800638e:	4b16      	ldr	r3, [pc, #88]	; (80063e8 <xTaskResumeAll+0x130>)
 8006390:	2201      	movs	r2, #1
 8006392:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3b01      	subs	r3, #1
 8006398:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f1      	bne.n	8006384 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80063a0:	4b12      	ldr	r3, [pc, #72]	; (80063ec <xTaskResumeAll+0x134>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <xTaskResumeAll+0x130>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d009      	beq.n	80063c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063ae:	2301      	movs	r3, #1
 80063b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063b2:	4b0f      	ldr	r3, [pc, #60]	; (80063f0 <xTaskResumeAll+0x138>)
 80063b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063c2:	f000 fd67 	bl	8006e94 <vPortExitCritical>

	return xAlreadyYielded;
 80063c6:	68bb      	ldr	r3, [r7, #8]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	20000c24 	.word	0x20000c24
 80063d4:	20000bfc 	.word	0x20000bfc
 80063d8:	20000bbc 	.word	0x20000bbc
 80063dc:	20000c04 	.word	0x20000c04
 80063e0:	20000b00 	.word	0x20000b00
 80063e4:	20000afc 	.word	0x20000afc
 80063e8:	20000c10 	.word	0x20000c10
 80063ec:	20000c0c 	.word	0x20000c0c
 80063f0:	e000ed04 	.word	0xe000ed04

080063f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063fe:	4b4f      	ldr	r3, [pc, #316]	; (800653c <xTaskIncrementTick+0x148>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	f040 808a 	bne.w	800651c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006408:	4b4d      	ldr	r3, [pc, #308]	; (8006540 <xTaskIncrementTick+0x14c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3301      	adds	r3, #1
 800640e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006410:	4a4b      	ldr	r2, [pc, #300]	; (8006540 <xTaskIncrementTick+0x14c>)
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d122      	bne.n	8006462 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800641c:	4b49      	ldr	r3, [pc, #292]	; (8006544 <xTaskIncrementTick+0x150>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00c      	beq.n	8006440 <xTaskIncrementTick+0x4c>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	b672      	cpsid	i
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	b662      	cpsie	i
 800643a:	603b      	str	r3, [r7, #0]
}
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <xTaskIncrementTick+0x4a>
 8006440:	4b40      	ldr	r3, [pc, #256]	; (8006544 <xTaskIncrementTick+0x150>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	4b40      	ldr	r3, [pc, #256]	; (8006548 <xTaskIncrementTick+0x154>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a3e      	ldr	r2, [pc, #248]	; (8006544 <xTaskIncrementTick+0x150>)
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	4a3e      	ldr	r2, [pc, #248]	; (8006548 <xTaskIncrementTick+0x154>)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	4b3d      	ldr	r3, [pc, #244]	; (800654c <xTaskIncrementTick+0x158>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3301      	adds	r3, #1
 800645a:	4a3c      	ldr	r2, [pc, #240]	; (800654c <xTaskIncrementTick+0x158>)
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	f000 faab 	bl	80069b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006462:	4b3b      	ldr	r3, [pc, #236]	; (8006550 <xTaskIncrementTick+0x15c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	429a      	cmp	r2, r3
 800646a:	d348      	bcc.n	80064fe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800646c:	4b35      	ldr	r3, [pc, #212]	; (8006544 <xTaskIncrementTick+0x150>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d104      	bne.n	8006480 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006476:	4b36      	ldr	r3, [pc, #216]	; (8006550 <xTaskIncrementTick+0x15c>)
 8006478:	f04f 32ff 	mov.w	r2, #4294967295
 800647c:	601a      	str	r2, [r3, #0]
					break;
 800647e:	e03e      	b.n	80064fe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006480:	4b30      	ldr	r3, [pc, #192]	; (8006544 <xTaskIncrementTick+0x150>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	429a      	cmp	r2, r3
 8006496:	d203      	bcs.n	80064a0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006498:	4a2d      	ldr	r2, [pc, #180]	; (8006550 <xTaskIncrementTick+0x15c>)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800649e:	e02e      	b.n	80064fe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	3304      	adds	r3, #4
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fe ff29 	bl	80052fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d004      	beq.n	80064bc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	3318      	adds	r3, #24
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe ff20 	bl	80052fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	2201      	movs	r2, #1
 80064c2:	409a      	lsls	r2, r3
 80064c4:	4b23      	ldr	r3, [pc, #140]	; (8006554 <xTaskIncrementTick+0x160>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	4a22      	ldr	r2, [pc, #136]	; (8006554 <xTaskIncrementTick+0x160>)
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4a1f      	ldr	r2, [pc, #124]	; (8006558 <xTaskIncrementTick+0x164>)
 80064dc:	441a      	add	r2, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4619      	mov	r1, r3
 80064e4:	4610      	mov	r0, r2
 80064e6:	f7fe feac 	bl	8005242 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ee:	4b1b      	ldr	r3, [pc, #108]	; (800655c <xTaskIncrementTick+0x168>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d3b9      	bcc.n	800646c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80064f8:	2301      	movs	r3, #1
 80064fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064fc:	e7b6      	b.n	800646c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064fe:	4b17      	ldr	r3, [pc, #92]	; (800655c <xTaskIncrementTick+0x168>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006504:	4914      	ldr	r1, [pc, #80]	; (8006558 <xTaskIncrementTick+0x164>)
 8006506:	4613      	mov	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d907      	bls.n	8006526 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006516:	2301      	movs	r3, #1
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	e004      	b.n	8006526 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800651c:	4b10      	ldr	r3, [pc, #64]	; (8006560 <xTaskIncrementTick+0x16c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3301      	adds	r3, #1
 8006522:	4a0f      	ldr	r2, [pc, #60]	; (8006560 <xTaskIncrementTick+0x16c>)
 8006524:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006526:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <xTaskIncrementTick+0x170>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800652e:	2301      	movs	r3, #1
 8006530:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006532:	697b      	ldr	r3, [r7, #20]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	20000c24 	.word	0x20000c24
 8006540:	20000c00 	.word	0x20000c00
 8006544:	20000bb4 	.word	0x20000bb4
 8006548:	20000bb8 	.word	0x20000bb8
 800654c:	20000c14 	.word	0x20000c14
 8006550:	20000c1c 	.word	0x20000c1c
 8006554:	20000c04 	.word	0x20000c04
 8006558:	20000b00 	.word	0x20000b00
 800655c:	20000afc 	.word	0x20000afc
 8006560:	20000c0c 	.word	0x20000c0c
 8006564:	20000c10 	.word	0x20000c10

08006568 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800656e:	4b28      	ldr	r3, [pc, #160]	; (8006610 <vTaskSwitchContext+0xa8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006576:	4b27      	ldr	r3, [pc, #156]	; (8006614 <vTaskSwitchContext+0xac>)
 8006578:	2201      	movs	r2, #1
 800657a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800657c:	e041      	b.n	8006602 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800657e:	4b25      	ldr	r3, [pc, #148]	; (8006614 <vTaskSwitchContext+0xac>)
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006584:	4b24      	ldr	r3, [pc, #144]	; (8006618 <vTaskSwitchContext+0xb0>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	fab3 f383 	clz	r3, r3
 8006590:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006592:	7afb      	ldrb	r3, [r7, #11]
 8006594:	f1c3 031f 	rsb	r3, r3, #31
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	4920      	ldr	r1, [pc, #128]	; (800661c <vTaskSwitchContext+0xb4>)
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10c      	bne.n	80065c8 <vTaskSwitchContext+0x60>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	b672      	cpsid	i
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	b662      	cpsie	i
 80065c2:	607b      	str	r3, [r7, #4]
}
 80065c4:	bf00      	nop
 80065c6:	e7fe      	b.n	80065c6 <vTaskSwitchContext+0x5e>
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4a12      	ldr	r2, [pc, #72]	; (800661c <vTaskSwitchContext+0xb4>)
 80065d4:	4413      	add	r3, r2
 80065d6:	613b      	str	r3, [r7, #16]
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	605a      	str	r2, [r3, #4]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	3308      	adds	r3, #8
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d104      	bne.n	80065f8 <vTaskSwitchContext+0x90>
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	605a      	str	r2, [r3, #4]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	4a08      	ldr	r2, [pc, #32]	; (8006620 <vTaskSwitchContext+0xb8>)
 8006600:	6013      	str	r3, [r2, #0]
}
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	20000c24 	.word	0x20000c24
 8006614:	20000c10 	.word	0x20000c10
 8006618:	20000c04 	.word	0x20000c04
 800661c:	20000b00 	.word	0x20000b00
 8006620:	20000afc 	.word	0x20000afc

08006624 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10c      	bne.n	800664e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	b672      	cpsid	i
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	b662      	cpsie	i
 8006648:	60fb      	str	r3, [r7, #12]
}
 800664a:	bf00      	nop
 800664c:	e7fe      	b.n	800664c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800664e:	4b07      	ldr	r3, [pc, #28]	; (800666c <vTaskPlaceOnEventList+0x48>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3318      	adds	r3, #24
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fe fe17 	bl	800528a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800665c:	2101      	movs	r1, #1
 800665e:	6838      	ldr	r0, [r7, #0]
 8006660:	f000 fa72 	bl	8006b48 <prvAddCurrentTaskToDelayedList>
}
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20000afc 	.word	0x20000afc

08006670 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10c      	bne.n	80066a0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	b672      	cpsid	i
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	b662      	cpsie	i
 800669a:	60fb      	str	r3, [r7, #12]
}
 800669c:	bf00      	nop
 800669e:	e7fe      	b.n	800669e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	3318      	adds	r3, #24
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fe fe29 	bl	80052fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066aa:	4b1d      	ldr	r3, [pc, #116]	; (8006720 <xTaskRemoveFromEventList+0xb0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d11c      	bne.n	80066ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fe fe20 	bl	80052fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	2201      	movs	r2, #1
 80066c2:	409a      	lsls	r2, r3
 80066c4:	4b17      	ldr	r3, [pc, #92]	; (8006724 <xTaskRemoveFromEventList+0xb4>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	4a16      	ldr	r2, [pc, #88]	; (8006724 <xTaskRemoveFromEventList+0xb4>)
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d2:	4613      	mov	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4a13      	ldr	r2, [pc, #76]	; (8006728 <xTaskRemoveFromEventList+0xb8>)
 80066dc:	441a      	add	r2, r3
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	3304      	adds	r3, #4
 80066e2:	4619      	mov	r1, r3
 80066e4:	4610      	mov	r0, r2
 80066e6:	f7fe fdac 	bl	8005242 <vListInsertEnd>
 80066ea:	e005      	b.n	80066f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	3318      	adds	r3, #24
 80066f0:	4619      	mov	r1, r3
 80066f2:	480e      	ldr	r0, [pc, #56]	; (800672c <xTaskRemoveFromEventList+0xbc>)
 80066f4:	f7fe fda5 	bl	8005242 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fc:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <xTaskRemoveFromEventList+0xc0>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006702:	429a      	cmp	r2, r3
 8006704:	d905      	bls.n	8006712 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006706:	2301      	movs	r3, #1
 8006708:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800670a:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <xTaskRemoveFromEventList+0xc4>)
 800670c:	2201      	movs	r2, #1
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	e001      	b.n	8006716 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006716:	697b      	ldr	r3, [r7, #20]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	20000c24 	.word	0x20000c24
 8006724:	20000c04 	.word	0x20000c04
 8006728:	20000b00 	.word	0x20000b00
 800672c:	20000bbc 	.word	0x20000bbc
 8006730:	20000afc 	.word	0x20000afc
 8006734:	20000c10 	.word	0x20000c10

08006738 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006740:	4b06      	ldr	r3, [pc, #24]	; (800675c <vTaskInternalSetTimeOutState+0x24>)
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006748:	4b05      	ldr	r3, [pc, #20]	; (8006760 <vTaskInternalSetTimeOutState+0x28>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	605a      	str	r2, [r3, #4]
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	20000c14 	.word	0x20000c14
 8006760:	20000c00 	.word	0x20000c00

08006764 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10c      	bne.n	800678e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	b672      	cpsid	i
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	b662      	cpsie	i
 8006788:	613b      	str	r3, [r7, #16]
}
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10c      	bne.n	80067ae <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	b672      	cpsid	i
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	b662      	cpsie	i
 80067a8:	60fb      	str	r3, [r7, #12]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80067ae:	f000 fb3d 	bl	8006e2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067b2:	4b1d      	ldr	r3, [pc, #116]	; (8006828 <xTaskCheckForTimeOut+0xc4>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ca:	d102      	bne.n	80067d2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067cc:	2300      	movs	r3, #0
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	e023      	b.n	800681a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	4b15      	ldr	r3, [pc, #84]	; (800682c <xTaskCheckForTimeOut+0xc8>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d007      	beq.n	80067ee <xTaskCheckForTimeOut+0x8a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d302      	bcc.n	80067ee <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067e8:	2301      	movs	r3, #1
 80067ea:	61fb      	str	r3, [r7, #28]
 80067ec:	e015      	b.n	800681a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d20b      	bcs.n	8006810 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	1ad2      	subs	r2, r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ff97 	bl	8006738 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800680a:	2300      	movs	r3, #0
 800680c:	61fb      	str	r3, [r7, #28]
 800680e:	e004      	b.n	800681a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006816:	2301      	movs	r3, #1
 8006818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800681a:	f000 fb3b 	bl	8006e94 <vPortExitCritical>

	return xReturn;
 800681e:	69fb      	ldr	r3, [r7, #28]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3720      	adds	r7, #32
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	20000c00 	.word	0x20000c00
 800682c:	20000c14 	.word	0x20000c14

08006830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006834:	4b03      	ldr	r3, [pc, #12]	; (8006844 <vTaskMissedYield+0x14>)
 8006836:	2201      	movs	r2, #1
 8006838:	601a      	str	r2, [r3, #0]
}
 800683a:	bf00      	nop
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	20000c10 	.word	0x20000c10

08006848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006850:	f000 f852 	bl	80068f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006854:	4b06      	ldr	r3, [pc, #24]	; (8006870 <prvIdleTask+0x28>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d9f9      	bls.n	8006850 <prvIdleTask+0x8>
			{
				taskYIELD();
 800685c:	4b05      	ldr	r3, [pc, #20]	; (8006874 <prvIdleTask+0x2c>)
 800685e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800686c:	e7f0      	b.n	8006850 <prvIdleTask+0x8>
 800686e:	bf00      	nop
 8006870:	20000b00 	.word	0x20000b00
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800687e:	2300      	movs	r3, #0
 8006880:	607b      	str	r3, [r7, #4]
 8006882:	e00c      	b.n	800689e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4a12      	ldr	r2, [pc, #72]	; (80068d8 <prvInitialiseTaskLists+0x60>)
 8006890:	4413      	add	r3, r2
 8006892:	4618      	mov	r0, r3
 8006894:	f7fe fca8 	bl	80051e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3301      	adds	r3, #1
 800689c:	607b      	str	r3, [r7, #4]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b06      	cmp	r3, #6
 80068a2:	d9ef      	bls.n	8006884 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068a4:	480d      	ldr	r0, [pc, #52]	; (80068dc <prvInitialiseTaskLists+0x64>)
 80068a6:	f7fe fc9f 	bl	80051e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068aa:	480d      	ldr	r0, [pc, #52]	; (80068e0 <prvInitialiseTaskLists+0x68>)
 80068ac:	f7fe fc9c 	bl	80051e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068b0:	480c      	ldr	r0, [pc, #48]	; (80068e4 <prvInitialiseTaskLists+0x6c>)
 80068b2:	f7fe fc99 	bl	80051e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068b6:	480c      	ldr	r0, [pc, #48]	; (80068e8 <prvInitialiseTaskLists+0x70>)
 80068b8:	f7fe fc96 	bl	80051e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068bc:	480b      	ldr	r0, [pc, #44]	; (80068ec <prvInitialiseTaskLists+0x74>)
 80068be:	f7fe fc93 	bl	80051e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068c2:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <prvInitialiseTaskLists+0x78>)
 80068c4:	4a05      	ldr	r2, [pc, #20]	; (80068dc <prvInitialiseTaskLists+0x64>)
 80068c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068c8:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <prvInitialiseTaskLists+0x7c>)
 80068ca:	4a05      	ldr	r2, [pc, #20]	; (80068e0 <prvInitialiseTaskLists+0x68>)
 80068cc:	601a      	str	r2, [r3, #0]
}
 80068ce:	bf00      	nop
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20000b00 	.word	0x20000b00
 80068dc:	20000b8c 	.word	0x20000b8c
 80068e0:	20000ba0 	.word	0x20000ba0
 80068e4:	20000bbc 	.word	0x20000bbc
 80068e8:	20000bd0 	.word	0x20000bd0
 80068ec:	20000be8 	.word	0x20000be8
 80068f0:	20000bb4 	.word	0x20000bb4
 80068f4:	20000bb8 	.word	0x20000bb8

080068f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068fe:	e019      	b.n	8006934 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006900:	f000 fa94 	bl	8006e2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006904:	4b10      	ldr	r3, [pc, #64]	; (8006948 <prvCheckTasksWaitingTermination+0x50>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3304      	adds	r3, #4
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe fcf3 	bl	80052fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006916:	4b0d      	ldr	r3, [pc, #52]	; (800694c <prvCheckTasksWaitingTermination+0x54>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3b01      	subs	r3, #1
 800691c:	4a0b      	ldr	r2, [pc, #44]	; (800694c <prvCheckTasksWaitingTermination+0x54>)
 800691e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006920:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <prvCheckTasksWaitingTermination+0x58>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3b01      	subs	r3, #1
 8006926:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <prvCheckTasksWaitingTermination+0x58>)
 8006928:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800692a:	f000 fab3 	bl	8006e94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f810 	bl	8006954 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006934:	4b06      	ldr	r3, [pc, #24]	; (8006950 <prvCheckTasksWaitingTermination+0x58>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e1      	bne.n	8006900 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800693c:	bf00      	nop
 800693e:	bf00      	nop
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20000bd0 	.word	0x20000bd0
 800694c:	20000bfc 	.word	0x20000bfc
 8006950:	20000be4 	.word	0x20000be4

08006954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006962:	2b00      	cmp	r3, #0
 8006964:	d108      	bne.n	8006978 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fc54 	bl	8007218 <vPortFree>
				vPortFree( pxTCB );
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fc51 	bl	8007218 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006976:	e01a      	b.n	80069ae <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800697e:	2b01      	cmp	r3, #1
 8006980:	d103      	bne.n	800698a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fc48 	bl	8007218 <vPortFree>
	}
 8006988:	e011      	b.n	80069ae <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006990:	2b02      	cmp	r3, #2
 8006992:	d00c      	beq.n	80069ae <prvDeleteTCB+0x5a>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	b672      	cpsid	i
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	b662      	cpsie	i
 80069a8:	60fb      	str	r3, [r7, #12]
}
 80069aa:	bf00      	nop
 80069ac:	e7fe      	b.n	80069ac <prvDeleteTCB+0x58>
	}
 80069ae:	bf00      	nop
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069be:	4b0c      	ldr	r3, [pc, #48]	; (80069f0 <prvResetNextTaskUnblockTime+0x38>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069c8:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <prvResetNextTaskUnblockTime+0x3c>)
 80069ca:	f04f 32ff 	mov.w	r2, #4294967295
 80069ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069d0:	e008      	b.n	80069e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d2:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <prvResetNextTaskUnblockTime+0x38>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	4a04      	ldr	r2, [pc, #16]	; (80069f4 <prvResetNextTaskUnblockTime+0x3c>)
 80069e2:	6013      	str	r3, [r2, #0]
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	20000bb4 	.word	0x20000bb4
 80069f4:	20000c1c 	.word	0x20000c1c

080069f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069fe:	4b0b      	ldr	r3, [pc, #44]	; (8006a2c <xTaskGetSchedulerState+0x34>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d102      	bne.n	8006a0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a06:	2301      	movs	r3, #1
 8006a08:	607b      	str	r3, [r7, #4]
 8006a0a:	e008      	b.n	8006a1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a0c:	4b08      	ldr	r3, [pc, #32]	; (8006a30 <xTaskGetSchedulerState+0x38>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d102      	bne.n	8006a1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a14:	2302      	movs	r3, #2
 8006a16:	607b      	str	r3, [r7, #4]
 8006a18:	e001      	b.n	8006a1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a1e:	687b      	ldr	r3, [r7, #4]
	}
 8006a20:	4618      	mov	r0, r3
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	20000c08 	.word	0x20000c08
 8006a30:	20000c24 	.word	0x20000c24

08006a34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a40:	2300      	movs	r3, #0
 8006a42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d072      	beq.n	8006b30 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a4a:	4b3c      	ldr	r3, [pc, #240]	; (8006b3c <xTaskPriorityDisinherit+0x108>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d00c      	beq.n	8006a6e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	b672      	cpsid	i
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	b662      	cpsie	i
 8006a68:	60fb      	str	r3, [r7, #12]
}
 8006a6a:	bf00      	nop
 8006a6c:	e7fe      	b.n	8006a6c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10c      	bne.n	8006a90 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7a:	b672      	cpsid	i
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	b662      	cpsie	i
 8006a8a:	60bb      	str	r3, [r7, #8]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a94:	1e5a      	subs	r2, r3, #1
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d044      	beq.n	8006b30 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d140      	bne.n	8006b30 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe fc22 	bl	80052fc <uxListRemove>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d115      	bne.n	8006aea <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac2:	491f      	ldr	r1, [pc, #124]	; (8006b40 <xTaskPriorityDisinherit+0x10c>)
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <xTaskPriorityDisinherit+0xb6>
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	2201      	movs	r2, #1
 8006ada:	fa02 f303 	lsl.w	r3, r2, r3
 8006ade:	43da      	mvns	r2, r3
 8006ae0:	4b18      	ldr	r3, [pc, #96]	; (8006b44 <xTaskPriorityDisinherit+0x110>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	4a17      	ldr	r2, [pc, #92]	; (8006b44 <xTaskPriorityDisinherit+0x110>)
 8006ae8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	f1c3 0207 	rsb	r2, r3, #7
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b02:	2201      	movs	r2, #1
 8006b04:	409a      	lsls	r2, r3
 8006b06:	4b0f      	ldr	r3, [pc, #60]	; (8006b44 <xTaskPriorityDisinherit+0x110>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	4a0d      	ldr	r2, [pc, #52]	; (8006b44 <xTaskPriorityDisinherit+0x110>)
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4a08      	ldr	r2, [pc, #32]	; (8006b40 <xTaskPriorityDisinherit+0x10c>)
 8006b1e:	441a      	add	r2, r3
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f7fe fb8b 	bl	8005242 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b30:	697b      	ldr	r3, [r7, #20]
	}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000afc 	.word	0x20000afc
 8006b40:	20000b00 	.word	0x20000b00
 8006b44:	20000c04 	.word	0x20000c04

08006b48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b52:	4b29      	ldr	r3, [pc, #164]	; (8006bf8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b58:	4b28      	ldr	r3, [pc, #160]	; (8006bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe fbcc 	bl	80052fc <uxListRemove>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10b      	bne.n	8006b82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006b6a:	4b24      	ldr	r3, [pc, #144]	; (8006bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	2201      	movs	r2, #1
 8006b72:	fa02 f303 	lsl.w	r3, r2, r3
 8006b76:	43da      	mvns	r2, r3
 8006b78:	4b21      	ldr	r3, [pc, #132]	; (8006c00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	4a20      	ldr	r2, [pc, #128]	; (8006c00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d10a      	bne.n	8006ba0 <prvAddCurrentTaskToDelayedList+0x58>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d007      	beq.n	8006ba0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b90:	4b1a      	ldr	r3, [pc, #104]	; (8006bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3304      	adds	r3, #4
 8006b96:	4619      	mov	r1, r3
 8006b98:	481a      	ldr	r0, [pc, #104]	; (8006c04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b9a:	f7fe fb52 	bl	8005242 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b9e:	e026      	b.n	8006bee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ba8:	4b14      	ldr	r3, [pc, #80]	; (8006bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d209      	bcs.n	8006bcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bb8:	4b13      	ldr	r3, [pc, #76]	; (8006c08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	4b0f      	ldr	r3, [pc, #60]	; (8006bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	f7fe fb60 	bl	800528a <vListInsert>
}
 8006bca:	e010      	b.n	8006bee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bcc:	4b0f      	ldr	r3, [pc, #60]	; (8006c0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4610      	mov	r0, r2
 8006bda:	f7fe fb56 	bl	800528a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bde:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d202      	bcs.n	8006bee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006be8:	4a09      	ldr	r2, [pc, #36]	; (8006c10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	6013      	str	r3, [r2, #0]
}
 8006bee:	bf00      	nop
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000c00 	.word	0x20000c00
 8006bfc:	20000afc 	.word	0x20000afc
 8006c00:	20000c04 	.word	0x20000c04
 8006c04:	20000be8 	.word	0x20000be8
 8006c08:	20000bb8 	.word	0x20000bb8
 8006c0c:	20000bb4 	.word	0x20000bb4
 8006c10:	20000c1c 	.word	0x20000c1c

08006c14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3b04      	subs	r3, #4
 8006c24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3b04      	subs	r3, #4
 8006c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f023 0201 	bic.w	r2, r3, #1
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3b04      	subs	r3, #4
 8006c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c44:	4a0c      	ldr	r2, [pc, #48]	; (8006c78 <pxPortInitialiseStack+0x64>)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3b14      	subs	r3, #20
 8006c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3b04      	subs	r3, #4
 8006c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f06f 0202 	mvn.w	r2, #2
 8006c62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3b20      	subs	r3, #32
 8006c68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	08006c7d 	.word	0x08006c7d

08006c7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c82:	2300      	movs	r3, #0
 8006c84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c86:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <prvTaskExitError+0x5c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8e:	d00c      	beq.n	8006caa <prvTaskExitError+0x2e>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	b672      	cpsid	i
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	b662      	cpsie	i
 8006ca4:	60fb      	str	r3, [r7, #12]
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <prvTaskExitError+0x2c>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	b672      	cpsid	i
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	b662      	cpsie	i
 8006cbe:	60bb      	str	r3, [r7, #8]
}
 8006cc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cc2:	bf00      	nop
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0fc      	beq.n	8006cc4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cca:	bf00      	nop
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	2000000c 	.word	0x2000000c
 8006cdc:	00000000 	.word	0x00000000

08006ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ce0:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <pxCurrentTCBConst2>)
 8006ce2:	6819      	ldr	r1, [r3, #0]
 8006ce4:	6808      	ldr	r0, [r1, #0]
 8006ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cea:	f380 8809 	msr	PSP, r0
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f04f 0000 	mov.w	r0, #0
 8006cf6:	f380 8811 	msr	BASEPRI, r0
 8006cfa:	4770      	bx	lr
 8006cfc:	f3af 8000 	nop.w

08006d00 <pxCurrentTCBConst2>:
 8006d00:	20000afc 	.word	0x20000afc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop

08006d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d08:	4808      	ldr	r0, [pc, #32]	; (8006d2c <prvPortStartFirstTask+0x24>)
 8006d0a:	6800      	ldr	r0, [r0, #0]
 8006d0c:	6800      	ldr	r0, [r0, #0]
 8006d0e:	f380 8808 	msr	MSP, r0
 8006d12:	f04f 0000 	mov.w	r0, #0
 8006d16:	f380 8814 	msr	CONTROL, r0
 8006d1a:	b662      	cpsie	i
 8006d1c:	b661      	cpsie	f
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	df00      	svc	0
 8006d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d2a:	bf00      	nop
 8006d2c:	e000ed08 	.word	0xe000ed08

08006d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d36:	4b37      	ldr	r3, [pc, #220]	; (8006e14 <xPortStartScheduler+0xe4>)
 8006d38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	22ff      	movs	r2, #255	; 0xff
 8006d46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	4b2f      	ldr	r3, [pc, #188]	; (8006e18 <xPortStartScheduler+0xe8>)
 8006d5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d5e:	4b2f      	ldr	r3, [pc, #188]	; (8006e1c <xPortStartScheduler+0xec>)
 8006d60:	2207      	movs	r2, #7
 8006d62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d64:	e009      	b.n	8006d7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006d66:	4b2d      	ldr	r3, [pc, #180]	; (8006e1c <xPortStartScheduler+0xec>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	4a2b      	ldr	r2, [pc, #172]	; (8006e1c <xPortStartScheduler+0xec>)
 8006d6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d70:	78fb      	ldrb	r3, [r7, #3]
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d82:	2b80      	cmp	r3, #128	; 0x80
 8006d84:	d0ef      	beq.n	8006d66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d86:	4b25      	ldr	r3, [pc, #148]	; (8006e1c <xPortStartScheduler+0xec>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f1c3 0307 	rsb	r3, r3, #7
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d00c      	beq.n	8006dac <xPortStartScheduler+0x7c>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	b672      	cpsid	i
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	b662      	cpsie	i
 8006da6:	60bb      	str	r3, [r7, #8]
}
 8006da8:	bf00      	nop
 8006daa:	e7fe      	b.n	8006daa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006dac:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <xPortStartScheduler+0xec>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	021b      	lsls	r3, r3, #8
 8006db2:	4a1a      	ldr	r2, [pc, #104]	; (8006e1c <xPortStartScheduler+0xec>)
 8006db4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006db6:	4b19      	ldr	r3, [pc, #100]	; (8006e1c <xPortStartScheduler+0xec>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dbe:	4a17      	ldr	r2, [pc, #92]	; (8006e1c <xPortStartScheduler+0xec>)
 8006dc0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006dca:	4b15      	ldr	r3, [pc, #84]	; (8006e20 <xPortStartScheduler+0xf0>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a14      	ldr	r2, [pc, #80]	; (8006e20 <xPortStartScheduler+0xf0>)
 8006dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006dd4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006dd6:	4b12      	ldr	r3, [pc, #72]	; (8006e20 <xPortStartScheduler+0xf0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a11      	ldr	r2, [pc, #68]	; (8006e20 <xPortStartScheduler+0xf0>)
 8006ddc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006de0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006de2:	f000 f8dd 	bl	8006fa0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006de6:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <xPortStartScheduler+0xf4>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006dec:	f000 f8fc 	bl	8006fe8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006df0:	4b0d      	ldr	r3, [pc, #52]	; (8006e28 <xPortStartScheduler+0xf8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a0c      	ldr	r2, [pc, #48]	; (8006e28 <xPortStartScheduler+0xf8>)
 8006df6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006dfa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006dfc:	f7ff ff84 	bl	8006d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e00:	f7ff fbb2 	bl	8006568 <vTaskSwitchContext>
	prvTaskExitError();
 8006e04:	f7ff ff3a 	bl	8006c7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	e000e400 	.word	0xe000e400
 8006e18:	20000c28 	.word	0x20000c28
 8006e1c:	20000c2c 	.word	0x20000c2c
 8006e20:	e000ed20 	.word	0xe000ed20
 8006e24:	2000000c 	.word	0x2000000c
 8006e28:	e000ef34 	.word	0xe000ef34

08006e2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	b672      	cpsid	i
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	b662      	cpsie	i
 8006e46:	607b      	str	r3, [r7, #4]
}
 8006e48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e4a:	4b10      	ldr	r3, [pc, #64]	; (8006e8c <vPortEnterCritical+0x60>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	4a0e      	ldr	r2, [pc, #56]	; (8006e8c <vPortEnterCritical+0x60>)
 8006e52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e54:	4b0d      	ldr	r3, [pc, #52]	; (8006e8c <vPortEnterCritical+0x60>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d111      	bne.n	8006e80 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e5c:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <vPortEnterCritical+0x64>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00c      	beq.n	8006e80 <vPortEnterCritical+0x54>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	b672      	cpsid	i
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	b662      	cpsie	i
 8006e7a:	603b      	str	r3, [r7, #0]
}
 8006e7c:	bf00      	nop
 8006e7e:	e7fe      	b.n	8006e7e <vPortEnterCritical+0x52>
	}
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	2000000c 	.word	0x2000000c
 8006e90:	e000ed04 	.word	0xe000ed04

08006e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e9a:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <vPortExitCritical+0x54>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10c      	bne.n	8006ebc <vPortExitCritical+0x28>
	__asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea6:	b672      	cpsid	i
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	b662      	cpsie	i
 8006eb6:	607b      	str	r3, [r7, #4]
}
 8006eb8:	bf00      	nop
 8006eba:	e7fe      	b.n	8006eba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	; (8006ee8 <vPortExitCritical+0x54>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	4a09      	ldr	r2, [pc, #36]	; (8006ee8 <vPortExitCritical+0x54>)
 8006ec4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ec6:	4b08      	ldr	r3, [pc, #32]	; (8006ee8 <vPortExitCritical+0x54>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d105      	bne.n	8006eda <vPortExitCritical+0x46>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	f383 8811 	msr	BASEPRI, r3
}
 8006ed8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	2000000c 	.word	0x2000000c
 8006eec:	00000000 	.word	0x00000000

08006ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ef0:	f3ef 8009 	mrs	r0, PSP
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	4b15      	ldr	r3, [pc, #84]	; (8006f50 <pxCurrentTCBConst>)
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	f01e 0f10 	tst.w	lr, #16
 8006f00:	bf08      	it	eq
 8006f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0a:	6010      	str	r0, [r2, #0]
 8006f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f14:	b672      	cpsid	i
 8006f16:	f380 8811 	msr	BASEPRI, r0
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	b662      	cpsie	i
 8006f24:	f7ff fb20 	bl	8006568 <vTaskSwitchContext>
 8006f28:	f04f 0000 	mov.w	r0, #0
 8006f2c:	f380 8811 	msr	BASEPRI, r0
 8006f30:	bc09      	pop	{r0, r3}
 8006f32:	6819      	ldr	r1, [r3, #0]
 8006f34:	6808      	ldr	r0, [r1, #0]
 8006f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3a:	f01e 0f10 	tst.w	lr, #16
 8006f3e:	bf08      	it	eq
 8006f40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f44:	f380 8809 	msr	PSP, r0
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop

08006f50 <pxCurrentTCBConst>:
 8006f50:	20000afc 	.word	0x20000afc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop

08006f58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	b672      	cpsid	i
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	b662      	cpsie	i
 8006f72:	607b      	str	r3, [r7, #4]
}
 8006f74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f76:	f7ff fa3d 	bl	80063f4 <xTaskIncrementTick>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f80:	4b06      	ldr	r3, [pc, #24]	; (8006f9c <SysTick_Handler+0x44>)
 8006f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	f383 8811 	msr	BASEPRI, r3
}
 8006f92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f94:	bf00      	nop
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	e000ed04 	.word	0xe000ed04

08006fa0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <vPortSetupTimerInterrupt+0x34>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006faa:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <vPortSetupTimerInterrupt+0x38>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fb0:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <vPortSetupTimerInterrupt+0x3c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a0a      	ldr	r2, [pc, #40]	; (8006fe0 <vPortSetupTimerInterrupt+0x40>)
 8006fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fba:	099b      	lsrs	r3, r3, #6
 8006fbc:	4a09      	ldr	r2, [pc, #36]	; (8006fe4 <vPortSetupTimerInterrupt+0x44>)
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006fc2:	4b04      	ldr	r3, [pc, #16]	; (8006fd4 <vPortSetupTimerInterrupt+0x34>)
 8006fc4:	2207      	movs	r2, #7
 8006fc6:	601a      	str	r2, [r3, #0]
}
 8006fc8:	bf00      	nop
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	e000e010 	.word	0xe000e010
 8006fd8:	e000e018 	.word	0xe000e018
 8006fdc:	20000000 	.word	0x20000000
 8006fe0:	10624dd3 	.word	0x10624dd3
 8006fe4:	e000e014 	.word	0xe000e014

08006fe8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fe8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ff8 <vPortEnableVFP+0x10>
 8006fec:	6801      	ldr	r1, [r0, #0]
 8006fee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006ff2:	6001      	str	r1, [r0, #0]
 8006ff4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ff6:	bf00      	nop
 8006ff8:	e000ed88 	.word	0xe000ed88

08006ffc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007002:	f3ef 8305 	mrs	r3, IPSR
 8007006:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b0f      	cmp	r3, #15
 800700c:	d916      	bls.n	800703c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800700e:	4a19      	ldr	r2, [pc, #100]	; (8007074 <vPortValidateInterruptPriority+0x78>)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4413      	add	r3, r2
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007018:	4b17      	ldr	r3, [pc, #92]	; (8007078 <vPortValidateInterruptPriority+0x7c>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	7afa      	ldrb	r2, [r7, #11]
 800701e:	429a      	cmp	r2, r3
 8007020:	d20c      	bcs.n	800703c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	b672      	cpsid	i
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	b662      	cpsie	i
 8007036:	607b      	str	r3, [r7, #4]
}
 8007038:	bf00      	nop
 800703a:	e7fe      	b.n	800703a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800703c:	4b0f      	ldr	r3, [pc, #60]	; (800707c <vPortValidateInterruptPriority+0x80>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007044:	4b0e      	ldr	r3, [pc, #56]	; (8007080 <vPortValidateInterruptPriority+0x84>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d90c      	bls.n	8007066 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	b672      	cpsid	i
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	b662      	cpsie	i
 8007060:	603b      	str	r3, [r7, #0]
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <vPortValidateInterruptPriority+0x68>
	}
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	e000e3f0 	.word	0xe000e3f0
 8007078:	20000c28 	.word	0x20000c28
 800707c:	e000ed0c 	.word	0xe000ed0c
 8007080:	20000c2c 	.word	0x20000c2c

08007084 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08a      	sub	sp, #40	; 0x28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800708c:	2300      	movs	r3, #0
 800708e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007090:	f7ff f904 	bl	800629c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007094:	4b5b      	ldr	r3, [pc, #364]	; (8007204 <pvPortMalloc+0x180>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800709c:	f000 f91a 	bl	80072d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070a0:	4b59      	ldr	r3, [pc, #356]	; (8007208 <pvPortMalloc+0x184>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4013      	ands	r3, r2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f040 8092 	bne.w	80071d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d01f      	beq.n	80070f4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80070b4:	2208      	movs	r2, #8
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4413      	add	r3, r2
 80070ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d016      	beq.n	80070f4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f023 0307 	bic.w	r3, r3, #7
 80070cc:	3308      	adds	r3, #8
 80070ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00c      	beq.n	80070f4 <pvPortMalloc+0x70>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	b672      	cpsid	i
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	b662      	cpsie	i
 80070ee:	617b      	str	r3, [r7, #20]
}
 80070f0:	bf00      	nop
 80070f2:	e7fe      	b.n	80070f2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d06b      	beq.n	80071d2 <pvPortMalloc+0x14e>
 80070fa:	4b44      	ldr	r3, [pc, #272]	; (800720c <pvPortMalloc+0x188>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	429a      	cmp	r2, r3
 8007102:	d866      	bhi.n	80071d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007104:	4b42      	ldr	r3, [pc, #264]	; (8007210 <pvPortMalloc+0x18c>)
 8007106:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007108:	4b41      	ldr	r3, [pc, #260]	; (8007210 <pvPortMalloc+0x18c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800710e:	e004      	b.n	800711a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	429a      	cmp	r2, r3
 8007122:	d903      	bls.n	800712c <pvPortMalloc+0xa8>
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1f1      	bne.n	8007110 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800712c:	4b35      	ldr	r3, [pc, #212]	; (8007204 <pvPortMalloc+0x180>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007132:	429a      	cmp	r2, r3
 8007134:	d04d      	beq.n	80071d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2208      	movs	r2, #8
 800713c:	4413      	add	r3, r2
 800713e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	1ad2      	subs	r2, r2, r3
 8007150:	2308      	movs	r3, #8
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	429a      	cmp	r2, r3
 8007156:	d921      	bls.n	800719c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4413      	add	r3, r2
 800715e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00c      	beq.n	8007184 <pvPortMalloc+0x100>
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	b672      	cpsid	i
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	b662      	cpsie	i
 800717e:	613b      	str	r3, [r7, #16]
}
 8007180:	bf00      	nop
 8007182:	e7fe      	b.n	8007182 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	1ad2      	subs	r2, r2, r3
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007196:	69b8      	ldr	r0, [r7, #24]
 8007198:	f000 f8fe 	bl	8007398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800719c:	4b1b      	ldr	r3, [pc, #108]	; (800720c <pvPortMalloc+0x188>)
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	4a19      	ldr	r2, [pc, #100]	; (800720c <pvPortMalloc+0x188>)
 80071a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071aa:	4b18      	ldr	r3, [pc, #96]	; (800720c <pvPortMalloc+0x188>)
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	4b19      	ldr	r3, [pc, #100]	; (8007214 <pvPortMalloc+0x190>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d203      	bcs.n	80071be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071b6:	4b15      	ldr	r3, [pc, #84]	; (800720c <pvPortMalloc+0x188>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a16      	ldr	r2, [pc, #88]	; (8007214 <pvPortMalloc+0x190>)
 80071bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	4b11      	ldr	r3, [pc, #68]	; (8007208 <pvPortMalloc+0x184>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	431a      	orrs	r2, r3
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	2200      	movs	r2, #0
 80071d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80071d2:	f7ff f871 	bl	80062b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	f003 0307 	and.w	r3, r3, #7
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00c      	beq.n	80071fa <pvPortMalloc+0x176>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e4:	b672      	cpsid	i
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	b662      	cpsie	i
 80071f4:	60fb      	str	r3, [r7, #12]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <pvPortMalloc+0x174>
	return pvReturn;
 80071fa:	69fb      	ldr	r3, [r7, #28]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3728      	adds	r7, #40	; 0x28
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20004838 	.word	0x20004838
 8007208:	20004844 	.word	0x20004844
 800720c:	2000483c 	.word	0x2000483c
 8007210:	20004830 	.word	0x20004830
 8007214:	20004840 	.word	0x20004840

08007218 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d04c      	beq.n	80072c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800722a:	2308      	movs	r3, #8
 800722c:	425b      	negs	r3, r3
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	4413      	add	r3, r2
 8007232:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	4b23      	ldr	r3, [pc, #140]	; (80072cc <vPortFree+0xb4>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4013      	ands	r3, r2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10c      	bne.n	8007260 <vPortFree+0x48>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724a:	b672      	cpsid	i
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	b662      	cpsie	i
 800725a:	60fb      	str	r3, [r7, #12]
}
 800725c:	bf00      	nop
 800725e:	e7fe      	b.n	800725e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00c      	beq.n	8007282 <vPortFree+0x6a>
	__asm volatile
 8007268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726c:	b672      	cpsid	i
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	b662      	cpsie	i
 800727c:	60bb      	str	r3, [r7, #8]
}
 800727e:	bf00      	nop
 8007280:	e7fe      	b.n	8007280 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	4b11      	ldr	r3, [pc, #68]	; (80072cc <vPortFree+0xb4>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4013      	ands	r3, r2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d019      	beq.n	80072c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d115      	bne.n	80072c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	4b0b      	ldr	r3, [pc, #44]	; (80072cc <vPortFree+0xb4>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	43db      	mvns	r3, r3
 80072a2:	401a      	ands	r2, r3
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072a8:	f7fe fff8 	bl	800629c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <vPortFree+0xb8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4413      	add	r3, r2
 80072b6:	4a06      	ldr	r2, [pc, #24]	; (80072d0 <vPortFree+0xb8>)
 80072b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072ba:	6938      	ldr	r0, [r7, #16]
 80072bc:	f000 f86c 	bl	8007398 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80072c0:	f7fe fffa 	bl	80062b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072c4:	bf00      	nop
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	20004844 	.word	0x20004844
 80072d0:	2000483c 	.word	0x2000483c

080072d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80072de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072e0:	4b27      	ldr	r3, [pc, #156]	; (8007380 <prvHeapInit+0xac>)
 80072e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00c      	beq.n	8007308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3307      	adds	r3, #7
 80072f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 0307 	bic.w	r3, r3, #7
 80072fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	4a1f      	ldr	r2, [pc, #124]	; (8007380 <prvHeapInit+0xac>)
 8007304:	4413      	add	r3, r2
 8007306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800730c:	4a1d      	ldr	r2, [pc, #116]	; (8007384 <prvHeapInit+0xb0>)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007312:	4b1c      	ldr	r3, [pc, #112]	; (8007384 <prvHeapInit+0xb0>)
 8007314:	2200      	movs	r2, #0
 8007316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	4413      	add	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007320:	2208      	movs	r2, #8
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	1a9b      	subs	r3, r3, r2
 8007326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 0307 	bic.w	r3, r3, #7
 800732e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4a15      	ldr	r2, [pc, #84]	; (8007388 <prvHeapInit+0xb4>)
 8007334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007336:	4b14      	ldr	r3, [pc, #80]	; (8007388 <prvHeapInit+0xb4>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2200      	movs	r2, #0
 800733c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800733e:	4b12      	ldr	r3, [pc, #72]	; (8007388 <prvHeapInit+0xb4>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	1ad2      	subs	r2, r2, r3
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007354:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <prvHeapInit+0xb4>)
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	4a0a      	ldr	r2, [pc, #40]	; (800738c <prvHeapInit+0xb8>)
 8007362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	4a09      	ldr	r2, [pc, #36]	; (8007390 <prvHeapInit+0xbc>)
 800736a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800736c:	4b09      	ldr	r3, [pc, #36]	; (8007394 <prvHeapInit+0xc0>)
 800736e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007372:	601a      	str	r2, [r3, #0]
}
 8007374:	bf00      	nop
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	20000c30 	.word	0x20000c30
 8007384:	20004830 	.word	0x20004830
 8007388:	20004838 	.word	0x20004838
 800738c:	20004840 	.word	0x20004840
 8007390:	2000483c 	.word	0x2000483c
 8007394:	20004844 	.word	0x20004844

08007398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073a0:	4b28      	ldr	r3, [pc, #160]	; (8007444 <prvInsertBlockIntoFreeList+0xac>)
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	e002      	b.n	80073ac <prvInsertBlockIntoFreeList+0x14>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d8f7      	bhi.n	80073a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	4413      	add	r3, r2
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d108      	bne.n	80073da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	441a      	add	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	441a      	add	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d118      	bne.n	8007420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	4b15      	ldr	r3, [pc, #84]	; (8007448 <prvInsertBlockIntoFreeList+0xb0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d00d      	beq.n	8007416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	441a      	add	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	e008      	b.n	8007428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007416:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <prvInsertBlockIntoFreeList+0xb0>)
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	e003      	b.n	8007428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	429a      	cmp	r2, r3
 800742e:	d002      	beq.n	8007436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007436:	bf00      	nop
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20004830 	.word	0x20004830
 8007448:	20004838 	.word	0x20004838

0800744c <memset>:
 800744c:	4402      	add	r2, r0
 800744e:	4603      	mov	r3, r0
 8007450:	4293      	cmp	r3, r2
 8007452:	d100      	bne.n	8007456 <memset+0xa>
 8007454:	4770      	bx	lr
 8007456:	f803 1b01 	strb.w	r1, [r3], #1
 800745a:	e7f9      	b.n	8007450 <memset+0x4>

0800745c <__libc_init_array>:
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	4d0d      	ldr	r5, [pc, #52]	; (8007494 <__libc_init_array+0x38>)
 8007460:	4c0d      	ldr	r4, [pc, #52]	; (8007498 <__libc_init_array+0x3c>)
 8007462:	1b64      	subs	r4, r4, r5
 8007464:	10a4      	asrs	r4, r4, #2
 8007466:	2600      	movs	r6, #0
 8007468:	42a6      	cmp	r6, r4
 800746a:	d109      	bne.n	8007480 <__libc_init_array+0x24>
 800746c:	4d0b      	ldr	r5, [pc, #44]	; (800749c <__libc_init_array+0x40>)
 800746e:	4c0c      	ldr	r4, [pc, #48]	; (80074a0 <__libc_init_array+0x44>)
 8007470:	f000 f826 	bl	80074c0 <_init>
 8007474:	1b64      	subs	r4, r4, r5
 8007476:	10a4      	asrs	r4, r4, #2
 8007478:	2600      	movs	r6, #0
 800747a:	42a6      	cmp	r6, r4
 800747c:	d105      	bne.n	800748a <__libc_init_array+0x2e>
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	f855 3b04 	ldr.w	r3, [r5], #4
 8007484:	4798      	blx	r3
 8007486:	3601      	adds	r6, #1
 8007488:	e7ee      	b.n	8007468 <__libc_init_array+0xc>
 800748a:	f855 3b04 	ldr.w	r3, [r5], #4
 800748e:	4798      	blx	r3
 8007490:	3601      	adds	r6, #1
 8007492:	e7f2      	b.n	800747a <__libc_init_array+0x1e>
 8007494:	080075fc 	.word	0x080075fc
 8007498:	080075fc 	.word	0x080075fc
 800749c:	080075fc 	.word	0x080075fc
 80074a0:	08007600 	.word	0x08007600

080074a4 <memcpy>:
 80074a4:	440a      	add	r2, r1
 80074a6:	4291      	cmp	r1, r2
 80074a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074ac:	d100      	bne.n	80074b0 <memcpy+0xc>
 80074ae:	4770      	bx	lr
 80074b0:	b510      	push	{r4, lr}
 80074b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ba:	4291      	cmp	r1, r2
 80074bc:	d1f9      	bne.n	80074b2 <memcpy+0xe>
 80074be:	bd10      	pop	{r4, pc}

080074c0 <_init>:
 80074c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c2:	bf00      	nop
 80074c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c6:	bc08      	pop	{r3}
 80074c8:	469e      	mov	lr, r3
 80074ca:	4770      	bx	lr

080074cc <_fini>:
 80074cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ce:	bf00      	nop
 80074d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d2:	bc08      	pop	{r3}
 80074d4:	469e      	mov	lr, r3
 80074d6:	4770      	bx	lr
