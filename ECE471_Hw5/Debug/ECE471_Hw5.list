
ECE471_Hw5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080059a4  080059a4  000159a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa0  08005aa0  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08005aa0  08005aa0  00015aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aa8  08005aa8  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aa8  08005aa8  00015aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  08005ac0  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  08005b60  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000046a4  20000150  08005c00  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200047f4  08005c00  000247f4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001ad04  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003745  00000000  00000000  0003aec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000016d8  00000000  00000000  0003e610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000011c7  00000000  00000000  0003fce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002932d  00000000  00000000  00040eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001a86f  00000000  00000000  0006a1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00100c57  00000000  00000000  00084a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000060dc  00000000  00000000  001856a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  0018b780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000150 	.word	0x20000150
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800598c 	.word	0x0800598c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000154 	.word	0x20000154
 800020c:	0800598c 	.word	0x0800598c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000016c 	.word	0x2000016c
 800053c:	200001c0 	.word	0x200001c0

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b0aa      	sub	sp, #168	; 0xa8
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fd2c 	bl	8000fa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f893 	bl	8000674 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f9a5 	bl	800089c <MX_GPIO_Init>
  MX_ETH_Init();
 8000552:	f000 f8f7 	bl	8000744 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000556:	f000 f943 	bl	80007e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055a:	f000 f971 	bl	8000840 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800055e:	4b39      	ldr	r3, [pc, #228]	; (8000644 <main+0x104>)
 8000560:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000564:	461d      	mov	r5, r3
 8000566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000572:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f003 ffba 	bl	80044f2 <osThreadCreate>
 800057e:	4603      	mov	r3, r0
 8000580:	4a31      	ldr	r2, [pc, #196]	; (8000648 <main+0x108>)
 8000582:	6013      	str	r3, [r2, #0]

  /* definition and creation of alive */
  osThreadDef(alive, alive_init, osPriorityBelowNormal, 0, 128);
 8000584:	4b31      	ldr	r3, [pc, #196]	; (800064c <main+0x10c>)
 8000586:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800058a:	461d      	mov	r5, r3
 800058c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000590:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000594:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  aliveHandle = osThreadCreate(osThread(alive), NULL);
 8000598:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 ffa7 	bl	80044f2 <osThreadCreate>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a2a      	ldr	r2, [pc, #168]	; (8000650 <main+0x110>)
 80005a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of button */
  osThreadDef(button, button_init, osPriorityNormal, 0, 128);
 80005aa:	4b2a      	ldr	r3, [pc, #168]	; (8000654 <main+0x114>)
 80005ac:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005b0:	461d      	mov	r5, r3
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonHandle = osThreadCreate(osThread(button), NULL);
 80005be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 ff94 	bl	80044f2 <osThreadCreate>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a22      	ldr	r2, [pc, #136]	; (8000658 <main+0x118>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of light */
  osThreadDef(light, light_init, osPriorityAboveNormal, 0, 128);
 80005d0:	4b22      	ldr	r3, [pc, #136]	; (800065c <main+0x11c>)
 80005d2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005d6:	461d      	mov	r5, r3
 80005d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lightHandle = osThreadCreate(osThread(light), NULL);
 80005e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 ff81 	bl	80044f2 <osThreadCreate>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a1b      	ldr	r2, [pc, #108]	; (8000660 <main+0x120>)
 80005f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of analog */
  osThreadDef(analog, analog_init, osPriorityAboveNormal, 0, 128);
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <main+0x124>)
 80005f8:	f107 041c 	add.w	r4, r7, #28
 80005fc:	461d      	mov	r5, r3
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  analogHandle = osThreadCreate(osThread(analog), NULL);
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f003 ff6e 	bl	80044f2 <osThreadCreate>
 8000616:	4603      	mov	r3, r0
 8000618:	4a13      	ldr	r2, [pc, #76]	; (8000668 <main+0x128>)
 800061a:	6013      	str	r3, [r2, #0]

  /* definition and creation of control */
  osThreadDef(control, control_init, osPriorityHigh, 0, 128);
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <main+0x12c>)
 800061e:	463c      	mov	r4, r7
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlHandle = osThreadCreate(osThread(control), NULL);
 800062e:	463b      	mov	r3, r7
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f003 ff5d 	bl	80044f2 <osThreadCreate>
 8000638:	4603      	mov	r3, r0
 800063a:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <main+0x130>)
 800063c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800063e:	f003 ff51 	bl	80044e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000642:	e7fe      	b.n	8000642 <main+0x102>
 8000644:	080059b0 	.word	0x080059b0
 8000648:	20000a38 	.word	0x20000a38
 800064c:	080059d4 	.word	0x080059d4
 8000650:	20000a3c 	.word	0x20000a3c
 8000654:	080059f8 	.word	0x080059f8
 8000658:	20000a40 	.word	0x20000a40
 800065c:	08005a1c 	.word	0x08005a1c
 8000660:	20000a44 	.word	0x20000a44
 8000664:	08005a40 	.word	0x08005a40
 8000668:	20000a48 	.word	0x20000a48
 800066c:	08005a64 	.word	0x08005a64
 8000670:	20000a4c 	.word	0x20000a4c

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f005 f956 	bl	8005934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000698:	f001 fbea 	bl	8001e70 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <SystemClock_Config+0xc8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a26      	ldr	r2, [pc, #152]	; (800073c <SystemClock_Config+0xc8>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <SystemClock_Config+0xc8>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <SystemClock_Config+0xcc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006bc:	4a20      	ldr	r2, [pc, #128]	; (8000740 <SystemClock_Config+0xcc>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <SystemClock_Config+0xcc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006e8:	2348      	movs	r3, #72	; 0x48
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006f0:	2303      	movs	r3, #3
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fbc9 	bl	8001e90 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000704:	f000 f9c2 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2102      	movs	r1, #2
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fe57 	bl	80023d8 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000730:	f000 f9ac 	bl	8000a8c <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3750      	adds	r7, #80	; 0x50
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_ETH_Init+0x84>)
 800074a:	4a20      	ldr	r2, [pc, #128]	; (80007cc <MX_ETH_Init+0x88>)
 800074c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_ETH_Init+0x8c>)
 800075c:	22e1      	movs	r2, #225	; 0xe1
 800075e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000762:	2200      	movs	r2, #0
 8000764:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000768:	2200      	movs	r2, #0
 800076a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_ETH_Init+0x8c>)
 800076e:	2200      	movs	r2, #0
 8000770:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_ETH_Init+0x84>)
 8000774:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000776:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_ETH_Init+0x84>)
 800077a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800077e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_ETH_Init+0x84>)
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <MX_ETH_Init+0x90>)
 8000784:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_ETH_Init+0x84>)
 8000788:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <MX_ETH_Init+0x94>)
 800078a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_ETH_Init+0x84>)
 800078e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000792:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_ETH_Init+0x84>)
 8000796:	f000 fd37 	bl	8001208 <HAL_ETH_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f974 	bl	8000a8c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007a4:	2238      	movs	r2, #56	; 0x38
 80007a6:	2100      	movs	r1, #0
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_ETH_Init+0x98>)
 80007aa:	f005 f8c3 	bl	8005934 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_ETH_Init+0x98>)
 80007b0:	2221      	movs	r2, #33	; 0x21
 80007b2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_ETH_Init+0x98>)
 80007b6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007ba:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_ETH_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200003f8 	.word	0x200003f8
 80007cc:	40028000 	.word	0x40028000
 80007d0:	20000a50 	.word	0x20000a50
 80007d4:	200000b0 	.word	0x200000b0
 80007d8:	20000010 	.word	0x20000010
 80007dc:	200003c0 	.word	0x200003c0

080007e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_USART3_UART_Init+0x58>)
 80007e6:	4a15      	ldr	r2, [pc, #84]	; (800083c <MX_USART3_UART_Init+0x5c>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_USART3_UART_Init+0x58>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART3_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_USART3_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART3_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART3_UART_Init+0x58>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART3_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART3_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART3_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART3_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART3_UART_Init+0x58>)
 8000824:	f002 ff00 	bl	8003628 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800082e:	f000 f92d 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200004a8 	.word	0x200004a8
 800083c:	40004800 	.word	0x40004800

08000840 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800084a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084e:	2206      	movs	r2, #6
 8000850:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000854:	2202      	movs	r2, #2
 8000856:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000860:	2202      	movs	r2, #2
 8000862:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000866:	2201      	movs	r2, #1
 8000868:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000878:	2201      	movs	r2, #1
 800087a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000884:	f001 f9ab 	bl	8001bde <HAL_PCD_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800088e:	f000 f8fd 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000530 	.word	0x20000530

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <MX_GPIO_Init+0x134>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a46      	ldr	r2, [pc, #280]	; (80009d0 <MX_GPIO_Init+0x134>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <MX_GPIO_Init+0x134>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	61bb      	str	r3, [r7, #24]
 80008c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <MX_GPIO_Init+0x134>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a40      	ldr	r2, [pc, #256]	; (80009d0 <MX_GPIO_Init+0x134>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <MX_GPIO_Init+0x134>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <MX_GPIO_Init+0x134>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a3a      	ldr	r2, [pc, #232]	; (80009d0 <MX_GPIO_Init+0x134>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <MX_GPIO_Init+0x134>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <MX_GPIO_Init+0x134>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a34      	ldr	r2, [pc, #208]	; (80009d0 <MX_GPIO_Init+0x134>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b32      	ldr	r3, [pc, #200]	; (80009d0 <MX_GPIO_Init+0x134>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <MX_GPIO_Init+0x134>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a2e      	ldr	r2, [pc, #184]	; (80009d0 <MX_GPIO_Init+0x134>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <MX_GPIO_Init+0x134>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092a:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <MX_GPIO_Init+0x134>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a28      	ldr	r2, [pc, #160]	; (80009d0 <MX_GPIO_Init+0x134>)
 8000930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <MX_GPIO_Init+0x134>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f244 0181 	movw	r1, #16513	; 0x4081
 8000948:	4822      	ldr	r0, [pc, #136]	; (80009d4 <MX_GPIO_Init+0x138>)
 800094a:	f001 f92f 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2140      	movs	r1, #64	; 0x40
 8000952:	4821      	ldr	r0, [pc, #132]	; (80009d8 <MX_GPIO_Init+0x13c>)
 8000954:	f001 f92a 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	481b      	ldr	r0, [pc, #108]	; (80009dc <MX_GPIO_Init+0x140>)
 8000970:	f000 ff70 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000974:	f244 0381 	movw	r3, #16513	; 0x4081
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4811      	ldr	r0, [pc, #68]	; (80009d4 <MX_GPIO_Init+0x138>)
 800098e:	f000 ff61 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <MX_GPIO_Init+0x13c>)
 80009aa:	f000 ff53 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_GPIO_Init+0x13c>)
 80009c2:	f000 ff47 	bl	8001854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c6:	bf00      	nop
 80009c8:	3730      	adds	r7, #48	; 0x30
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40021800 	.word	0x40021800
 80009dc:	40020800 	.word	0x40020800

080009e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f003 fdce 	bl	800458a <osDelay>
 80009ee:	e7fb      	b.n	80009e8 <StartDefaultTask+0x8>

080009f0 <alive_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_alive_init */
void alive_init(void const * argument)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //red
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fe:	4809      	ldr	r0, [pc, #36]	; (8000a24 <alive_init+0x34>)
 8000a00:	f001 f8d4 	bl	8001bac <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000a04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a08:	f003 fdbf 	bl	800458a <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //red
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <alive_init+0x34>)
 8000a14:	f001 f8ca 	bl	8001bac <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000a18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a1c:	f003 fdb5 	bl	800458a <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //red
 8000a20:	e7ea      	b.n	80009f8 <alive_init+0x8>
 8000a22:	bf00      	nop
 8000a24:	40020400 	.word	0x40020400

08000a28 <button_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_button_init */
void button_init(void const * argument)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN button_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f003 fdaa 	bl	800458a <osDelay>
 8000a36:	e7fb      	b.n	8000a30 <button_init+0x8>

08000a38 <light_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_light_init */
void light_init(void const * argument)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN light_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f003 fda2 	bl	800458a <osDelay>
 8000a46:	e7fb      	b.n	8000a40 <light_init+0x8>

08000a48 <analog_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_analog_init */
void analog_init(void const * argument)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN analog_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f003 fd9a 	bl	800458a <osDelay>
 8000a56:	e7fb      	b.n	8000a50 <analog_init+0x8>

08000a58 <control_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_control_init */
void control_init(void const * argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN control_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f003 fd92 	bl	800458a <osDelay>
 8000a66:	e7fb      	b.n	8000a60 <control_init+0x8>

08000a68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d101      	bne.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a7a:	f000 fa9f 	bl	8000fbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40010000 	.word	0x40010000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	210f      	movs	r1, #15
 8000ad2:	f06f 0001 	mvn.w	r0, #1
 8000ad6:	f000 fb6d 	bl	80011b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a4e      	ldr	r2, [pc, #312]	; (8000c40 <HAL_ETH_MspInit+0x158>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	f040 8096 	bne.w	8000c38 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b0c:	4b4d      	ldr	r3, [pc, #308]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a4c      	ldr	r2, [pc, #304]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
 8000b18:	4b4a      	ldr	r3, [pc, #296]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b20:	623b      	str	r3, [r7, #32]
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	4b47      	ldr	r3, [pc, #284]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	4a46      	ldr	r2, [pc, #280]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b30:	4b44      	ldr	r3, [pc, #272]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b38:	61fb      	str	r3, [r7, #28]
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	4a40      	ldr	r2, [pc, #256]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b46:	6313      	str	r3, [r2, #48]	; 0x30
 8000b48:	4b3e      	ldr	r3, [pc, #248]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b50:	61bb      	str	r3, [r7, #24]
 8000b52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b54:	4b3b      	ldr	r3, [pc, #236]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a3a      	ldr	r2, [pc, #232]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	4b38      	ldr	r3, [pc, #224]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b35      	ldr	r3, [pc, #212]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a34      	ldr	r2, [pc, #208]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a2e      	ldr	r2, [pc, #184]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b8a:	f043 0302 	orr.w	r3, r3, #2
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b9c:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a28      	ldr	r2, [pc, #160]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <HAL_ETH_MspInit+0x15c>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bb4:	2332      	movs	r3, #50	; 0x32
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc4:	230b      	movs	r3, #11
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	481e      	ldr	r0, [pc, #120]	; (8000c48 <HAL_ETH_MspInit+0x160>)
 8000bd0:	f000 fe40 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bd4:	2386      	movs	r3, #134	; 0x86
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be4:	230b      	movs	r3, #11
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4817      	ldr	r0, [pc, #92]	; (8000c4c <HAL_ETH_MspInit+0x164>)
 8000bf0:	f000 fe30 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c06:	230b      	movs	r3, #11
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480f      	ldr	r0, [pc, #60]	; (8000c50 <HAL_ETH_MspInit+0x168>)
 8000c12:	f000 fe1f 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c16:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c28:	230b      	movs	r3, #11
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	4808      	ldr	r0, [pc, #32]	; (8000c54 <HAL_ETH_MspInit+0x16c>)
 8000c34:	f000 fe0e 	bl	8001854 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3738      	adds	r7, #56	; 0x38
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40028000 	.word	0x40028000
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020400 	.word	0x40020400
 8000c54:	40021800 	.word	0x40021800

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0aa      	sub	sp, #168	; 0xa8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	2284      	movs	r2, #132	; 0x84
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 fe5b 	bl	8005934 <memset>
  if(huart->Instance==USART3)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a22      	ldr	r2, [pc, #136]	; (8000d0c <HAL_UART_MspInit+0xb4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d13c      	bne.n	8000d02 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c8c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 fdf6 	bl	8002888 <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ca2:	f7ff fef3 	bl	8000a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <HAL_UART_MspInit+0xb8>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <HAL_UART_MspInit+0xb8>)
 8000cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <HAL_UART_MspInit+0xb8>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_UART_MspInit+0xb8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <HAL_UART_MspInit+0xb8>)
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_UART_MspInit+0xb8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <HAL_UART_MspInit+0xbc>)
 8000cfe:	f000 fda9 	bl	8001854 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	37a8      	adds	r7, #168	; 0xa8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40004800 	.word	0x40004800
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020c00 	.word	0x40020c00

08000d18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0ac      	sub	sp, #176	; 0xb0
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d30:	f107 0318 	add.w	r3, r7, #24
 8000d34:	2284      	movs	r2, #132	; 0x84
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f004 fdfb 	bl	8005934 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d46:	d159      	bne.n	8000dfc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d54:	f107 0318 	add.w	r3, r7, #24
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 fd95 	bl	8002888 <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d64:	f7ff fe92 	bl	8000a8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <HAL_PCD_MspInit+0xec>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <HAL_PCD_MspInit+0xec>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6313      	str	r3, [r2, #48]	; 0x30
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <HAL_PCD_MspInit+0xec>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d80:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d9a:	230a      	movs	r3, #10
 8000d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000da4:	4619      	mov	r1, r3
 8000da6:	4818      	ldr	r0, [pc, #96]	; (8000e08 <HAL_PCD_MspInit+0xf0>)
 8000da8:	f000 fd54 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4810      	ldr	r0, [pc, #64]	; (8000e08 <HAL_PCD_MspInit+0xf0>)
 8000dc8:	f000 fd44 	bl	8001854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <HAL_PCD_MspInit+0xec>)
 8000dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd0:	4a0c      	ldr	r2, [pc, #48]	; (8000e04 <HAL_PCD_MspInit+0xec>)
 8000dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd6:	6353      	str	r3, [r2, #52]	; 0x34
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_PCD_MspInit+0xec>)
 8000dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <HAL_PCD_MspInit+0xec>)
 8000de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <HAL_PCD_MspInit+0xec>)
 8000dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dee:	6453      	str	r3, [r2, #68]	; 0x44
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <HAL_PCD_MspInit+0xec>)
 8000df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	37b0      	adds	r7, #176	; 0xb0
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020000 	.word	0x40020000

08000e0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08c      	sub	sp, #48	; 0x30
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <HAL_InitTick+0xcc>)
 8000e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e20:	4a2d      	ldr	r2, [pc, #180]	; (8000ed8 <HAL_InitTick+0xcc>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6453      	str	r3, [r2, #68]	; 0x44
 8000e28:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <HAL_InitTick+0xcc>)
 8000e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e34:	f107 020c 	add.w	r2, r7, #12
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fcf0 	bl	8002824 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e44:	f001 fcda 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 8000e48:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4c:	4a23      	ldr	r2, [pc, #140]	; (8000edc <HAL_InitTick+0xd0>)
 8000e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e52:	0c9b      	lsrs	r3, r3, #18
 8000e54:	3b01      	subs	r3, #1
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e58:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <HAL_InitTick+0xd4>)
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <HAL_InitTick+0xd8>)
 8000e5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <HAL_InitTick+0xd4>)
 8000e60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e64:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e66:	4a1e      	ldr	r2, [pc, #120]	; (8000ee0 <HAL_InitTick+0xd4>)
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <HAL_InitTick+0xd4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <HAL_InitTick+0xd4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_InitTick+0xd4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e7e:	4818      	ldr	r0, [pc, #96]	; (8000ee0 <HAL_InitTick+0xd4>)
 8000e80:	f002 f8f2 	bl	8003068 <HAL_TIM_Base_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d11b      	bne.n	8000eca <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e92:	4813      	ldr	r0, [pc, #76]	; (8000ee0 <HAL_InitTick+0xd4>)
 8000e94:	f002 f94a 	bl	800312c <HAL_TIM_Base_Start_IT>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d111      	bne.n	8000eca <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ea6:	2019      	movs	r0, #25
 8000ea8:	f000 f9a0 	bl	80011ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b0f      	cmp	r3, #15
 8000eb0:	d808      	bhi.n	8000ec4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	2019      	movs	r0, #25
 8000eb8:	f000 f97c 	bl	80011b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_InitTick+0xdc>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e002      	b.n	8000eca <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000eca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3730      	adds	r7, #48	; 0x30
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	431bde83 	.word	0x431bde83
 8000ee0:	20000a58 	.word	0x20000a58
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	20000004 	.word	0x20000004

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler+0x4>

08000efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f1e:	f002 f97d 	bl	800321c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000a58 	.word	0x20000a58

08000f2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f6c:	4c0b      	ldr	r4, [pc, #44]	; (8000f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f7a:	f7ff ffd7 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f004 fce1 	bl	8005944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f82:	f7ff fadd 	bl	8000540 <main>
  bx  lr    
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f94:	08005ab0 	.word	0x08005ab0
  ldr r2, =_sbss
 8000f98:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000f9c:	200047f4 	.word	0x200047f4

08000fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>

08000fa2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f000 f8f9 	bl	800119e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fac:	200f      	movs	r0, #15
 8000fae:	f7ff ff2d 	bl	8000e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb2:	f7ff fd71 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000aa4 	.word	0x20000aa4

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000aa4 	.word	0x20000aa4

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <__NVIC_SetPriorityGrouping+0x40>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	4313      	orrs	r3, r2
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <__NVIC_SetPriorityGrouping+0x40>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	05fa0000 	.word	0x05fa0000

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db0b      	blt.n	80010d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 021f 	and.w	r2, r3, #31
 80010c0:	4907      	ldr	r1, [pc, #28]	; (80010e0 <__NVIC_EnableIRQ+0x38>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	2001      	movs	r0, #1
 80010ca:	fa00 f202 	lsl.w	r2, r0, r2
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
         );
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff4c 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c6:	f7ff ff61 	bl	800108c <__NVIC_GetPriorityGrouping>
 80011ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	68b9      	ldr	r1, [r7, #8]
 80011d0:	6978      	ldr	r0, [r7, #20]
 80011d2:	f7ff ffb1 	bl	8001138 <NVIC_EncodePriority>
 80011d6:	4602      	mov	r2, r0
 80011d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff80 	bl	80010e4 <__NVIC_SetPriority>
}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff54 	bl	80010a8 <__NVIC_EnableIRQ>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e06a      	b.n	80012f0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001220:	2b00      	cmp	r3, #0
 8001222:	d106      	bne.n	8001232 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2223      	movs	r2, #35	; 0x23
 8001228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff fc5b 	bl	8000ae8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	4b31      	ldr	r3, [pc, #196]	; (80012f8 <HAL_ETH_Init+0xf0>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a30      	ldr	r2, [pc, #192]	; (80012f8 <HAL_ETH_Init+0xf0>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <HAL_ETH_Init+0xf0>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800124a:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <HAL_ETH_Init+0xf4>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4a2b      	ldr	r2, [pc, #172]	; (80012fc <HAL_ETH_Init+0xf4>)
 8001250:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001254:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001256:	4b29      	ldr	r3, [pc, #164]	; (80012fc <HAL_ETH_Init+0xf4>)
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	4927      	ldr	r1, [pc, #156]	; (80012fc <HAL_ETH_Init+0xf4>)
 8001260:	4313      	orrs	r3, r2
 8001262:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <HAL_ETH_Init+0xf4>)
 8001266:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800127e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001280:	f7ff feb0 	bl	8000fe4 <HAL_GetTick>
 8001284:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001286:	e011      	b.n	80012ac <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001288:	f7ff feac 	bl	8000fe4 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001296:	d909      	bls.n	80012ac <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2204      	movs	r2, #4
 800129c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	22e0      	movs	r2, #224	; 0xe0
 80012a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e021      	b.n	80012f0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1e4      	bne.n	8001288 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f958 	bl	8001574 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f9ff 	bl	80016c8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 fa55 	bl	800177a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	461a      	mov	r2, r3
 80012d6:	2100      	movs	r1, #0
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f9bd 	bl	8001658 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2210      	movs	r2, #16
 80012ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40013800 	.word	0x40013800

08001300 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4b51      	ldr	r3, [pc, #324]	; (800145c <ETH_SetMACConfig+0x15c>)
 8001316:	4013      	ands	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	7c1b      	ldrb	r3, [r3, #16]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <ETH_SetMACConfig+0x28>
 8001322:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001326:	e000      	b.n	800132a <ETH_SetMACConfig+0x2a>
 8001328:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	7c5b      	ldrb	r3, [r3, #17]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d102      	bne.n	8001338 <ETH_SetMACConfig+0x38>
 8001332:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001336:	e000      	b.n	800133a <ETH_SetMACConfig+0x3a>
 8001338:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800133a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001340:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	7fdb      	ldrb	r3, [r3, #31]
 8001346:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001348:	431a      	orrs	r2, r3
                        macconf->Speed |
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800134e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	7f92      	ldrb	r2, [r2, #30]
 8001354:	2a00      	cmp	r2, #0
 8001356:	d102      	bne.n	800135e <ETH_SetMACConfig+0x5e>
 8001358:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800135c:	e000      	b.n	8001360 <ETH_SetMACConfig+0x60>
 800135e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001360:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	7f1b      	ldrb	r3, [r3, #28]
 8001366:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001368:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800136e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	791b      	ldrb	r3, [r3, #4]
 8001374:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001376:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800137e:	2a00      	cmp	r2, #0
 8001380:	d102      	bne.n	8001388 <ETH_SetMACConfig+0x88>
 8001382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001386:	e000      	b.n	800138a <ETH_SetMACConfig+0x8a>
 8001388:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800138a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	7bdb      	ldrb	r3, [r3, #15]
 8001390:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001392:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001398:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013a0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013a2:	4313      	orrs	r3, r2
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f7ff fe1e 	bl	8000ffc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80013d6:	4013      	ands	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013de:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80013e6:	2a00      	cmp	r2, #0
 80013e8:	d101      	bne.n	80013ee <ETH_SetMACConfig+0xee>
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	e000      	b.n	80013f0 <ETH_SetMACConfig+0xf0>
 80013ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013f0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80013fe:	2a01      	cmp	r2, #1
 8001400:	d101      	bne.n	8001406 <ETH_SetMACConfig+0x106>
 8001402:	2208      	movs	r2, #8
 8001404:	e000      	b.n	8001408 <ETH_SetMACConfig+0x108>
 8001406:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001408:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001410:	2a01      	cmp	r2, #1
 8001412:	d101      	bne.n	8001418 <ETH_SetMACConfig+0x118>
 8001414:	2204      	movs	r2, #4
 8001416:	e000      	b.n	800141a <ETH_SetMACConfig+0x11a>
 8001418:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800141a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001422:	2a01      	cmp	r2, #1
 8001424:	d101      	bne.n	800142a <ETH_SetMACConfig+0x12a>
 8001426:	2202      	movs	r2, #2
 8001428:	e000      	b.n	800142c <ETH_SetMACConfig+0x12c>
 800142a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800142c:	4313      	orrs	r3, r2
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fdd9 	bl	8000ffc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	619a      	str	r2, [r3, #24]
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	ff20810f 	.word	0xff20810f

08001460 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <ETH_SetDMAConfig+0x110>)
 800147a:	4013      	ands	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	7b1b      	ldrb	r3, [r3, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <ETH_SetDMAConfig+0x2c>
 8001486:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800148a:	e000      	b.n	800148e <ETH_SetDMAConfig+0x2e>
 800148c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	7b5b      	ldrb	r3, [r3, #13]
 8001492:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001494:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	7f52      	ldrb	r2, [r2, #29]
 800149a:	2a00      	cmp	r2, #0
 800149c:	d102      	bne.n	80014a4 <ETH_SetDMAConfig+0x44>
 800149e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014a2:	e000      	b.n	80014a6 <ETH_SetDMAConfig+0x46>
 80014a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	7b9b      	ldrb	r3, [r3, #14]
 80014ac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014ae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	7f1b      	ldrb	r3, [r3, #28]
 80014ba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80014bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	7f9b      	ldrb	r3, [r3, #30]
 80014c2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014c4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014d2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014d4:	4313      	orrs	r3, r2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e4:	461a      	mov	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014f6:	2001      	movs	r0, #1
 80014f8:	f7ff fd80 	bl	8000ffc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001504:	461a      	mov	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	791b      	ldrb	r3, [r3, #4]
 800150e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001514:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800151a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001520:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001528:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800152a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001532:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001538:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001542:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001546:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff fd51 	bl	8000ffc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001562:	461a      	mov	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	f8de3f23 	.word	0xf8de3f23

08001574 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0a6      	sub	sp, #152	; 0x98
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800157c:	2301      	movs	r3, #1
 800157e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001582:	2301      	movs	r3, #1
 8001584:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001588:	2300      	movs	r3, #0
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001592:	2301      	movs	r3, #1
 8001594:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800159e:	2301      	movs	r3, #1
 80015a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015b0:	2300      	movs	r3, #0
 80015b2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015da:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80015dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80015e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ec:	4619      	mov	r1, r3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fe86 	bl	8001300 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015f4:	2301      	movs	r3, #1
 80015f6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015f8:	2301      	movs	r3, #1
 80015fa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015fc:	2301      	movs	r3, #1
 80015fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001602:	2301      	movs	r3, #1
 8001604:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001620:	2301      	movs	r3, #1
 8001622:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001628:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800162a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800162e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001634:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001636:	2301      	movs	r3, #1
 8001638:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800163c:	2300      	movs	r3, #0
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4619      	mov	r1, r3
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ff08 	bl	8001460 <ETH_SetDMAConfig>
}
 8001650:	bf00      	nop
 8001652:	3798      	adds	r7, #152	; 0x98
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3305      	adds	r3, #5
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	3204      	adds	r2, #4
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	4313      	orrs	r3, r2
 8001674:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <ETH_MACAddressConfig+0x68>)
 800167a:	4413      	add	r3, r2
 800167c:	461a      	mov	r2, r3
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3303      	adds	r3, #3
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	061a      	lsls	r2, r3, #24
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3302      	adds	r3, #2
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	041b      	lsls	r3, r3, #16
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3301      	adds	r3, #1
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	4313      	orrs	r3, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <ETH_MACAddressConfig+0x6c>)
 80016aa:	4413      	add	r3, r2
 80016ac:	461a      	mov	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	6013      	str	r3, [r2, #0]
}
 80016b2:	bf00      	nop
 80016b4:	371c      	adds	r7, #28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40028040 	.word	0x40028040
 80016c4:	40028044 	.word	0x40028044

080016c8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	e03e      	b.n	8001754 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68d9      	ldr	r1, [r3, #12]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	440b      	add	r3, r1
 80016e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	3206      	adds	r2, #6
 8001708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d80c      	bhi.n	8001738 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68d9      	ldr	r1, [r3, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	461a      	mov	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	e004      	b.n	8001742 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	461a      	mov	r2, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3301      	adds	r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d9bd      	bls.n	80016d6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176c:	611a      	str	r2, [r3, #16]
}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800177a:	b480      	push	{r7}
 800177c:	b085      	sub	sp, #20
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	e046      	b.n	8001816 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6919      	ldr	r1, [r3, #16]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2200      	movs	r2, #0
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017c4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017cc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	3212      	adds	r2, #18
 80017e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d80c      	bhi.n	8001806 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6919      	ldr	r1, [r3, #16]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	461a      	mov	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	e004      	b.n	8001810 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	461a      	mov	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3301      	adds	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b03      	cmp	r3, #3
 800181a:	d9b5      	bls.n	8001788 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691a      	ldr	r2, [r3, #16]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001846:	60da      	str	r2, [r3, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	e175      	b.n	8001b60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001874:	2201      	movs	r2, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	429a      	cmp	r2, r3
 800188e:	f040 8164 	bne.w	8001b5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d005      	beq.n	80018aa <HAL_GPIO_Init+0x56>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d130      	bne.n	800190c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 0201 	and.w	r2, r3, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b03      	cmp	r3, #3
 8001916:	d017      	beq.n	8001948 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d123      	bne.n	800199c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	08da      	lsrs	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3208      	adds	r2, #8
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3208      	adds	r2, #8
 8001996:	69b9      	ldr	r1, [r7, #24]
 8001998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80be 	beq.w	8001b5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	4b66      	ldr	r3, [pc, #408]	; (8001b78 <HAL_GPIO_Init+0x324>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a65      	ldr	r2, [pc, #404]	; (8001b78 <HAL_GPIO_Init+0x324>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b63      	ldr	r3, [pc, #396]	; (8001b78 <HAL_GPIO_Init+0x324>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019f6:	4a61      	ldr	r2, [pc, #388]	; (8001b7c <HAL_GPIO_Init+0x328>)
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3302      	adds	r3, #2
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a58      	ldr	r2, [pc, #352]	; (8001b80 <HAL_GPIO_Init+0x32c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d037      	beq.n	8001a92 <HAL_GPIO_Init+0x23e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a57      	ldr	r2, [pc, #348]	; (8001b84 <HAL_GPIO_Init+0x330>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d031      	beq.n	8001a8e <HAL_GPIO_Init+0x23a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a56      	ldr	r2, [pc, #344]	; (8001b88 <HAL_GPIO_Init+0x334>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d02b      	beq.n	8001a8a <HAL_GPIO_Init+0x236>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a55      	ldr	r2, [pc, #340]	; (8001b8c <HAL_GPIO_Init+0x338>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_Init+0x232>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a54      	ldr	r2, [pc, #336]	; (8001b90 <HAL_GPIO_Init+0x33c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_Init+0x22e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a53      	ldr	r2, [pc, #332]	; (8001b94 <HAL_GPIO_Init+0x340>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x22a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <HAL_GPIO_Init+0x344>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x226>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a51      	ldr	r2, [pc, #324]	; (8001b9c <HAL_GPIO_Init+0x348>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x222>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a50      	ldr	r2, [pc, #320]	; (8001ba0 <HAL_GPIO_Init+0x34c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x21e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4f      	ldr	r2, [pc, #316]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x21a>
 8001a6a:	2309      	movs	r3, #9
 8001a6c:	e012      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a6e:	230a      	movs	r3, #10
 8001a70:	e010      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a72:	2308      	movs	r3, #8
 8001a74:	e00e      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a76:	2307      	movs	r3, #7
 8001a78:	e00c      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a7a:	2306      	movs	r3, #6
 8001a7c:	e00a      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a7e:	2305      	movs	r3, #5
 8001a80:	e008      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a82:	2304      	movs	r3, #4
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a86:	2303      	movs	r3, #3
 8001a88:	e004      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e002      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a92:	2300      	movs	r3, #0
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	f002 0203 	and.w	r2, r2, #3
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001aa4:	4935      	ldr	r1, [pc, #212]	; (8001b7c <HAL_GPIO_Init+0x328>)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <HAL_GPIO_Init+0x354>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad6:	4a34      	ldr	r2, [pc, #208]	; (8001ba8 <HAL_GPIO_Init+0x354>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001adc:	4b32      	ldr	r3, [pc, #200]	; (8001ba8 <HAL_GPIO_Init+0x354>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b00:	4a29      	ldr	r2, [pc, #164]	; (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b06:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b30:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b54:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b0f      	cmp	r3, #15
 8001b64:	f67f ae86 	bls.w	8001874 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3724      	adds	r7, #36	; 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40013800 	.word	0x40013800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020400 	.word	0x40020400
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	40020c00 	.word	0x40020c00
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40021400 	.word	0x40021400
 8001b98:	40021800 	.word	0x40021800
 8001b9c:	40021c00 	.word	0x40021c00
 8001ba0:	40022000 	.word	0x40022000
 8001ba4:	40022400 	.word	0x40022400
 8001ba8:	40013c00 	.word	0x40013c00

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be0:	b08f      	sub	sp, #60	; 0x3c
 8001be2:	af0a      	add	r7, sp, #40	; 0x28
 8001be4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e116      	b.n	8001e1e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff f884 	bl	8000d18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2203      	movs	r2, #3
 8001c14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 f9a4 	bl	8003f7c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	687e      	ldr	r6, [r7, #4]
 8001c3c:	466d      	mov	r5, sp
 8001c3e:	f106 0410 	add.w	r4, r6, #16
 8001c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c52:	1d33      	adds	r3, r6, #4
 8001c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c56:	6838      	ldr	r0, [r7, #0]
 8001c58:	f002 f938 	bl	8003ecc <USB_CoreInit>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2202      	movs	r2, #2
 8001c66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e0d7      	b.n	8001e1e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 f992 	bl	8003f9e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]
 8001c7e:	e04a      	b.n	8001d16 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	333d      	adds	r3, #61	; 0x3d
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	333c      	adds	r3, #60	; 0x3c
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	b298      	uxth	r0, r3
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	3344      	adds	r3, #68	; 0x44
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cc0:	7bfa      	ldrb	r2, [r7, #15]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	3340      	adds	r3, #64	; 0x40
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3348      	adds	r3, #72	; 0x48
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	334c      	adds	r3, #76	; 0x4c
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	3354      	adds	r3, #84	; 0x54
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	3301      	adds	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d3af      	bcc.n	8001c80 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d20:	2300      	movs	r3, #0
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	e044      	b.n	8001db0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	3301      	adds	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3b5      	bcc.n	8001d26 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	687e      	ldr	r6, [r7, #4]
 8001dc2:	466d      	mov	r5, sp
 8001dc4:	f106 0410 	add.w	r4, r6, #16
 8001dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dd8:	1d33      	adds	r3, r6, #4
 8001dda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ddc:	6838      	ldr	r0, [r7, #0]
 8001dde:	f002 f92b 	bl	8004038 <USB_DevInit>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e014      	b.n	8001e1e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d102      	bne.n	8001e12 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f80b 	bl	8001e28 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 fae9 	bl	80043ee <USB_DevDisconnect>

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_PCDEx_ActivateLPM+0x44>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	10000003 	.word	0x10000003

08001e70 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40007000 	.word	0x40007000

08001e90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e291      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8087 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eb4:	4b96      	ldr	r3, [pc, #600]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d00c      	beq.n	8001eda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec0:	4b93      	ldr	r3, [pc, #588]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d112      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x62>
 8001ecc:	4b90      	ldr	r3, [pc, #576]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eda:	4b8d      	ldr	r3, [pc, #564]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d06c      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x130>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d168      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e26b      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efa:	d106      	bne.n	8001f0a <HAL_RCC_OscConfig+0x7a>
 8001efc:	4b84      	ldr	r3, [pc, #528]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a83      	ldr	r2, [pc, #524]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	e02e      	b.n	8001f68 <HAL_RCC_OscConfig+0xd8>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x9c>
 8001f12:	4b7f      	ldr	r3, [pc, #508]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a7e      	ldr	r2, [pc, #504]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b7c      	ldr	r3, [pc, #496]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a7b      	ldr	r2, [pc, #492]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e01d      	b.n	8001f68 <HAL_RCC_OscConfig+0xd8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0xc0>
 8001f36:	4b76      	ldr	r3, [pc, #472]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a75      	ldr	r2, [pc, #468]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b73      	ldr	r3, [pc, #460]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a72      	ldr	r2, [pc, #456]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0xd8>
 8001f50:	4b6f      	ldr	r3, [pc, #444]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6e      	ldr	r2, [pc, #440]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b6c      	ldr	r3, [pc, #432]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a6b      	ldr	r2, [pc, #428]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d013      	beq.n	8001f98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff f838 	bl	8000fe4 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff f834 	bl	8000fe4 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e21f      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b61      	ldr	r3, [pc, #388]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0xe8>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff f824 	bl	8000fe4 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff f820 	bl	8000fe4 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e20b      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	4b57      	ldr	r3, [pc, #348]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x110>
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d069      	beq.n	80020a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fce:	4b50      	ldr	r3, [pc, #320]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fda:	4b4d      	ldr	r3, [pc, #308]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d11c      	bne.n	8002020 <HAL_RCC_OscConfig+0x190>
 8001fe6:	4b4a      	ldr	r3, [pc, #296]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	4b47      	ldr	r3, [pc, #284]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x17a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e1df      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	4b41      	ldr	r3, [pc, #260]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	493d      	ldr	r1, [pc, #244]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	e040      	b.n	80020a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d023      	beq.n	8002070 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002028:	4b39      	ldr	r3, [pc, #228]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a38      	ldr	r2, [pc, #224]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7fe ffd6 	bl	8000fe4 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203c:	f7fe ffd2 	bl	8000fe4 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e1bd      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204e:	4b30      	ldr	r3, [pc, #192]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4929      	ldr	r1, [pc, #164]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
 800206e:	e018      	b.n	80020a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002070:	4b27      	ldr	r3, [pc, #156]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a26      	ldr	r2, [pc, #152]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7fe ffb2 	bl	8000fe4 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002084:	f7fe ffae 	bl	8000fe4 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e199      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d038      	beq.n	8002120 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d019      	beq.n	80020ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b6:	4b16      	ldr	r3, [pc, #88]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 80020b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ba:	4a15      	ldr	r2, [pc, #84]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c2:	f7fe ff8f 	bl	8000fe4 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ca:	f7fe ff8b 	bl	8000fe4 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e176      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 80020de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x23a>
 80020e8:	e01a      	b.n	8002120 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 80020ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ee:	4a08      	ldr	r2, [pc, #32]	; (8002110 <HAL_RCC_OscConfig+0x280>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f6:	f7fe ff75 	bl	8000fe4 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fc:	e00a      	b.n	8002114 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fe:	f7fe ff71 	bl	8000fe4 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d903      	bls.n	8002114 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e15c      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>
 8002110:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002114:	4b91      	ldr	r3, [pc, #580]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 8002116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1ee      	bne.n	80020fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80a4 	beq.w	8002276 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212e:	4b8b      	ldr	r3, [pc, #556]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10d      	bne.n	8002156 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	4b88      	ldr	r3, [pc, #544]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a87      	ldr	r2, [pc, #540]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b85      	ldr	r3, [pc, #532]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002156:	4b82      	ldr	r3, [pc, #520]	; (8002360 <HAL_RCC_OscConfig+0x4d0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d118      	bne.n	8002194 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002162:	4b7f      	ldr	r3, [pc, #508]	; (8002360 <HAL_RCC_OscConfig+0x4d0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a7e      	ldr	r2, [pc, #504]	; (8002360 <HAL_RCC_OscConfig+0x4d0>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7fe ff39 	bl	8000fe4 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002176:	f7fe ff35 	bl	8000fe4 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b64      	cmp	r3, #100	; 0x64
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e120      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002188:	4b75      	ldr	r3, [pc, #468]	; (8002360 <HAL_RCC_OscConfig+0x4d0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x31a>
 800219c:	4b6f      	ldr	r3, [pc, #444]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	4a6e      	ldr	r2, [pc, #440]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6713      	str	r3, [r2, #112]	; 0x70
 80021a8:	e02d      	b.n	8002206 <HAL_RCC_OscConfig+0x376>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x33c>
 80021b2:	4b6a      	ldr	r3, [pc, #424]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	4a69      	ldr	r2, [pc, #420]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	6713      	str	r3, [r2, #112]	; 0x70
 80021be:	4b67      	ldr	r3, [pc, #412]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	4a66      	ldr	r2, [pc, #408]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80021c4:	f023 0304 	bic.w	r3, r3, #4
 80021c8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ca:	e01c      	b.n	8002206 <HAL_RCC_OscConfig+0x376>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	d10c      	bne.n	80021ee <HAL_RCC_OscConfig+0x35e>
 80021d4:	4b61      	ldr	r3, [pc, #388]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	4a60      	ldr	r2, [pc, #384]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	6713      	str	r3, [r2, #112]	; 0x70
 80021e0:	4b5e      	ldr	r3, [pc, #376]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e4:	4a5d      	ldr	r2, [pc, #372]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6713      	str	r3, [r2, #112]	; 0x70
 80021ec:	e00b      	b.n	8002206 <HAL_RCC_OscConfig+0x376>
 80021ee:	4b5b      	ldr	r3, [pc, #364]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	4a5a      	ldr	r2, [pc, #360]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	6713      	str	r3, [r2, #112]	; 0x70
 80021fa:	4b58      	ldr	r3, [pc, #352]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	4a57      	ldr	r2, [pc, #348]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 8002200:	f023 0304 	bic.w	r3, r3, #4
 8002204:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d015      	beq.n	800223a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220e:	f7fe fee9 	bl	8000fe4 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002214:	e00a      	b.n	800222c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7fe fee5 	bl	8000fe4 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	; 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e0ce      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222c:	4b4b      	ldr	r3, [pc, #300]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0ee      	beq.n	8002216 <HAL_RCC_OscConfig+0x386>
 8002238:	e014      	b.n	8002264 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223a:	f7fe fed3 	bl	8000fe4 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002240:	e00a      	b.n	8002258 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7fe fecf 	bl	8000fe4 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e0b8      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002258:	4b40      	ldr	r3, [pc, #256]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1ee      	bne.n	8002242 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d105      	bne.n	8002276 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226a:	4b3c      	ldr	r3, [pc, #240]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	4a3b      	ldr	r2, [pc, #236]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 8002270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002274:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 80a4 	beq.w	80023c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002280:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	d06b      	beq.n	8002364 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d149      	bne.n	8002328 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002294:	4b31      	ldr	r3, [pc, #196]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a30      	ldr	r2, [pc, #192]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 800229a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800229e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe fea0 	bl	8000fe4 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a8:	f7fe fe9c 	bl	8000fe4 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e087      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ba:	4b28      	ldr	r3, [pc, #160]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	019b      	lsls	r3, r3, #6
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	085b      	lsrs	r3, r3, #1
 80022de:	3b01      	subs	r3, #1
 80022e0:	041b      	lsls	r3, r3, #16
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	061b      	lsls	r3, r3, #24
 80022ea:	4313      	orrs	r3, r2
 80022ec:	4a1b      	ldr	r2, [pc, #108]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80022ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f4:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a18      	ldr	r2, [pc, #96]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 80022fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7fe fe70 	bl	8000fe4 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002308:	f7fe fe6c 	bl	8000fe4 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e057      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x478>
 8002326:	e04f      	b.n	80023c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0b      	ldr	r2, [pc, #44]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 800232e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe fe56 	bl	8000fe4 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233c:	f7fe fe52 	bl	8000fe4 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e03d      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234e:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_RCC_OscConfig+0x4cc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x4ac>
 800235a:	e035      	b.n	80023c8 <HAL_RCC_OscConfig+0x538>
 800235c:	40023800 	.word	0x40023800
 8002360:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002364:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <HAL_RCC_OscConfig+0x544>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d028      	beq.n	80023c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d121      	bne.n	80023c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d11a      	bne.n	80023c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002394:	4013      	ands	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800239a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800239c:	4293      	cmp	r3, r2
 800239e:	d111      	bne.n	80023c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	085b      	lsrs	r3, r3, #1
 80023ac:	3b01      	subs	r3, #1
 80023ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d107      	bne.n	80023c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800

080023d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0d0      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d910      	bls.n	8002420 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b67      	ldr	r3, [pc, #412]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 020f 	bic.w	r2, r3, #15
 8002406:	4965      	ldr	r1, [pc, #404]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b8      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 800243e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002442:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002450:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800245a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b50      	ldr	r3, [pc, #320]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	494d      	ldr	r1, [pc, #308]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d040      	beq.n	80024fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d115      	bne.n	80024ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e07f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e073      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06b      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4936      	ldr	r1, [pc, #216]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024cc:	f7fe fd8a 	bl	8000fe4 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7fe fd86 	bl	8000fe4 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e053      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 020c 	and.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1eb      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d210      	bcs.n	800252c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 020f 	bic.w	r2, r3, #15
 8002512:	4922      	ldr	r1, [pc, #136]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e032      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4916      	ldr	r1, [pc, #88]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	490e      	ldr	r1, [pc, #56]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800256a:	f000 f821 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	490a      	ldr	r1, [pc, #40]	; (80025a4 <HAL_RCC_ClockConfig+0x1cc>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1d4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fc3e 	bl	8000e0c <HAL_InitTick>

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023c00 	.word	0x40023c00
 80025a0:	40023800 	.word	0x40023800
 80025a4:	08005a88 	.word	0x08005a88
 80025a8:	20000000 	.word	0x20000000
 80025ac:	20000004 	.word	0x20000004

080025b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025b4:	b094      	sub	sp, #80	; 0x50
 80025b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	647b      	str	r3, [r7, #68]	; 0x44
 80025bc:	2300      	movs	r3, #0
 80025be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025c0:	2300      	movs	r3, #0
 80025c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025c8:	4b79      	ldr	r3, [pc, #484]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d00d      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x40>
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	f200 80e1 	bhi.w	800279c <HAL_RCC_GetSysClockFreq+0x1ec>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x34>
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d003      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x3a>
 80025e2:	e0db      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025e4:	4b73      	ldr	r3, [pc, #460]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80025e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025e8:	e0db      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ea:	4b73      	ldr	r3, [pc, #460]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80025ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ee:	e0d8      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f0:	4b6f      	ldr	r3, [pc, #444]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025fa:	4b6d      	ldr	r3, [pc, #436]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d063      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	099b      	lsrs	r3, r3, #6
 800260c:	2200      	movs	r2, #0
 800260e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002610:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
 800261a:	2300      	movs	r3, #0
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
 800261e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002622:	4622      	mov	r2, r4
 8002624:	462b      	mov	r3, r5
 8002626:	f04f 0000 	mov.w	r0, #0
 800262a:	f04f 0100 	mov.w	r1, #0
 800262e:	0159      	lsls	r1, r3, #5
 8002630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002634:	0150      	lsls	r0, r2, #5
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4621      	mov	r1, r4
 800263c:	1a51      	subs	r1, r2, r1
 800263e:	6139      	str	r1, [r7, #16]
 8002640:	4629      	mov	r1, r5
 8002642:	eb63 0301 	sbc.w	r3, r3, r1
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002654:	4659      	mov	r1, fp
 8002656:	018b      	lsls	r3, r1, #6
 8002658:	4651      	mov	r1, sl
 800265a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800265e:	4651      	mov	r1, sl
 8002660:	018a      	lsls	r2, r1, #6
 8002662:	4651      	mov	r1, sl
 8002664:	ebb2 0801 	subs.w	r8, r2, r1
 8002668:	4659      	mov	r1, fp
 800266a:	eb63 0901 	sbc.w	r9, r3, r1
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800267a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800267e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002682:	4690      	mov	r8, r2
 8002684:	4699      	mov	r9, r3
 8002686:	4623      	mov	r3, r4
 8002688:	eb18 0303 	adds.w	r3, r8, r3
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	462b      	mov	r3, r5
 8002690:	eb49 0303 	adc.w	r3, r9, r3
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026a2:	4629      	mov	r1, r5
 80026a4:	024b      	lsls	r3, r1, #9
 80026a6:	4621      	mov	r1, r4
 80026a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026ac:	4621      	mov	r1, r4
 80026ae:	024a      	lsls	r2, r1, #9
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b6:	2200      	movs	r2, #0
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026c0:	f7fd fda6 	bl	8000210 <__aeabi_uldivmod>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4613      	mov	r3, r2
 80026ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026cc:	e058      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ce:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	2200      	movs	r2, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	4611      	mov	r1, r2
 80026da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026de:	623b      	str	r3, [r7, #32]
 80026e0:	2300      	movs	r3, #0
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026e8:	4642      	mov	r2, r8
 80026ea:	464b      	mov	r3, r9
 80026ec:	f04f 0000 	mov.w	r0, #0
 80026f0:	f04f 0100 	mov.w	r1, #0
 80026f4:	0159      	lsls	r1, r3, #5
 80026f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026fa:	0150      	lsls	r0, r2, #5
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4641      	mov	r1, r8
 8002702:	ebb2 0a01 	subs.w	sl, r2, r1
 8002706:	4649      	mov	r1, r9
 8002708:	eb63 0b01 	sbc.w	fp, r3, r1
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002718:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800271c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002720:	ebb2 040a 	subs.w	r4, r2, sl
 8002724:	eb63 050b 	sbc.w	r5, r3, fp
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	00eb      	lsls	r3, r5, #3
 8002732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002736:	00e2      	lsls	r2, r4, #3
 8002738:	4614      	mov	r4, r2
 800273a:	461d      	mov	r5, r3
 800273c:	4643      	mov	r3, r8
 800273e:	18e3      	adds	r3, r4, r3
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	464b      	mov	r3, r9
 8002744:	eb45 0303 	adc.w	r3, r5, r3
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002756:	4629      	mov	r1, r5
 8002758:	028b      	lsls	r3, r1, #10
 800275a:	4621      	mov	r1, r4
 800275c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002760:	4621      	mov	r1, r4
 8002762:	028a      	lsls	r2, r1, #10
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800276a:	2200      	movs	r2, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	61fa      	str	r2, [r7, #28]
 8002770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002774:	f7fd fd4c 	bl	8000210 <__aeabi_uldivmod>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4613      	mov	r3, r2
 800277e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	0c1b      	lsrs	r3, r3, #16
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	3301      	adds	r3, #1
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002790:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800279a:	e002      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800279e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3750      	adds	r7, #80	; 0x50
 80027a8:	46bd      	mov	sp, r7
 80027aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	00f42400 	.word	0x00f42400
 80027b8:	007a1200 	.word	0x007a1200

080027bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000000 	.word	0x20000000

080027d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d8:	f7ff fff0 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	0a9b      	lsrs	r3, r3, #10
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4903      	ldr	r1, [pc, #12]	; (80027f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40023800 	.word	0x40023800
 80027f8:	08005a98 	.word	0x08005a98

080027fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002800:	f7ff ffdc 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0b5b      	lsrs	r3, r3, #13
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	08005a98 	.word	0x08005a98

08002824 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	220f      	movs	r2, #15
 8002832:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_RCC_GetClockConfig+0x5c>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0203 	and.w	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <HAL_RCC_GetClockConfig+0x5c>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <HAL_RCC_GetClockConfig+0x5c>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_RCC_GetClockConfig+0x5c>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	08db      	lsrs	r3, r3, #3
 800285e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_RCC_GetClockConfig+0x60>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 020f 	and.w	r2, r3, #15
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	601a      	str	r2, [r3, #0]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	40023c00 	.word	0x40023c00

08002888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d012      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028b0:	4b69      	ldr	r3, [pc, #420]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4a68      	ldr	r2, [pc, #416]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028ba:	6093      	str	r3, [r2, #8]
 80028bc:	4b66      	ldr	r3, [pc, #408]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c4:	4964      	ldr	r1, [pc, #400]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d017      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	4959      	ldr	r1, [pc, #356]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002900:	d101      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002902:	2301      	movs	r3, #1
 8002904:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800290e:	2301      	movs	r3, #1
 8002910:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d017      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800291e:	4b4e      	ldr	r3, [pc, #312]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002924:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	494a      	ldr	r1, [pc, #296]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800293c:	d101      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800293e:	2301      	movs	r3, #1
 8002940:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800294a:	2301      	movs	r3, #1
 800294c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800295a:	2301      	movs	r3, #1
 800295c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 808b 	beq.w	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800296c:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	4a39      	ldr	r2, [pc, #228]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002976:	6413      	str	r3, [r2, #64]	; 0x40
 8002978:	4b37      	ldr	r3, [pc, #220]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002984:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a34      	ldr	r2, [pc, #208]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800298a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002990:	f7fe fb28 	bl	8000fe4 <HAL_GetTick>
 8002994:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002998:	f7fe fb24 	bl	8000fe4 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e357      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029aa:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029b6:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d035      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d02e      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029d4:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029de:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ea:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	4a1a      	ldr	r2, [pc, #104]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029f6:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029fc:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d114      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe faec 	bl	8000fe4 <HAL_GetTick>
 8002a0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7fe fae8 	bl	8000fe4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e319      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a26:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0ee      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a3e:	d111      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a4e:	400b      	ands	r3, r1
 8002a50:	4901      	ldr	r1, [pc, #4]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
 8002a56:	e00b      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	0ffffcff 	.word	0x0ffffcff
 8002a64:	4baa      	ldr	r3, [pc, #680]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4aa9      	ldr	r2, [pc, #676]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a6e:	6093      	str	r3, [r2, #8]
 8002a70:	4ba7      	ldr	r3, [pc, #668]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7c:	49a4      	ldr	r1, [pc, #656]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d010      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a8e:	4ba0      	ldr	r3, [pc, #640]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	4a9e      	ldr	r2, [pc, #632]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a9e:	4b9c      	ldr	r3, [pc, #624]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	4999      	ldr	r1, [pc, #612]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002abc:	4b94      	ldr	r3, [pc, #592]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aca:	4991      	ldr	r1, [pc, #580]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ade:	4b8c      	ldr	r3, [pc, #560]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aec:	4988      	ldr	r1, [pc, #544]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b00:	4b83      	ldr	r3, [pc, #524]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b0e:	4980      	ldr	r1, [pc, #512]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b22:	4b7b      	ldr	r3, [pc, #492]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4977      	ldr	r1, [pc, #476]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b44:	4b72      	ldr	r3, [pc, #456]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4a:	f023 0203 	bic.w	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	496f      	ldr	r1, [pc, #444]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b66:	4b6a      	ldr	r3, [pc, #424]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	f023 020c 	bic.w	r2, r3, #12
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b74:	4966      	ldr	r1, [pc, #408]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b88:	4b61      	ldr	r3, [pc, #388]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b96:	495e      	ldr	r1, [pc, #376]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002baa:	4b59      	ldr	r3, [pc, #356]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb8:	4955      	ldr	r1, [pc, #340]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bcc:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bda:	494d      	ldr	r1, [pc, #308]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bee:	4b48      	ldr	r3, [pc, #288]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	4944      	ldr	r1, [pc, #272]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c10:	4b3f      	ldr	r3, [pc, #252]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1e:	493c      	ldr	r1, [pc, #240]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c32:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c40:	4933      	ldr	r1, [pc, #204]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c54:	4b2e      	ldr	r3, [pc, #184]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c62:	492b      	ldr	r1, [pc, #172]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d011      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c76:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c84:	4922      	ldr	r1, [pc, #136]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c94:	d101      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c96:	2301      	movs	r3, #1
 8002c98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cb6:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc4:	4912      	ldr	r1, [pc, #72]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00b      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cd8:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce8:	4909      	ldr	r1, [pc, #36]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d006      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80d9 	beq.w	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d04:	4b02      	ldr	r3, [pc, #8]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a01      	ldr	r2, [pc, #4]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d0e:	e001      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002d10:	40023800 	.word	0x40023800
 8002d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d16:	f7fe f965 	bl	8000fe4 <HAL_GetTick>
 8002d1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d1e:	f7fe f961 	bl	8000fe4 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b64      	cmp	r3, #100	; 0x64
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e194      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d30:	4b6c      	ldr	r3, [pc, #432]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f0      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d021      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d11d      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d50:	4b64      	ldr	r3, [pc, #400]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d56:	0c1b      	lsrs	r3, r3, #16
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d5e:	4b61      	ldr	r3, [pc, #388]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d64:	0e1b      	lsrs	r3, r3, #24
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	019a      	lsls	r2, r3, #6
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	041b      	lsls	r3, r3, #16
 8002d76:	431a      	orrs	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	061b      	lsls	r3, r3, #24
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	071b      	lsls	r3, r3, #28
 8002d84:	4957      	ldr	r1, [pc, #348]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d004      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002da0:	d00a      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d02e      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db6:	d129      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002db8:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dbe:	0c1b      	lsrs	r3, r3, #16
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dc6:	4b47      	ldr	r3, [pc, #284]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dcc:	0f1b      	lsrs	r3, r3, #28
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	019a      	lsls	r2, r3, #6
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	041b      	lsls	r3, r3, #16
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	061b      	lsls	r3, r3, #24
 8002de6:	431a      	orrs	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	071b      	lsls	r3, r3, #28
 8002dec:	493d      	ldr	r1, [pc, #244]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002df4:	4b3b      	ldr	r3, [pc, #236]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dfa:	f023 021f 	bic.w	r2, r3, #31
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	3b01      	subs	r3, #1
 8002e04:	4937      	ldr	r1, [pc, #220]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01d      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e18:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1e:	0e1b      	lsrs	r3, r3, #24
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e26:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e2c:	0f1b      	lsrs	r3, r3, #28
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	019a      	lsls	r2, r3, #6
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	041b      	lsls	r3, r3, #16
 8002e40:	431a      	orrs	r2, r3
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	431a      	orrs	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	071b      	lsls	r3, r3, #28
 8002e4c:	4925      	ldr	r1, [pc, #148]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d011      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	019a      	lsls	r2, r3, #6
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	041b      	lsls	r3, r3, #16
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	061b      	lsls	r3, r3, #24
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	071b      	lsls	r3, r3, #28
 8002e7c:	4919      	ldr	r1, [pc, #100]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e84:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a16      	ldr	r2, [pc, #88]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e90:	f7fe f8a8 	bl	8000fe4 <HAL_GetTick>
 8002e94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e98:	f7fe f8a4 	bl	8000fe4 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	; 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e0d7      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	f040 80cd 	bne.w	8003058 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a08      	ldr	r2, [pc, #32]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eca:	f7fe f88b 	bl	8000fe4 <HAL_GetTick>
 8002ece:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ed2:	f7fe f887 	bl	8000fe4 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b64      	cmp	r3, #100	; 0x64
 8002ede:	d903      	bls.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0ba      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ee4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ee8:	4b5e      	ldr	r3, [pc, #376]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef4:	d0ed      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d02e      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d12a      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f1e:	4b51      	ldr	r3, [pc, #324]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f24:	0c1b      	lsrs	r3, r3, #16
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f2c:	4b4d      	ldr	r3, [pc, #308]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	0f1b      	lsrs	r3, r3, #28
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	019a      	lsls	r2, r3, #6
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	041b      	lsls	r3, r3, #16
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	061b      	lsls	r3, r3, #24
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	071b      	lsls	r3, r3, #28
 8002f52:	4944      	ldr	r1, [pc, #272]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f5a:	4b42      	ldr	r3, [pc, #264]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	493d      	ldr	r1, [pc, #244]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d022      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f88:	d11d      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f8a:	4b36      	ldr	r3, [pc, #216]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f90:	0e1b      	lsrs	r3, r3, #24
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f98:	4b32      	ldr	r3, [pc, #200]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	0f1b      	lsrs	r3, r3, #28
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	019a      	lsls	r2, r3, #6
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	041b      	lsls	r3, r3, #16
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	061b      	lsls	r3, r3, #24
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	071b      	lsls	r3, r3, #28
 8002fbe:	4929      	ldr	r1, [pc, #164]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d028      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd8:	0e1b      	lsrs	r3, r3, #24
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fe0:	4b20      	ldr	r3, [pc, #128]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	0c1b      	lsrs	r3, r3, #16
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	019a      	lsls	r2, r3, #6
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	041b      	lsls	r3, r3, #16
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	061b      	lsls	r3, r3, #24
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	071b      	lsls	r3, r3, #28
 8003006:	4917      	ldr	r1, [pc, #92]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003014:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	4911      	ldr	r1, [pc, #68]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800302a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003030:	f7fd ffd8 	bl	8000fe4 <HAL_GetTick>
 8003034:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003038:	f7fd ffd4 	bl	8000fe4 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e007      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003056:	d1ef      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800

08003068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e049      	b.n	800310e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f841 	bl	8003116 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3304      	adds	r3, #4
 80030a4:	4619      	mov	r1, r3
 80030a6:	4610      	mov	r0, r2
 80030a8:	f000 fa00 	bl	80034ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d001      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e054      	b.n	80031ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a26      	ldr	r2, [pc, #152]	; (80031fc <HAL_TIM_Base_Start_IT+0xd0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d022      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x80>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316e:	d01d      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x80>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a22      	ldr	r2, [pc, #136]	; (8003200 <HAL_TIM_Base_Start_IT+0xd4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d018      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x80>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a21      	ldr	r2, [pc, #132]	; (8003204 <HAL_TIM_Base_Start_IT+0xd8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d013      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x80>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <HAL_TIM_Base_Start_IT+0xdc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00e      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x80>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a1e      	ldr	r2, [pc, #120]	; (800320c <HAL_TIM_Base_Start_IT+0xe0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d009      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x80>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <HAL_TIM_Base_Start_IT+0xe4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d004      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x80>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1b      	ldr	r2, [pc, #108]	; (8003214 <HAL_TIM_Base_Start_IT+0xe8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d115      	bne.n	80031d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	4b19      	ldr	r3, [pc, #100]	; (8003218 <HAL_TIM_Base_Start_IT+0xec>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d015      	beq.n	80031ea <HAL_TIM_Base_Start_IT+0xbe>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c4:	d011      	beq.n	80031ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d6:	e008      	b.n	80031ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	e000      	b.n	80031ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40010000 	.word	0x40010000
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40010400 	.word	0x40010400
 8003210:	40014000 	.word	0x40014000
 8003214:	40001800 	.word	0x40001800
 8003218:	00010007 	.word	0x00010007

0800321c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b02      	cmp	r3, #2
 8003230:	d122      	bne.n	8003278 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b02      	cmp	r3, #2
 800323e:	d11b      	bne.n	8003278 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0202 	mvn.w	r2, #2
 8003248:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f905 	bl	800346e <HAL_TIM_IC_CaptureCallback>
 8003264:	e005      	b.n	8003272 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8f7 	bl	800345a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f908 	bl	8003482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b04      	cmp	r3, #4
 8003284:	d122      	bne.n	80032cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b04      	cmp	r3, #4
 8003292:	d11b      	bne.n	80032cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0204 	mvn.w	r2, #4
 800329c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2202      	movs	r2, #2
 80032a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f8db 	bl	800346e <HAL_TIM_IC_CaptureCallback>
 80032b8:	e005      	b.n	80032c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8cd 	bl	800345a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f8de 	bl	8003482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d122      	bne.n	8003320 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d11b      	bne.n	8003320 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0208 	mvn.w	r2, #8
 80032f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2204      	movs	r2, #4
 80032f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f8b1 	bl	800346e <HAL_TIM_IC_CaptureCallback>
 800330c:	e005      	b.n	800331a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f8a3 	bl	800345a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f8b4 	bl	8003482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b10      	cmp	r3, #16
 800332c:	d122      	bne.n	8003374 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b10      	cmp	r3, #16
 800333a:	d11b      	bne.n	8003374 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0210 	mvn.w	r2, #16
 8003344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2208      	movs	r2, #8
 800334a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f887 	bl	800346e <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f879 	bl	800345a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f88a 	bl	8003482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b01      	cmp	r3, #1
 8003380:	d10e      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b01      	cmp	r3, #1
 800338e:	d107      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0201 	mvn.w	r2, #1
 8003398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd fb64 	bl	8000a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b80      	cmp	r3, #128	; 0x80
 80033ac:	d10e      	bne.n	80033cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b8:	2b80      	cmp	r3, #128	; 0x80
 80033ba:	d107      	bne.n	80033cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f91a 	bl	8003600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033da:	d10e      	bne.n	80033fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b80      	cmp	r3, #128	; 0x80
 80033e8:	d107      	bne.n	80033fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f90d 	bl	8003614 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b40      	cmp	r3, #64	; 0x40
 8003406:	d10e      	bne.n	8003426 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d107      	bne.n	8003426 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800341e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f838 	bl	8003496 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b20      	cmp	r3, #32
 8003432:	d10e      	bne.n	8003452 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b20      	cmp	r3, #32
 8003440:	d107      	bne.n	8003452 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f06f 0220 	mvn.w	r2, #32
 800344a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f8cd 	bl	80035ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a40      	ldr	r2, [pc, #256]	; (80035c0 <TIM_Base_SetConfig+0x114>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d013      	beq.n	80034ec <TIM_Base_SetConfig+0x40>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ca:	d00f      	beq.n	80034ec <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a3d      	ldr	r2, [pc, #244]	; (80035c4 <TIM_Base_SetConfig+0x118>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00b      	beq.n	80034ec <TIM_Base_SetConfig+0x40>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a3c      	ldr	r2, [pc, #240]	; (80035c8 <TIM_Base_SetConfig+0x11c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d007      	beq.n	80034ec <TIM_Base_SetConfig+0x40>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a3b      	ldr	r2, [pc, #236]	; (80035cc <TIM_Base_SetConfig+0x120>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d003      	beq.n	80034ec <TIM_Base_SetConfig+0x40>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a3a      	ldr	r2, [pc, #232]	; (80035d0 <TIM_Base_SetConfig+0x124>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d108      	bne.n	80034fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a2f      	ldr	r2, [pc, #188]	; (80035c0 <TIM_Base_SetConfig+0x114>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d02b      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350c:	d027      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a2c      	ldr	r2, [pc, #176]	; (80035c4 <TIM_Base_SetConfig+0x118>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d023      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a2b      	ldr	r2, [pc, #172]	; (80035c8 <TIM_Base_SetConfig+0x11c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01f      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2a      	ldr	r2, [pc, #168]	; (80035cc <TIM_Base_SetConfig+0x120>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01b      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a29      	ldr	r2, [pc, #164]	; (80035d0 <TIM_Base_SetConfig+0x124>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d017      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a28      	ldr	r2, [pc, #160]	; (80035d4 <TIM_Base_SetConfig+0x128>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <TIM_Base_SetConfig+0x12c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00f      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a26      	ldr	r2, [pc, #152]	; (80035dc <TIM_Base_SetConfig+0x130>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00b      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a25      	ldr	r2, [pc, #148]	; (80035e0 <TIM_Base_SetConfig+0x134>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a24      	ldr	r2, [pc, #144]	; (80035e4 <TIM_Base_SetConfig+0x138>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d003      	beq.n	800355e <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a23      	ldr	r2, [pc, #140]	; (80035e8 <TIM_Base_SetConfig+0x13c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d108      	bne.n	8003570 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <TIM_Base_SetConfig+0x114>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_Base_SetConfig+0xf8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a0c      	ldr	r2, [pc, #48]	; (80035d0 <TIM_Base_SetConfig+0x124>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d103      	bne.n	80035ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	615a      	str	r2, [r3, #20]
}
 80035b2:	bf00      	nop
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40010000 	.word	0x40010000
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40000800 	.word	0x40000800
 80035cc:	40000c00 	.word	0x40000c00
 80035d0:	40010400 	.word	0x40010400
 80035d4:	40014000 	.word	0x40014000
 80035d8:	40014400 	.word	0x40014400
 80035dc:	40014800 	.word	0x40014800
 80035e0:	40001800 	.word	0x40001800
 80035e4:	40001c00 	.word	0x40001c00
 80035e8:	40002000 	.word	0x40002000

080035ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e040      	b.n	80036bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd fb04 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2224      	movs	r2, #36	; 0x24
 8003654:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f82c 	bl	80036c4 <UART_SetConfig>
 800366c:	4603      	mov	r3, r0
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e022      	b.n	80036bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fa84 	bl	8003b8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fb0b 	bl	8003cd0 <UART_CheckIdleState>
 80036ba:	4603      	mov	r3, r0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4ba6      	ldr	r3, [pc, #664]	; (8003988 <UART_SetConfig+0x2c4>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	6979      	ldr	r1, [r7, #20]
 80036f8:	430b      	orrs	r3, r1
 80036fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	430a      	orrs	r2, r1
 8003734:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a94      	ldr	r2, [pc, #592]	; (800398c <UART_SetConfig+0x2c8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d120      	bne.n	8003782 <UART_SetConfig+0xbe>
 8003740:	4b93      	ldr	r3, [pc, #588]	; (8003990 <UART_SetConfig+0x2cc>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b03      	cmp	r3, #3
 800374c:	d816      	bhi.n	800377c <UART_SetConfig+0xb8>
 800374e:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <UART_SetConfig+0x90>)
 8003750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003754:	08003765 	.word	0x08003765
 8003758:	08003771 	.word	0x08003771
 800375c:	0800376b 	.word	0x0800376b
 8003760:	08003777 	.word	0x08003777
 8003764:	2301      	movs	r3, #1
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	e150      	b.n	8003a0c <UART_SetConfig+0x348>
 800376a:	2302      	movs	r3, #2
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e14d      	b.n	8003a0c <UART_SetConfig+0x348>
 8003770:	2304      	movs	r3, #4
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e14a      	b.n	8003a0c <UART_SetConfig+0x348>
 8003776:	2308      	movs	r3, #8
 8003778:	77fb      	strb	r3, [r7, #31]
 800377a:	e147      	b.n	8003a0c <UART_SetConfig+0x348>
 800377c:	2310      	movs	r3, #16
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e144      	b.n	8003a0c <UART_SetConfig+0x348>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a83      	ldr	r2, [pc, #524]	; (8003994 <UART_SetConfig+0x2d0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d132      	bne.n	80037f2 <UART_SetConfig+0x12e>
 800378c:	4b80      	ldr	r3, [pc, #512]	; (8003990 <UART_SetConfig+0x2cc>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d828      	bhi.n	80037ec <UART_SetConfig+0x128>
 800379a:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <UART_SetConfig+0xdc>)
 800379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a0:	080037d5 	.word	0x080037d5
 80037a4:	080037ed 	.word	0x080037ed
 80037a8:	080037ed 	.word	0x080037ed
 80037ac:	080037ed 	.word	0x080037ed
 80037b0:	080037e1 	.word	0x080037e1
 80037b4:	080037ed 	.word	0x080037ed
 80037b8:	080037ed 	.word	0x080037ed
 80037bc:	080037ed 	.word	0x080037ed
 80037c0:	080037db 	.word	0x080037db
 80037c4:	080037ed 	.word	0x080037ed
 80037c8:	080037ed 	.word	0x080037ed
 80037cc:	080037ed 	.word	0x080037ed
 80037d0:	080037e7 	.word	0x080037e7
 80037d4:	2300      	movs	r3, #0
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e118      	b.n	8003a0c <UART_SetConfig+0x348>
 80037da:	2302      	movs	r3, #2
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e115      	b.n	8003a0c <UART_SetConfig+0x348>
 80037e0:	2304      	movs	r3, #4
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e112      	b.n	8003a0c <UART_SetConfig+0x348>
 80037e6:	2308      	movs	r3, #8
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e10f      	b.n	8003a0c <UART_SetConfig+0x348>
 80037ec:	2310      	movs	r3, #16
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e10c      	b.n	8003a0c <UART_SetConfig+0x348>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a68      	ldr	r2, [pc, #416]	; (8003998 <UART_SetConfig+0x2d4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d120      	bne.n	800383e <UART_SetConfig+0x17a>
 80037fc:	4b64      	ldr	r3, [pc, #400]	; (8003990 <UART_SetConfig+0x2cc>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003806:	2b30      	cmp	r3, #48	; 0x30
 8003808:	d013      	beq.n	8003832 <UART_SetConfig+0x16e>
 800380a:	2b30      	cmp	r3, #48	; 0x30
 800380c:	d814      	bhi.n	8003838 <UART_SetConfig+0x174>
 800380e:	2b20      	cmp	r3, #32
 8003810:	d009      	beq.n	8003826 <UART_SetConfig+0x162>
 8003812:	2b20      	cmp	r3, #32
 8003814:	d810      	bhi.n	8003838 <UART_SetConfig+0x174>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <UART_SetConfig+0x15c>
 800381a:	2b10      	cmp	r3, #16
 800381c:	d006      	beq.n	800382c <UART_SetConfig+0x168>
 800381e:	e00b      	b.n	8003838 <UART_SetConfig+0x174>
 8003820:	2300      	movs	r3, #0
 8003822:	77fb      	strb	r3, [r7, #31]
 8003824:	e0f2      	b.n	8003a0c <UART_SetConfig+0x348>
 8003826:	2302      	movs	r3, #2
 8003828:	77fb      	strb	r3, [r7, #31]
 800382a:	e0ef      	b.n	8003a0c <UART_SetConfig+0x348>
 800382c:	2304      	movs	r3, #4
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e0ec      	b.n	8003a0c <UART_SetConfig+0x348>
 8003832:	2308      	movs	r3, #8
 8003834:	77fb      	strb	r3, [r7, #31]
 8003836:	e0e9      	b.n	8003a0c <UART_SetConfig+0x348>
 8003838:	2310      	movs	r3, #16
 800383a:	77fb      	strb	r3, [r7, #31]
 800383c:	e0e6      	b.n	8003a0c <UART_SetConfig+0x348>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a56      	ldr	r2, [pc, #344]	; (800399c <UART_SetConfig+0x2d8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d120      	bne.n	800388a <UART_SetConfig+0x1c6>
 8003848:	4b51      	ldr	r3, [pc, #324]	; (8003990 <UART_SetConfig+0x2cc>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003852:	2bc0      	cmp	r3, #192	; 0xc0
 8003854:	d013      	beq.n	800387e <UART_SetConfig+0x1ba>
 8003856:	2bc0      	cmp	r3, #192	; 0xc0
 8003858:	d814      	bhi.n	8003884 <UART_SetConfig+0x1c0>
 800385a:	2b80      	cmp	r3, #128	; 0x80
 800385c:	d009      	beq.n	8003872 <UART_SetConfig+0x1ae>
 800385e:	2b80      	cmp	r3, #128	; 0x80
 8003860:	d810      	bhi.n	8003884 <UART_SetConfig+0x1c0>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <UART_SetConfig+0x1a8>
 8003866:	2b40      	cmp	r3, #64	; 0x40
 8003868:	d006      	beq.n	8003878 <UART_SetConfig+0x1b4>
 800386a:	e00b      	b.n	8003884 <UART_SetConfig+0x1c0>
 800386c:	2300      	movs	r3, #0
 800386e:	77fb      	strb	r3, [r7, #31]
 8003870:	e0cc      	b.n	8003a0c <UART_SetConfig+0x348>
 8003872:	2302      	movs	r3, #2
 8003874:	77fb      	strb	r3, [r7, #31]
 8003876:	e0c9      	b.n	8003a0c <UART_SetConfig+0x348>
 8003878:	2304      	movs	r3, #4
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e0c6      	b.n	8003a0c <UART_SetConfig+0x348>
 800387e:	2308      	movs	r3, #8
 8003880:	77fb      	strb	r3, [r7, #31]
 8003882:	e0c3      	b.n	8003a0c <UART_SetConfig+0x348>
 8003884:	2310      	movs	r3, #16
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e0c0      	b.n	8003a0c <UART_SetConfig+0x348>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a44      	ldr	r2, [pc, #272]	; (80039a0 <UART_SetConfig+0x2dc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d125      	bne.n	80038e0 <UART_SetConfig+0x21c>
 8003894:	4b3e      	ldr	r3, [pc, #248]	; (8003990 <UART_SetConfig+0x2cc>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038a2:	d017      	beq.n	80038d4 <UART_SetConfig+0x210>
 80038a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038a8:	d817      	bhi.n	80038da <UART_SetConfig+0x216>
 80038aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ae:	d00b      	beq.n	80038c8 <UART_SetConfig+0x204>
 80038b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b4:	d811      	bhi.n	80038da <UART_SetConfig+0x216>
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <UART_SetConfig+0x1fe>
 80038ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038be:	d006      	beq.n	80038ce <UART_SetConfig+0x20a>
 80038c0:	e00b      	b.n	80038da <UART_SetConfig+0x216>
 80038c2:	2300      	movs	r3, #0
 80038c4:	77fb      	strb	r3, [r7, #31]
 80038c6:	e0a1      	b.n	8003a0c <UART_SetConfig+0x348>
 80038c8:	2302      	movs	r3, #2
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e09e      	b.n	8003a0c <UART_SetConfig+0x348>
 80038ce:	2304      	movs	r3, #4
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e09b      	b.n	8003a0c <UART_SetConfig+0x348>
 80038d4:	2308      	movs	r3, #8
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e098      	b.n	8003a0c <UART_SetConfig+0x348>
 80038da:	2310      	movs	r3, #16
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e095      	b.n	8003a0c <UART_SetConfig+0x348>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2f      	ldr	r2, [pc, #188]	; (80039a4 <UART_SetConfig+0x2e0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d125      	bne.n	8003936 <UART_SetConfig+0x272>
 80038ea:	4b29      	ldr	r3, [pc, #164]	; (8003990 <UART_SetConfig+0x2cc>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038f8:	d017      	beq.n	800392a <UART_SetConfig+0x266>
 80038fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038fe:	d817      	bhi.n	8003930 <UART_SetConfig+0x26c>
 8003900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003904:	d00b      	beq.n	800391e <UART_SetConfig+0x25a>
 8003906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800390a:	d811      	bhi.n	8003930 <UART_SetConfig+0x26c>
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <UART_SetConfig+0x254>
 8003910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003914:	d006      	beq.n	8003924 <UART_SetConfig+0x260>
 8003916:	e00b      	b.n	8003930 <UART_SetConfig+0x26c>
 8003918:	2301      	movs	r3, #1
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e076      	b.n	8003a0c <UART_SetConfig+0x348>
 800391e:	2302      	movs	r3, #2
 8003920:	77fb      	strb	r3, [r7, #31]
 8003922:	e073      	b.n	8003a0c <UART_SetConfig+0x348>
 8003924:	2304      	movs	r3, #4
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e070      	b.n	8003a0c <UART_SetConfig+0x348>
 800392a:	2308      	movs	r3, #8
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e06d      	b.n	8003a0c <UART_SetConfig+0x348>
 8003930:	2310      	movs	r3, #16
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e06a      	b.n	8003a0c <UART_SetConfig+0x348>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <UART_SetConfig+0x2e4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d138      	bne.n	80039b2 <UART_SetConfig+0x2ee>
 8003940:	4b13      	ldr	r3, [pc, #76]	; (8003990 <UART_SetConfig+0x2cc>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800394a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800394e:	d017      	beq.n	8003980 <UART_SetConfig+0x2bc>
 8003950:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003954:	d82a      	bhi.n	80039ac <UART_SetConfig+0x2e8>
 8003956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800395a:	d00b      	beq.n	8003974 <UART_SetConfig+0x2b0>
 800395c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003960:	d824      	bhi.n	80039ac <UART_SetConfig+0x2e8>
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <UART_SetConfig+0x2aa>
 8003966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396a:	d006      	beq.n	800397a <UART_SetConfig+0x2b6>
 800396c:	e01e      	b.n	80039ac <UART_SetConfig+0x2e8>
 800396e:	2300      	movs	r3, #0
 8003970:	77fb      	strb	r3, [r7, #31]
 8003972:	e04b      	b.n	8003a0c <UART_SetConfig+0x348>
 8003974:	2302      	movs	r3, #2
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e048      	b.n	8003a0c <UART_SetConfig+0x348>
 800397a:	2304      	movs	r3, #4
 800397c:	77fb      	strb	r3, [r7, #31]
 800397e:	e045      	b.n	8003a0c <UART_SetConfig+0x348>
 8003980:	2308      	movs	r3, #8
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e042      	b.n	8003a0c <UART_SetConfig+0x348>
 8003986:	bf00      	nop
 8003988:	efff69f3 	.word	0xefff69f3
 800398c:	40011000 	.word	0x40011000
 8003990:	40023800 	.word	0x40023800
 8003994:	40004400 	.word	0x40004400
 8003998:	40004800 	.word	0x40004800
 800399c:	40004c00 	.word	0x40004c00
 80039a0:	40005000 	.word	0x40005000
 80039a4:	40011400 	.word	0x40011400
 80039a8:	40007800 	.word	0x40007800
 80039ac:	2310      	movs	r3, #16
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e02c      	b.n	8003a0c <UART_SetConfig+0x348>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a72      	ldr	r2, [pc, #456]	; (8003b80 <UART_SetConfig+0x4bc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d125      	bne.n	8003a08 <UART_SetConfig+0x344>
 80039bc:	4b71      	ldr	r3, [pc, #452]	; (8003b84 <UART_SetConfig+0x4c0>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039ca:	d017      	beq.n	80039fc <UART_SetConfig+0x338>
 80039cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039d0:	d817      	bhi.n	8003a02 <UART_SetConfig+0x33e>
 80039d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d6:	d00b      	beq.n	80039f0 <UART_SetConfig+0x32c>
 80039d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039dc:	d811      	bhi.n	8003a02 <UART_SetConfig+0x33e>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <UART_SetConfig+0x326>
 80039e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039e6:	d006      	beq.n	80039f6 <UART_SetConfig+0x332>
 80039e8:	e00b      	b.n	8003a02 <UART_SetConfig+0x33e>
 80039ea:	2300      	movs	r3, #0
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	e00d      	b.n	8003a0c <UART_SetConfig+0x348>
 80039f0:	2302      	movs	r3, #2
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e00a      	b.n	8003a0c <UART_SetConfig+0x348>
 80039f6:	2304      	movs	r3, #4
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e007      	b.n	8003a0c <UART_SetConfig+0x348>
 80039fc:	2308      	movs	r3, #8
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e004      	b.n	8003a0c <UART_SetConfig+0x348>
 8003a02:	2310      	movs	r3, #16
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e001      	b.n	8003a0c <UART_SetConfig+0x348>
 8003a08:	2310      	movs	r3, #16
 8003a0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a14:	d15b      	bne.n	8003ace <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003a16:	7ffb      	ldrb	r3, [r7, #31]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d828      	bhi.n	8003a6e <UART_SetConfig+0x3aa>
 8003a1c:	a201      	add	r2, pc, #4	; (adr r2, 8003a24 <UART_SetConfig+0x360>)
 8003a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a22:	bf00      	nop
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003a51 	.word	0x08003a51
 8003a2c:	08003a59 	.word	0x08003a59
 8003a30:	08003a6f 	.word	0x08003a6f
 8003a34:	08003a5f 	.word	0x08003a5f
 8003a38:	08003a6f 	.word	0x08003a6f
 8003a3c:	08003a6f 	.word	0x08003a6f
 8003a40:	08003a6f 	.word	0x08003a6f
 8003a44:	08003a67 	.word	0x08003a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a48:	f7fe fec4 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8003a4c:	61b8      	str	r0, [r7, #24]
        break;
 8003a4e:	e013      	b.n	8003a78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a50:	f7fe fed4 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 8003a54:	61b8      	str	r0, [r7, #24]
        break;
 8003a56:	e00f      	b.n	8003a78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a58:	4b4b      	ldr	r3, [pc, #300]	; (8003b88 <UART_SetConfig+0x4c4>)
 8003a5a:	61bb      	str	r3, [r7, #24]
        break;
 8003a5c:	e00c      	b.n	8003a78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a5e:	f7fe fda7 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 8003a62:	61b8      	str	r0, [r7, #24]
        break;
 8003a64:	e008      	b.n	8003a78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a6a:	61bb      	str	r3, [r7, #24]
        break;
 8003a6c:	e004      	b.n	8003a78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	77bb      	strb	r3, [r7, #30]
        break;
 8003a76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d074      	beq.n	8003b68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	005a      	lsls	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	085b      	lsrs	r3, r3, #1
 8003a88:	441a      	add	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b0f      	cmp	r3, #15
 8003a98:	d916      	bls.n	8003ac8 <UART_SetConfig+0x404>
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa0:	d212      	bcs.n	8003ac8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f023 030f 	bic.w	r3, r3, #15
 8003aaa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	085b      	lsrs	r3, r3, #1
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	89fb      	ldrh	r3, [r7, #14]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	89fa      	ldrh	r2, [r7, #14]
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	e04f      	b.n	8003b68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	77bb      	strb	r3, [r7, #30]
 8003acc:	e04c      	b.n	8003b68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ace:	7ffb      	ldrb	r3, [r7, #31]
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d828      	bhi.n	8003b26 <UART_SetConfig+0x462>
 8003ad4:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <UART_SetConfig+0x418>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003b01 	.word	0x08003b01
 8003ae0:	08003b09 	.word	0x08003b09
 8003ae4:	08003b11 	.word	0x08003b11
 8003ae8:	08003b27 	.word	0x08003b27
 8003aec:	08003b17 	.word	0x08003b17
 8003af0:	08003b27 	.word	0x08003b27
 8003af4:	08003b27 	.word	0x08003b27
 8003af8:	08003b27 	.word	0x08003b27
 8003afc:	08003b1f 	.word	0x08003b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b00:	f7fe fe68 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8003b04:	61b8      	str	r0, [r7, #24]
        break;
 8003b06:	e013      	b.n	8003b30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b08:	f7fe fe78 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 8003b0c:	61b8      	str	r0, [r7, #24]
        break;
 8003b0e:	e00f      	b.n	8003b30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b10:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <UART_SetConfig+0x4c4>)
 8003b12:	61bb      	str	r3, [r7, #24]
        break;
 8003b14:	e00c      	b.n	8003b30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b16:	f7fe fd4b 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 8003b1a:	61b8      	str	r0, [r7, #24]
        break;
 8003b1c:	e008      	b.n	8003b30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b22:	61bb      	str	r3, [r7, #24]
        break;
 8003b24:	e004      	b.n	8003b30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b2e:	bf00      	nop
    }

    if (pclk != 0U)
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d018      	beq.n	8003b68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	085a      	lsrs	r2, r3, #1
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	441a      	add	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b0f      	cmp	r3, #15
 8003b4e:	d909      	bls.n	8003b64 <UART_SetConfig+0x4a0>
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b56:	d205      	bcs.n	8003b64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	e001      	b.n	8003b68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b74:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40007c00 	.word	0x40007c00
 8003b84:	40023800 	.word	0x40023800
 8003b88:	00f42400 	.word	0x00f42400

08003b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d01a      	beq.n	8003ca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c8a:	d10a      	bne.n	8003ca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	605a      	str	r2, [r3, #4]
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ce0:	f7fd f980 	bl	8000fe4 <HAL_GetTick>
 8003ce4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d10e      	bne.n	8003d12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f81b 	bl	8003d3e <UART_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e011      	b.n	8003d36 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b09c      	sub	sp, #112	; 0x70
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d4e:	e0a7      	b.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d56:	f000 80a3 	beq.w	8003ea0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5a:	f7fd f943 	bl	8000fe4 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d13f      	bne.n	8003df0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d84:	667b      	str	r3, [r7, #100]	; 0x64
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e6      	bne.n	8003d70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3308      	adds	r3, #8
 8003da8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	663b      	str	r3, [r7, #96]	; 0x60
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3308      	adds	r3, #8
 8003dc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003dc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003dc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e5      	bne.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e068      	b.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d050      	beq.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e0c:	d148      	bne.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e16:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e36:	637b      	str	r3, [r7, #52]	; 0x34
 8003e38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e6      	bne.n	8003e18 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3308      	adds	r3, #8
 8003e68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e6a:	623a      	str	r2, [r7, #32]
 8003e6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	69f9      	ldr	r1, [r7, #28]
 8003e70:	6a3a      	ldr	r2, [r7, #32]
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e5      	bne.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e010      	b.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69da      	ldr	r2, [r3, #28]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	f43f af48 	beq.w	8003d50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3770      	adds	r7, #112	; 0x70
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ecc:	b084      	sub	sp, #16
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	f107 001c 	add.w	r0, r7, #28
 8003eda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d120      	bne.n	8003f26 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <USB_CoreInit+0xac>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d105      	bne.n	8003f1a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fa96 	bl	800444c <USB_CoreReset>
 8003f20:	4603      	mov	r3, r0
 8003f22:	73fb      	strb	r3, [r7, #15]
 8003f24:	e010      	b.n	8003f48 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fa8a 	bl	800444c <USB_CoreReset>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d10b      	bne.n	8003f66 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f043 0206 	orr.w	r2, r3, #6
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f043 0220 	orr.w	r2, r3, #32
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f72:	b004      	add	sp, #16
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	ffbdffbf 	.word	0xffbdffbf

08003f7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f023 0201 	bic.w	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d115      	bne.n	8003fec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fcc:	2001      	movs	r0, #1
 8003fce:	f7fd f815 	bl	8000ffc <HAL_Delay>
      ms++;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fa29 	bl	8004430 <USB_GetMode>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d01e      	beq.n	8004022 <USB_SetCurrentMode+0x84>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b31      	cmp	r3, #49	; 0x31
 8003fe8:	d9f0      	bls.n	8003fcc <USB_SetCurrentMode+0x2e>
 8003fea:	e01a      	b.n	8004022 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d115      	bne.n	800401e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ffe:	2001      	movs	r0, #1
 8004000:	f7fc fffc 	bl	8000ffc <HAL_Delay>
      ms++;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3301      	adds	r3, #1
 8004008:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fa10 	bl	8004430 <USB_GetMode>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <USB_SetCurrentMode+0x84>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b31      	cmp	r3, #49	; 0x31
 800401a:	d9f0      	bls.n	8003ffe <USB_SetCurrentMode+0x60>
 800401c:	e001      	b.n	8004022 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e005      	b.n	800402e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b32      	cmp	r3, #50	; 0x32
 8004026:	d101      	bne.n	800402c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004038:	b084      	sub	sp, #16
 800403a:	b580      	push	{r7, lr}
 800403c:	b086      	sub	sp, #24
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	e009      	b.n	800406c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	3340      	adds	r3, #64	; 0x40
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	2200      	movs	r2, #0
 8004064:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	3301      	adds	r3, #1
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b0e      	cmp	r3, #14
 8004070:	d9f2      	bls.n	8004058 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004074:	2b00      	cmp	r3, #0
 8004076:	d11c      	bne.n	80040b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004086:	f043 0302 	orr.w	r3, r3, #2
 800408a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	e005      	b.n	80040be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040c4:	461a      	mov	r2, r3
 80040c6:	2300      	movs	r3, #0
 80040c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d0:	4619      	mov	r1, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d8:	461a      	mov	r2, r3
 80040da:	680b      	ldr	r3, [r1, #0]
 80040dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d10c      	bne.n	80040fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d104      	bne.n	80040f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040ea:	2100      	movs	r1, #0
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f965 	bl	80043bc <USB_SetDevSpeed>
 80040f2:	e008      	b.n	8004106 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040f4:	2101      	movs	r1, #1
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f960 	bl	80043bc <USB_SetDevSpeed>
 80040fc:	e003      	b.n	8004106 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040fe:	2103      	movs	r1, #3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f95b 	bl	80043bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004106:	2110      	movs	r1, #16
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f8f3 	bl	80042f4 <USB_FlushTxFifo>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f91f 	bl	800435c <USB_FlushRxFifo>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412e:	461a      	mov	r2, r3
 8004130:	2300      	movs	r3, #0
 8004132:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	461a      	mov	r2, r3
 800413c:	2300      	movs	r3, #0
 800413e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004146:	461a      	mov	r2, r3
 8004148:	2300      	movs	r3, #0
 800414a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800414c:	2300      	movs	r3, #0
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	e043      	b.n	80041da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004168:	d118      	bne.n	800419c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417c:	461a      	mov	r2, r3
 800417e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	e013      	b.n	80041ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004192:	461a      	mov	r2, r3
 8004194:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e008      	b.n	80041ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a8:	461a      	mov	r2, r3
 80041aa:	2300      	movs	r3, #0
 80041ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ba:	461a      	mov	r2, r3
 80041bc:	2300      	movs	r3, #0
 80041be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041cc:	461a      	mov	r2, r3
 80041ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	3301      	adds	r3, #1
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d3b7      	bcc.n	8004152 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041e2:	2300      	movs	r3, #0
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	e043      	b.n	8004270 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041fe:	d118      	bne.n	8004232 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004212:	461a      	mov	r2, r3
 8004214:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e013      	b.n	8004244 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004228:	461a      	mov	r2, r3
 800422a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	e008      	b.n	8004244 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423e:	461a      	mov	r2, r3
 8004240:	2300      	movs	r3, #0
 8004242:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004250:	461a      	mov	r2, r3
 8004252:	2300      	movs	r3, #0
 8004254:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	461a      	mov	r2, r3
 8004264:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004268:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	3301      	adds	r3, #1
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	429a      	cmp	r2, r3
 8004276:	d3b7      	bcc.n	80041e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800428a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004298:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	2b00      	cmp	r3, #0
 800429e:	d105      	bne.n	80042ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f043 0210 	orr.w	r2, r3, #16
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699a      	ldr	r2, [r3, #24]
 80042b0:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <USB_DevInit+0x2b4>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f043 0208 	orr.w	r2, r3, #8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d105      	bne.n	80042dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699a      	ldr	r2, [r3, #24]
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <USB_DevInit+0x2b8>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042e8:	b004      	add	sp, #16
 80042ea:	4770      	bx	lr
 80042ec:	803c3800 	.word	0x803c3800
 80042f0:	40000004 	.word	0x40000004

080042f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3301      	adds	r3, #1
 8004306:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4a13      	ldr	r2, [pc, #76]	; (8004358 <USB_FlushTxFifo+0x64>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d901      	bls.n	8004314 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e01b      	b.n	800434c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	daf2      	bge.n	8004302 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	019b      	lsls	r3, r3, #6
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3301      	adds	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4a08      	ldr	r2, [pc, #32]	; (8004358 <USB_FlushTxFifo+0x64>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e006      	b.n	800434c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b20      	cmp	r3, #32
 8004348:	d0f0      	beq.n	800432c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	00030d40 	.word	0x00030d40

0800435c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3301      	adds	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4a11      	ldr	r2, [pc, #68]	; (80043b8 <USB_FlushRxFifo+0x5c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e018      	b.n	80043ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	daf2      	bge.n	8004368 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2210      	movs	r2, #16
 800438a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3301      	adds	r3, #1
 8004390:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4a08      	ldr	r2, [pc, #32]	; (80043b8 <USB_FlushRxFifo+0x5c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e006      	b.n	80043ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	2b10      	cmp	r3, #16
 80043a8:	d0f0      	beq.n	800438c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	00030d40 	.word	0x00030d40

080043bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	68f9      	ldr	r1, [r7, #12]
 80043d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043dc:	4313      	orrs	r3, r2
 80043de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004408:	f023 0303 	bic.w	r3, r3, #3
 800440c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800441c:	f043 0302 	orr.w	r3, r3, #2
 8004420:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f003 0301 	and.w	r3, r3, #1
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3301      	adds	r3, #1
 800445c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <USB_CoreReset+0x64>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e01b      	b.n	80044a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	daf2      	bge.n	8004458 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f043 0201 	orr.w	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3301      	adds	r3, #1
 8004486:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <USB_CoreReset+0x64>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d901      	bls.n	8004494 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e006      	b.n	80044a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b01      	cmp	r3, #1
 800449e:	d0f0      	beq.n	8004482 <USB_CoreReset+0x36>

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	00030d40 	.word	0x00030d40

080044b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80044c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044c6:	2b84      	cmp	r3, #132	; 0x84
 80044c8:	d005      	beq.n	80044d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4413      	add	r3, r2
 80044d2:	3303      	adds	r3, #3
 80044d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044d6:	68fb      	ldr	r3, [r7, #12]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80044e8:	f000 fae8 	bl	8004abc <vTaskStartScheduler>
  
  return osOK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80044f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f4:	b089      	sub	sp, #36	; 0x24
 80044f6:	af04      	add	r7, sp, #16
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <osThreadCreate+0x54>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01c      	beq.n	8004546 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685c      	ldr	r4, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691e      	ldr	r6, [r3, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff ffc8 	bl	80044b4 <makeFreeRtosPriority>
 8004524:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800452e:	9202      	str	r2, [sp, #8]
 8004530:	9301      	str	r3, [sp, #4]
 8004532:	9100      	str	r1, [sp, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	4632      	mov	r2, r6
 8004538:	4629      	mov	r1, r5
 800453a:	4620      	mov	r0, r4
 800453c:	f000 f8ed 	bl	800471a <xTaskCreateStatic>
 8004540:	4603      	mov	r3, r0
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	e01c      	b.n	8004580 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685c      	ldr	r4, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004552:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff ffaa 	bl	80044b4 <makeFreeRtosPriority>
 8004560:	4602      	mov	r2, r0
 8004562:	f107 030c 	add.w	r3, r7, #12
 8004566:	9301      	str	r3, [sp, #4]
 8004568:	9200      	str	r2, [sp, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	4632      	mov	r2, r6
 800456e:	4629      	mov	r1, r5
 8004570:	4620      	mov	r0, r4
 8004572:	f000 f935 	bl	80047e0 <xTaskCreate>
 8004576:	4603      	mov	r3, r0
 8004578:	2b01      	cmp	r3, #1
 800457a:	d001      	beq.n	8004580 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800457c:	2300      	movs	r3, #0
 800457e:	e000      	b.n	8004582 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004580:	68fb      	ldr	r3, [r7, #12]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800458a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <osDelay+0x16>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	e000      	b.n	80045a2 <osDelay+0x18>
 80045a0:	2301      	movs	r3, #1
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fa54 	bl	8004a50 <vTaskDelay>
  
  return osOK;
 80045a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f103 0208 	add.w	r2, r3, #8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f04f 32ff 	mov.w	r2, #4294967295
 80045ca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f103 0208 	add.w	r2, r3, #8
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f103 0208 	add.w	r2, r3, #8
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	601a      	str	r2, [r3, #0]
}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	d103      	bne.n	8004674 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	e00c      	b.n	800468e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3308      	adds	r3, #8
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e002      	b.n	8004682 <vListInsert+0x2e>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	429a      	cmp	r2, r3
 800468c:	d2f6      	bcs.n	800467c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]
}
 80046ba:	bf00      	nop
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046c6:	b480      	push	{r7}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6892      	ldr	r2, [r2, #8]
 80046dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6852      	ldr	r2, [r2, #4]
 80046e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d103      	bne.n	80046fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	1e5a      	subs	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800471a:	b580      	push	{r7, lr}
 800471c:	b08e      	sub	sp, #56	; 0x38
 800471e:	af04      	add	r7, sp, #16
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10c      	bne.n	8004748 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	b672      	cpsid	i
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	b662      	cpsie	i
 8004742:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10c      	bne.n	8004768 <xTaskCreateStatic+0x4e>
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	b672      	cpsid	i
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	b662      	cpsie	i
 8004762:	61fb      	str	r3, [r7, #28]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004768:	2354      	movs	r3, #84	; 0x54
 800476a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b54      	cmp	r3, #84	; 0x54
 8004770:	d00c      	beq.n	800478c <xTaskCreateStatic+0x72>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	b672      	cpsid	i
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	b662      	cpsie	i
 8004786:	61bb      	str	r3, [r7, #24]
}
 8004788:	bf00      	nop
 800478a:	e7fe      	b.n	800478a <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800478c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01e      	beq.n	80047d2 <xTaskCreateStatic+0xb8>
 8004794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004796:	2b00      	cmp	r3, #0
 8004798:	d01b      	beq.n	80047d2 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800479a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047ac:	2300      	movs	r3, #0
 80047ae:	9303      	str	r3, [sp, #12]
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	9302      	str	r3, [sp, #8]
 80047b4:	f107 0314 	add.w	r3, r7, #20
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f850 	bl	800486a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047cc:	f000 f8d6 	bl	800497c <prvAddNewTaskToReadyList>
 80047d0:	e001      	b.n	80047d6 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047d6:	697b      	ldr	r3, [r7, #20]
	}
 80047d8:	4618      	mov	r0, r3
 80047da:	3728      	adds	r7, #40	; 0x28
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08c      	sub	sp, #48	; 0x30
 80047e4:	af04      	add	r7, sp, #16
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	4613      	mov	r3, r2
 80047ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047f0:	88fb      	ldrh	r3, [r7, #6]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 feb9 	bl	800556c <pvPortMalloc>
 80047fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00e      	beq.n	8004820 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004802:	2054      	movs	r0, #84	; 0x54
 8004804:	f000 feb2 	bl	800556c <pvPortMalloc>
 8004808:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	631a      	str	r2, [r3, #48]	; 0x30
 8004816:	e005      	b.n	8004824 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004818:	6978      	ldr	r0, [r7, #20]
 800481a:	f000 ff71 	bl	8005700 <vPortFree>
 800481e:	e001      	b.n	8004824 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d017      	beq.n	800485a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004832:	88fa      	ldrh	r2, [r7, #6]
 8004834:	2300      	movs	r3, #0
 8004836:	9303      	str	r3, [sp, #12]
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	9302      	str	r3, [sp, #8]
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483e:	9301      	str	r3, [sp, #4]
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f80e 	bl	800486a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800484e:	69f8      	ldr	r0, [r7, #28]
 8004850:	f000 f894 	bl	800497c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004854:	2301      	movs	r3, #1
 8004856:	61bb      	str	r3, [r7, #24]
 8004858:	e002      	b.n	8004860 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800485a:	f04f 33ff 	mov.w	r3, #4294967295
 800485e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004860:	69bb      	ldr	r3, [r7, #24]
	}
 8004862:	4618      	mov	r0, r3
 8004864:	3720      	adds	r7, #32
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b088      	sub	sp, #32
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004882:	440b      	add	r3, r1
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	f023 0307 	bic.w	r3, r3, #7
 8004890:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00c      	beq.n	80048b6 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	b672      	cpsid	i
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	b662      	cpsie	i
 80048b0:	617b      	str	r3, [r7, #20]
}
 80048b2:	bf00      	nop
 80048b4:	e7fe      	b.n	80048b4 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01f      	beq.n	80048fc <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048bc:	2300      	movs	r3, #0
 80048be:	61fb      	str	r3, [r7, #28]
 80048c0:	e012      	b.n	80048e8 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	4413      	add	r3, r2
 80048c8:	7819      	ldrb	r1, [r3, #0]
 80048ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	4413      	add	r3, r2
 80048d0:	3334      	adds	r3, #52	; 0x34
 80048d2:	460a      	mov	r2, r1
 80048d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	4413      	add	r3, r2
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d006      	beq.n	80048f0 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	3301      	adds	r3, #1
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	2b0f      	cmp	r3, #15
 80048ec:	d9e9      	bls.n	80048c2 <prvInitialiseNewTask+0x58>
 80048ee:	e000      	b.n	80048f2 <prvInitialiseNewTask+0x88>
			{
				break;
 80048f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048fa:	e003      	b.n	8004904 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	2b06      	cmp	r3, #6
 8004908:	d901      	bls.n	800490e <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800490a:	2306      	movs	r3, #6
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004912:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004918:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	2200      	movs	r2, #0
 800491e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	3304      	adds	r3, #4
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fe64 	bl	80045f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	3318      	adds	r3, #24
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff fe5f 	bl	80045f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004938:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493c:	f1c3 0207 	rsb	r2, r3, #7
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004948:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	2200      	movs	r2, #0
 800494e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	69b8      	ldr	r0, [r7, #24]
 800495e:	f000 fc13 	bl	8005188 <pxPortInitialiseStack>
 8004962:	4602      	mov	r2, r0
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004972:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004974:	bf00      	nop
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004984:	f000 fd0a 	bl	800539c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004988:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <prvAddNewTaskToReadyList+0xb8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3301      	adds	r3, #1
 800498e:	4a29      	ldr	r2, [pc, #164]	; (8004a34 <prvAddNewTaskToReadyList+0xb8>)
 8004990:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004992:	4b29      	ldr	r3, [pc, #164]	; (8004a38 <prvAddNewTaskToReadyList+0xbc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d109      	bne.n	80049ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800499a:	4a27      	ldr	r2, [pc, #156]	; (8004a38 <prvAddNewTaskToReadyList+0xbc>)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049a0:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <prvAddNewTaskToReadyList+0xb8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d110      	bne.n	80049ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049a8:	f000 fac8 	bl	8004f3c <prvInitialiseTaskLists>
 80049ac:	e00d      	b.n	80049ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049ae:	4b23      	ldr	r3, [pc, #140]	; (8004a3c <prvAddNewTaskToReadyList+0xc0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049b6:	4b20      	ldr	r3, [pc, #128]	; (8004a38 <prvAddNewTaskToReadyList+0xbc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d802      	bhi.n	80049ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049c4:	4a1c      	ldr	r2, [pc, #112]	; (8004a38 <prvAddNewTaskToReadyList+0xbc>)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049ca:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <prvAddNewTaskToReadyList+0xc4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3301      	adds	r3, #1
 80049d0:	4a1b      	ldr	r2, [pc, #108]	; (8004a40 <prvAddNewTaskToReadyList+0xc4>)
 80049d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	2201      	movs	r2, #1
 80049da:	409a      	lsls	r2, r3
 80049dc:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <prvAddNewTaskToReadyList+0xc8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	4a18      	ldr	r2, [pc, #96]	; (8004a44 <prvAddNewTaskToReadyList+0xc8>)
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4a15      	ldr	r2, [pc, #84]	; (8004a48 <prvAddNewTaskToReadyList+0xcc>)
 80049f4:	441a      	add	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3304      	adds	r3, #4
 80049fa:	4619      	mov	r1, r3
 80049fc:	4610      	mov	r0, r2
 80049fe:	f7ff fe05 	bl	800460c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a02:	f000 fcff 	bl	8005404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a06:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <prvAddNewTaskToReadyList+0xc0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00e      	beq.n	8004a2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a0e:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <prvAddNewTaskToReadyList+0xbc>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d207      	bcs.n	8004a2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <prvAddNewTaskToReadyList+0xd0>)
 8004a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000ba8 	.word	0x20000ba8
 8004a38:	20000aa8 	.word	0x20000aa8
 8004a3c:	20000bb4 	.word	0x20000bb4
 8004a40:	20000bc4 	.word	0x20000bc4
 8004a44:	20000bb0 	.word	0x20000bb0
 8004a48:	20000aac 	.word	0x20000aac
 8004a4c:	e000ed04 	.word	0xe000ed04

08004a50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d019      	beq.n	8004a96 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a62:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <vTaskDelay+0x64>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00c      	beq.n	8004a84 <vTaskDelay+0x34>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	b672      	cpsid	i
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	b662      	cpsie	i
 8004a7e:	60bb      	str	r3, [r7, #8]
}
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004a84:	f000 f87e 	bl	8004b84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a88:	2100      	movs	r1, #0
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fb16 	bl	80050bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a90:	f000 f886 	bl	8004ba0 <xTaskResumeAll>
 8004a94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d107      	bne.n	8004aac <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004a9c:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <vTaskDelay+0x68>)
 8004a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000bd0 	.word	0x20000bd0
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	; 0x28
 8004ac0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004aca:	463a      	mov	r2, r7
 8004acc:	1d39      	adds	r1, r7, #4
 8004ace:	f107 0308 	add.w	r3, r7, #8
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fb fd1a 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ad8:	6839      	ldr	r1, [r7, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	9202      	str	r2, [sp, #8]
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	460a      	mov	r2, r1
 8004aea:	4920      	ldr	r1, [pc, #128]	; (8004b6c <vTaskStartScheduler+0xb0>)
 8004aec:	4820      	ldr	r0, [pc, #128]	; (8004b70 <vTaskStartScheduler+0xb4>)
 8004aee:	f7ff fe14 	bl	800471a <xTaskCreateStatic>
 8004af2:	4603      	mov	r3, r0
 8004af4:	4a1f      	ldr	r2, [pc, #124]	; (8004b74 <vTaskStartScheduler+0xb8>)
 8004af6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004af8:	4b1e      	ldr	r3, [pc, #120]	; (8004b74 <vTaskStartScheduler+0xb8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b00:	2301      	movs	r3, #1
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e001      	b.n	8004b0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d118      	bne.n	8004b42 <vTaskStartScheduler+0x86>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	b672      	cpsid	i
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	b662      	cpsie	i
 8004b24:	613b      	str	r3, [r7, #16]
}
 8004b26:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b28:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <vTaskStartScheduler+0xbc>)
 8004b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b30:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <vTaskStartScheduler+0xc0>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b36:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <vTaskStartScheduler+0xc4>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b3c:	f000 fbb0 	bl	80052a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b40:	e010      	b.n	8004b64 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b48:	d10c      	bne.n	8004b64 <vTaskStartScheduler+0xa8>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	b672      	cpsid	i
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	b662      	cpsie	i
 8004b5e:	60fb      	str	r3, [r7, #12]
}
 8004b60:	bf00      	nop
 8004b62:	e7fe      	b.n	8004b62 <vTaskStartScheduler+0xa6>
}
 8004b64:	bf00      	nop
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	08005a80 	.word	0x08005a80
 8004b70:	08004f0d 	.word	0x08004f0d
 8004b74:	20000bcc 	.word	0x20000bcc
 8004b78:	20000bc8 	.word	0x20000bc8
 8004b7c:	20000bb4 	.word	0x20000bb4
 8004b80:	20000bac 	.word	0x20000bac

08004b84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004b88:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <vTaskSuspendAll+0x18>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	4a03      	ldr	r2, [pc, #12]	; (8004b9c <vTaskSuspendAll+0x18>)
 8004b90:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004b92:	bf00      	nop
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	20000bd0 	.word	0x20000bd0

08004ba0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bae:	4b42      	ldr	r3, [pc, #264]	; (8004cb8 <xTaskResumeAll+0x118>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10c      	bne.n	8004bd0 <xTaskResumeAll+0x30>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	b672      	cpsid	i
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	b662      	cpsie	i
 8004bca:	603b      	str	r3, [r7, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	e7fe      	b.n	8004bce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004bd0:	f000 fbe4 	bl	800539c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004bd4:	4b38      	ldr	r3, [pc, #224]	; (8004cb8 <xTaskResumeAll+0x118>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	4a37      	ldr	r2, [pc, #220]	; (8004cb8 <xTaskResumeAll+0x118>)
 8004bdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bde:	4b36      	ldr	r3, [pc, #216]	; (8004cb8 <xTaskResumeAll+0x118>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d161      	bne.n	8004caa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004be6:	4b35      	ldr	r3, [pc, #212]	; (8004cbc <xTaskResumeAll+0x11c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d05d      	beq.n	8004caa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bee:	e02e      	b.n	8004c4e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bf0:	4b33      	ldr	r3, [pc, #204]	; (8004cc0 <xTaskResumeAll+0x120>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3318      	adds	r3, #24
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fd62 	bl	80046c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fd5d 	bl	80046c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	2201      	movs	r2, #1
 8004c12:	409a      	lsls	r2, r3
 8004c14:	4b2b      	ldr	r3, [pc, #172]	; (8004cc4 <xTaskResumeAll+0x124>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	4a2a      	ldr	r2, [pc, #168]	; (8004cc4 <xTaskResumeAll+0x124>)
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4a27      	ldr	r2, [pc, #156]	; (8004cc8 <xTaskResumeAll+0x128>)
 8004c2c:	441a      	add	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4619      	mov	r1, r3
 8004c34:	4610      	mov	r0, r2
 8004c36:	f7ff fce9 	bl	800460c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3e:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <xTaskResumeAll+0x12c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d302      	bcc.n	8004c4e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004c48:	4b21      	ldr	r3, [pc, #132]	; (8004cd0 <xTaskResumeAll+0x130>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c4e:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <xTaskResumeAll+0x120>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1cc      	bne.n	8004bf0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c5c:	f000 fa0e 	bl	800507c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c60:	4b1c      	ldr	r3, [pc, #112]	; (8004cd4 <xTaskResumeAll+0x134>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d010      	beq.n	8004c8e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c6c:	f000 f836 	bl	8004cdc <xTaskIncrementTick>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004c76:	4b16      	ldr	r3, [pc, #88]	; (8004cd0 <xTaskResumeAll+0x130>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f1      	bne.n	8004c6c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004c88:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <xTaskResumeAll+0x134>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c8e:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <xTaskResumeAll+0x130>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d009      	beq.n	8004caa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c96:	2301      	movs	r3, #1
 8004c98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c9a:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <xTaskResumeAll+0x138>)
 8004c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004caa:	f000 fbab 	bl	8005404 <vPortExitCritical>

	return xAlreadyYielded;
 8004cae:	68bb      	ldr	r3, [r7, #8]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	20000bd0 	.word	0x20000bd0
 8004cbc:	20000ba8 	.word	0x20000ba8
 8004cc0:	20000b68 	.word	0x20000b68
 8004cc4:	20000bb0 	.word	0x20000bb0
 8004cc8:	20000aac 	.word	0x20000aac
 8004ccc:	20000aa8 	.word	0x20000aa8
 8004cd0:	20000bbc 	.word	0x20000bbc
 8004cd4:	20000bb8 	.word	0x20000bb8
 8004cd8:	e000ed04 	.word	0xe000ed04

08004cdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ce6:	4b4f      	ldr	r3, [pc, #316]	; (8004e24 <xTaskIncrementTick+0x148>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f040 808a 	bne.w	8004e04 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cf0:	4b4d      	ldr	r3, [pc, #308]	; (8004e28 <xTaskIncrementTick+0x14c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cf8:	4a4b      	ldr	r2, [pc, #300]	; (8004e28 <xTaskIncrementTick+0x14c>)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d122      	bne.n	8004d4a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d04:	4b49      	ldr	r3, [pc, #292]	; (8004e2c <xTaskIncrementTick+0x150>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00c      	beq.n	8004d28 <xTaskIncrementTick+0x4c>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	b672      	cpsid	i
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	b662      	cpsie	i
 8004d22:	603b      	str	r3, [r7, #0]
}
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <xTaskIncrementTick+0x4a>
 8004d28:	4b40      	ldr	r3, [pc, #256]	; (8004e2c <xTaskIncrementTick+0x150>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	4b40      	ldr	r3, [pc, #256]	; (8004e30 <xTaskIncrementTick+0x154>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a3e      	ldr	r2, [pc, #248]	; (8004e2c <xTaskIncrementTick+0x150>)
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	4a3e      	ldr	r2, [pc, #248]	; (8004e30 <xTaskIncrementTick+0x154>)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4b3d      	ldr	r3, [pc, #244]	; (8004e34 <xTaskIncrementTick+0x158>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3301      	adds	r3, #1
 8004d42:	4a3c      	ldr	r2, [pc, #240]	; (8004e34 <xTaskIncrementTick+0x158>)
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	f000 f999 	bl	800507c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d4a:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <xTaskIncrementTick+0x15c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d348      	bcc.n	8004de6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d54:	4b35      	ldr	r3, [pc, #212]	; (8004e2c <xTaskIncrementTick+0x150>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d5e:	4b36      	ldr	r3, [pc, #216]	; (8004e38 <xTaskIncrementTick+0x15c>)
 8004d60:	f04f 32ff 	mov.w	r2, #4294967295
 8004d64:	601a      	str	r2, [r3, #0]
					break;
 8004d66:	e03e      	b.n	8004de6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d68:	4b30      	ldr	r3, [pc, #192]	; (8004e2c <xTaskIncrementTick+0x150>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d203      	bcs.n	8004d88 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d80:	4a2d      	ldr	r2, [pc, #180]	; (8004e38 <xTaskIncrementTick+0x15c>)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d86:	e02e      	b.n	8004de6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fc9a 	bl	80046c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d004      	beq.n	8004da4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	3318      	adds	r3, #24
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fc91 	bl	80046c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	2201      	movs	r2, #1
 8004daa:	409a      	lsls	r2, r3
 8004dac:	4b23      	ldr	r3, [pc, #140]	; (8004e3c <xTaskIncrementTick+0x160>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	4a22      	ldr	r2, [pc, #136]	; (8004e3c <xTaskIncrementTick+0x160>)
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <xTaskIncrementTick+0x164>)
 8004dc4:	441a      	add	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4610      	mov	r0, r2
 8004dce:	f7ff fc1d 	bl	800460c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <xTaskIncrementTick+0x168>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d3b9      	bcc.n	8004d54 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004de4:	e7b6      	b.n	8004d54 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004de6:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <xTaskIncrementTick+0x168>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dec:	4914      	ldr	r1, [pc, #80]	; (8004e40 <xTaskIncrementTick+0x164>)
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d907      	bls.n	8004e0e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	e004      	b.n	8004e0e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004e04:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <xTaskIncrementTick+0x16c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	4a0f      	ldr	r2, [pc, #60]	; (8004e48 <xTaskIncrementTick+0x16c>)
 8004e0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <xTaskIncrementTick+0x170>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8004e16:	2301      	movs	r3, #1
 8004e18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004e1a:	697b      	ldr	r3, [r7, #20]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20000bd0 	.word	0x20000bd0
 8004e28:	20000bac 	.word	0x20000bac
 8004e2c:	20000b60 	.word	0x20000b60
 8004e30:	20000b64 	.word	0x20000b64
 8004e34:	20000bc0 	.word	0x20000bc0
 8004e38:	20000bc8 	.word	0x20000bc8
 8004e3c:	20000bb0 	.word	0x20000bb0
 8004e40:	20000aac 	.word	0x20000aac
 8004e44:	20000aa8 	.word	0x20000aa8
 8004e48:	20000bb8 	.word	0x20000bb8
 8004e4c:	20000bbc 	.word	0x20000bbc

08004e50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e56:	4b28      	ldr	r3, [pc, #160]	; (8004ef8 <vTaskSwitchContext+0xa8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e5e:	4b27      	ldr	r3, [pc, #156]	; (8004efc <vTaskSwitchContext+0xac>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e64:	e041      	b.n	8004eea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004e66:	4b25      	ldr	r3, [pc, #148]	; (8004efc <vTaskSwitchContext+0xac>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e6c:	4b24      	ldr	r3, [pc, #144]	; (8004f00 <vTaskSwitchContext+0xb0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	fab3 f383 	clz	r3, r3
 8004e78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004e7a:	7afb      	ldrb	r3, [r7, #11]
 8004e7c:	f1c3 031f 	rsb	r3, r3, #31
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	4920      	ldr	r1, [pc, #128]	; (8004f04 <vTaskSwitchContext+0xb4>)
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4613      	mov	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	440b      	add	r3, r1
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10c      	bne.n	8004eb0 <vTaskSwitchContext+0x60>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	b672      	cpsid	i
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	b662      	cpsie	i
 8004eaa:	607b      	str	r3, [r7, #4]
}
 8004eac:	bf00      	nop
 8004eae:	e7fe      	b.n	8004eae <vTaskSwitchContext+0x5e>
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4a12      	ldr	r2, [pc, #72]	; (8004f04 <vTaskSwitchContext+0xb4>)
 8004ebc:	4413      	add	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d104      	bne.n	8004ee0 <vTaskSwitchContext+0x90>
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	605a      	str	r2, [r3, #4]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <vTaskSwitchContext+0xb8>)
 8004ee8:	6013      	str	r3, [r2, #0]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	20000bd0 	.word	0x20000bd0
 8004efc:	20000bbc 	.word	0x20000bbc
 8004f00:	20000bb0 	.word	0x20000bb0
 8004f04:	20000aac 	.word	0x20000aac
 8004f08:	20000aa8 	.word	0x20000aa8

08004f0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f14:	f000 f852 	bl	8004fbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f18:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <prvIdleTask+0x28>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d9f9      	bls.n	8004f14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f20:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <prvIdleTask+0x2c>)
 8004f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f30:	e7f0      	b.n	8004f14 <prvIdleTask+0x8>
 8004f32:	bf00      	nop
 8004f34:	20000aac 	.word	0x20000aac
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f42:	2300      	movs	r3, #0
 8004f44:	607b      	str	r3, [r7, #4]
 8004f46:	e00c      	b.n	8004f62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4a12      	ldr	r2, [pc, #72]	; (8004f9c <prvInitialiseTaskLists+0x60>)
 8004f54:	4413      	add	r3, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fb2b 	bl	80045b2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	607b      	str	r3, [r7, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b06      	cmp	r3, #6
 8004f66:	d9ef      	bls.n	8004f48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f68:	480d      	ldr	r0, [pc, #52]	; (8004fa0 <prvInitialiseTaskLists+0x64>)
 8004f6a:	f7ff fb22 	bl	80045b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f6e:	480d      	ldr	r0, [pc, #52]	; (8004fa4 <prvInitialiseTaskLists+0x68>)
 8004f70:	f7ff fb1f 	bl	80045b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f74:	480c      	ldr	r0, [pc, #48]	; (8004fa8 <prvInitialiseTaskLists+0x6c>)
 8004f76:	f7ff fb1c 	bl	80045b2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f7a:	480c      	ldr	r0, [pc, #48]	; (8004fac <prvInitialiseTaskLists+0x70>)
 8004f7c:	f7ff fb19 	bl	80045b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f80:	480b      	ldr	r0, [pc, #44]	; (8004fb0 <prvInitialiseTaskLists+0x74>)
 8004f82:	f7ff fb16 	bl	80045b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f86:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <prvInitialiseTaskLists+0x78>)
 8004f88:	4a05      	ldr	r2, [pc, #20]	; (8004fa0 <prvInitialiseTaskLists+0x64>)
 8004f8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <prvInitialiseTaskLists+0x7c>)
 8004f8e:	4a05      	ldr	r2, [pc, #20]	; (8004fa4 <prvInitialiseTaskLists+0x68>)
 8004f90:	601a      	str	r2, [r3, #0]
}
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000aac 	.word	0x20000aac
 8004fa0:	20000b38 	.word	0x20000b38
 8004fa4:	20000b4c 	.word	0x20000b4c
 8004fa8:	20000b68 	.word	0x20000b68
 8004fac:	20000b7c 	.word	0x20000b7c
 8004fb0:	20000b94 	.word	0x20000b94
 8004fb4:	20000b60 	.word	0x20000b60
 8004fb8:	20000b64 	.word	0x20000b64

08004fbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fc2:	e019      	b.n	8004ff8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004fc4:	f000 f9ea 	bl	800539c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fc8:	4b10      	ldr	r3, [pc, #64]	; (800500c <prvCheckTasksWaitingTermination+0x50>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fb76 	bl	80046c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fda:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <prvCheckTasksWaitingTermination+0x54>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	4a0b      	ldr	r2, [pc, #44]	; (8005010 <prvCheckTasksWaitingTermination+0x54>)
 8004fe2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <prvCheckTasksWaitingTermination+0x58>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	4a0a      	ldr	r2, [pc, #40]	; (8005014 <prvCheckTasksWaitingTermination+0x58>)
 8004fec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fee:	f000 fa09 	bl	8005404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f810 	bl	8005018 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ff8:	4b06      	ldr	r3, [pc, #24]	; (8005014 <prvCheckTasksWaitingTermination+0x58>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e1      	bne.n	8004fc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000b7c 	.word	0x20000b7c
 8005010:	20000ba8 	.word	0x20000ba8
 8005014:	20000b90 	.word	0x20000b90

08005018 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005026:	2b00      	cmp	r3, #0
 8005028:	d108      	bne.n	800503c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fb66 	bl	8005700 <vPortFree>
				vPortFree( pxTCB );
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fb63 	bl	8005700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800503a:	e01a      	b.n	8005072 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005042:	2b01      	cmp	r3, #1
 8005044:	d103      	bne.n	800504e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fb5a 	bl	8005700 <vPortFree>
	}
 800504c:	e011      	b.n	8005072 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005054:	2b02      	cmp	r3, #2
 8005056:	d00c      	beq.n	8005072 <prvDeleteTCB+0x5a>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	b672      	cpsid	i
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	b662      	cpsie	i
 800506c:	60fb      	str	r3, [r7, #12]
}
 800506e:	bf00      	nop
 8005070:	e7fe      	b.n	8005070 <prvDeleteTCB+0x58>
	}
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005082:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <prvResetNextTaskUnblockTime+0x38>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800508c:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <prvResetNextTaskUnblockTime+0x3c>)
 800508e:	f04f 32ff 	mov.w	r2, #4294967295
 8005092:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005094:	e008      	b.n	80050a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005096:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <prvResetNextTaskUnblockTime+0x38>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4a04      	ldr	r2, [pc, #16]	; (80050b8 <prvResetNextTaskUnblockTime+0x3c>)
 80050a6:	6013      	str	r3, [r2, #0]
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	20000b60 	.word	0x20000b60
 80050b8:	20000bc8 	.word	0x20000bc8

080050bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050c6:	4b29      	ldr	r3, [pc, #164]	; (800516c <prvAddCurrentTaskToDelayedList+0xb0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050cc:	4b28      	ldr	r3, [pc, #160]	; (8005170 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3304      	adds	r3, #4
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff faf7 	bl	80046c6 <uxListRemove>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10b      	bne.n	80050f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050de:	4b24      	ldr	r3, [pc, #144]	; (8005170 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	2201      	movs	r2, #1
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	43da      	mvns	r2, r3
 80050ec:	4b21      	ldr	r3, [pc, #132]	; (8005174 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4013      	ands	r3, r2
 80050f2:	4a20      	ldr	r2, [pc, #128]	; (8005174 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d10a      	bne.n	8005114 <prvAddCurrentTaskToDelayedList+0x58>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005104:	4b1a      	ldr	r3, [pc, #104]	; (8005170 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3304      	adds	r3, #4
 800510a:	4619      	mov	r1, r3
 800510c:	481a      	ldr	r0, [pc, #104]	; (8005178 <prvAddCurrentTaskToDelayedList+0xbc>)
 800510e:	f7ff fa7d 	bl	800460c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005112:	e026      	b.n	8005162 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4413      	add	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800511c:	4b14      	ldr	r3, [pc, #80]	; (8005170 <prvAddCurrentTaskToDelayedList+0xb4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	429a      	cmp	r2, r3
 800512a:	d209      	bcs.n	8005140 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800512c:	4b13      	ldr	r3, [pc, #76]	; (800517c <prvAddCurrentTaskToDelayedList+0xc0>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3304      	adds	r3, #4
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f7ff fa8b 	bl	8004654 <vListInsert>
}
 800513e:	e010      	b.n	8005162 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005140:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3304      	adds	r3, #4
 800514a:	4619      	mov	r1, r3
 800514c:	4610      	mov	r0, r2
 800514e:	f7ff fa81 	bl	8004654 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005152:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	429a      	cmp	r2, r3
 800515a:	d202      	bcs.n	8005162 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800515c:	4a09      	ldr	r2, [pc, #36]	; (8005184 <prvAddCurrentTaskToDelayedList+0xc8>)
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	6013      	str	r3, [r2, #0]
}
 8005162:	bf00      	nop
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	20000bac 	.word	0x20000bac
 8005170:	20000aa8 	.word	0x20000aa8
 8005174:	20000bb0 	.word	0x20000bb0
 8005178:	20000b94 	.word	0x20000b94
 800517c:	20000b64 	.word	0x20000b64
 8005180:	20000b60 	.word	0x20000b60
 8005184:	20000bc8 	.word	0x20000bc8

08005188 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3b04      	subs	r3, #4
 8005198:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3b04      	subs	r3, #4
 80051a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f023 0201 	bic.w	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3b04      	subs	r3, #4
 80051b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051b8:	4a0c      	ldr	r2, [pc, #48]	; (80051ec <pxPortInitialiseStack+0x64>)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3b14      	subs	r3, #20
 80051c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3b04      	subs	r3, #4
 80051ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f06f 0202 	mvn.w	r2, #2
 80051d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3b20      	subs	r3, #32
 80051dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051de:	68fb      	ldr	r3, [r7, #12]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	080051f1 	.word	0x080051f1

080051f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051f6:	2300      	movs	r3, #0
 80051f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051fa:	4b14      	ldr	r3, [pc, #80]	; (800524c <prvTaskExitError+0x5c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005202:	d00c      	beq.n	800521e <prvTaskExitError+0x2e>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	b672      	cpsid	i
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	b662      	cpsie	i
 8005218:	60fb      	str	r3, [r7, #12]
}
 800521a:	bf00      	nop
 800521c:	e7fe      	b.n	800521c <prvTaskExitError+0x2c>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	b672      	cpsid	i
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	b662      	cpsie	i
 8005232:	60bb      	str	r3, [r7, #8]
}
 8005234:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005236:	bf00      	nop
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0fc      	beq.n	8005238 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800523e:	bf00      	nop
 8005240:	bf00      	nop
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	2000000c 	.word	0x2000000c

08005250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005250:	4b07      	ldr	r3, [pc, #28]	; (8005270 <pxCurrentTCBConst2>)
 8005252:	6819      	ldr	r1, [r3, #0]
 8005254:	6808      	ldr	r0, [r1, #0]
 8005256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525a:	f380 8809 	msr	PSP, r0
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f04f 0000 	mov.w	r0, #0
 8005266:	f380 8811 	msr	BASEPRI, r0
 800526a:	4770      	bx	lr
 800526c:	f3af 8000 	nop.w

08005270 <pxCurrentTCBConst2>:
 8005270:	20000aa8 	.word	0x20000aa8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop

08005278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005278:	4808      	ldr	r0, [pc, #32]	; (800529c <prvPortStartFirstTask+0x24>)
 800527a:	6800      	ldr	r0, [r0, #0]
 800527c:	6800      	ldr	r0, [r0, #0]
 800527e:	f380 8808 	msr	MSP, r0
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f380 8814 	msr	CONTROL, r0
 800528a:	b662      	cpsie	i
 800528c:	b661      	cpsie	f
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	df00      	svc	0
 8005298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800529a:	bf00      	nop
 800529c:	e000ed08 	.word	0xe000ed08

080052a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052a6:	4b37      	ldr	r3, [pc, #220]	; (8005384 <xPortStartScheduler+0xe4>)
 80052a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	22ff      	movs	r2, #255	; 0xff
 80052b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	4b2f      	ldr	r3, [pc, #188]	; (8005388 <xPortStartScheduler+0xe8>)
 80052cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052ce:	4b2f      	ldr	r3, [pc, #188]	; (800538c <xPortStartScheduler+0xec>)
 80052d0:	2207      	movs	r2, #7
 80052d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052d4:	e009      	b.n	80052ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80052d6:	4b2d      	ldr	r3, [pc, #180]	; (800538c <xPortStartScheduler+0xec>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3b01      	subs	r3, #1
 80052dc:	4a2b      	ldr	r2, [pc, #172]	; (800538c <xPortStartScheduler+0xec>)
 80052de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ea:	78fb      	ldrb	r3, [r7, #3]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f2:	2b80      	cmp	r3, #128	; 0x80
 80052f4:	d0ef      	beq.n	80052d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052f6:	4b25      	ldr	r3, [pc, #148]	; (800538c <xPortStartScheduler+0xec>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f1c3 0307 	rsb	r3, r3, #7
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d00c      	beq.n	800531c <xPortStartScheduler+0x7c>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	b672      	cpsid	i
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	b662      	cpsie	i
 8005316:	60bb      	str	r3, [r7, #8]
}
 8005318:	bf00      	nop
 800531a:	e7fe      	b.n	800531a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800531c:	4b1b      	ldr	r3, [pc, #108]	; (800538c <xPortStartScheduler+0xec>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	4a1a      	ldr	r2, [pc, #104]	; (800538c <xPortStartScheduler+0xec>)
 8005324:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005326:	4b19      	ldr	r3, [pc, #100]	; (800538c <xPortStartScheduler+0xec>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800532e:	4a17      	ldr	r2, [pc, #92]	; (800538c <xPortStartScheduler+0xec>)
 8005330:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800533a:	4b15      	ldr	r3, [pc, #84]	; (8005390 <xPortStartScheduler+0xf0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a14      	ldr	r2, [pc, #80]	; (8005390 <xPortStartScheduler+0xf0>)
 8005340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005344:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005346:	4b12      	ldr	r3, [pc, #72]	; (8005390 <xPortStartScheduler+0xf0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a11      	ldr	r2, [pc, #68]	; (8005390 <xPortStartScheduler+0xf0>)
 800534c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005350:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005352:	f000 f8dd 	bl	8005510 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005356:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <xPortStartScheduler+0xf4>)
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800535c:	f000 f8fc 	bl	8005558 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005360:	4b0d      	ldr	r3, [pc, #52]	; (8005398 <xPortStartScheduler+0xf8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a0c      	ldr	r2, [pc, #48]	; (8005398 <xPortStartScheduler+0xf8>)
 8005366:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800536a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800536c:	f7ff ff84 	bl	8005278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005370:	f7ff fd6e 	bl	8004e50 <vTaskSwitchContext>
	prvTaskExitError();
 8005374:	f7ff ff3c 	bl	80051f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	e000e400 	.word	0xe000e400
 8005388:	20000bd4 	.word	0x20000bd4
 800538c:	20000bd8 	.word	0x20000bd8
 8005390:	e000ed20 	.word	0xe000ed20
 8005394:	2000000c 	.word	0x2000000c
 8005398:	e000ef34 	.word	0xe000ef34

0800539c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	b672      	cpsid	i
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	b662      	cpsie	i
 80053b6:	607b      	str	r3, [r7, #4]
}
 80053b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053ba:	4b10      	ldr	r3, [pc, #64]	; (80053fc <vPortEnterCritical+0x60>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3301      	adds	r3, #1
 80053c0:	4a0e      	ldr	r2, [pc, #56]	; (80053fc <vPortEnterCritical+0x60>)
 80053c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053c4:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <vPortEnterCritical+0x60>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d111      	bne.n	80053f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053cc:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <vPortEnterCritical+0x64>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00c      	beq.n	80053f0 <vPortEnterCritical+0x54>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	b672      	cpsid	i
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	b662      	cpsie	i
 80053ea:	603b      	str	r3, [r7, #0]
}
 80053ec:	bf00      	nop
 80053ee:	e7fe      	b.n	80053ee <vPortEnterCritical+0x52>
	}
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	2000000c 	.word	0x2000000c
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800540a:	4b13      	ldr	r3, [pc, #76]	; (8005458 <vPortExitCritical+0x54>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10c      	bne.n	800542c <vPortExitCritical+0x28>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	b672      	cpsid	i
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	b662      	cpsie	i
 8005426:	607b      	str	r3, [r7, #4]
}
 8005428:	bf00      	nop
 800542a:	e7fe      	b.n	800542a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800542c:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <vPortExitCritical+0x54>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3b01      	subs	r3, #1
 8005432:	4a09      	ldr	r2, [pc, #36]	; (8005458 <vPortExitCritical+0x54>)
 8005434:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005436:	4b08      	ldr	r3, [pc, #32]	; (8005458 <vPortExitCritical+0x54>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d105      	bne.n	800544a <vPortExitCritical+0x46>
 800543e:	2300      	movs	r3, #0
 8005440:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005448:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	2000000c 	.word	0x2000000c
 800545c:	00000000 	.word	0x00000000

08005460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005460:	f3ef 8009 	mrs	r0, PSP
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <pxCurrentTCBConst>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	f01e 0f10 	tst.w	lr, #16
 8005470:	bf08      	it	eq
 8005472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547a:	6010      	str	r0, [r2, #0]
 800547c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005484:	b672      	cpsid	i
 8005486:	f380 8811 	msr	BASEPRI, r0
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	b662      	cpsie	i
 8005494:	f7ff fcdc 	bl	8004e50 <vTaskSwitchContext>
 8005498:	f04f 0000 	mov.w	r0, #0
 800549c:	f380 8811 	msr	BASEPRI, r0
 80054a0:	bc09      	pop	{r0, r3}
 80054a2:	6819      	ldr	r1, [r3, #0]
 80054a4:	6808      	ldr	r0, [r1, #0]
 80054a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054aa:	f01e 0f10 	tst.w	lr, #16
 80054ae:	bf08      	it	eq
 80054b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054b4:	f380 8809 	msr	PSP, r0
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop

080054c0 <pxCurrentTCBConst>:
 80054c0:	20000aa8 	.word	0x20000aa8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop

080054c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	b672      	cpsid	i
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	b662      	cpsie	i
 80054e2:	607b      	str	r3, [r7, #4]
}
 80054e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054e6:	f7ff fbf9 	bl	8004cdc <xTaskIncrementTick>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054f0:	4b06      	ldr	r3, [pc, #24]	; (800550c <SysTick_Handler+0x44>)
 80054f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	2300      	movs	r3, #0
 80054fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	f383 8811 	msr	BASEPRI, r3
}
 8005502:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	e000ed04 	.word	0xe000ed04

08005510 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <vPortSetupTimerInterrupt+0x34>)
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800551a:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <vPortSetupTimerInterrupt+0x38>)
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005520:	4b0a      	ldr	r3, [pc, #40]	; (800554c <vPortSetupTimerInterrupt+0x3c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a0a      	ldr	r2, [pc, #40]	; (8005550 <vPortSetupTimerInterrupt+0x40>)
 8005526:	fba2 2303 	umull	r2, r3, r2, r3
 800552a:	099b      	lsrs	r3, r3, #6
 800552c:	4a09      	ldr	r2, [pc, #36]	; (8005554 <vPortSetupTimerInterrupt+0x44>)
 800552e:	3b01      	subs	r3, #1
 8005530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005532:	4b04      	ldr	r3, [pc, #16]	; (8005544 <vPortSetupTimerInterrupt+0x34>)
 8005534:	2207      	movs	r2, #7
 8005536:	601a      	str	r2, [r3, #0]
}
 8005538:	bf00      	nop
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	e000e010 	.word	0xe000e010
 8005548:	e000e018 	.word	0xe000e018
 800554c:	20000000 	.word	0x20000000
 8005550:	10624dd3 	.word	0x10624dd3
 8005554:	e000e014 	.word	0xe000e014

08005558 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005558:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005568 <vPortEnableVFP+0x10>
 800555c:	6801      	ldr	r1, [r0, #0]
 800555e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005562:	6001      	str	r1, [r0, #0]
 8005564:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005566:	bf00      	nop
 8005568:	e000ed88 	.word	0xe000ed88

0800556c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	; 0x28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005574:	2300      	movs	r3, #0
 8005576:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005578:	f7ff fb04 	bl	8004b84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800557c:	4b5b      	ldr	r3, [pc, #364]	; (80056ec <pvPortMalloc+0x180>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005584:	f000 f91a 	bl	80057bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005588:	4b59      	ldr	r3, [pc, #356]	; (80056f0 <pvPortMalloc+0x184>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4013      	ands	r3, r2
 8005590:	2b00      	cmp	r3, #0
 8005592:	f040 8092 	bne.w	80056ba <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01f      	beq.n	80055dc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800559c:	2208      	movs	r2, #8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4413      	add	r3, r2
 80055a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f023 0307 	bic.w	r3, r3, #7
 80055b4:	3308      	adds	r3, #8
 80055b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00c      	beq.n	80055dc <pvPortMalloc+0x70>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	b672      	cpsid	i
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	b662      	cpsie	i
 80055d6:	617b      	str	r3, [r7, #20]
}
 80055d8:	bf00      	nop
 80055da:	e7fe      	b.n	80055da <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d06b      	beq.n	80056ba <pvPortMalloc+0x14e>
 80055e2:	4b44      	ldr	r3, [pc, #272]	; (80056f4 <pvPortMalloc+0x188>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d866      	bhi.n	80056ba <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055ec:	4b42      	ldr	r3, [pc, #264]	; (80056f8 <pvPortMalloc+0x18c>)
 80055ee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055f0:	4b41      	ldr	r3, [pc, #260]	; (80056f8 <pvPortMalloc+0x18c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055f6:	e004      	b.n	8005602 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	d903      	bls.n	8005614 <pvPortMalloc+0xa8>
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1f1      	bne.n	80055f8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005614:	4b35      	ldr	r3, [pc, #212]	; (80056ec <pvPortMalloc+0x180>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561a:	429a      	cmp	r2, r3
 800561c:	d04d      	beq.n	80056ba <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2208      	movs	r2, #8
 8005624:	4413      	add	r3, r2
 8005626:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	1ad2      	subs	r2, r2, r3
 8005638:	2308      	movs	r3, #8
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	429a      	cmp	r2, r3
 800563e:	d921      	bls.n	8005684 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4413      	add	r3, r2
 8005646:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00c      	beq.n	800566c <pvPortMalloc+0x100>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	b672      	cpsid	i
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	b662      	cpsie	i
 8005666:	613b      	str	r3, [r7, #16]
}
 8005668:	bf00      	nop
 800566a:	e7fe      	b.n	800566a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	1ad2      	subs	r2, r2, r3
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800567e:	69b8      	ldr	r0, [r7, #24]
 8005680:	f000 f8fe 	bl	8005880 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005684:	4b1b      	ldr	r3, [pc, #108]	; (80056f4 <pvPortMalloc+0x188>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	4a19      	ldr	r2, [pc, #100]	; (80056f4 <pvPortMalloc+0x188>)
 8005690:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005692:	4b18      	ldr	r3, [pc, #96]	; (80056f4 <pvPortMalloc+0x188>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	4b19      	ldr	r3, [pc, #100]	; (80056fc <pvPortMalloc+0x190>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d203      	bcs.n	80056a6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800569e:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <pvPortMalloc+0x188>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a16      	ldr	r2, [pc, #88]	; (80056fc <pvPortMalloc+0x190>)
 80056a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <pvPortMalloc+0x184>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056ba:	f7ff fa71 	bl	8004ba0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00c      	beq.n	80056e2 <pvPortMalloc+0x176>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	b672      	cpsid	i
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	b662      	cpsie	i
 80056dc:	60fb      	str	r3, [r7, #12]
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <pvPortMalloc+0x174>
	return pvReturn;
 80056e2:	69fb      	ldr	r3, [r7, #28]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3728      	adds	r7, #40	; 0x28
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	200047e4 	.word	0x200047e4
 80056f0:	200047f0 	.word	0x200047f0
 80056f4:	200047e8 	.word	0x200047e8
 80056f8:	200047dc 	.word	0x200047dc
 80056fc:	200047ec 	.word	0x200047ec

08005700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d04c      	beq.n	80057ac <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005712:	2308      	movs	r3, #8
 8005714:	425b      	negs	r3, r3
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4413      	add	r3, r2
 800571a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	4b23      	ldr	r3, [pc, #140]	; (80057b4 <vPortFree+0xb4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4013      	ands	r3, r2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10c      	bne.n	8005748 <vPortFree+0x48>
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	b672      	cpsid	i
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	b662      	cpsie	i
 8005742:	60fb      	str	r3, [r7, #12]
}
 8005744:	bf00      	nop
 8005746:	e7fe      	b.n	8005746 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00c      	beq.n	800576a <vPortFree+0x6a>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	b672      	cpsid	i
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	b662      	cpsie	i
 8005764:	60bb      	str	r3, [r7, #8]
}
 8005766:	bf00      	nop
 8005768:	e7fe      	b.n	8005768 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <vPortFree+0xb4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4013      	ands	r3, r2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d019      	beq.n	80057ac <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d115      	bne.n	80057ac <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	4b0b      	ldr	r3, [pc, #44]	; (80057b4 <vPortFree+0xb4>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	43db      	mvns	r3, r3
 800578a:	401a      	ands	r2, r3
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005790:	f7ff f9f8 	bl	8004b84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <vPortFree+0xb8>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4413      	add	r3, r2
 800579e:	4a06      	ldr	r2, [pc, #24]	; (80057b8 <vPortFree+0xb8>)
 80057a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057a2:	6938      	ldr	r0, [r7, #16]
 80057a4:	f000 f86c 	bl	8005880 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057a8:	f7ff f9fa 	bl	8004ba0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057ac:	bf00      	nop
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	200047f0 	.word	0x200047f0
 80057b8:	200047e8 	.word	0x200047e8

080057bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057c2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80057c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057c8:	4b27      	ldr	r3, [pc, #156]	; (8005868 <prvHeapInit+0xac>)
 80057ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00c      	beq.n	80057f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3307      	adds	r3, #7
 80057da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0307 	bic.w	r3, r3, #7
 80057e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	4a1f      	ldr	r2, [pc, #124]	; (8005868 <prvHeapInit+0xac>)
 80057ec:	4413      	add	r3, r2
 80057ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057f4:	4a1d      	ldr	r2, [pc, #116]	; (800586c <prvHeapInit+0xb0>)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057fa:	4b1c      	ldr	r3, [pc, #112]	; (800586c <prvHeapInit+0xb0>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	4413      	add	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005808:	2208      	movs	r2, #8
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0307 	bic.w	r3, r3, #7
 8005816:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4a15      	ldr	r2, [pc, #84]	; (8005870 <prvHeapInit+0xb4>)
 800581c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800581e:	4b14      	ldr	r3, [pc, #80]	; (8005870 <prvHeapInit+0xb4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2200      	movs	r2, #0
 8005824:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005826:	4b12      	ldr	r3, [pc, #72]	; (8005870 <prvHeapInit+0xb4>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	1ad2      	subs	r2, r2, r3
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800583c:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <prvHeapInit+0xb4>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	4a0a      	ldr	r2, [pc, #40]	; (8005874 <prvHeapInit+0xb8>)
 800584a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	4a09      	ldr	r2, [pc, #36]	; (8005878 <prvHeapInit+0xbc>)
 8005852:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005854:	4b09      	ldr	r3, [pc, #36]	; (800587c <prvHeapInit+0xc0>)
 8005856:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800585a:	601a      	str	r2, [r3, #0]
}
 800585c:	bf00      	nop
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	20000bdc 	.word	0x20000bdc
 800586c:	200047dc 	.word	0x200047dc
 8005870:	200047e4 	.word	0x200047e4
 8005874:	200047ec 	.word	0x200047ec
 8005878:	200047e8 	.word	0x200047e8
 800587c:	200047f0 	.word	0x200047f0

08005880 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005888:	4b28      	ldr	r3, [pc, #160]	; (800592c <prvInsertBlockIntoFreeList+0xac>)
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e002      	b.n	8005894 <prvInsertBlockIntoFreeList+0x14>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	429a      	cmp	r2, r3
 800589c:	d8f7      	bhi.n	800588e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4413      	add	r3, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d108      	bne.n	80058c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	441a      	add	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	441a      	add	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d118      	bne.n	8005908 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4b15      	ldr	r3, [pc, #84]	; (8005930 <prvInsertBlockIntoFreeList+0xb0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d00d      	beq.n	80058fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	441a      	add	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	e008      	b.n	8005910 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058fe:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <prvInsertBlockIntoFreeList+0xb0>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	e003      	b.n	8005910 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	429a      	cmp	r2, r3
 8005916:	d002      	beq.n	800591e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	200047dc 	.word	0x200047dc
 8005930:	200047e4 	.word	0x200047e4

08005934 <memset>:
 8005934:	4402      	add	r2, r0
 8005936:	4603      	mov	r3, r0
 8005938:	4293      	cmp	r3, r2
 800593a:	d100      	bne.n	800593e <memset+0xa>
 800593c:	4770      	bx	lr
 800593e:	f803 1b01 	strb.w	r1, [r3], #1
 8005942:	e7f9      	b.n	8005938 <memset+0x4>

08005944 <__libc_init_array>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	4d0d      	ldr	r5, [pc, #52]	; (800597c <__libc_init_array+0x38>)
 8005948:	4c0d      	ldr	r4, [pc, #52]	; (8005980 <__libc_init_array+0x3c>)
 800594a:	1b64      	subs	r4, r4, r5
 800594c:	10a4      	asrs	r4, r4, #2
 800594e:	2600      	movs	r6, #0
 8005950:	42a6      	cmp	r6, r4
 8005952:	d109      	bne.n	8005968 <__libc_init_array+0x24>
 8005954:	4d0b      	ldr	r5, [pc, #44]	; (8005984 <__libc_init_array+0x40>)
 8005956:	4c0c      	ldr	r4, [pc, #48]	; (8005988 <__libc_init_array+0x44>)
 8005958:	f000 f818 	bl	800598c <_init>
 800595c:	1b64      	subs	r4, r4, r5
 800595e:	10a4      	asrs	r4, r4, #2
 8005960:	2600      	movs	r6, #0
 8005962:	42a6      	cmp	r6, r4
 8005964:	d105      	bne.n	8005972 <__libc_init_array+0x2e>
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	f855 3b04 	ldr.w	r3, [r5], #4
 800596c:	4798      	blx	r3
 800596e:	3601      	adds	r6, #1
 8005970:	e7ee      	b.n	8005950 <__libc_init_array+0xc>
 8005972:	f855 3b04 	ldr.w	r3, [r5], #4
 8005976:	4798      	blx	r3
 8005978:	3601      	adds	r6, #1
 800597a:	e7f2      	b.n	8005962 <__libc_init_array+0x1e>
 800597c:	08005aa8 	.word	0x08005aa8
 8005980:	08005aa8 	.word	0x08005aa8
 8005984:	08005aa8 	.word	0x08005aa8
 8005988:	08005aac 	.word	0x08005aac

0800598c <_init>:
 800598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598e:	bf00      	nop
 8005990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005992:	bc08      	pop	{r3}
 8005994:	469e      	mov	lr, r3
 8005996:	4770      	bx	lr

08005998 <_fini>:
 8005998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599a:	bf00      	nop
 800599c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599e:	bc08      	pop	{r3}
 80059a0:	469e      	mov	lr, r3
 80059a2:	4770      	bx	lr
