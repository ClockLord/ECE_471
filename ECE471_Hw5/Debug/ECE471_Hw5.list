
ECE471_Hw5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08008488  08008488  00018488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085a4  080085a4  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  080085a4  080085a4  000185a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085ac  080085ac  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085ac  080085ac  000185ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080085b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  080085c4  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  08008664  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004744  20000150  08008704  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20004894  08008704  00024894  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001e213  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003d91  00000000  00000000  0003e3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001900  00000000  00000000  00042168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001377  00000000  00000000  00043a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a07a  00000000  00000000  00044ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001d6de  00000000  00000000  0006ee59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010678e  00000000  00000000  0008c537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006a70  00000000  00000000  00192cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  00199738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000150 	.word	0x20000150
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008470 	.word	0x08008470

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000154 	.word	0x20000154
 800020c:	08008470 	.word	0x08008470

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000016c 	.word	0x2000016c
 800053c:	200001c0 	.word	0x200001c0

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b0b2      	sub	sp, #200	; 0xc8
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 ff3e 	bl	80013c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f8c3 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 fa9d 	bl	8000a8c <MX_GPIO_Init>
  MX_ETH_Init();
 8000552:	f000 f979 	bl	8000848 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000556:	f000 fa3b 	bl	80009d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055a:	f000 fa69 	bl	8000a30 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800055e:	f000 f921 	bl	80007a4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000562:	f000 f9bf 	bl	80008e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000566:	2104      	movs	r1, #4
 8000568:	4849      	ldr	r0, [pc, #292]	; (8000690 <main+0x150>)
 800056a:	f003 fcd3 	bl	8003f14 <HAL_TIM_PWM_Start>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Switch */
  osMessageQDef(Switch, 5, uint8_t);
 800056e:	4b49      	ldr	r3, [pc, #292]	; (8000694 <main+0x154>)
 8000570:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SwitchHandle = osMessageCreate(osMessageQ(Switch), NULL);
 800057a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f005 fd28 	bl	8005fd6 <osMessageCreate>
 8000586:	4603      	mov	r3, r0
 8000588:	4a43      	ldr	r2, [pc, #268]	; (8000698 <main+0x158>)
 800058a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Throttle */
  osMessageQDef(Throttle, 5, uint16_t);
 800058c:	4b43      	ldr	r3, [pc, #268]	; (800069c <main+0x15c>)
 800058e:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000592:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000594:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ThrottleHandle = osMessageCreate(osMessageQ(Throttle), NULL);
 8000598:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 fd19 	bl	8005fd6 <osMessageCreate>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a3e      	ldr	r2, [pc, #248]	; (80006a0 <main+0x160>)
 80005a8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005aa:	4b3e      	ldr	r3, [pc, #248]	; (80006a4 <main+0x164>)
 80005ac:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80005b0:	461d      	mov	r5, r3
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f005 fca6 	bl	8005f16 <osThreadCreate>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a36      	ldr	r2, [pc, #216]	; (80006a8 <main+0x168>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of alive */
  osThreadDef(alive, alive_init, osPriorityBelowNormal, 0, 128);
 80005d0:	4b36      	ldr	r3, [pc, #216]	; (80006ac <main+0x16c>)
 80005d2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80005d6:	461d      	mov	r5, r3
 80005d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  aliveHandle = osThreadCreate(osThread(alive), NULL);
 80005e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 fc93 	bl	8005f16 <osThreadCreate>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a2f      	ldr	r2, [pc, #188]	; (80006b0 <main+0x170>)
 80005f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of button */
  osThreadDef(button, button_init, osPriorityNormal, 0, 128);
 80005f6:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <main+0x174>)
 80005f8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005fc:	461d      	mov	r5, r3
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonHandle = osThreadCreate(osThread(button), NULL);
 800060a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fc80 	bl	8005f16 <osThreadCreate>
 8000616:	4603      	mov	r3, r0
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <main+0x178>)
 800061a:	6013      	str	r3, [r2, #0]

  /* definition and creation of light */
  osThreadDef(light, light_init, osPriorityAboveNormal, 0, 128);
 800061c:	4b27      	ldr	r3, [pc, #156]	; (80006bc <main+0x17c>)
 800061e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000622:	461d      	mov	r5, r3
 8000624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lightHandle = osThreadCreate(osThread(light), NULL);
 8000630:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f005 fc6d 	bl	8005f16 <osThreadCreate>
 800063c:	4603      	mov	r3, r0
 800063e:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <main+0x180>)
 8000640:	6013      	str	r3, [r2, #0]

  /* definition and creation of analog */
  osThreadDef(analog, analog_init, osPriorityAboveNormal, 0, 128);
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <main+0x184>)
 8000644:	f107 041c 	add.w	r4, r7, #28
 8000648:	461d      	mov	r5, r3
 800064a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  analogHandle = osThreadCreate(osThread(analog), NULL);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f005 fc5a 	bl	8005f16 <osThreadCreate>
 8000662:	4603      	mov	r3, r0
 8000664:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <main+0x188>)
 8000666:	6013      	str	r3, [r2, #0]

  /* definition and creation of control */
  osThreadDef(control, control_init, osPriorityHigh, 0, 128);
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <main+0x18c>)
 800066a:	463c      	mov	r4, r7
 800066c:	461d      	mov	r5, r3
 800066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000672:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlHandle = osThreadCreate(osThread(control), NULL);
 800067a:	463b      	mov	r3, r7
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f005 fc49 	bl	8005f16 <osThreadCreate>
 8000684:	4603      	mov	r3, r0
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <main+0x190>)
 8000688:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800068a:	f005 fc3d 	bl	8005f08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068e:	e7fe      	b.n	800068e <main+0x14e>
 8000690:	200004f0 	.word	0x200004f0
 8000694:	08008488 	.word	0x08008488
 8000698:	20000ae4 	.word	0x20000ae4
 800069c:	08008498 	.word	0x08008498
 80006a0:	20000ae8 	.word	0x20000ae8
 80006a4:	080084b4 	.word	0x080084b4
 80006a8:	20000acc 	.word	0x20000acc
 80006ac:	080084d8 	.word	0x080084d8
 80006b0:	20000ad0 	.word	0x20000ad0
 80006b4:	080084fc 	.word	0x080084fc
 80006b8:	20000ad4 	.word	0x20000ad4
 80006bc:	08008520 	.word	0x08008520
 80006c0:	20000ad8 	.word	0x20000ad8
 80006c4:	08008544 	.word	0x08008544
 80006c8:	20000adc 	.word	0x20000adc
 80006cc:	08008568 	.word	0x08008568
 80006d0:	20000ae0 	.word	0x20000ae0

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f007 fe8a 	bl	80083fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f8:	f002 f9de 	bl	8002ab8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <SystemClock_Config+0xc8>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a26      	ldr	r2, [pc, #152]	; (800079c <SystemClock_Config+0xc8>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <SystemClock_Config+0xc8>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <SystemClock_Config+0xcc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800071c:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemClock_Config+0xcc>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <SystemClock_Config+0xcc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000748:	2348      	movs	r3, #72	; 0x48
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000750:	2303      	movs	r3, #3
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f002 f9bd 	bl	8002ad8 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000764:	f000 fb0c 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2102      	movs	r1, #2
 8000784:	4618      	mov	r0, r3
 8000786:	f002 fc4b 	bl	8003020 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000790:	f000 faf6 	bl	8000d80 <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3750      	adds	r7, #80	; 0x50
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_ADC1_Init+0x98>)
 80007b8:	4a21      	ldr	r2, [pc, #132]	; (8000840 <MX_ADC1_Init+0x9c>)
 80007ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_ADC1_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_ADC1_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_ADC1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_ADC1_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_ADC1_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_ADC1_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_ADC1_Init+0x98>)
 80007e4:	4a17      	ldr	r2, [pc, #92]	; (8000844 <MX_ADC1_Init+0xa0>)
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_ADC1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_ADC1_Init+0x98>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_ADC1_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_ADC1_Init+0x98>)
 80007fe:	2201      	movs	r2, #1
 8000800:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000802:	480e      	ldr	r0, [pc, #56]	; (800083c <MX_ADC1_Init+0x98>)
 8000804:	f000 fe30 	bl	8001468 <HAL_ADC_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800080e:	f000 fab7 	bl	8000d80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000816:	2301      	movs	r3, #1
 8000818:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <MX_ADC1_Init+0x98>)
 8000824:	f000 ffca 	bl	80017bc <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800082e:	f000 faa7 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200003f8 	.word	0x200003f8
 8000840:	40012000 	.word	0x40012000
 8000844:	0f000001 	.word	0x0f000001

08000848 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_ETH_Init+0x84>)
 800084e:	4a20      	ldr	r2, [pc, #128]	; (80008d0 <MX_ETH_Init+0x88>)
 8000850:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <MX_ETH_Init+0x8c>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000858:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_ETH_Init+0x8c>)
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_ETH_Init+0x8c>)
 8000860:	22e1      	movs	r2, #225	; 0xe1
 8000862:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_ETH_Init+0x8c>)
 8000866:	2200      	movs	r2, #0
 8000868:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_ETH_Init+0x8c>)
 800086c:	2200      	movs	r2, #0
 800086e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_ETH_Init+0x8c>)
 8000872:	2200      	movs	r2, #0
 8000874:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_ETH_Init+0x84>)
 8000878:	4a16      	ldr	r2, [pc, #88]	; (80008d4 <MX_ETH_Init+0x8c>)
 800087a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_ETH_Init+0x84>)
 800087e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000882:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_ETH_Init+0x84>)
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <MX_ETH_Init+0x90>)
 8000888:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_ETH_Init+0x84>)
 800088c:	4a13      	ldr	r2, [pc, #76]	; (80008dc <MX_ETH_Init+0x94>)
 800088e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_ETH_Init+0x84>)
 8000892:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000896:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_ETH_Init+0x84>)
 800089a:	f001 fac1 	bl	8001e20 <HAL_ETH_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008a4:	f000 fa6c 	bl	8000d80 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008a8:	2238      	movs	r2, #56	; 0x38
 80008aa:	2100      	movs	r1, #0
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_ETH_Init+0x98>)
 80008ae:	f007 fda5 	bl	80083fc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_ETH_Init+0x98>)
 80008b4:	2221      	movs	r2, #33	; 0x21
 80008b6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_ETH_Init+0x98>)
 80008ba:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80008be:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_ETH_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000440 	.word	0x20000440
 80008d0:	40028000 	.word	0x40028000
 80008d4:	20000af0 	.word	0x20000af0
 80008d8:	200000b0 	.word	0x200000b0
 80008dc:	20000010 	.word	0x20000010
 80008e0:	200003c0 	.word	0x200003c0

080008e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08e      	sub	sp, #56	; 0x38
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
 8000912:	615a      	str	r2, [r3, #20]
 8000914:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000916:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <MX_TIM4_Init+0xe4>)
 8000918:	4a2c      	ldr	r2, [pc, #176]	; (80009cc <MX_TIM4_Init+0xe8>)
 800091a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800091c:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <MX_TIM4_Init+0xe4>)
 800091e:	2247      	movs	r2, #71	; 0x47
 8000920:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000922:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <MX_TIM4_Init+0xe4>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000928:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <MX_TIM4_Init+0xe4>)
 800092a:	2264      	movs	r2, #100	; 0x64
 800092c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <MX_TIM4_Init+0xe4>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_TIM4_Init+0xe4>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800093a:	4823      	ldr	r0, [pc, #140]	; (80009c8 <MX_TIM4_Init+0xe4>)
 800093c:	f003 f9b8 	bl	8003cb0 <HAL_TIM_Base_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000946:	f000 fa1b 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000950:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000954:	4619      	mov	r1, r3
 8000956:	481c      	ldr	r0, [pc, #112]	; (80009c8 <MX_TIM4_Init+0xe4>)
 8000958:	f003 fe0a 	bl	8004570 <HAL_TIM_ConfigClockSource>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000962:	f000 fa0d 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000966:	4818      	ldr	r0, [pc, #96]	; (80009c8 <MX_TIM4_Init+0xe4>)
 8000968:	f003 fa72 	bl	8003e50 <HAL_TIM_PWM_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000972:	f000 fa05 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4810      	ldr	r0, [pc, #64]	; (80009c8 <MX_TIM4_Init+0xe4>)
 8000986:	f004 faa3 	bl	8004ed0 <HAL_TIMEx_MasterConfigSynchronization>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000990:	f000 f9f6 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000994:	2360      	movs	r3, #96	; 0x60
 8000996:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009a4:	463b      	mov	r3, r7
 80009a6:	2204      	movs	r2, #4
 80009a8:	4619      	mov	r1, r3
 80009aa:	4807      	ldr	r0, [pc, #28]	; (80009c8 <MX_TIM4_Init+0xe4>)
 80009ac:	f003 fccc 	bl	8004348 <HAL_TIM_PWM_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80009b6:	f000 f9e3 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009ba:	4803      	ldr	r0, [pc, #12]	; (80009c8 <MX_TIM4_Init+0xe4>)
 80009bc:	f000 fb26 	bl	800100c <HAL_TIM_MspPostInit>

}
 80009c0:	bf00      	nop
 80009c2:	3738      	adds	r7, #56	; 0x38
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200004f0 	.word	0x200004f0
 80009cc:	40000800 	.word	0x40000800

080009d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 80009d6:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <MX_USART3_UART_Init+0x5c>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 80009dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 8000a14:	f004 fb08 	bl	8005028 <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a1e:	f000 f9af 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000053c 	.word	0x2000053c
 8000a2c:	40004800 	.word	0x40004800

08000a30 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3e:	2206      	movs	r2, #6
 8000a40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a44:	2202      	movs	r2, #2
 8000a46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a50:	2202      	movs	r2, #2
 8000a52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a74:	f001 fed7 	bl	8002826 <HAL_PCD_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a7e:	f000 f97f 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200005c4 	.word	0x200005c4

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	; 0x30
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b47      	ldr	r3, [pc, #284]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a46      	ldr	r2, [pc, #280]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b44      	ldr	r3, [pc, #272]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	61bb      	str	r3, [r7, #24]
 8000ab8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	4b41      	ldr	r3, [pc, #260]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a40      	ldr	r2, [pc, #256]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b3e      	ldr	r3, [pc, #248]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b3b      	ldr	r3, [pc, #236]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a3a      	ldr	r2, [pc, #232]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b38      	ldr	r3, [pc, #224]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a34      	ldr	r2, [pc, #208]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b32      	ldr	r3, [pc, #200]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a2e      	ldr	r2, [pc, #184]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000b08:	f043 0308 	orr.w	r3, r3, #8
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0308 	and.w	r3, r3, #8
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b1a:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <MX_GPIO_Init+0x134>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b38:	4822      	ldr	r0, [pc, #136]	; (8000bc4 <MX_GPIO_Init+0x138>)
 8000b3a:	f001 fe5b 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2140      	movs	r1, #64	; 0x40
 8000b42:	4821      	ldr	r0, [pc, #132]	; (8000bc8 <MX_GPIO_Init+0x13c>)
 8000b44:	f001 fe56 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481b      	ldr	r0, [pc, #108]	; (8000bcc <MX_GPIO_Init+0x140>)
 8000b60:	f001 fc84 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b64:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <MX_GPIO_Init+0x138>)
 8000b7e:	f001 fc75 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b82:	2340      	movs	r3, #64	; 0x40
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <MX_GPIO_Init+0x13c>)
 8000b9a:	f001 fc67 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_GPIO_Init+0x13c>)
 8000bb2:	f001 fc5b 	bl	800246c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3730      	adds	r7, #48	; 0x30
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	40021800 	.word	0x40021800
 8000bcc:	40020800 	.word	0x40020800

08000bd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f005 f9e8 	bl	8005fae <osDelay>
 8000bde:	e7fb      	b.n	8000bd8 <StartDefaultTask+0x8>

08000be0 <alive_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_alive_init */
void alive_init(void const * argument)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


  for(;;) //1000 = 1 sec
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //red
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bee:	4809      	ldr	r0, [pc, #36]	; (8000c14 <alive_init+0x34>)
 8000bf0:	f001 fe00 	bl	80027f4 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf8:	f005 f9d9 	bl	8005fae <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //red
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c02:	4804      	ldr	r0, [pc, #16]	; (8000c14 <alive_init+0x34>)
 8000c04:	f001 fdf6 	bl	80027f4 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000c08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0c:	f005 f9cf 	bl	8005fae <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //red
 8000c10:	e7ea      	b.n	8000be8 <alive_init+0x8>
 8000c12:	bf00      	nop
 8000c14:	40020400 	.word	0x40020400

08000c18 <button_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_button_init */
void button_init(void const * argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN button_init */
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8000c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <button_init+0x44>)
 8000c26:	f001 fdcd 	bl	80027c4 <HAL_GPIO_ReadPin>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d103      	bne.n	8000c38 <button_init+0x20>
		Toggle = true;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <button_init+0x48>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e002      	b.n	8000c3e <button_init+0x26>

	}
	else{
		Toggle = false;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <button_init+0x48>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
	}
	osStatus status = osMessagePut(SwitchHandle, Toggle, osWaitForever);
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <button_init+0x4c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <button_init+0x48>)
 8000c44:	7812      	ldrb	r2, [r2, #0]
 8000c46:	4611      	mov	r1, r2
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f005 f9eb 	bl	8006028 <osMessagePut>
 8000c52:	60f8      	str	r0, [r7, #12]
    osDelay(10);
 8000c54:	200a      	movs	r0, #10
 8000c56:	f005 f9aa 	bl	8005fae <osDelay>
  {
 8000c5a:	e7e1      	b.n	8000c20 <button_init+0x8>
 8000c5c:	40020800 	.word	0x40020800
 8000c60:	20000aec 	.word	0x20000aec
 8000c64:	20000ae4 	.word	0x20000ae4

08000c68 <light_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_light_init */
void light_init(void const * argument)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN light_init */
  /* Infinite loop */
  for(;;)
  {
	osEvent messageEvent = osMessageGet(SwitchHandle, osWaitForever);
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <light_init+0x50>)
 8000c72:	6819      	ldr	r1, [r3, #0]
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f005 fa13 	bl	80060a8 <osMessageGet>
	Toggle = (bool)messageEvent.value.p;
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	bf14      	ite	ne
 8000c88:	2301      	movne	r3, #1
 8000c8a:	2300      	moveq	r3, #0
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <light_init+0x54>)
 8000c90:	701a      	strb	r2, [r3, #0]

	if(Toggle){
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <light_init+0x54>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d005      	beq.n	8000ca6 <light_init+0x3e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //green
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <light_init+0x58>)
 8000ca0:	f001 fda8 	bl	80027f4 <HAL_GPIO_WritePin>
 8000ca4:	e004      	b.n	8000cb0 <light_init+0x48>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //green
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <light_init+0x58>)
 8000cac:	f001 fda2 	bl	80027f4 <HAL_GPIO_WritePin>
	}

    osDelay(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f005 f97c 	bl	8005fae <osDelay>
  {
 8000cb6:	e7db      	b.n	8000c70 <light_init+0x8>
 8000cb8:	20000ae4 	.word	0x20000ae4
 8000cbc:	20000aec 	.word	0x20000aec
 8000cc0:	40020400 	.word	0x40020400

08000cc4 <analog_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_analog_init */
void analog_init(void const * argument)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN analog_init */
  /* Infinite loop */
  for(;;)
  {
	  	  HAL_ADC_Start(&hadc1);
 8000ccc:	4812      	ldr	r0, [pc, #72]	; (8000d18 <analog_init+0x54>)
 8000cce:	f000 fc0f 	bl	80014f0 <HAL_ADC_Start>

	  	  // Wait for the ADC conversion to complete (blocking)
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000cd2:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd6:	4810      	ldr	r0, [pc, #64]	; (8000d18 <analog_init+0x54>)
 8000cd8:	f000 fcd8 	bl	800168c <HAL_ADC_PollForConversion>

	  	  // Read the raw ADC value
	  	  uint16_t raw = HAL_ADC_GetValue(&hadc1);
 8000cdc:	480e      	ldr	r0, [pc, #56]	; (8000d18 <analog_init+0x54>)
 8000cde:	f000 fd60 	bl	80017a2 <HAL_ADC_GetValue>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	81fb      	strh	r3, [r7, #14]
	  	  uint16_t transmit = 255*raw/4095;
 8000ce6:	89fa      	ldrh	r2, [r7, #14]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	1a9b      	subs	r3, r3, r2
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <analog_init+0x58>)
 8000cf0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf4:	441a      	add	r2, r3
 8000cf6:	12d2      	asrs	r2, r2, #11
 8000cf8:	17db      	asrs	r3, r3, #31
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	81bb      	strh	r3, [r7, #12]
	  	  osStatus status = osMessagePut(ThrottleHandle, transmit, osWaitForever);
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <analog_init+0x5c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	89b9      	ldrh	r1, [r7, #12]
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f005 f98d 	bl	8006028 <osMessagePut>
 8000d0e:	60b8      	str	r0, [r7, #8]
	  	  // transmit on uart3 for
	  	  //HAL_UART_Transmit(&huart3, *voltage, 1, 100);



    osDelay(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f005 f94c 	bl	8005fae <osDelay>
  {
 8000d16:	e7d9      	b.n	8000ccc <analog_init+0x8>
 8000d18:	200003f8 	.word	0x200003f8
 8000d1c:	80080081 	.word	0x80080081
 8000d20:	20000ae8 	.word	0x20000ae8

08000d24 <control_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_control_init */
void control_init(void const * argument)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN control_init */
  /* Infinite loop */
  for(;;)
  {
	uint16_t LedSet = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	82fb      	strh	r3, [r7, #22]
	// TIM4->CCR2 = receivedValue;
	osEvent messageEvent = osMessageGet(ThrottleHandle, osWaitForever);
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <control_init+0x30>)
 8000d32:	6819      	ldr	r1, [r3, #0]
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f005 f9b3 	bl	80060a8 <osMessageGet>
	LedSet = (uint16_t)messageEvent.value.p;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	82fb      	strh	r3, [r7, #22]
    TIM4->CCR2 = LedSet;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <control_init+0x34>)
 8000d48:	8afb      	ldrh	r3, [r7, #22]
 8000d4a:	6393      	str	r3, [r2, #56]	; 0x38
   // HAL_UART_Transmit(&huart3, (uint8_t*)&LedSet, 1, HAL_MAX_DELAY);
    osDelay(1);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f005 f92e 	bl	8005fae <osDelay>
  {
 8000d52:	e7eb      	b.n	8000d2c <control_init+0x8>
 8000d54:	20000ae8 	.word	0x20000ae8
 8000d58:	40000800 	.word	0x40000800

08000d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d6e:	f000 fb37 	bl	80013e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40010000 	.word	0x40010000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	f06f 0001 	mvn.w	r0, #1
 8000dca:	f000 ffff 	bl	8001dcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800

08000ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <HAL_ADC_MspInit+0x74>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d123      	bne.n	8000e46 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_ADC_MspInit+0x78>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <HAL_ADC_MspInit+0x78>)
 8000e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_ADC_MspInit+0x78>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_ADC_MspInit+0x78>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_ADC_MspInit+0x78>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <HAL_ADC_MspInit+0x78>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e32:	2303      	movs	r3, #3
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <HAL_ADC_MspInit+0x7c>)
 8000e42:	f001 fb13 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40012000 	.word	0x40012000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000

08000e5c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08e      	sub	sp, #56	; 0x38
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a4e      	ldr	r2, [pc, #312]	; (8000fb4 <HAL_ETH_MspInit+0x158>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	f040 8096 	bne.w	8000fac <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e80:	4b4d      	ldr	r3, [pc, #308]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a4c      	ldr	r2, [pc, #304]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000e86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b4a      	ldr	r3, [pc, #296]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e94:	623b      	str	r3, [r7, #32]
 8000e96:	6a3b      	ldr	r3, [r7, #32]
 8000e98:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4a46      	ldr	r2, [pc, #280]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000e9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea4:	4b44      	ldr	r3, [pc, #272]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	4b41      	ldr	r3, [pc, #260]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000eb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000eba:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebc:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec8:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	4a3a      	ldr	r2, [pc, #232]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed4:	4b38      	ldr	r3, [pc, #224]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b35      	ldr	r3, [pc, #212]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	4a34      	ldr	r2, [pc, #208]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6313      	str	r3, [r2, #48]	; 0x30
 8000eec:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	4a2e      	ldr	r2, [pc, #184]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000efe:	f043 0302 	orr.w	r3, r3, #2
 8000f02:	6313      	str	r3, [r2, #48]	; 0x30
 8000f04:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f10:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4a28      	ldr	r2, [pc, #160]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1c:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f28:	2332      	movs	r3, #50	; 0x32
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f38:	230b      	movs	r3, #11
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	4619      	mov	r1, r3
 8000f42:	481e      	ldr	r0, [pc, #120]	; (8000fbc <HAL_ETH_MspInit+0x160>)
 8000f44:	f001 fa92 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f48:	2386      	movs	r3, #134	; 0x86
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f58:	230b      	movs	r3, #11
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f60:	4619      	mov	r1, r3
 8000f62:	4817      	ldr	r0, [pc, #92]	; (8000fc0 <HAL_ETH_MspInit+0x164>)
 8000f64:	f001 fa82 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7a:	230b      	movs	r3, #11
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <HAL_ETH_MspInit+0x168>)
 8000f86:	f001 fa71 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f9c:	230b      	movs	r3, #11
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <HAL_ETH_MspInit+0x16c>)
 8000fa8:	f001 fa60 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3738      	adds	r7, #56	; 0x38
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40028000 	.word	0x40028000
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40021800 	.word	0x40021800

08000fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_TIM_Base_MspInit+0x38>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d10b      	bne.n	8000ff6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_TIM_Base_MspInit+0x3c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a09      	ldr	r2, [pc, #36]	; (8001008 <HAL_TIM_Base_MspInit+0x3c>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <HAL_TIM_Base_MspInit+0x3c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40000800 	.word	0x40000800
 8001008:	40023800 	.word	0x40023800

0800100c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a11      	ldr	r2, [pc, #68]	; (8001070 <HAL_TIM_MspPostInit+0x64>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d11b      	bne.n	8001066 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_TIM_MspPostInit+0x68>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <HAL_TIM_MspPostInit+0x68>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_TIM_MspPostInit+0x68>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001056:	2302      	movs	r3, #2
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_TIM_MspPostInit+0x6c>)
 8001062:	f001 fa03 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001066:	bf00      	nop
 8001068:	3720      	adds	r7, #32
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40000800 	.word	0x40000800
 8001074:	40023800 	.word	0x40023800
 8001078:	40020400 	.word	0x40020400

0800107c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b0aa      	sub	sp, #168	; 0xa8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	2284      	movs	r2, #132	; 0x84
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f007 f9ad 	bl	80083fc <memset>
  if(huart->Instance==USART3)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a22      	ldr	r2, [pc, #136]	; (8001130 <HAL_UART_MspInit+0xb4>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d13c      	bne.n	8001126 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 fa08 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010c6:	f7ff fe5b 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <HAL_UART_MspInit+0xb8>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a19      	ldr	r2, [pc, #100]	; (8001134 <HAL_UART_MspInit+0xb8>)
 80010d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_UART_MspInit+0xb8>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <HAL_UART_MspInit+0xb8>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a13      	ldr	r2, [pc, #76]	; (8001134 <HAL_UART_MspInit+0xb8>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_UART_MspInit+0xb8>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001108:	2301      	movs	r3, #1
 800110a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001114:	2307      	movs	r3, #7
 8001116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <HAL_UART_MspInit+0xbc>)
 8001122:	f001 f9a3 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	37a8      	adds	r7, #168	; 0xa8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40004800 	.word	0x40004800
 8001134:	40023800 	.word	0x40023800
 8001138:	40020c00 	.word	0x40020c00

0800113c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0ac      	sub	sp, #176	; 0xb0
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001154:	f107 0318 	add.w	r3, r7, #24
 8001158:	2284      	movs	r2, #132	; 0x84
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f007 f94d 	bl	80083fc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800116a:	d159      	bne.n	8001220 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800116c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001170:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	4618      	mov	r0, r3
 800117e:	f002 f9a7 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001188:	f7ff fdfa 	bl	8000d80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <HAL_PCD_MspInit+0xec>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a25      	ldr	r2, [pc, #148]	; (8001228 <HAL_PCD_MspInit+0xec>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <HAL_PCD_MspInit+0xec>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011a4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80011a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011be:	230a      	movs	r3, #10
 80011c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011c8:	4619      	mov	r1, r3
 80011ca:	4818      	ldr	r0, [pc, #96]	; (800122c <HAL_PCD_MspInit+0xf0>)
 80011cc:	f001 f94e 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011e8:	4619      	mov	r1, r3
 80011ea:	4810      	ldr	r0, [pc, #64]	; (800122c <HAL_PCD_MspInit+0xf0>)
 80011ec:	f001 f93e 	bl	800246c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_PCD_MspInit+0xec>)
 80011f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f4:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <HAL_PCD_MspInit+0xec>)
 80011f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fa:	6353      	str	r3, [r2, #52]	; 0x34
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_PCD_MspInit+0xec>)
 80011fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <HAL_PCD_MspInit+0xec>)
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	4a06      	ldr	r2, [pc, #24]	; (8001228 <HAL_PCD_MspInit+0xec>)
 800120e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001212:	6453      	str	r3, [r2, #68]	; 0x44
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <HAL_PCD_MspInit+0xec>)
 8001216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001220:	bf00      	nop
 8001222:	37b0      	adds	r7, #176	; 0xb0
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000

08001230 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001240:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <HAL_InitTick+0xcc>)
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	4a2d      	ldr	r2, [pc, #180]	; (80012fc <HAL_InitTick+0xcc>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6453      	str	r3, [r2, #68]	; 0x44
 800124c:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <HAL_InitTick+0xcc>)
 800124e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001258:	f107 020c 	add.w	r2, r7, #12
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f002 f902 	bl	800346c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001268:	f002 f8ec 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 800126c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800126e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001270:	4a23      	ldr	r2, [pc, #140]	; (8001300 <HAL_InitTick+0xd0>)
 8001272:	fba2 2303 	umull	r2, r3, r2, r3
 8001276:	0c9b      	lsrs	r3, r3, #18
 8001278:	3b01      	subs	r3, #1
 800127a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_InitTick+0xd4>)
 800127e:	4a22      	ldr	r2, [pc, #136]	; (8001308 <HAL_InitTick+0xd8>)
 8001280:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_InitTick+0xd4>)
 8001284:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001288:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800128a:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <HAL_InitTick+0xd4>)
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <HAL_InitTick+0xd4>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_InitTick+0xd4>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_InitTick+0xd4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80012a2:	4818      	ldr	r0, [pc, #96]	; (8001304 <HAL_InitTick+0xd4>)
 80012a4:	f002 fd04 	bl	8003cb0 <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80012ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d11b      	bne.n	80012ee <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80012b6:	4813      	ldr	r0, [pc, #76]	; (8001304 <HAL_InitTick+0xd4>)
 80012b8:	f002 fd52 	bl	8003d60 <HAL_TIM_Base_Start_IT>
 80012bc:	4603      	mov	r3, r0
 80012be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80012c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d111      	bne.n	80012ee <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012ca:	2019      	movs	r0, #25
 80012cc:	f000 fd9a 	bl	8001e04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b0f      	cmp	r3, #15
 80012d4:	d808      	bhi.n	80012e8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80012d6:	2200      	movs	r2, #0
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	2019      	movs	r0, #25
 80012dc:	f000 fd76 	bl	8001dcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_InitTick+0xdc>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e002      	b.n	80012ee <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3730      	adds	r7, #48	; 0x30
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	431bde83 	.word	0x431bde83
 8001304:	20000af8 	.word	0x20000af8
 8001308:	40010000 	.word	0x40010000
 800130c:	20000004 	.word	0x20000004

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <NMI_Handler+0x4>

08001316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler+0x4>

08001322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler+0x4>

0800132e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001342:	f002 fee1 	bl	8004108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000af8 	.word	0x20000af8

08001350 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800137a:	490e      	ldr	r1, [pc, #56]	; (80013b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800137c:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001390:	4c0b      	ldr	r4, [pc, #44]	; (80013c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800139e:	f7ff ffd7 	bl	8001350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a2:	f007 f833 	bl	800840c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a6:	f7ff f8cb 	bl	8000540 <main>
  bx  lr    
 80013aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013ac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013b8:	080085b4 	.word	0x080085b4
  ldr r2, =_sbss
 80013bc:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80013c0:	20004894 	.word	0x20004894

080013c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC_IRQHandler>

080013c6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ca:	2003      	movs	r0, #3
 80013cc:	f000 fcf3 	bl	8001db6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d0:	200f      	movs	r0, #15
 80013d2:	f7ff ff2d 	bl	8001230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d6:	f7ff fcd9 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x20>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x24>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_IncTick+0x24>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000008 	.word	0x20000008
 8001404:	20000b44 	.word	0x20000b44

08001408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_GetTick+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000b44 	.word	0x20000b44

08001420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff ffee 	bl	8001408 <HAL_GetTick>
 800142c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001438:	d005      	beq.n	8001446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_Delay+0x44>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001446:	bf00      	nop
 8001448:	f7ff ffde 	bl	8001408 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	429a      	cmp	r2, r3
 8001456:	d8f7      	bhi.n	8001448 <HAL_Delay+0x28>
  {
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000008 	.word	0x20000008

08001468 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e031      	b.n	80014e2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	2b00      	cmp	r3, #0
 8001484:	d109      	bne.n	800149a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fca8 	bl	8000ddc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d116      	bne.n	80014d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_ADC_Init+0x84>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	f043 0202 	orr.w	r2, r3, #2
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fad6 	bl	8001a68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f023 0303 	bic.w	r3, r3, #3
 80014ca:	f043 0201 	orr.w	r2, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
 80014d2:	e001      	b.n	80014d8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	ffffeefd 	.word	0xffffeefd

080014f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_ADC_Start+0x1a>
 8001506:	2302      	movs	r3, #2
 8001508:	e0ad      	b.n	8001666 <HAL_ADC_Start+0x176>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b01      	cmp	r3, #1
 800151e:	d018      	beq.n	8001552 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0201 	orr.w	r2, r2, #1
 800152e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001530:	4b50      	ldr	r3, [pc, #320]	; (8001674 <HAL_ADC_Start+0x184>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a50      	ldr	r2, [pc, #320]	; (8001678 <HAL_ADC_Start+0x188>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0c9a      	lsrs	r2, r3, #18
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001544:	e002      	b.n	800154c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3b01      	subs	r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f9      	bne.n	8001546 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b01      	cmp	r3, #1
 800155e:	d175      	bne.n	800164c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001564:	4b45      	ldr	r3, [pc, #276]	; (800167c <HAL_ADC_Start+0x18c>)
 8001566:	4013      	ands	r3, r2
 8001568:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157a:	2b00      	cmp	r3, #0
 800157c:	d007      	beq.n	800158e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001586:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800159a:	d106      	bne.n	80015aa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	f023 0206 	bic.w	r2, r3, #6
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	645a      	str	r2, [r3, #68]	; 0x44
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <HAL_ADC_Start+0x190>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10f      	bne.n	80015ee <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d143      	bne.n	8001664 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	e03a      	b.n	8001664 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a24      	ldr	r2, [pc, #144]	; (8001684 <HAL_ADC_Start+0x194>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d10e      	bne.n	8001616 <HAL_ADC_Start+0x126>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d107      	bne.n	8001616 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001614:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_ADC_Start+0x190>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	2b00      	cmp	r3, #0
 8001620:	d120      	bne.n	8001664 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a18      	ldr	r2, [pc, #96]	; (8001688 <HAL_ADC_Start+0x198>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d11b      	bne.n	8001664 <HAL_ADC_Start+0x174>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d114      	bne.n	8001664 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	e00b      	b.n	8001664 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f043 0210 	orr.w	r2, r3, #16
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	f043 0201 	orr.w	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000000 	.word	0x20000000
 8001678:	431bde83 	.word	0x431bde83
 800167c:	fffff8fe 	.word	0xfffff8fe
 8001680:	40012300 	.word	0x40012300
 8001684:	40012000 	.word	0x40012000
 8001688:	40012200 	.word	0x40012200

0800168c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a8:	d113      	bne.n	80016d2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016b8:	d10b      	bne.n	80016d2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f043 0220 	orr.w	r2, r3, #32
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e063      	b.n	800179a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80016d2:	f7ff fe99 	bl	8001408 <HAL_GetTick>
 80016d6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016d8:	e021      	b.n	800171e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d01d      	beq.n	800171e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <HAL_ADC_PollForConversion+0x6c>
 80016e8:	f7ff fe8e 	bl	8001408 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d212      	bcs.n	800171e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b02      	cmp	r3, #2
 8001704:	d00b      	beq.n	800171e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f043 0204 	orr.w	r2, r3, #4
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e03d      	b.n	800179a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b02      	cmp	r3, #2
 800172a:	d1d6      	bne.n	80016da <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f06f 0212 	mvn.w	r2, #18
 8001734:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d123      	bne.n	8001798 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001754:	2b00      	cmp	r3, #0
 8001756:	d11f      	bne.n	8001798 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001762:	2b00      	cmp	r3, #0
 8001764:	d006      	beq.n	8001774 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001770:	2b00      	cmp	r3, #0
 8001772:	d111      	bne.n	8001798 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d105      	bne.n	8001798 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f043 0201 	orr.w	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x1c>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e136      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x28a>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b09      	cmp	r3, #9
 80017e6:	d93a      	bls.n	800185e <HAL_ADC_ConfigChannel+0xa2>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017f0:	d035      	beq.n	800185e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68d9      	ldr	r1, [r3, #12]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	461a      	mov	r2, r3
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	3b1e      	subs	r3, #30
 8001808:	2207      	movs	r2, #7
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	400a      	ands	r2, r1
 8001816:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a8d      	ldr	r2, [pc, #564]	; (8001a54 <HAL_ADC_ConfigChannel+0x298>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d10a      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68d9      	ldr	r1, [r3, #12]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	061a      	lsls	r2, r3, #24
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001836:	e035      	b.n	80018a4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68d9      	ldr	r1, [r3, #12]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	4618      	mov	r0, r3
 800184a:	4603      	mov	r3, r0
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4403      	add	r3, r0
 8001850:	3b1e      	subs	r3, #30
 8001852:	409a      	lsls	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800185c:	e022      	b.n	80018a4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6919      	ldr	r1, [r3, #16]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	b29b      	uxth	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	2207      	movs	r2, #7
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43da      	mvns	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	400a      	ands	r2, r1
 8001880:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6919      	ldr	r1, [r3, #16]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	b29b      	uxth	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	4603      	mov	r3, r0
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4403      	add	r3, r0
 800189a:	409a      	lsls	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b06      	cmp	r3, #6
 80018aa:	d824      	bhi.n	80018f6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	3b05      	subs	r3, #5
 80018be:	221f      	movs	r2, #31
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43da      	mvns	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	400a      	ands	r2, r1
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	3b05      	subs	r3, #5
 80018e8:	fa00 f203 	lsl.w	r2, r0, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34
 80018f4:	e04c      	b.n	8001990 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b0c      	cmp	r3, #12
 80018fc:	d824      	bhi.n	8001948 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	3b23      	subs	r3, #35	; 0x23
 8001910:	221f      	movs	r2, #31
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	400a      	ands	r2, r1
 800191e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	3b23      	subs	r3, #35	; 0x23
 800193a:	fa00 f203 	lsl.w	r2, r0, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	631a      	str	r2, [r3, #48]	; 0x30
 8001946:	e023      	b.n	8001990 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	3b41      	subs	r3, #65	; 0x41
 800195a:	221f      	movs	r2, #31
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43da      	mvns	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	400a      	ands	r2, r1
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	4618      	mov	r0, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	3b41      	subs	r3, #65	; 0x41
 8001984:	fa00 f203 	lsl.w	r2, r0, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a30      	ldr	r2, [pc, #192]	; (8001a58 <HAL_ADC_ConfigChannel+0x29c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d10a      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1f4>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019a2:	d105      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_ADC_ConfigChannel+0x2a0>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4a2c      	ldr	r2, [pc, #176]	; (8001a5c <HAL_ADC_ConfigChannel+0x2a0>)
 80019aa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80019ae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a28      	ldr	r2, [pc, #160]	; (8001a58 <HAL_ADC_ConfigChannel+0x29c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d10f      	bne.n	80019da <HAL_ADC_ConfigChannel+0x21e>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b12      	cmp	r3, #18
 80019c0:	d10b      	bne.n	80019da <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80019c2:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <HAL_ADC_ConfigChannel+0x2a0>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4a25      	ldr	r2, [pc, #148]	; (8001a5c <HAL_ADC_ConfigChannel+0x2a0>)
 80019c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019cc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80019ce:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <HAL_ADC_ConfigChannel+0x2a0>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4a22      	ldr	r2, [pc, #136]	; (8001a5c <HAL_ADC_ConfigChannel+0x2a0>)
 80019d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a1e      	ldr	r2, [pc, #120]	; (8001a58 <HAL_ADC_ConfigChannel+0x29c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d12b      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x280>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1a      	ldr	r2, [pc, #104]	; (8001a54 <HAL_ADC_ConfigChannel+0x298>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d003      	beq.n	80019f6 <HAL_ADC_ConfigChannel+0x23a>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b11      	cmp	r3, #17
 80019f4:	d122      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_ADC_ConfigChannel+0x2a0>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <HAL_ADC_ConfigChannel+0x2a0>)
 80019fc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a00:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <HAL_ADC_ConfigChannel+0x2a0>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4a15      	ldr	r2, [pc, #84]	; (8001a5c <HAL_ADC_ConfigChannel+0x2a0>)
 8001a08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a0c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <HAL_ADC_ConfigChannel+0x298>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d111      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	0c9a      	lsrs	r2, r3, #18
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a2e:	e002      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f9      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	10000012 	.word	0x10000012
 8001a58:	40012000 	.word	0x40012000
 8001a5c:	40012300 	.word	0x40012300
 8001a60:	20000000 	.word	0x20000000
 8001a64:	431bde83 	.word	0x431bde83

08001a68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a70:	4b78      	ldr	r3, [pc, #480]	; (8001c54 <ADC_Init+0x1ec>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4a77      	ldr	r2, [pc, #476]	; (8001c54 <ADC_Init+0x1ec>)
 8001a76:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a7a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a7c:	4b75      	ldr	r3, [pc, #468]	; (8001c54 <ADC_Init+0x1ec>)
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4973      	ldr	r1, [pc, #460]	; (8001c54 <ADC_Init+0x1ec>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6859      	ldr	r1, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	021a      	lsls	r2, r3, #8
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001abc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6859      	ldr	r1, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ade:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6899      	ldr	r1, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <ADC_Init+0x1f0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d022      	beq.n	8001b42 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6899      	ldr	r1, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6899      	ldr	r1, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	e00f      	b.n	8001b62 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0202 	bic.w	r2, r2, #2
 8001b70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6899      	ldr	r1, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	005a      	lsls	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d01b      	beq.n	8001bc8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6859      	ldr	r1, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	035a      	lsls	r2, r3, #13
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	e007      	b.n	8001bd8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	051a      	lsls	r2, r3, #20
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6899      	ldr	r1, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c1a:	025a      	lsls	r2, r3, #9
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6899      	ldr	r1, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	029a      	lsls	r2, r3, #10
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	609a      	str	r2, [r3, #8]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40012300 	.word	0x40012300
 8001c58:	0f000001 	.word	0x0f000001

08001c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <__NVIC_SetPriorityGrouping+0x40>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x40>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00
 8001ca0:	05fa0000 	.word	0x05fa0000

08001ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db0b      	blt.n	8001cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4907      	ldr	r1, [pc, #28]	; (8001cf8 <__NVIC_EnableIRQ+0x38>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	; (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	; (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff4c 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dde:	f7ff ff61 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001de2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	68b9      	ldr	r1, [r7, #8]
 8001de8:	6978      	ldr	r0, [r7, #20]
 8001dea:	f7ff ffb1 	bl	8001d50 <NVIC_EncodePriority>
 8001dee:	4602      	mov	r2, r0
 8001df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff80 	bl	8001cfc <__NVIC_SetPriority>
}
 8001dfc:	bf00      	nop
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff54 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e06a      	b.n	8001f08 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d106      	bne.n	8001e4a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2223      	movs	r2, #35	; 0x23
 8001e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff f809 	bl	8000e5c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <HAL_ETH_Init+0xf0>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	4a30      	ldr	r2, [pc, #192]	; (8001f10 <HAL_ETH_Init+0xf0>)
 8001e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e54:	6453      	str	r3, [r2, #68]	; 0x44
 8001e56:	4b2e      	ldr	r3, [pc, #184]	; (8001f10 <HAL_ETH_Init+0xf0>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001e62:	4b2c      	ldr	r3, [pc, #176]	; (8001f14 <HAL_ETH_Init+0xf4>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4a2b      	ldr	r2, [pc, #172]	; (8001f14 <HAL_ETH_Init+0xf4>)
 8001e68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e6c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <HAL_ETH_Init+0xf4>)
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	4927      	ldr	r1, [pc, #156]	; (8001f14 <HAL_ETH_Init+0xf4>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <HAL_ETH_Init+0xf4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e98:	f7ff fab6 	bl	8001408 <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e9e:	e011      	b.n	8001ec4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ea0:	f7ff fab2 	bl	8001408 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001eae:	d909      	bls.n	8001ec4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	22e0      	movs	r2, #224	; 0xe0
 8001ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e021      	b.n	8001f08 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1e4      	bne.n	8001ea0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f958 	bl	800218c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f9ff 	bl	80022e0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fa55 	bl	8002392 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	461a      	mov	r2, r3
 8001eee:	2100      	movs	r1, #0
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f9bd 	bl	8002270 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2210      	movs	r2, #16
 8001f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40013800 	.word	0x40013800

08001f18 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4b51      	ldr	r3, [pc, #324]	; (8002074 <ETH_SetMACConfig+0x15c>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	7c1b      	ldrb	r3, [r3, #16]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <ETH_SetMACConfig+0x28>
 8001f3a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f3e:	e000      	b.n	8001f42 <ETH_SetMACConfig+0x2a>
 8001f40:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	7c5b      	ldrb	r3, [r3, #17]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <ETH_SetMACConfig+0x38>
 8001f4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f4e:	e000      	b.n	8001f52 <ETH_SetMACConfig+0x3a>
 8001f50:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f52:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	7fdb      	ldrb	r3, [r3, #31]
 8001f5e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001f60:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	7f92      	ldrb	r2, [r2, #30]
 8001f6c:	2a00      	cmp	r2, #0
 8001f6e:	d102      	bne.n	8001f76 <ETH_SetMACConfig+0x5e>
 8001f70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f74:	e000      	b.n	8001f78 <ETH_SetMACConfig+0x60>
 8001f76:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	7f1b      	ldrb	r3, [r3, #28]
 8001f7e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f80:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f86:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	791b      	ldrb	r3, [r3, #4]
 8001f8c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f96:	2a00      	cmp	r2, #0
 8001f98:	d102      	bne.n	8001fa0 <ETH_SetMACConfig+0x88>
 8001f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9e:	e000      	b.n	8001fa2 <ETH_SetMACConfig+0x8a>
 8001fa0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fa2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	7bdb      	ldrb	r3, [r3, #15]
 8001fa8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001faa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fb0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fb8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f7ff fa24 	bl	8001420 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fee:	4013      	ands	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d101      	bne.n	8002006 <ETH_SetMACConfig+0xee>
 8002002:	2280      	movs	r2, #128	; 0x80
 8002004:	e000      	b.n	8002008 <ETH_SetMACConfig+0xf0>
 8002006:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002008:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800200e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002016:	2a01      	cmp	r2, #1
 8002018:	d101      	bne.n	800201e <ETH_SetMACConfig+0x106>
 800201a:	2208      	movs	r2, #8
 800201c:	e000      	b.n	8002020 <ETH_SetMACConfig+0x108>
 800201e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002020:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002028:	2a01      	cmp	r2, #1
 800202a:	d101      	bne.n	8002030 <ETH_SetMACConfig+0x118>
 800202c:	2204      	movs	r2, #4
 800202e:	e000      	b.n	8002032 <ETH_SetMACConfig+0x11a>
 8002030:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002032:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800203a:	2a01      	cmp	r2, #1
 800203c:	d101      	bne.n	8002042 <ETH_SetMACConfig+0x12a>
 800203e:	2202      	movs	r2, #2
 8002040:	e000      	b.n	8002044 <ETH_SetMACConfig+0x12c>
 8002042:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002044:	4313      	orrs	r3, r2
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800205c:	2001      	movs	r0, #1
 800205e:	f7ff f9df 	bl	8001420 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	619a      	str	r2, [r3, #24]
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	ff20810f 	.word	0xff20810f

08002078 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <ETH_SetDMAConfig+0x110>)
 8002092:	4013      	ands	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	7b1b      	ldrb	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <ETH_SetDMAConfig+0x2c>
 800209e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020a2:	e000      	b.n	80020a6 <ETH_SetDMAConfig+0x2e>
 80020a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	7b5b      	ldrb	r3, [r3, #13]
 80020aa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020ac:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	7f52      	ldrb	r2, [r2, #29]
 80020b2:	2a00      	cmp	r2, #0
 80020b4:	d102      	bne.n	80020bc <ETH_SetDMAConfig+0x44>
 80020b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020ba:	e000      	b.n	80020be <ETH_SetDMAConfig+0x46>
 80020bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	7b9b      	ldrb	r3, [r3, #14]
 80020c4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020c6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	7f1b      	ldrb	r3, [r3, #28]
 80020d2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80020d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	7f9b      	ldrb	r3, [r3, #30]
 80020da:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020dc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020ea:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020ec:	4313      	orrs	r3, r2
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fc:	461a      	mov	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800210e:	2001      	movs	r0, #1
 8002110:	f7ff f986 	bl	8001420 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800211c:	461a      	mov	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	791b      	ldrb	r3, [r3, #4]
 8002126:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800212c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002132:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002138:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002140:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002142:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800214a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002150:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800215a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800215e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800216c:	2001      	movs	r0, #1
 800216e:	f7ff f957 	bl	8001420 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	f8de3f23 	.word	0xf8de3f23

0800218c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b0a6      	sub	sp, #152	; 0x98
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002194:	2301      	movs	r3, #1
 8002196:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800219a:	2301      	movs	r3, #1
 800219c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80021a0:	2300      	movs	r3, #0
 80021a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021c8:	2300      	movs	r3, #0
 80021ca:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80021ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021f2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80021f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002200:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002204:	4619      	mov	r1, r3
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff fe86 	bl	8001f18 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800220c:	2301      	movs	r3, #1
 800220e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002210:	2301      	movs	r3, #1
 8002212:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002214:	2301      	movs	r3, #1
 8002216:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800221a:	2301      	movs	r3, #1
 800221c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800222e:	2300      	movs	r3, #0
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002232:	2301      	movs	r3, #1
 8002234:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002238:	2301      	movs	r3, #1
 800223a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800223c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002240:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002246:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800224e:	2301      	movs	r3, #1
 8002250:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002254:	2300      	movs	r3, #0
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800225c:	f107 0308 	add.w	r3, r7, #8
 8002260:	4619      	mov	r1, r3
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ff08 	bl	8002078 <ETH_SetDMAConfig>
}
 8002268:	bf00      	nop
 800226a:	3798      	adds	r7, #152	; 0x98
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3305      	adds	r3, #5
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	3204      	adds	r2, #4
 8002288:	7812      	ldrb	r2, [r2, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <ETH_MACAddressConfig+0x68>)
 8002292:	4413      	add	r3, r2
 8002294:	461a      	mov	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3303      	adds	r3, #3
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	061a      	lsls	r2, r3, #24
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3302      	adds	r3, #2
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	041b      	lsls	r3, r3, #16
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3301      	adds	r3, #1
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	4313      	orrs	r3, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	7812      	ldrb	r2, [r2, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <ETH_MACAddressConfig+0x6c>)
 80022c2:	4413      	add	r3, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	6013      	str	r3, [r2, #0]
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40028040 	.word	0x40028040
 80022dc:	40028044 	.word	0x40028044

080022e0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	e03e      	b.n	800236c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68d9      	ldr	r1, [r3, #12]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	440b      	add	r3, r1
 80022fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2200      	movs	r2, #0
 800230a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2200      	movs	r2, #0
 8002316:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	3206      	adds	r2, #6
 8002320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d80c      	bhi.n	8002350 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68d9      	ldr	r1, [r3, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	440b      	add	r3, r1
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	e004      	b.n	800235a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3301      	adds	r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d9bd      	bls.n	80022ee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002384:	611a      	str	r2, [r3, #16]
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002392:	b480      	push	{r7}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	e046      	b.n	800242e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6919      	ldr	r1, [r3, #16]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	440b      	add	r3, r1
 80023b0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2200      	movs	r2, #0
 80023bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2200      	movs	r2, #0
 80023ce:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2200      	movs	r2, #0
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80023dc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80023e4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	3212      	adds	r2, #18
 80023fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d80c      	bhi.n	800241e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6919      	ldr	r1, [r3, #16]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	461a      	mov	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	60da      	str	r2, [r3, #12]
 800241c:	e004      	b.n	8002428 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	461a      	mov	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3301      	adds	r3, #1
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2b03      	cmp	r3, #3
 8002432:	d9b5      	bls.n	80023a0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245e:	60da      	str	r2, [r3, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	e175      	b.n	8002778 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800248c:	2201      	movs	r2, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	f040 8164 	bne.w	8002772 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d005      	beq.n	80024c2 <HAL_GPIO_Init+0x56>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d130      	bne.n	8002524 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	2203      	movs	r2, #3
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f8:	2201      	movs	r2, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 0201 	and.w	r2, r3, #1
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	2b03      	cmp	r3, #3
 800252e:	d017      	beq.n	8002560 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d123      	bne.n	80025b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	08da      	lsrs	r2, r3, #3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3208      	adds	r2, #8
 8002574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	220f      	movs	r2, #15
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	08da      	lsrs	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3208      	adds	r2, #8
 80025ae:	69b9      	ldr	r1, [r7, #24]
 80025b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	2203      	movs	r2, #3
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0203 	and.w	r2, r3, #3
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80be 	beq.w	8002772 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f6:	4b66      	ldr	r3, [pc, #408]	; (8002790 <HAL_GPIO_Init+0x324>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	4a65      	ldr	r2, [pc, #404]	; (8002790 <HAL_GPIO_Init+0x324>)
 80025fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002600:	6453      	str	r3, [r2, #68]	; 0x44
 8002602:	4b63      	ldr	r3, [pc, #396]	; (8002790 <HAL_GPIO_Init+0x324>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800260e:	4a61      	ldr	r2, [pc, #388]	; (8002794 <HAL_GPIO_Init+0x328>)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	3302      	adds	r3, #2
 8002616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	220f      	movs	r2, #15
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a58      	ldr	r2, [pc, #352]	; (8002798 <HAL_GPIO_Init+0x32c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d037      	beq.n	80026aa <HAL_GPIO_Init+0x23e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a57      	ldr	r2, [pc, #348]	; (800279c <HAL_GPIO_Init+0x330>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d031      	beq.n	80026a6 <HAL_GPIO_Init+0x23a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a56      	ldr	r2, [pc, #344]	; (80027a0 <HAL_GPIO_Init+0x334>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d02b      	beq.n	80026a2 <HAL_GPIO_Init+0x236>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a55      	ldr	r2, [pc, #340]	; (80027a4 <HAL_GPIO_Init+0x338>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d025      	beq.n	800269e <HAL_GPIO_Init+0x232>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a54      	ldr	r2, [pc, #336]	; (80027a8 <HAL_GPIO_Init+0x33c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01f      	beq.n	800269a <HAL_GPIO_Init+0x22e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a53      	ldr	r2, [pc, #332]	; (80027ac <HAL_GPIO_Init+0x340>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d019      	beq.n	8002696 <HAL_GPIO_Init+0x22a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a52      	ldr	r2, [pc, #328]	; (80027b0 <HAL_GPIO_Init+0x344>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0x226>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a51      	ldr	r2, [pc, #324]	; (80027b4 <HAL_GPIO_Init+0x348>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00d      	beq.n	800268e <HAL_GPIO_Init+0x222>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a50      	ldr	r2, [pc, #320]	; (80027b8 <HAL_GPIO_Init+0x34c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <HAL_GPIO_Init+0x21e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4f      	ldr	r2, [pc, #316]	; (80027bc <HAL_GPIO_Init+0x350>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_GPIO_Init+0x21a>
 8002682:	2309      	movs	r3, #9
 8002684:	e012      	b.n	80026ac <HAL_GPIO_Init+0x240>
 8002686:	230a      	movs	r3, #10
 8002688:	e010      	b.n	80026ac <HAL_GPIO_Init+0x240>
 800268a:	2308      	movs	r3, #8
 800268c:	e00e      	b.n	80026ac <HAL_GPIO_Init+0x240>
 800268e:	2307      	movs	r3, #7
 8002690:	e00c      	b.n	80026ac <HAL_GPIO_Init+0x240>
 8002692:	2306      	movs	r3, #6
 8002694:	e00a      	b.n	80026ac <HAL_GPIO_Init+0x240>
 8002696:	2305      	movs	r3, #5
 8002698:	e008      	b.n	80026ac <HAL_GPIO_Init+0x240>
 800269a:	2304      	movs	r3, #4
 800269c:	e006      	b.n	80026ac <HAL_GPIO_Init+0x240>
 800269e:	2303      	movs	r3, #3
 80026a0:	e004      	b.n	80026ac <HAL_GPIO_Init+0x240>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e002      	b.n	80026ac <HAL_GPIO_Init+0x240>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_GPIO_Init+0x240>
 80026aa:	2300      	movs	r3, #0
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	f002 0203 	and.w	r2, r2, #3
 80026b2:	0092      	lsls	r2, r2, #2
 80026b4:	4093      	lsls	r3, r2
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026bc:	4935      	ldr	r1, [pc, #212]	; (8002794 <HAL_GPIO_Init+0x328>)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	089b      	lsrs	r3, r3, #2
 80026c2:	3302      	adds	r3, #2
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <HAL_GPIO_Init+0x354>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ee:	4a34      	ldr	r2, [pc, #208]	; (80027c0 <HAL_GPIO_Init+0x354>)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f4:	4b32      	ldr	r3, [pc, #200]	; (80027c0 <HAL_GPIO_Init+0x354>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002718:	4a29      	ldr	r2, [pc, #164]	; (80027c0 <HAL_GPIO_Init+0x354>)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800271e:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <HAL_GPIO_Init+0x354>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002742:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <HAL_GPIO_Init+0x354>)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002748:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_GPIO_Init+0x354>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800276c:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <HAL_GPIO_Init+0x354>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3301      	adds	r3, #1
 8002776:	61fb      	str	r3, [r7, #28]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2b0f      	cmp	r3, #15
 800277c:	f67f ae86 	bls.w	800248c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3724      	adds	r7, #36	; 0x24
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	40013800 	.word	0x40013800
 8002798:	40020000 	.word	0x40020000
 800279c:	40020400 	.word	0x40020400
 80027a0:	40020800 	.word	0x40020800
 80027a4:	40020c00 	.word	0x40020c00
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40021400 	.word	0x40021400
 80027b0:	40021800 	.word	0x40021800
 80027b4:	40021c00 	.word	0x40021c00
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40022400 	.word	0x40022400
 80027c0:	40013c00 	.word	0x40013c00

080027c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e001      	b.n	80027e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
 8002800:	4613      	mov	r3, r2
 8002802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002804:	787b      	ldrb	r3, [r7, #1]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002810:	e003      	b.n	800281a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	041a      	lsls	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	619a      	str	r2, [r3, #24]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002828:	b08f      	sub	sp, #60	; 0x3c
 800282a:	af0a      	add	r7, sp, #40	; 0x28
 800282c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e116      	b.n	8002a66 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe fc72 	bl	800113c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2203      	movs	r2, #3
 800285c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f003 f880 	bl	800597c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	687e      	ldr	r6, [r7, #4]
 8002884:	466d      	mov	r5, sp
 8002886:	f106 0410 	add.w	r4, r6, #16
 800288a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800288c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800288e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002892:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002896:	e885 0003 	stmia.w	r5, {r0, r1}
 800289a:	1d33      	adds	r3, r6, #4
 800289c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800289e:	6838      	ldr	r0, [r7, #0]
 80028a0:	f003 f814 	bl	80058cc <USB_CoreInit>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0d7      	b.n	8002a66 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 f86e 	bl	800599e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e04a      	b.n	800295e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	333d      	adds	r3, #61	; 0x3d
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	333c      	adds	r3, #60	; 0x3c
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	b298      	uxth	r0, r3
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	3344      	adds	r3, #68	; 0x44
 8002904:	4602      	mov	r2, r0
 8002906:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	3340      	adds	r3, #64	; 0x40
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	3348      	adds	r3, #72	; 0x48
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	334c      	adds	r3, #76	; 0x4c
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3354      	adds	r3, #84	; 0x54
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	3301      	adds	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	d3af      	bcc.n	80028c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
 800296c:	e044      	b.n	80029f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	3301      	adds	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d3b5      	bcc.n	800296e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	687e      	ldr	r6, [r7, #4]
 8002a0a:	466d      	mov	r5, sp
 8002a0c:	f106 0410 	add.w	r4, r6, #16
 8002a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a20:	1d33      	adds	r3, r6, #4
 8002a22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a24:	6838      	ldr	r0, [r7, #0]
 8002a26:	f003 f807 	bl	8005a38 <USB_DevInit>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e014      	b.n	8002a66 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d102      	bne.n	8002a5a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f80b 	bl	8002a70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f003 f9c5 	bl	8005dee <USB_DevDisconnect>

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	10000003 	.word	0x10000003

08002ab8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac6:	6013      	str	r3, [r2, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40007000 	.word	0x40007000

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e291      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8087 	beq.w	8002c0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002afc:	4b96      	ldr	r3, [pc, #600]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d00c      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b08:	4b93      	ldr	r3, [pc, #588]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d112      	bne.n	8002b3a <HAL_RCC_OscConfig+0x62>
 8002b14:	4b90      	ldr	r3, [pc, #576]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b20:	d10b      	bne.n	8002b3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b22:	4b8d      	ldr	r3, [pc, #564]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d06c      	beq.n	8002c08 <HAL_RCC_OscConfig+0x130>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d168      	bne.n	8002c08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e26b      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x7a>
 8002b44:	4b84      	ldr	r3, [pc, #528]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a83      	ldr	r2, [pc, #524]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	e02e      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd8>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x9c>
 8002b5a:	4b7f      	ldr	r3, [pc, #508]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a7e      	ldr	r2, [pc, #504]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b7c      	ldr	r3, [pc, #496]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7b      	ldr	r2, [pc, #492]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e01d      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0xc0>
 8002b7e:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a75      	ldr	r2, [pc, #468]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b73      	ldr	r3, [pc, #460]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a72      	ldr	r2, [pc, #456]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd8>
 8002b98:	4b6f      	ldr	r3, [pc, #444]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a6e      	ldr	r2, [pc, #440]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b6c      	ldr	r3, [pc, #432]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a6b      	ldr	r2, [pc, #428]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d013      	beq.n	8002be0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fc26 	bl	8001408 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7fe fc22 	bl	8001408 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e21f      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	4b61      	ldr	r3, [pc, #388]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0xe8>
 8002bde:	e014      	b.n	8002c0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe fc12 	bl	8001408 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7fe fc0e 	bl	8001408 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e20b      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfa:	4b57      	ldr	r3, [pc, #348]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x110>
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d069      	beq.n	8002cea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c16:	4b50      	ldr	r3, [pc, #320]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00b      	beq.n	8002c3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c22:	4b4d      	ldr	r3, [pc, #308]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d11c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x190>
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d116      	bne.n	8002c68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_RCC_OscConfig+0x17a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e1df      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c52:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	493d      	ldr	r1, [pc, #244]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c66:	e040      	b.n	8002cea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d023      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c70:	4b39      	ldr	r3, [pc, #228]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a38      	ldr	r2, [pc, #224]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fbc4 	bl	8001408 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c84:	f7fe fbc0 	bl	8001408 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e1bd      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c96:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4929      	ldr	r1, [pc, #164]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
 8002cb6:	e018      	b.n	8002cea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fba0 	bl	8001408 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7fe fb9c 	bl	8001408 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e199      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d038      	beq.n	8002d68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d019      	beq.n	8002d32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfe:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d02:	4a15      	ldr	r2, [pc, #84]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fb7d 	bl	8001408 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d12:	f7fe fb79 	bl	8001408 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e176      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x23a>
 8002d30:	e01a      	b.n	8002d68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d36:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fb63 	bl	8001408 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d46:	f7fe fb5f 	bl	8001408 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d903      	bls.n	8002d5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e15c      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
 8002d58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5c:	4b91      	ldr	r3, [pc, #580]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ee      	bne.n	8002d46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80a4 	beq.w	8002ebe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d76:	4b8b      	ldr	r3, [pc, #556]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10d      	bne.n	8002d9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	4b88      	ldr	r3, [pc, #544]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	4a87      	ldr	r2, [pc, #540]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8e:	4b85      	ldr	r3, [pc, #532]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9e:	4b82      	ldr	r3, [pc, #520]	; (8002fa8 <HAL_RCC_OscConfig+0x4d0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d118      	bne.n	8002ddc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002daa:	4b7f      	ldr	r3, [pc, #508]	; (8002fa8 <HAL_RCC_OscConfig+0x4d0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a7e      	ldr	r2, [pc, #504]	; (8002fa8 <HAL_RCC_OscConfig+0x4d0>)
 8002db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db6:	f7fe fb27 	bl	8001408 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbe:	f7fe fb23 	bl	8001408 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b64      	cmp	r3, #100	; 0x64
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e120      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd0:	4b75      	ldr	r3, [pc, #468]	; (8002fa8 <HAL_RCC_OscConfig+0x4d0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_OscConfig+0x31a>
 8002de4:	4b6f      	ldr	r3, [pc, #444]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	4a6e      	ldr	r2, [pc, #440]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6713      	str	r3, [r2, #112]	; 0x70
 8002df0:	e02d      	b.n	8002e4e <HAL_RCC_OscConfig+0x376>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x33c>
 8002dfa:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	4a69      	ldr	r2, [pc, #420]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	6713      	str	r3, [r2, #112]	; 0x70
 8002e06:	4b67      	ldr	r3, [pc, #412]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	4a66      	ldr	r2, [pc, #408]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e0c:	f023 0304 	bic.w	r3, r3, #4
 8002e10:	6713      	str	r3, [r2, #112]	; 0x70
 8002e12:	e01c      	b.n	8002e4e <HAL_RCC_OscConfig+0x376>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b05      	cmp	r3, #5
 8002e1a:	d10c      	bne.n	8002e36 <HAL_RCC_OscConfig+0x35e>
 8002e1c:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4a60      	ldr	r2, [pc, #384]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70
 8002e28:	4b5e      	ldr	r3, [pc, #376]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a5d      	ldr	r2, [pc, #372]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
 8002e34:	e00b      	b.n	8002e4e <HAL_RCC_OscConfig+0x376>
 8002e36:	4b5b      	ldr	r3, [pc, #364]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	4a5a      	ldr	r2, [pc, #360]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	6713      	str	r3, [r2, #112]	; 0x70
 8002e42:	4b58      	ldr	r3, [pc, #352]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4a57      	ldr	r2, [pc, #348]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d015      	beq.n	8002e82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7fe fad7 	bl	8001408 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f7fe fad3 	bl	8001408 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0ce      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e74:	4b4b      	ldr	r3, [pc, #300]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0ee      	beq.n	8002e5e <HAL_RCC_OscConfig+0x386>
 8002e80:	e014      	b.n	8002eac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fe fac1 	bl	8001408 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fe fabd 	bl	8001408 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e0b8      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea0:	4b40      	ldr	r3, [pc, #256]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1ee      	bne.n	8002e8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d105      	bne.n	8002ebe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb2:	4b3c      	ldr	r3, [pc, #240]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	4a3b      	ldr	r2, [pc, #236]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80a4 	beq.w	8003010 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ec8:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d06b      	beq.n	8002fac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d149      	bne.n	8002f70 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002edc:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a30      	ldr	r2, [pc, #192]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fa8e 	bl	8001408 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fe fa8a 	bl	8001408 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e087      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f02:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	019b      	lsls	r3, r3, #6
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	3b01      	subs	r3, #1
 8002f28:	041b      	lsls	r3, r3, #16
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	061b      	lsls	r3, r3, #24
 8002f32:	4313      	orrs	r3, r2
 8002f34:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f3a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fa5e 	bl	8001408 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe fa5a 	bl	8001408 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e057      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x478>
 8002f6e:	e04f      	b.n	8003010 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fa44 	bl	8001408 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f84:	f7fe fa40 	bl	8001408 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e03d      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x4ac>
 8002fa2:	e035      	b.n	8003010 <HAL_RCC_OscConfig+0x538>
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_RCC_OscConfig+0x544>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d028      	beq.n	800300c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d121      	bne.n	800300c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d11a      	bne.n	800300c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fdc:	4013      	ands	r3, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fe2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d111      	bne.n	800300c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d107      	bne.n	800300c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800

08003020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0d0      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003038:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d910      	bls.n	8003068 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b67      	ldr	r3, [pc, #412]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 020f 	bic.w	r2, r3, #15
 800304e:	4965      	ldr	r1, [pc, #404]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0b8      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003080:	4b59      	ldr	r3, [pc, #356]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800308a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 800309e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a4:	4b50      	ldr	r3, [pc, #320]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	494d      	ldr	r1, [pc, #308]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d040      	beq.n	8003144 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d115      	bne.n	8003102 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e07f      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e2:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e073      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f2:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e06b      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003102:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f023 0203 	bic.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4936      	ldr	r1, [pc, #216]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003110:	4313      	orrs	r3, r2
 8003112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003114:	f7fe f978 	bl	8001408 <HAL_GetTick>
 8003118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	e00a      	b.n	8003132 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311c:	f7fe f974 	bl	8001408 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e053      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 020c 	and.w	r2, r3, #12
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	429a      	cmp	r2, r3
 8003142:	d1eb      	bne.n	800311c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d210      	bcs.n	8003174 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 020f 	bic.w	r2, r3, #15
 800315a:	4922      	ldr	r1, [pc, #136]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e032      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4916      	ldr	r1, [pc, #88]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	490e      	ldr	r1, [pc, #56]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031b2:	f000 f821 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80031b6:	4602      	mov	r2, r0
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	490a      	ldr	r1, [pc, #40]	; (80031ec <HAL_RCC_ClockConfig+0x1cc>)
 80031c4:	5ccb      	ldrb	r3, [r1, r3]
 80031c6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ca:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1d0>)
 80031cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_ClockConfig+0x1d4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe f82c 	bl	8001230 <HAL_InitTick>

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023c00 	.word	0x40023c00
 80031e8:	40023800 	.word	0x40023800
 80031ec:	0800858c 	.word	0x0800858c
 80031f0:	20000000 	.word	0x20000000
 80031f4:	20000004 	.word	0x20000004

080031f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031fc:	b094      	sub	sp, #80	; 0x50
 80031fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	647b      	str	r3, [r7, #68]	; 0x44
 8003204:	2300      	movs	r3, #0
 8003206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003208:	2300      	movs	r3, #0
 800320a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003210:	4b79      	ldr	r3, [pc, #484]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b08      	cmp	r3, #8
 800321a:	d00d      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x40>
 800321c:	2b08      	cmp	r3, #8
 800321e:	f200 80e1 	bhi.w	80033e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x34>
 8003226:	2b04      	cmp	r3, #4
 8003228:	d003      	beq.n	8003232 <HAL_RCC_GetSysClockFreq+0x3a>
 800322a:	e0db      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800322c:	4b73      	ldr	r3, [pc, #460]	; (80033fc <HAL_RCC_GetSysClockFreq+0x204>)
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003230:	e0db      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003232:	4b73      	ldr	r3, [pc, #460]	; (8003400 <HAL_RCC_GetSysClockFreq+0x208>)
 8003234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003236:	e0d8      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003238:	4b6f      	ldr	r3, [pc, #444]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003240:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003242:	4b6d      	ldr	r3, [pc, #436]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d063      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324e:	4b6a      	ldr	r3, [pc, #424]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	2200      	movs	r2, #0
 8003256:	63bb      	str	r3, [r7, #56]	; 0x38
 8003258:	63fa      	str	r2, [r7, #60]	; 0x3c
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003260:	633b      	str	r3, [r7, #48]	; 0x30
 8003262:	2300      	movs	r3, #0
 8003264:	637b      	str	r3, [r7, #52]	; 0x34
 8003266:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800326a:	4622      	mov	r2, r4
 800326c:	462b      	mov	r3, r5
 800326e:	f04f 0000 	mov.w	r0, #0
 8003272:	f04f 0100 	mov.w	r1, #0
 8003276:	0159      	lsls	r1, r3, #5
 8003278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800327c:	0150      	lsls	r0, r2, #5
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4621      	mov	r1, r4
 8003284:	1a51      	subs	r1, r2, r1
 8003286:	6139      	str	r1, [r7, #16]
 8003288:	4629      	mov	r1, r5
 800328a:	eb63 0301 	sbc.w	r3, r3, r1
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800329c:	4659      	mov	r1, fp
 800329e:	018b      	lsls	r3, r1, #6
 80032a0:	4651      	mov	r1, sl
 80032a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032a6:	4651      	mov	r1, sl
 80032a8:	018a      	lsls	r2, r1, #6
 80032aa:	4651      	mov	r1, sl
 80032ac:	ebb2 0801 	subs.w	r8, r2, r1
 80032b0:	4659      	mov	r1, fp
 80032b2:	eb63 0901 	sbc.w	r9, r3, r1
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ca:	4690      	mov	r8, r2
 80032cc:	4699      	mov	r9, r3
 80032ce:	4623      	mov	r3, r4
 80032d0:	eb18 0303 	adds.w	r3, r8, r3
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	462b      	mov	r3, r5
 80032d8:	eb49 0303 	adc.w	r3, r9, r3
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032ea:	4629      	mov	r1, r5
 80032ec:	024b      	lsls	r3, r1, #9
 80032ee:	4621      	mov	r1, r4
 80032f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032f4:	4621      	mov	r1, r4
 80032f6:	024a      	lsls	r2, r1, #9
 80032f8:	4610      	mov	r0, r2
 80032fa:	4619      	mov	r1, r3
 80032fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032fe:	2200      	movs	r2, #0
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28
 8003302:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003304:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003308:	f7fc ff82 	bl	8000210 <__aeabi_uldivmod>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4613      	mov	r3, r2
 8003312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003314:	e058      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003316:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	099b      	lsrs	r3, r3, #6
 800331c:	2200      	movs	r2, #0
 800331e:	4618      	mov	r0, r3
 8003320:	4611      	mov	r1, r2
 8003322:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003326:	623b      	str	r3, [r7, #32]
 8003328:	2300      	movs	r3, #0
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
 800332c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003330:	4642      	mov	r2, r8
 8003332:	464b      	mov	r3, r9
 8003334:	f04f 0000 	mov.w	r0, #0
 8003338:	f04f 0100 	mov.w	r1, #0
 800333c:	0159      	lsls	r1, r3, #5
 800333e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003342:	0150      	lsls	r0, r2, #5
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4641      	mov	r1, r8
 800334a:	ebb2 0a01 	subs.w	sl, r2, r1
 800334e:	4649      	mov	r1, r9
 8003350:	eb63 0b01 	sbc.w	fp, r3, r1
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003360:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003364:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003368:	ebb2 040a 	subs.w	r4, r2, sl
 800336c:	eb63 050b 	sbc.w	r5, r3, fp
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	00eb      	lsls	r3, r5, #3
 800337a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800337e:	00e2      	lsls	r2, r4, #3
 8003380:	4614      	mov	r4, r2
 8003382:	461d      	mov	r5, r3
 8003384:	4643      	mov	r3, r8
 8003386:	18e3      	adds	r3, r4, r3
 8003388:	603b      	str	r3, [r7, #0]
 800338a:	464b      	mov	r3, r9
 800338c:	eb45 0303 	adc.w	r3, r5, r3
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800339e:	4629      	mov	r1, r5
 80033a0:	028b      	lsls	r3, r1, #10
 80033a2:	4621      	mov	r1, r4
 80033a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033a8:	4621      	mov	r1, r4
 80033aa:	028a      	lsls	r2, r1, #10
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b2:	2200      	movs	r2, #0
 80033b4:	61bb      	str	r3, [r7, #24]
 80033b6:	61fa      	str	r2, [r7, #28]
 80033b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033bc:	f7fc ff28 	bl	8000210 <__aeabi_uldivmod>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4613      	mov	r3, r2
 80033c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	3301      	adds	r3, #1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80033d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e2:	e002      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCC_GetSysClockFreq+0x204>)
 80033e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3750      	adds	r7, #80	; 0x50
 80033f0:	46bd      	mov	sp, r7
 80033f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800
 80033fc:	00f42400 	.word	0x00f42400
 8003400:	007a1200 	.word	0x007a1200

08003404 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <HAL_RCC_GetHCLKFreq+0x14>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000000 	.word	0x20000000

0800341c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003420:	f7ff fff0 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0a9b      	lsrs	r3, r3, #10
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4903      	ldr	r1, [pc, #12]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40023800 	.word	0x40023800
 8003440:	0800859c 	.word	0x0800859c

08003444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003448:	f7ff ffdc 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	0b5b      	lsrs	r3, r3, #13
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4903      	ldr	r1, [pc, #12]	; (8003468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40023800 	.word	0x40023800
 8003468:	0800859c 	.word	0x0800859c

0800346c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	220f      	movs	r2, #15
 800347a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800347c:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_RCC_GetClockConfig+0x5c>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0203 	and.w	r2, r3, #3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <HAL_RCC_GetClockConfig+0x5c>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80034a0:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <HAL_RCC_GetClockConfig+0x5c>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	08db      	lsrs	r3, r3, #3
 80034a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <HAL_RCC_GetClockConfig+0x60>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 020f 	and.w	r2, r3, #15
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	601a      	str	r2, [r3, #0]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40023c00 	.word	0x40023c00

080034d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d012      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034f8:	4b69      	ldr	r3, [pc, #420]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4a68      	ldr	r2, [pc, #416]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003502:	6093      	str	r3, [r2, #8]
 8003504:	4b66      	ldr	r3, [pc, #408]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350c:	4964      	ldr	r1, [pc, #400]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800351a:	2301      	movs	r3, #1
 800351c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d017      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800352a:	4b5d      	ldr	r3, [pc, #372]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003530:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	4959      	ldr	r1, [pc, #356]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003548:	d101      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800354a:	2301      	movs	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003556:	2301      	movs	r3, #1
 8003558:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d017      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003566:	4b4e      	ldr	r3, [pc, #312]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800356c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	494a      	ldr	r1, [pc, #296]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003584:	d101      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003586:	2301      	movs	r3, #1
 8003588:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003592:	2301      	movs	r3, #1
 8003594:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 808b 	beq.w	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035b4:	4b3a      	ldr	r3, [pc, #232]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	4a39      	ldr	r2, [pc, #228]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035be:	6413      	str	r3, [r2, #64]	; 0x40
 80035c0:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035cc:	4b35      	ldr	r3, [pc, #212]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a34      	ldr	r2, [pc, #208]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d8:	f7fd ff16 	bl	8001408 <HAL_GetTick>
 80035dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e0:	f7fd ff12 	bl	8001408 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e357      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035f2:	4b2c      	ldr	r3, [pc, #176]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035fe:	4b28      	ldr	r3, [pc, #160]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003606:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d035      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	429a      	cmp	r2, r3
 800361a:	d02e      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800361c:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003624:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003626:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003632:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	4a1a      	ldr	r2, [pc, #104]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800363e:	4a18      	ldr	r2, [pc, #96]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003644:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b01      	cmp	r3, #1
 800364e:	d114      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fd feda 	bl	8001408 <HAL_GetTick>
 8003654:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003656:	e00a      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7fd fed6 	bl	8001408 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e319      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366e:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0ee      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003682:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003686:	d111      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003694:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003696:	400b      	ands	r3, r1
 8003698:	4901      	ldr	r1, [pc, #4]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
 800369e:	e00b      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40007000 	.word	0x40007000
 80036a8:	0ffffcff 	.word	0x0ffffcff
 80036ac:	4baa      	ldr	r3, [pc, #680]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4aa9      	ldr	r2, [pc, #676]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036b6:	6093      	str	r3, [r2, #8]
 80036b8:	4ba7      	ldr	r3, [pc, #668]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c4:	49a4      	ldr	r1, [pc, #656]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d010      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036d6:	4ba0      	ldr	r3, [pc, #640]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036dc:	4a9e      	ldr	r2, [pc, #632]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036e6:	4b9c      	ldr	r3, [pc, #624]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	4999      	ldr	r1, [pc, #612]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003704:	4b94      	ldr	r3, [pc, #592]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003712:	4991      	ldr	r1, [pc, #580]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003726:	4b8c      	ldr	r3, [pc, #560]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003734:	4988      	ldr	r1, [pc, #544]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003748:	4b83      	ldr	r3, [pc, #524]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003756:	4980      	ldr	r1, [pc, #512]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800376a:	4b7b      	ldr	r3, [pc, #492]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003770:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	4977      	ldr	r1, [pc, #476]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800378c:	4b72      	ldr	r3, [pc, #456]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	f023 0203 	bic.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	496f      	ldr	r1, [pc, #444]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037ae:	4b6a      	ldr	r3, [pc, #424]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	f023 020c 	bic.w	r2, r3, #12
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037bc:	4966      	ldr	r1, [pc, #408]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037d0:	4b61      	ldr	r3, [pc, #388]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	495e      	ldr	r1, [pc, #376]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037f2:	4b59      	ldr	r3, [pc, #356]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003800:	4955      	ldr	r1, [pc, #340]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003814:	4b50      	ldr	r3, [pc, #320]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003822:	494d      	ldr	r1, [pc, #308]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003836:	4b48      	ldr	r3, [pc, #288]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	4944      	ldr	r1, [pc, #272]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003858:	4b3f      	ldr	r3, [pc, #252]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003866:	493c      	ldr	r1, [pc, #240]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800387a:	4b37      	ldr	r3, [pc, #220]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003880:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003888:	4933      	ldr	r1, [pc, #204]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800389c:	4b2e      	ldr	r3, [pc, #184]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038aa:	492b      	ldr	r1, [pc, #172]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d011      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038be:	4b26      	ldr	r3, [pc, #152]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038cc:	4922      	ldr	r1, [pc, #136]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038dc:	d101      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038de:	2301      	movs	r3, #1
 80038e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038fe:	4b16      	ldr	r3, [pc, #88]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003904:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390c:	4912      	ldr	r1, [pc, #72]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00b      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003920:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003926:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003930:	4909      	ldr	r1, [pc, #36]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d006      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 80d9 	beq.w	8003afe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800394c:	4b02      	ldr	r3, [pc, #8]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a01      	ldr	r2, [pc, #4]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003952:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003956:	e001      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003958:	40023800 	.word	0x40023800
 800395c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800395e:	f7fd fd53 	bl	8001408 <HAL_GetTick>
 8003962:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003964:	e008      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003966:	f7fd fd4f 	bl	8001408 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b64      	cmp	r3, #100	; 0x64
 8003972:	d901      	bls.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e194      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003978:	4b6c      	ldr	r3, [pc, #432]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f0      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d021      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003994:	2b00      	cmp	r3, #0
 8003996:	d11d      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003998:	4b64      	ldr	r3, [pc, #400]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800399a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800399e:	0c1b      	lsrs	r3, r3, #16
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039a6:	4b61      	ldr	r3, [pc, #388]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ac:	0e1b      	lsrs	r3, r3, #24
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	019a      	lsls	r2, r3, #6
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	431a      	orrs	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	061b      	lsls	r3, r3, #24
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	071b      	lsls	r3, r3, #28
 80039cc:	4957      	ldr	r1, [pc, #348]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039e8:	d00a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d02e      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039fe:	d129      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a00:	4b4a      	ldr	r3, [pc, #296]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a06:	0c1b      	lsrs	r3, r3, #16
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a0e:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a14:	0f1b      	lsrs	r3, r3, #28
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	019a      	lsls	r2, r3, #6
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	041b      	lsls	r3, r3, #16
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	061b      	lsls	r3, r3, #24
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	071b      	lsls	r3, r3, #28
 8003a34:	493d      	ldr	r1, [pc, #244]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a3c:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a42:	f023 021f 	bic.w	r2, r3, #31
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	4937      	ldr	r1, [pc, #220]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01d      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a60:	4b32      	ldr	r3, [pc, #200]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a66:	0e1b      	lsrs	r3, r3, #24
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a6e:	4b2f      	ldr	r3, [pc, #188]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a74:	0f1b      	lsrs	r3, r3, #28
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	019a      	lsls	r2, r3, #6
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	071b      	lsls	r3, r3, #28
 8003a94:	4925      	ldr	r1, [pc, #148]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d011      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	019a      	lsls	r2, r3, #6
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	041b      	lsls	r3, r3, #16
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	061b      	lsls	r3, r3, #24
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	071b      	lsls	r3, r3, #28
 8003ac4:	4919      	ldr	r1, [pc, #100]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003acc:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ad2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad8:	f7fd fc96 	bl	8001408 <HAL_GetTick>
 8003adc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ae0:	f7fd fc92 	bl	8001408 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	; 0x64
 8003aec:	d901      	bls.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e0d7      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003af2:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	f040 80cd 	bne.w	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a08      	ldr	r2, [pc, #32]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b12:	f7fd fc79 	bl	8001408 <HAL_GetTick>
 8003b16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b18:	e00a      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b1a:	f7fd fc75 	bl	8001408 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b64      	cmp	r3, #100	; 0x64
 8003b26:	d903      	bls.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e0ba      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b30:	4b5e      	ldr	r3, [pc, #376]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b3c:	d0ed      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d02e      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d12a      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b66:	4b51      	ldr	r3, [pc, #324]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6c:	0c1b      	lsrs	r3, r3, #16
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b74:	4b4d      	ldr	r3, [pc, #308]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	0f1b      	lsrs	r3, r3, #28
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	019a      	lsls	r2, r3, #6
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	041b      	lsls	r3, r3, #16
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	061b      	lsls	r3, r3, #24
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	071b      	lsls	r3, r3, #28
 8003b9a:	4944      	ldr	r1, [pc, #272]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ba2:	4b42      	ldr	r3, [pc, #264]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	493d      	ldr	r1, [pc, #244]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d022      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd0:	d11d      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bd2:	4b36      	ldr	r3, [pc, #216]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	0e1b      	lsrs	r3, r3, #24
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003be0:	4b32      	ldr	r3, [pc, #200]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	0f1b      	lsrs	r3, r3, #28
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	019a      	lsls	r2, r3, #6
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	041b      	lsls	r3, r3, #16
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	061b      	lsls	r3, r3, #24
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	071b      	lsls	r3, r3, #28
 8003c06:	4929      	ldr	r1, [pc, #164]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d028      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c1a:	4b24      	ldr	r3, [pc, #144]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	0e1b      	lsrs	r3, r3, #24
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c28:	4b20      	ldr	r3, [pc, #128]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	019a      	lsls	r2, r3, #6
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	431a      	orrs	r2, r3
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	071b      	lsls	r3, r3, #28
 8003c4e:	4917      	ldr	r1, [pc, #92]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	4911      	ldr	r1, [pc, #68]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c78:	f7fd fbc6 	bl	8001408 <HAL_GetTick>
 8003c7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c80:	f7fd fbc2 	bl	8001408 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e007      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c9e:	d1ef      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3720      	adds	r7, #32
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800

08003cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e049      	b.n	8003d56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fd f978 	bl	8000fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f000 fd30 	bl	8004754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d001      	beq.n	8003d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e054      	b.n	8003e22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a26      	ldr	r2, [pc, #152]	; (8003e30 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d022      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x80>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d01d      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x80>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a22      	ldr	r2, [pc, #136]	; (8003e34 <HAL_TIM_Base_Start_IT+0xd4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d018      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x80>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a21      	ldr	r2, [pc, #132]	; (8003e38 <HAL_TIM_Base_Start_IT+0xd8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d013      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x80>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <HAL_TIM_Base_Start_IT+0xdc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00e      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x80>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <HAL_TIM_Base_Start_IT+0xe0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d009      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x80>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <HAL_TIM_Base_Start_IT+0xe4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x80>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <HAL_TIM_Base_Start_IT+0xe8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d115      	bne.n	8003e0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <HAL_TIM_Base_Start_IT+0xec>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b06      	cmp	r3, #6
 8003df0:	d015      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0xbe>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df8:	d011      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0201 	orr.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0a:	e008      	b.n	8003e1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	e000      	b.n	8003e20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40010000 	.word	0x40010000
 8003e34:	40000400 	.word	0x40000400
 8003e38:	40000800 	.word	0x40000800
 8003e3c:	40000c00 	.word	0x40000c00
 8003e40:	40010400 	.word	0x40010400
 8003e44:	40014000 	.word	0x40014000
 8003e48:	40001800 	.word	0x40001800
 8003e4c:	00010007 	.word	0x00010007

08003e50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e049      	b.n	8003ef6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f841 	bl	8003efe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f000 fc60 	bl	8004754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d109      	bne.n	8003f38 <HAL_TIM_PWM_Start+0x24>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e03c      	b.n	8003fb2 <HAL_TIM_PWM_Start+0x9e>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d109      	bne.n	8003f52 <HAL_TIM_PWM_Start+0x3e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	bf14      	ite	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	e02f      	b.n	8003fb2 <HAL_TIM_PWM_Start+0x9e>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d109      	bne.n	8003f6c <HAL_TIM_PWM_Start+0x58>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	e022      	b.n	8003fb2 <HAL_TIM_PWM_Start+0x9e>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b0c      	cmp	r3, #12
 8003f70:	d109      	bne.n	8003f86 <HAL_TIM_PWM_Start+0x72>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	bf14      	ite	ne
 8003f7e:	2301      	movne	r3, #1
 8003f80:	2300      	moveq	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	e015      	b.n	8003fb2 <HAL_TIM_PWM_Start+0x9e>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d109      	bne.n	8003fa0 <HAL_TIM_PWM_Start+0x8c>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	bf14      	ite	ne
 8003f98:	2301      	movne	r3, #1
 8003f9a:	2300      	moveq	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	e008      	b.n	8003fb2 <HAL_TIM_PWM_Start+0x9e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	bf14      	ite	ne
 8003fac:	2301      	movne	r3, #1
 8003fae:	2300      	moveq	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e092      	b.n	80040e0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d104      	bne.n	8003fca <HAL_TIM_PWM_Start+0xb6>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fc8:	e023      	b.n	8004012 <HAL_TIM_PWM_Start+0xfe>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_PWM_Start+0xc6>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd8:	e01b      	b.n	8004012 <HAL_TIM_PWM_Start+0xfe>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d104      	bne.n	8003fea <HAL_TIM_PWM_Start+0xd6>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe8:	e013      	b.n	8004012 <HAL_TIM_PWM_Start+0xfe>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b0c      	cmp	r3, #12
 8003fee:	d104      	bne.n	8003ffa <HAL_TIM_PWM_Start+0xe6>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ff8:	e00b      	b.n	8004012 <HAL_TIM_PWM_Start+0xfe>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b10      	cmp	r3, #16
 8003ffe:	d104      	bne.n	800400a <HAL_TIM_PWM_Start+0xf6>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004008:	e003      	b.n	8004012 <HAL_TIM_PWM_Start+0xfe>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2201      	movs	r2, #1
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f000 ff32 	bl	8004e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a30      	ldr	r2, [pc, #192]	; (80040e8 <HAL_TIM_PWM_Start+0x1d4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d004      	beq.n	8004034 <HAL_TIM_PWM_Start+0x120>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2f      	ldr	r2, [pc, #188]	; (80040ec <HAL_TIM_PWM_Start+0x1d8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d101      	bne.n	8004038 <HAL_TIM_PWM_Start+0x124>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <HAL_TIM_PWM_Start+0x126>
 8004038:	2300      	movs	r3, #0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800404c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a25      	ldr	r2, [pc, #148]	; (80040e8 <HAL_TIM_PWM_Start+0x1d4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d022      	beq.n	800409e <HAL_TIM_PWM_Start+0x18a>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004060:	d01d      	beq.n	800409e <HAL_TIM_PWM_Start+0x18a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a22      	ldr	r2, [pc, #136]	; (80040f0 <HAL_TIM_PWM_Start+0x1dc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d018      	beq.n	800409e <HAL_TIM_PWM_Start+0x18a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a20      	ldr	r2, [pc, #128]	; (80040f4 <HAL_TIM_PWM_Start+0x1e0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <HAL_TIM_PWM_Start+0x18a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <HAL_TIM_PWM_Start+0x1e4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00e      	beq.n	800409e <HAL_TIM_PWM_Start+0x18a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a19      	ldr	r2, [pc, #100]	; (80040ec <HAL_TIM_PWM_Start+0x1d8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d009      	beq.n	800409e <HAL_TIM_PWM_Start+0x18a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1b      	ldr	r2, [pc, #108]	; (80040fc <HAL_TIM_PWM_Start+0x1e8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d004      	beq.n	800409e <HAL_TIM_PWM_Start+0x18a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a19      	ldr	r2, [pc, #100]	; (8004100 <HAL_TIM_PWM_Start+0x1ec>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d115      	bne.n	80040ca <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	4b17      	ldr	r3, [pc, #92]	; (8004104 <HAL_TIM_PWM_Start+0x1f0>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b06      	cmp	r3, #6
 80040ae:	d015      	beq.n	80040dc <HAL_TIM_PWM_Start+0x1c8>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b6:	d011      	beq.n	80040dc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c8:	e008      	b.n	80040dc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	e000      	b.n	80040de <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40010000 	.word	0x40010000
 80040ec:	40010400 	.word	0x40010400
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800
 80040f8:	40000c00 	.word	0x40000c00
 80040fc:	40014000 	.word	0x40014000
 8004100:	40001800 	.word	0x40001800
 8004104:	00010007 	.word	0x00010007

08004108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b02      	cmp	r3, #2
 800411c:	d122      	bne.n	8004164 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b02      	cmp	r3, #2
 800412a:	d11b      	bne.n	8004164 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0202 	mvn.w	r2, #2
 8004134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fae4 	bl	8004718 <HAL_TIM_IC_CaptureCallback>
 8004150:	e005      	b.n	800415e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fad6 	bl	8004704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fae7 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b04      	cmp	r3, #4
 8004170:	d122      	bne.n	80041b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b04      	cmp	r3, #4
 800417e:	d11b      	bne.n	80041b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0204 	mvn.w	r2, #4
 8004188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2202      	movs	r2, #2
 800418e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 faba 	bl	8004718 <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 faac 	bl	8004704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fabd 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d122      	bne.n	800420c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d11b      	bne.n	800420c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0208 	mvn.w	r2, #8
 80041dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2204      	movs	r2, #4
 80041e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fa90 	bl	8004718 <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fa82 	bl	8004704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fa93 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b10      	cmp	r3, #16
 8004218:	d122      	bne.n	8004260 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b10      	cmp	r3, #16
 8004226:	d11b      	bne.n	8004260 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0210 	mvn.w	r2, #16
 8004230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2208      	movs	r2, #8
 8004236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fa66 	bl	8004718 <HAL_TIM_IC_CaptureCallback>
 800424c:	e005      	b.n	800425a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fa58 	bl	8004704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fa69 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b01      	cmp	r3, #1
 800426c:	d10e      	bne.n	800428c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	d107      	bne.n	800428c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0201 	mvn.w	r2, #1
 8004284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fc fd68 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	2b80      	cmp	r3, #128	; 0x80
 8004298:	d10e      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a4:	2b80      	cmp	r3, #128	; 0x80
 80042a6:	d107      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fea4 	bl	8005000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c6:	d10e      	bne.n	80042e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	2b80      	cmp	r3, #128	; 0x80
 80042d4:	d107      	bne.n	80042e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fe97 	bl	8005014 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f0:	2b40      	cmp	r3, #64	; 0x40
 80042f2:	d10e      	bne.n	8004312 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b40      	cmp	r3, #64	; 0x40
 8004300:	d107      	bne.n	8004312 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800430a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fa17 	bl	8004740 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b20      	cmp	r3, #32
 800431e:	d10e      	bne.n	800433e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b20      	cmp	r3, #32
 800432c:	d107      	bne.n	800433e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f06f 0220 	mvn.w	r2, #32
 8004336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fe57 	bl	8004fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004362:	2302      	movs	r3, #2
 8004364:	e0ff      	b.n	8004566 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b14      	cmp	r3, #20
 8004372:	f200 80f0 	bhi.w	8004556 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004376:	a201      	add	r2, pc, #4	; (adr r2, 800437c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437c:	080043d1 	.word	0x080043d1
 8004380:	08004557 	.word	0x08004557
 8004384:	08004557 	.word	0x08004557
 8004388:	08004557 	.word	0x08004557
 800438c:	08004411 	.word	0x08004411
 8004390:	08004557 	.word	0x08004557
 8004394:	08004557 	.word	0x08004557
 8004398:	08004557 	.word	0x08004557
 800439c:	08004453 	.word	0x08004453
 80043a0:	08004557 	.word	0x08004557
 80043a4:	08004557 	.word	0x08004557
 80043a8:	08004557 	.word	0x08004557
 80043ac:	08004493 	.word	0x08004493
 80043b0:	08004557 	.word	0x08004557
 80043b4:	08004557 	.word	0x08004557
 80043b8:	08004557 	.word	0x08004557
 80043bc:	080044d5 	.word	0x080044d5
 80043c0:	08004557 	.word	0x08004557
 80043c4:	08004557 	.word	0x08004557
 80043c8:	08004557 	.word	0x08004557
 80043cc:	08004515 	.word	0x08004515
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fa5c 	bl	8004894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0208 	orr.w	r2, r2, #8
 80043ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0204 	bic.w	r2, r2, #4
 80043fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6999      	ldr	r1, [r3, #24]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	619a      	str	r2, [r3, #24]
      break;
 800440e:	e0a5      	b.n	800455c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 faae 	bl	8004978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800442a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6999      	ldr	r1, [r3, #24]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	021a      	lsls	r2, r3, #8
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	619a      	str	r2, [r3, #24]
      break;
 8004450:	e084      	b.n	800455c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	4618      	mov	r0, r3
 800445a:	f000 fb05 	bl	8004a68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0208 	orr.w	r2, r2, #8
 800446c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0204 	bic.w	r2, r2, #4
 800447c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69d9      	ldr	r1, [r3, #28]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	61da      	str	r2, [r3, #28]
      break;
 8004490:	e064      	b.n	800455c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fb5b 	bl	8004b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69d9      	ldr	r1, [r3, #28]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	021a      	lsls	r2, r3, #8
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	61da      	str	r2, [r3, #28]
      break;
 80044d2:	e043      	b.n	800455c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68b9      	ldr	r1, [r7, #8]
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fb92 	bl	8004c04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0208 	orr.w	r2, r2, #8
 80044ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0204 	bic.w	r2, r2, #4
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004512:	e023      	b.n	800455c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fbc4 	bl	8004ca8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800452e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800453e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	021a      	lsls	r2, r3, #8
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004554:	e002      	b.n	800455c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	75fb      	strb	r3, [r7, #23]
      break;
 800455a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004564:	7dfb      	ldrb	r3, [r7, #23]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop

08004570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_TIM_ConfigClockSource+0x1c>
 8004588:	2302      	movs	r3, #2
 800458a:	e0b4      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x186>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	4b56      	ldr	r3, [pc, #344]	; (8004700 <HAL_TIM_ConfigClockSource+0x190>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c4:	d03e      	beq.n	8004644 <HAL_TIM_ConfigClockSource+0xd4>
 80045c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ca:	f200 8087 	bhi.w	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d2:	f000 8086 	beq.w	80046e2 <HAL_TIM_ConfigClockSource+0x172>
 80045d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045da:	d87f      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045dc:	2b70      	cmp	r3, #112	; 0x70
 80045de:	d01a      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0xa6>
 80045e0:	2b70      	cmp	r3, #112	; 0x70
 80045e2:	d87b      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045e4:	2b60      	cmp	r3, #96	; 0x60
 80045e6:	d050      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x11a>
 80045e8:	2b60      	cmp	r3, #96	; 0x60
 80045ea:	d877      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045ec:	2b50      	cmp	r3, #80	; 0x50
 80045ee:	d03c      	beq.n	800466a <HAL_TIM_ConfigClockSource+0xfa>
 80045f0:	2b50      	cmp	r3, #80	; 0x50
 80045f2:	d873      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d058      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x13a>
 80045f8:	2b40      	cmp	r3, #64	; 0x40
 80045fa:	d86f      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045fc:	2b30      	cmp	r3, #48	; 0x30
 80045fe:	d064      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004600:	2b30      	cmp	r3, #48	; 0x30
 8004602:	d86b      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 8004604:	2b20      	cmp	r3, #32
 8004606:	d060      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004608:	2b20      	cmp	r3, #32
 800460a:	d867      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d05c      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004610:	2b10      	cmp	r3, #16
 8004612:	d05a      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004614:	e062      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004626:	f000 fc0d 	bl	8004e44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	609a      	str	r2, [r3, #8]
      break;
 8004642:	e04f      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004654:	f000 fbf6 	bl	8004e44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004666:	609a      	str	r2, [r3, #8]
      break;
 8004668:	e03c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004676:	461a      	mov	r2, r3
 8004678:	f000 fb6a 	bl	8004d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2150      	movs	r1, #80	; 0x50
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fbc3 	bl	8004e0e <TIM_ITRx_SetConfig>
      break;
 8004688:	e02c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004696:	461a      	mov	r2, r3
 8004698:	f000 fb89 	bl	8004dae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2160      	movs	r1, #96	; 0x60
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fbb3 	bl	8004e0e <TIM_ITRx_SetConfig>
      break;
 80046a8:	e01c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b6:	461a      	mov	r2, r3
 80046b8:	f000 fb4a 	bl	8004d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2140      	movs	r1, #64	; 0x40
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fba3 	bl	8004e0e <TIM_ITRx_SetConfig>
      break;
 80046c8:	e00c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f000 fb9a 	bl	8004e0e <TIM_ITRx_SetConfig>
      break;
 80046da:	e003      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
      break;
 80046e0:	e000      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	fffeff88 	.word	0xfffeff88

08004704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a40      	ldr	r2, [pc, #256]	; (8004868 <TIM_Base_SetConfig+0x114>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004772:	d00f      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a3d      	ldr	r2, [pc, #244]	; (800486c <TIM_Base_SetConfig+0x118>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00b      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a3c      	ldr	r2, [pc, #240]	; (8004870 <TIM_Base_SetConfig+0x11c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d007      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a3b      	ldr	r2, [pc, #236]	; (8004874 <TIM_Base_SetConfig+0x120>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d003      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a3a      	ldr	r2, [pc, #232]	; (8004878 <TIM_Base_SetConfig+0x124>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d108      	bne.n	80047a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a2f      	ldr	r2, [pc, #188]	; (8004868 <TIM_Base_SetConfig+0x114>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d02b      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b4:	d027      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a2c      	ldr	r2, [pc, #176]	; (800486c <TIM_Base_SetConfig+0x118>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d023      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a2b      	ldr	r2, [pc, #172]	; (8004870 <TIM_Base_SetConfig+0x11c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01f      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a2a      	ldr	r2, [pc, #168]	; (8004874 <TIM_Base_SetConfig+0x120>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d01b      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a29      	ldr	r2, [pc, #164]	; (8004878 <TIM_Base_SetConfig+0x124>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d017      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a28      	ldr	r2, [pc, #160]	; (800487c <TIM_Base_SetConfig+0x128>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a27      	ldr	r2, [pc, #156]	; (8004880 <TIM_Base_SetConfig+0x12c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00f      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a26      	ldr	r2, [pc, #152]	; (8004884 <TIM_Base_SetConfig+0x130>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00b      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a25      	ldr	r2, [pc, #148]	; (8004888 <TIM_Base_SetConfig+0x134>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d007      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a24      	ldr	r2, [pc, #144]	; (800488c <TIM_Base_SetConfig+0x138>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a23      	ldr	r2, [pc, #140]	; (8004890 <TIM_Base_SetConfig+0x13c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d108      	bne.n	8004818 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <TIM_Base_SetConfig+0x114>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <TIM_Base_SetConfig+0xf8>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a0c      	ldr	r2, [pc, #48]	; (8004878 <TIM_Base_SetConfig+0x124>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d103      	bne.n	8004854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	615a      	str	r2, [r3, #20]
}
 800485a:	bf00      	nop
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40010000 	.word	0x40010000
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800
 8004874:	40000c00 	.word	0x40000c00
 8004878:	40010400 	.word	0x40010400
 800487c:	40014000 	.word	0x40014000
 8004880:	40014400 	.word	0x40014400
 8004884:	40014800 	.word	0x40014800
 8004888:	40001800 	.word	0x40001800
 800488c:	40001c00 	.word	0x40001c00
 8004890:	40002000 	.word	0x40002000

08004894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f023 0201 	bic.w	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4b2b      	ldr	r3, [pc, #172]	; (800496c <TIM_OC1_SetConfig+0xd8>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f023 0302 	bic.w	r3, r3, #2
 80048dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a21      	ldr	r2, [pc, #132]	; (8004970 <TIM_OC1_SetConfig+0xdc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d003      	beq.n	80048f8 <TIM_OC1_SetConfig+0x64>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a20      	ldr	r2, [pc, #128]	; (8004974 <TIM_OC1_SetConfig+0xe0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d10c      	bne.n	8004912 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f023 0308 	bic.w	r3, r3, #8
 80048fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f023 0304 	bic.w	r3, r3, #4
 8004910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a16      	ldr	r2, [pc, #88]	; (8004970 <TIM_OC1_SetConfig+0xdc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d003      	beq.n	8004922 <TIM_OC1_SetConfig+0x8e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a15      	ldr	r2, [pc, #84]	; (8004974 <TIM_OC1_SetConfig+0xe0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d111      	bne.n	8004946 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	621a      	str	r2, [r3, #32]
}
 8004960:	bf00      	nop
 8004962:	371c      	adds	r7, #28
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	fffeff8f 	.word	0xfffeff8f
 8004970:	40010000 	.word	0x40010000
 8004974:	40010400 	.word	0x40010400

08004978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f023 0210 	bic.w	r2, r3, #16
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4b2e      	ldr	r3, [pc, #184]	; (8004a5c <TIM_OC2_SetConfig+0xe4>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f023 0320 	bic.w	r3, r3, #32
 80049c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a23      	ldr	r2, [pc, #140]	; (8004a60 <TIM_OC2_SetConfig+0xe8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d003      	beq.n	80049e0 <TIM_OC2_SetConfig+0x68>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a22      	ldr	r2, [pc, #136]	; (8004a64 <TIM_OC2_SetConfig+0xec>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10d      	bne.n	80049fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a18      	ldr	r2, [pc, #96]	; (8004a60 <TIM_OC2_SetConfig+0xe8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_OC2_SetConfig+0x94>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a17      	ldr	r2, [pc, #92]	; (8004a64 <TIM_OC2_SetConfig+0xec>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d113      	bne.n	8004a34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	621a      	str	r2, [r3, #32]
}
 8004a4e:	bf00      	nop
 8004a50:	371c      	adds	r7, #28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	feff8fff 	.word	0xfeff8fff
 8004a60:	40010000 	.word	0x40010000
 8004a64:	40010400 	.word	0x40010400

08004a68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4b2d      	ldr	r3, [pc, #180]	; (8004b48 <TIM_OC3_SetConfig+0xe0>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0303 	bic.w	r3, r3, #3
 8004a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a22      	ldr	r2, [pc, #136]	; (8004b4c <TIM_OC3_SetConfig+0xe4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d003      	beq.n	8004ace <TIM_OC3_SetConfig+0x66>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a21      	ldr	r2, [pc, #132]	; (8004b50 <TIM_OC3_SetConfig+0xe8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d10d      	bne.n	8004aea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	021b      	lsls	r3, r3, #8
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <TIM_OC3_SetConfig+0xe4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d003      	beq.n	8004afa <TIM_OC3_SetConfig+0x92>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a16      	ldr	r2, [pc, #88]	; (8004b50 <TIM_OC3_SetConfig+0xe8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d113      	bne.n	8004b22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	621a      	str	r2, [r3, #32]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	fffeff8f 	.word	0xfffeff8f
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	40010400 	.word	0x40010400

08004b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4b1e      	ldr	r3, [pc, #120]	; (8004bf8 <TIM_OC4_SetConfig+0xa4>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	031b      	lsls	r3, r3, #12
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <TIM_OC4_SetConfig+0xa8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <TIM_OC4_SetConfig+0x68>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a12      	ldr	r2, [pc, #72]	; (8004c00 <TIM_OC4_SetConfig+0xac>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d109      	bne.n	8004bd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	019b      	lsls	r3, r3, #6
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	feff8fff 	.word	0xfeff8fff
 8004bfc:	40010000 	.word	0x40010000
 8004c00:	40010400 	.word	0x40010400

08004c04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <TIM_OC5_SetConfig+0x98>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004c44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	041b      	lsls	r3, r3, #16
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <TIM_OC5_SetConfig+0x9c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d003      	beq.n	8004c62 <TIM_OC5_SetConfig+0x5e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a11      	ldr	r2, [pc, #68]	; (8004ca4 <TIM_OC5_SetConfig+0xa0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d109      	bne.n	8004c76 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	021b      	lsls	r3, r3, #8
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	621a      	str	r2, [r3, #32]
}
 8004c90:	bf00      	nop
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	fffeff8f 	.word	0xfffeff8f
 8004ca0:	40010000 	.word	0x40010000
 8004ca4:	40010400 	.word	0x40010400

08004ca8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <TIM_OC6_SetConfig+0x9c>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	051b      	lsls	r3, r3, #20
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a13      	ldr	r2, [pc, #76]	; (8004d48 <TIM_OC6_SetConfig+0xa0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <TIM_OC6_SetConfig+0x60>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a12      	ldr	r2, [pc, #72]	; (8004d4c <TIM_OC6_SetConfig+0xa4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d109      	bne.n	8004d1c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	029b      	lsls	r3, r3, #10
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	621a      	str	r2, [r3, #32]
}
 8004d36:	bf00      	nop
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	feff8fff 	.word	0xfeff8fff
 8004d48:	40010000 	.word	0x40010000
 8004d4c:	40010400 	.word	0x40010400

08004d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f023 0201 	bic.w	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f023 030a 	bic.w	r3, r3, #10
 8004d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	621a      	str	r2, [r3, #32]
}
 8004da2:	bf00      	nop
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b087      	sub	sp, #28
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f023 0210 	bic.w	r2, r3, #16
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	031b      	lsls	r3, r3, #12
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	621a      	str	r2, [r3, #32]
}
 8004e02:	bf00      	nop
 8004e04:	371c      	adds	r7, #28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f043 0307 	orr.w	r3, r3, #7
 8004e30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	609a      	str	r2, [r3, #8]
}
 8004e38:	bf00      	nop
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	021a      	lsls	r2, r3, #8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	609a      	str	r2, [r3, #8]
}
 8004e78:	bf00      	nop
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 031f 	and.w	r3, r3, #31
 8004e96:	2201      	movs	r2, #1
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a1a      	ldr	r2, [r3, #32]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	401a      	ands	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a1a      	ldr	r2, [r3, #32]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	621a      	str	r2, [r3, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
	...

08004ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e06d      	b.n	8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a30      	ldr	r2, [pc, #192]	; (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d004      	beq.n	8004f1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a2f      	ldr	r2, [pc, #188]	; (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d108      	bne.n	8004f2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a20      	ldr	r2, [pc, #128]	; (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d022      	beq.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5a:	d01d      	beq.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a1d      	ldr	r2, [pc, #116]	; (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d018      	beq.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a1c      	ldr	r2, [pc, #112]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d013      	beq.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1a      	ldr	r2, [pc, #104]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00e      	beq.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a15      	ldr	r2, [pc, #84]	; (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d009      	beq.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a16      	ldr	r2, [pc, #88]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a15      	ldr	r2, [pc, #84]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d10c      	bne.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	40010000 	.word	0x40010000
 8004fd4:	40010400 	.word	0x40010400
 8004fd8:	40000400 	.word	0x40000400
 8004fdc:	40000800 	.word	0x40000800
 8004fe0:	40000c00 	.word	0x40000c00
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40001800 	.word	0x40001800

08004fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e040      	b.n	80050bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fc f816 	bl	800107c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2224      	movs	r2, #36	; 0x24
 8005054:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f82c 	bl	80050c4 <UART_SetConfig>
 800506c:	4603      	mov	r3, r0
 800506e:	2b01      	cmp	r3, #1
 8005070:	d101      	bne.n	8005076 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e022      	b.n	80050bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fa84 	bl	800558c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005092:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fb0b 	bl	80056d0 <UART_CheckIdleState>
 80050ba:	4603      	mov	r3, r0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	431a      	orrs	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4ba6      	ldr	r3, [pc, #664]	; (8005388 <UART_SetConfig+0x2c4>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6812      	ldr	r2, [r2, #0]
 80050f6:	6979      	ldr	r1, [r7, #20]
 80050f8:	430b      	orrs	r3, r1
 80050fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	430a      	orrs	r2, r1
 8005134:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a94      	ldr	r2, [pc, #592]	; (800538c <UART_SetConfig+0x2c8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d120      	bne.n	8005182 <UART_SetConfig+0xbe>
 8005140:	4b93      	ldr	r3, [pc, #588]	; (8005390 <UART_SetConfig+0x2cc>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	2b03      	cmp	r3, #3
 800514c:	d816      	bhi.n	800517c <UART_SetConfig+0xb8>
 800514e:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <UART_SetConfig+0x90>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	08005165 	.word	0x08005165
 8005158:	08005171 	.word	0x08005171
 800515c:	0800516b 	.word	0x0800516b
 8005160:	08005177 	.word	0x08005177
 8005164:	2301      	movs	r3, #1
 8005166:	77fb      	strb	r3, [r7, #31]
 8005168:	e150      	b.n	800540c <UART_SetConfig+0x348>
 800516a:	2302      	movs	r3, #2
 800516c:	77fb      	strb	r3, [r7, #31]
 800516e:	e14d      	b.n	800540c <UART_SetConfig+0x348>
 8005170:	2304      	movs	r3, #4
 8005172:	77fb      	strb	r3, [r7, #31]
 8005174:	e14a      	b.n	800540c <UART_SetConfig+0x348>
 8005176:	2308      	movs	r3, #8
 8005178:	77fb      	strb	r3, [r7, #31]
 800517a:	e147      	b.n	800540c <UART_SetConfig+0x348>
 800517c:	2310      	movs	r3, #16
 800517e:	77fb      	strb	r3, [r7, #31]
 8005180:	e144      	b.n	800540c <UART_SetConfig+0x348>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a83      	ldr	r2, [pc, #524]	; (8005394 <UART_SetConfig+0x2d0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d132      	bne.n	80051f2 <UART_SetConfig+0x12e>
 800518c:	4b80      	ldr	r3, [pc, #512]	; (8005390 <UART_SetConfig+0x2cc>)
 800518e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b0c      	cmp	r3, #12
 8005198:	d828      	bhi.n	80051ec <UART_SetConfig+0x128>
 800519a:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <UART_SetConfig+0xdc>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	080051d5 	.word	0x080051d5
 80051a4:	080051ed 	.word	0x080051ed
 80051a8:	080051ed 	.word	0x080051ed
 80051ac:	080051ed 	.word	0x080051ed
 80051b0:	080051e1 	.word	0x080051e1
 80051b4:	080051ed 	.word	0x080051ed
 80051b8:	080051ed 	.word	0x080051ed
 80051bc:	080051ed 	.word	0x080051ed
 80051c0:	080051db 	.word	0x080051db
 80051c4:	080051ed 	.word	0x080051ed
 80051c8:	080051ed 	.word	0x080051ed
 80051cc:	080051ed 	.word	0x080051ed
 80051d0:	080051e7 	.word	0x080051e7
 80051d4:	2300      	movs	r3, #0
 80051d6:	77fb      	strb	r3, [r7, #31]
 80051d8:	e118      	b.n	800540c <UART_SetConfig+0x348>
 80051da:	2302      	movs	r3, #2
 80051dc:	77fb      	strb	r3, [r7, #31]
 80051de:	e115      	b.n	800540c <UART_SetConfig+0x348>
 80051e0:	2304      	movs	r3, #4
 80051e2:	77fb      	strb	r3, [r7, #31]
 80051e4:	e112      	b.n	800540c <UART_SetConfig+0x348>
 80051e6:	2308      	movs	r3, #8
 80051e8:	77fb      	strb	r3, [r7, #31]
 80051ea:	e10f      	b.n	800540c <UART_SetConfig+0x348>
 80051ec:	2310      	movs	r3, #16
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e10c      	b.n	800540c <UART_SetConfig+0x348>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a68      	ldr	r2, [pc, #416]	; (8005398 <UART_SetConfig+0x2d4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d120      	bne.n	800523e <UART_SetConfig+0x17a>
 80051fc:	4b64      	ldr	r3, [pc, #400]	; (8005390 <UART_SetConfig+0x2cc>)
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005202:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005206:	2b30      	cmp	r3, #48	; 0x30
 8005208:	d013      	beq.n	8005232 <UART_SetConfig+0x16e>
 800520a:	2b30      	cmp	r3, #48	; 0x30
 800520c:	d814      	bhi.n	8005238 <UART_SetConfig+0x174>
 800520e:	2b20      	cmp	r3, #32
 8005210:	d009      	beq.n	8005226 <UART_SetConfig+0x162>
 8005212:	2b20      	cmp	r3, #32
 8005214:	d810      	bhi.n	8005238 <UART_SetConfig+0x174>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <UART_SetConfig+0x15c>
 800521a:	2b10      	cmp	r3, #16
 800521c:	d006      	beq.n	800522c <UART_SetConfig+0x168>
 800521e:	e00b      	b.n	8005238 <UART_SetConfig+0x174>
 8005220:	2300      	movs	r3, #0
 8005222:	77fb      	strb	r3, [r7, #31]
 8005224:	e0f2      	b.n	800540c <UART_SetConfig+0x348>
 8005226:	2302      	movs	r3, #2
 8005228:	77fb      	strb	r3, [r7, #31]
 800522a:	e0ef      	b.n	800540c <UART_SetConfig+0x348>
 800522c:	2304      	movs	r3, #4
 800522e:	77fb      	strb	r3, [r7, #31]
 8005230:	e0ec      	b.n	800540c <UART_SetConfig+0x348>
 8005232:	2308      	movs	r3, #8
 8005234:	77fb      	strb	r3, [r7, #31]
 8005236:	e0e9      	b.n	800540c <UART_SetConfig+0x348>
 8005238:	2310      	movs	r3, #16
 800523a:	77fb      	strb	r3, [r7, #31]
 800523c:	e0e6      	b.n	800540c <UART_SetConfig+0x348>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a56      	ldr	r2, [pc, #344]	; (800539c <UART_SetConfig+0x2d8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d120      	bne.n	800528a <UART_SetConfig+0x1c6>
 8005248:	4b51      	ldr	r3, [pc, #324]	; (8005390 <UART_SetConfig+0x2cc>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005252:	2bc0      	cmp	r3, #192	; 0xc0
 8005254:	d013      	beq.n	800527e <UART_SetConfig+0x1ba>
 8005256:	2bc0      	cmp	r3, #192	; 0xc0
 8005258:	d814      	bhi.n	8005284 <UART_SetConfig+0x1c0>
 800525a:	2b80      	cmp	r3, #128	; 0x80
 800525c:	d009      	beq.n	8005272 <UART_SetConfig+0x1ae>
 800525e:	2b80      	cmp	r3, #128	; 0x80
 8005260:	d810      	bhi.n	8005284 <UART_SetConfig+0x1c0>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <UART_SetConfig+0x1a8>
 8005266:	2b40      	cmp	r3, #64	; 0x40
 8005268:	d006      	beq.n	8005278 <UART_SetConfig+0x1b4>
 800526a:	e00b      	b.n	8005284 <UART_SetConfig+0x1c0>
 800526c:	2300      	movs	r3, #0
 800526e:	77fb      	strb	r3, [r7, #31]
 8005270:	e0cc      	b.n	800540c <UART_SetConfig+0x348>
 8005272:	2302      	movs	r3, #2
 8005274:	77fb      	strb	r3, [r7, #31]
 8005276:	e0c9      	b.n	800540c <UART_SetConfig+0x348>
 8005278:	2304      	movs	r3, #4
 800527a:	77fb      	strb	r3, [r7, #31]
 800527c:	e0c6      	b.n	800540c <UART_SetConfig+0x348>
 800527e:	2308      	movs	r3, #8
 8005280:	77fb      	strb	r3, [r7, #31]
 8005282:	e0c3      	b.n	800540c <UART_SetConfig+0x348>
 8005284:	2310      	movs	r3, #16
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e0c0      	b.n	800540c <UART_SetConfig+0x348>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a44      	ldr	r2, [pc, #272]	; (80053a0 <UART_SetConfig+0x2dc>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d125      	bne.n	80052e0 <UART_SetConfig+0x21c>
 8005294:	4b3e      	ldr	r3, [pc, #248]	; (8005390 <UART_SetConfig+0x2cc>)
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a2:	d017      	beq.n	80052d4 <UART_SetConfig+0x210>
 80052a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a8:	d817      	bhi.n	80052da <UART_SetConfig+0x216>
 80052aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ae:	d00b      	beq.n	80052c8 <UART_SetConfig+0x204>
 80052b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b4:	d811      	bhi.n	80052da <UART_SetConfig+0x216>
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <UART_SetConfig+0x1fe>
 80052ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052be:	d006      	beq.n	80052ce <UART_SetConfig+0x20a>
 80052c0:	e00b      	b.n	80052da <UART_SetConfig+0x216>
 80052c2:	2300      	movs	r3, #0
 80052c4:	77fb      	strb	r3, [r7, #31]
 80052c6:	e0a1      	b.n	800540c <UART_SetConfig+0x348>
 80052c8:	2302      	movs	r3, #2
 80052ca:	77fb      	strb	r3, [r7, #31]
 80052cc:	e09e      	b.n	800540c <UART_SetConfig+0x348>
 80052ce:	2304      	movs	r3, #4
 80052d0:	77fb      	strb	r3, [r7, #31]
 80052d2:	e09b      	b.n	800540c <UART_SetConfig+0x348>
 80052d4:	2308      	movs	r3, #8
 80052d6:	77fb      	strb	r3, [r7, #31]
 80052d8:	e098      	b.n	800540c <UART_SetConfig+0x348>
 80052da:	2310      	movs	r3, #16
 80052dc:	77fb      	strb	r3, [r7, #31]
 80052de:	e095      	b.n	800540c <UART_SetConfig+0x348>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a2f      	ldr	r2, [pc, #188]	; (80053a4 <UART_SetConfig+0x2e0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d125      	bne.n	8005336 <UART_SetConfig+0x272>
 80052ea:	4b29      	ldr	r3, [pc, #164]	; (8005390 <UART_SetConfig+0x2cc>)
 80052ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052f8:	d017      	beq.n	800532a <UART_SetConfig+0x266>
 80052fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052fe:	d817      	bhi.n	8005330 <UART_SetConfig+0x26c>
 8005300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005304:	d00b      	beq.n	800531e <UART_SetConfig+0x25a>
 8005306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530a:	d811      	bhi.n	8005330 <UART_SetConfig+0x26c>
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <UART_SetConfig+0x254>
 8005310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005314:	d006      	beq.n	8005324 <UART_SetConfig+0x260>
 8005316:	e00b      	b.n	8005330 <UART_SetConfig+0x26c>
 8005318:	2301      	movs	r3, #1
 800531a:	77fb      	strb	r3, [r7, #31]
 800531c:	e076      	b.n	800540c <UART_SetConfig+0x348>
 800531e:	2302      	movs	r3, #2
 8005320:	77fb      	strb	r3, [r7, #31]
 8005322:	e073      	b.n	800540c <UART_SetConfig+0x348>
 8005324:	2304      	movs	r3, #4
 8005326:	77fb      	strb	r3, [r7, #31]
 8005328:	e070      	b.n	800540c <UART_SetConfig+0x348>
 800532a:	2308      	movs	r3, #8
 800532c:	77fb      	strb	r3, [r7, #31]
 800532e:	e06d      	b.n	800540c <UART_SetConfig+0x348>
 8005330:	2310      	movs	r3, #16
 8005332:	77fb      	strb	r3, [r7, #31]
 8005334:	e06a      	b.n	800540c <UART_SetConfig+0x348>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <UART_SetConfig+0x2e4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d138      	bne.n	80053b2 <UART_SetConfig+0x2ee>
 8005340:	4b13      	ldr	r3, [pc, #76]	; (8005390 <UART_SetConfig+0x2cc>)
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005346:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800534a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800534e:	d017      	beq.n	8005380 <UART_SetConfig+0x2bc>
 8005350:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005354:	d82a      	bhi.n	80053ac <UART_SetConfig+0x2e8>
 8005356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800535a:	d00b      	beq.n	8005374 <UART_SetConfig+0x2b0>
 800535c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005360:	d824      	bhi.n	80053ac <UART_SetConfig+0x2e8>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <UART_SetConfig+0x2aa>
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536a:	d006      	beq.n	800537a <UART_SetConfig+0x2b6>
 800536c:	e01e      	b.n	80053ac <UART_SetConfig+0x2e8>
 800536e:	2300      	movs	r3, #0
 8005370:	77fb      	strb	r3, [r7, #31]
 8005372:	e04b      	b.n	800540c <UART_SetConfig+0x348>
 8005374:	2302      	movs	r3, #2
 8005376:	77fb      	strb	r3, [r7, #31]
 8005378:	e048      	b.n	800540c <UART_SetConfig+0x348>
 800537a:	2304      	movs	r3, #4
 800537c:	77fb      	strb	r3, [r7, #31]
 800537e:	e045      	b.n	800540c <UART_SetConfig+0x348>
 8005380:	2308      	movs	r3, #8
 8005382:	77fb      	strb	r3, [r7, #31]
 8005384:	e042      	b.n	800540c <UART_SetConfig+0x348>
 8005386:	bf00      	nop
 8005388:	efff69f3 	.word	0xefff69f3
 800538c:	40011000 	.word	0x40011000
 8005390:	40023800 	.word	0x40023800
 8005394:	40004400 	.word	0x40004400
 8005398:	40004800 	.word	0x40004800
 800539c:	40004c00 	.word	0x40004c00
 80053a0:	40005000 	.word	0x40005000
 80053a4:	40011400 	.word	0x40011400
 80053a8:	40007800 	.word	0x40007800
 80053ac:	2310      	movs	r3, #16
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e02c      	b.n	800540c <UART_SetConfig+0x348>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a72      	ldr	r2, [pc, #456]	; (8005580 <UART_SetConfig+0x4bc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d125      	bne.n	8005408 <UART_SetConfig+0x344>
 80053bc:	4b71      	ldr	r3, [pc, #452]	; (8005584 <UART_SetConfig+0x4c0>)
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053ca:	d017      	beq.n	80053fc <UART_SetConfig+0x338>
 80053cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053d0:	d817      	bhi.n	8005402 <UART_SetConfig+0x33e>
 80053d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d6:	d00b      	beq.n	80053f0 <UART_SetConfig+0x32c>
 80053d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053dc:	d811      	bhi.n	8005402 <UART_SetConfig+0x33e>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <UART_SetConfig+0x326>
 80053e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053e6:	d006      	beq.n	80053f6 <UART_SetConfig+0x332>
 80053e8:	e00b      	b.n	8005402 <UART_SetConfig+0x33e>
 80053ea:	2300      	movs	r3, #0
 80053ec:	77fb      	strb	r3, [r7, #31]
 80053ee:	e00d      	b.n	800540c <UART_SetConfig+0x348>
 80053f0:	2302      	movs	r3, #2
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e00a      	b.n	800540c <UART_SetConfig+0x348>
 80053f6:	2304      	movs	r3, #4
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e007      	b.n	800540c <UART_SetConfig+0x348>
 80053fc:	2308      	movs	r3, #8
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e004      	b.n	800540c <UART_SetConfig+0x348>
 8005402:	2310      	movs	r3, #16
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e001      	b.n	800540c <UART_SetConfig+0x348>
 8005408:	2310      	movs	r3, #16
 800540a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005414:	d15b      	bne.n	80054ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005416:	7ffb      	ldrb	r3, [r7, #31]
 8005418:	2b08      	cmp	r3, #8
 800541a:	d828      	bhi.n	800546e <UART_SetConfig+0x3aa>
 800541c:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <UART_SetConfig+0x360>)
 800541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005422:	bf00      	nop
 8005424:	08005449 	.word	0x08005449
 8005428:	08005451 	.word	0x08005451
 800542c:	08005459 	.word	0x08005459
 8005430:	0800546f 	.word	0x0800546f
 8005434:	0800545f 	.word	0x0800545f
 8005438:	0800546f 	.word	0x0800546f
 800543c:	0800546f 	.word	0x0800546f
 8005440:	0800546f 	.word	0x0800546f
 8005444:	08005467 	.word	0x08005467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005448:	f7fd ffe8 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 800544c:	61b8      	str	r0, [r7, #24]
        break;
 800544e:	e013      	b.n	8005478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005450:	f7fd fff8 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 8005454:	61b8      	str	r0, [r7, #24]
        break;
 8005456:	e00f      	b.n	8005478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005458:	4b4b      	ldr	r3, [pc, #300]	; (8005588 <UART_SetConfig+0x4c4>)
 800545a:	61bb      	str	r3, [r7, #24]
        break;
 800545c:	e00c      	b.n	8005478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800545e:	f7fd fecb 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 8005462:	61b8      	str	r0, [r7, #24]
        break;
 8005464:	e008      	b.n	8005478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800546a:	61bb      	str	r3, [r7, #24]
        break;
 800546c:	e004      	b.n	8005478 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	77bb      	strb	r3, [r7, #30]
        break;
 8005476:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d074      	beq.n	8005568 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	005a      	lsls	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	441a      	add	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005492:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2b0f      	cmp	r3, #15
 8005498:	d916      	bls.n	80054c8 <UART_SetConfig+0x404>
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d212      	bcs.n	80054c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f023 030f 	bic.w	r3, r3, #15
 80054aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	085b      	lsrs	r3, r3, #1
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	89fb      	ldrh	r3, [r7, #14]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	89fa      	ldrh	r2, [r7, #14]
 80054c4:	60da      	str	r2, [r3, #12]
 80054c6:	e04f      	b.n	8005568 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	77bb      	strb	r3, [r7, #30]
 80054cc:	e04c      	b.n	8005568 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054ce:	7ffb      	ldrb	r3, [r7, #31]
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d828      	bhi.n	8005526 <UART_SetConfig+0x462>
 80054d4:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <UART_SetConfig+0x418>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	08005501 	.word	0x08005501
 80054e0:	08005509 	.word	0x08005509
 80054e4:	08005511 	.word	0x08005511
 80054e8:	08005527 	.word	0x08005527
 80054ec:	08005517 	.word	0x08005517
 80054f0:	08005527 	.word	0x08005527
 80054f4:	08005527 	.word	0x08005527
 80054f8:	08005527 	.word	0x08005527
 80054fc:	0800551f 	.word	0x0800551f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005500:	f7fd ff8c 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8005504:	61b8      	str	r0, [r7, #24]
        break;
 8005506:	e013      	b.n	8005530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005508:	f7fd ff9c 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 800550c:	61b8      	str	r0, [r7, #24]
        break;
 800550e:	e00f      	b.n	8005530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005510:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <UART_SetConfig+0x4c4>)
 8005512:	61bb      	str	r3, [r7, #24]
        break;
 8005514:	e00c      	b.n	8005530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005516:	f7fd fe6f 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 800551a:	61b8      	str	r0, [r7, #24]
        break;
 800551c:	e008      	b.n	8005530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800551e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005522:	61bb      	str	r3, [r7, #24]
        break;
 8005524:	e004      	b.n	8005530 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	77bb      	strb	r3, [r7, #30]
        break;
 800552e:	bf00      	nop
    }

    if (pclk != 0U)
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d018      	beq.n	8005568 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	085a      	lsrs	r2, r3, #1
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	441a      	add	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	2b0f      	cmp	r3, #15
 800554e:	d909      	bls.n	8005564 <UART_SetConfig+0x4a0>
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005556:	d205      	bcs.n	8005564 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	b29a      	uxth	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	60da      	str	r2, [r3, #12]
 8005562:	e001      	b.n	8005568 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005574:	7fbb      	ldrb	r3, [r7, #30]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3720      	adds	r7, #32
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40007c00 	.word	0x40007c00
 8005584:	40023800 	.word	0x40023800
 8005588:	00f42400 	.word	0x00f42400

0800558c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01a      	beq.n	80056a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800568a:	d10a      	bne.n	80056a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	605a      	str	r2, [r3, #4]
  }
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af02      	add	r7, sp, #8
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056e0:	f7fb fe92 	bl	8001408 <HAL_GetTick>
 80056e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d10e      	bne.n	8005712 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f81b 	bl	800573e <UART_WaitOnFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e011      	b.n	8005736 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b09c      	sub	sp, #112	; 0x70
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	603b      	str	r3, [r7, #0]
 800574a:	4613      	mov	r3, r2
 800574c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800574e:	e0a7      	b.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005756:	f000 80a3 	beq.w	80058a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575a:	f7fb fe55 	bl	8001408 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005766:	429a      	cmp	r2, r3
 8005768:	d302      	bcc.n	8005770 <UART_WaitOnFlagUntilTimeout+0x32>
 800576a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800576c:	2b00      	cmp	r3, #0
 800576e:	d13f      	bne.n	80057f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800577e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005780:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005784:	667b      	str	r3, [r7, #100]	; 0x64
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005790:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005794:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800579c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e6      	bne.n	8005770 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3308      	adds	r3, #8
 80057a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ac:	e853 3f00 	ldrex	r3, [r3]
 80057b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	f023 0301 	bic.w	r3, r3, #1
 80057b8:	663b      	str	r3, [r7, #96]	; 0x60
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3308      	adds	r3, #8
 80057c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80057c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e5      	bne.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2220      	movs	r2, #32
 80057da:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e068      	b.n	80058c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d050      	beq.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800580c:	d148      	bne.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005816:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	e853 3f00 	ldrex	r3, [r3]
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800582c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
 8005838:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800583c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e6      	bne.n	8005818 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3308      	adds	r3, #8
 8005850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	613b      	str	r3, [r7, #16]
   return(result);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	66bb      	str	r3, [r7, #104]	; 0x68
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3308      	adds	r3, #8
 8005868:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800586a:	623a      	str	r2, [r7, #32]
 800586c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	69f9      	ldr	r1, [r7, #28]
 8005870:	6a3a      	ldr	r2, [r7, #32]
 8005872:	e841 2300 	strex	r3, r2, [r1]
 8005876:	61bb      	str	r3, [r7, #24]
   return(result);
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e5      	bne.n	800584a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e010      	b.n	80058c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	69da      	ldr	r2, [r3, #28]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4013      	ands	r3, r2
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	bf0c      	ite	eq
 80058b0:	2301      	moveq	r3, #1
 80058b2:	2300      	movne	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	f43f af48 	beq.w	8005750 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3770      	adds	r7, #112	; 0x70
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058cc:	b084      	sub	sp, #16
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	f107 001c 	add.w	r0, r7, #28
 80058da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d120      	bne.n	8005926 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	4b20      	ldr	r3, [pc, #128]	; (8005978 <USB_CoreInit+0xac>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d105      	bne.n	800591a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fa96 	bl	8005e4c <USB_CoreReset>
 8005920:	4603      	mov	r3, r0
 8005922:	73fb      	strb	r3, [r7, #15]
 8005924:	e010      	b.n	8005948 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fa8a 	bl	8005e4c <USB_CoreReset>
 8005938:	4603      	mov	r3, r0
 800593a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	2b01      	cmp	r3, #1
 800594c:	d10b      	bne.n	8005966 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f043 0206 	orr.w	r2, r3, #6
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f043 0220 	orr.w	r2, r3, #32
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005972:	b004      	add	sp, #16
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	ffbdffbf 	.word	0xffbdffbf

0800597c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f023 0201 	bic.w	r2, r3, #1
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	460b      	mov	r3, r1
 80059a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d115      	bne.n	80059ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059cc:	2001      	movs	r0, #1
 80059ce:	f7fb fd27 	bl	8001420 <HAL_Delay>
      ms++;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3301      	adds	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fa29 	bl	8005e30 <USB_GetMode>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d01e      	beq.n	8005a22 <USB_SetCurrentMode+0x84>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b31      	cmp	r3, #49	; 0x31
 80059e8:	d9f0      	bls.n	80059cc <USB_SetCurrentMode+0x2e>
 80059ea:	e01a      	b.n	8005a22 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059ec:	78fb      	ldrb	r3, [r7, #3]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d115      	bne.n	8005a1e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059fe:	2001      	movs	r0, #1
 8005a00:	f7fb fd0e 	bl	8001420 <HAL_Delay>
      ms++;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3301      	adds	r3, #1
 8005a08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fa10 	bl	8005e30 <USB_GetMode>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <USB_SetCurrentMode+0x84>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b31      	cmp	r3, #49	; 0x31
 8005a1a:	d9f0      	bls.n	80059fe <USB_SetCurrentMode+0x60>
 8005a1c:	e001      	b.n	8005a22 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e005      	b.n	8005a2e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b32      	cmp	r3, #50	; 0x32
 8005a26:	d101      	bne.n	8005a2c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e000      	b.n	8005a2e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a38:	b084      	sub	sp, #16
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b086      	sub	sp, #24
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a52:	2300      	movs	r3, #0
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	e009      	b.n	8005a6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	3340      	adds	r3, #64	; 0x40
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	2200      	movs	r2, #0
 8005a64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b0e      	cmp	r3, #14
 8005a70:	d9f2      	bls.n	8005a58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d11c      	bne.n	8005ab2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a86:	f043 0302 	orr.w	r3, r3, #2
 8005a8a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	e005      	b.n	8005abe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad8:	461a      	mov	r2, r3
 8005ada:	680b      	ldr	r3, [r1, #0]
 8005adc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d10c      	bne.n	8005afe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d104      	bne.n	8005af4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005aea:	2100      	movs	r1, #0
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f965 	bl	8005dbc <USB_SetDevSpeed>
 8005af2:	e008      	b.n	8005b06 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005af4:	2101      	movs	r1, #1
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f960 	bl	8005dbc <USB_SetDevSpeed>
 8005afc:	e003      	b.n	8005b06 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005afe:	2103      	movs	r1, #3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f95b 	bl	8005dbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b06:	2110      	movs	r1, #16
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f8f3 	bl	8005cf4 <USB_FlushTxFifo>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f91f 	bl	8005d5c <USB_FlushRxFifo>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2e:	461a      	mov	r2, r3
 8005b30:	2300      	movs	r3, #0
 8005b32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b46:	461a      	mov	r2, r3
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	e043      	b.n	8005bda <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b68:	d118      	bne.n	8005b9c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	e013      	b.n	8005bae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	461a      	mov	r2, r3
 8005b94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	e008      	b.n	8005bae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba8:	461a      	mov	r2, r3
 8005baa:	2300      	movs	r3, #0
 8005bac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bba:	461a      	mov	r2, r3
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	613b      	str	r3, [r7, #16]
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d3b7      	bcc.n	8005b52 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005be2:	2300      	movs	r3, #0
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	e043      	b.n	8005c70 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bfe:	d118      	bne.n	8005c32 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c12:	461a      	mov	r2, r3
 8005c14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	e013      	b.n	8005c44 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c28:	461a      	mov	r2, r3
 8005c2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	e008      	b.n	8005c44 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3e:	461a      	mov	r2, r3
 8005c40:	2300      	movs	r3, #0
 8005c42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c50:	461a      	mov	r2, r3
 8005c52:	2300      	movs	r3, #0
 8005c54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	461a      	mov	r2, r3
 8005c64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d3b7      	bcc.n	8005be8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d105      	bne.n	8005cac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	f043 0210 	orr.w	r2, r3, #16
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699a      	ldr	r2, [r3, #24]
 8005cb0:	4b0e      	ldr	r3, [pc, #56]	; (8005cec <USB_DevInit+0x2b4>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f043 0208 	orr.w	r2, r3, #8
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d105      	bne.n	8005cdc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699a      	ldr	r2, [r3, #24]
 8005cd4:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <USB_DevInit+0x2b8>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ce8:	b004      	add	sp, #16
 8005cea:	4770      	bx	lr
 8005cec:	803c3800 	.word	0x803c3800
 8005cf0:	40000004 	.word	0x40000004

08005cf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3301      	adds	r3, #1
 8005d06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4a13      	ldr	r2, [pc, #76]	; (8005d58 <USB_FlushTxFifo+0x64>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d901      	bls.n	8005d14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e01b      	b.n	8005d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	daf2      	bge.n	8005d02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	019b      	lsls	r3, r3, #6
 8005d24:	f043 0220 	orr.w	r2, r3, #32
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4a08      	ldr	r2, [pc, #32]	; (8005d58 <USB_FlushTxFifo+0x64>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d901      	bls.n	8005d3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e006      	b.n	8005d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	d0f0      	beq.n	8005d2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	00030d40 	.word	0x00030d40

08005d5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4a11      	ldr	r2, [pc, #68]	; (8005db8 <USB_FlushRxFifo+0x5c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d901      	bls.n	8005d7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e018      	b.n	8005dac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	daf2      	bge.n	8005d68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2210      	movs	r2, #16
 8005d8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4a08      	ldr	r2, [pc, #32]	; (8005db8 <USB_FlushRxFifo+0x5c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e006      	b.n	8005dac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0310 	and.w	r3, r3, #16
 8005da6:	2b10      	cmp	r3, #16
 8005da8:	d0f0      	beq.n	8005d8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	00030d40 	.word	0x00030d40

08005dbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	68f9      	ldr	r1, [r7, #12]
 8005dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e08:	f023 0303 	bic.w	r3, r3, #3
 8005e0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e1c:	f043 0302 	orr.w	r3, r3, #2
 8005e20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4a13      	ldr	r2, [pc, #76]	; (8005eb0 <USB_CoreReset+0x64>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d901      	bls.n	8005e6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e01b      	b.n	8005ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	daf2      	bge.n	8005e58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f043 0201 	orr.w	r2, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3301      	adds	r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4a09      	ldr	r2, [pc, #36]	; (8005eb0 <USB_CoreReset+0x64>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d901      	bls.n	8005e94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e006      	b.n	8005ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d0f0      	beq.n	8005e82 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	00030d40 	.word	0x00030d40

08005eb4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ec6:	2b84      	cmp	r3, #132	; 0x84
 8005ec8:	d005      	beq.n	8005ed6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005eca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	3303      	adds	r3, #3
 8005ed4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eea:	f3ef 8305 	mrs	r3, IPSR
 8005eee:	607b      	str	r3, [r7, #4]
  return(result);
 8005ef0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bf14      	ite	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	2300      	moveq	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005f0c:	f001 f936 	bl	800717c <vTaskStartScheduler>
  
  return osOK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005f16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f18:	b089      	sub	sp, #36	; 0x24
 8005f1a:	af04      	add	r7, sp, #16
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d020      	beq.n	8005f6a <osThreadCreate+0x54>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01c      	beq.n	8005f6a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685c      	ldr	r4, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691e      	ldr	r6, [r3, #16]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff ffb6 	bl	8005eb4 <makeFreeRtosPriority>
 8005f48:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f52:	9202      	str	r2, [sp, #8]
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	9100      	str	r1, [sp, #0]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	4632      	mov	r2, r6
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f000 ff3a 	bl	8006dd8 <xTaskCreateStatic>
 8005f64:	4603      	mov	r3, r0
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e01c      	b.n	8005fa4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685c      	ldr	r4, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f76:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff ff98 	bl	8005eb4 <makeFreeRtosPriority>
 8005f84:	4602      	mov	r2, r0
 8005f86:	f107 030c 	add.w	r3, r7, #12
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	9200      	str	r2, [sp, #0]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	4632      	mov	r2, r6
 8005f92:	4629      	mov	r1, r5
 8005f94:	4620      	mov	r0, r4
 8005f96:	f000 ff82 	bl	8006e9e <xTaskCreate>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d001      	beq.n	8005fa4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e000      	b.n	8005fa6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <osDelay+0x16>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	e000      	b.n	8005fc6 <osDelay+0x18>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f001 f8a2 	bl	8007110 <vTaskDelay>
  
  return osOK;
 8005fcc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005fd6:	b590      	push	{r4, r7, lr}
 8005fd8:	b085      	sub	sp, #20
 8005fda:	af02      	add	r7, sp, #8
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d011      	beq.n	800600c <osMessageCreate+0x36>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00d      	beq.n	800600c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6859      	ldr	r1, [r3, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	2400      	movs	r4, #0
 8006002:	9400      	str	r4, [sp, #0]
 8006004:	f000 f9e2 	bl	80063cc <xQueueGenericCreateStatic>
 8006008:	4603      	mov	r3, r0
 800600a:	e008      	b.n	800601e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	4619      	mov	r1, r3
 8006018:	f000 fa5a 	bl	80064d0 <xQueueGenericCreate>
 800601c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	bd90      	pop	{r4, r7, pc}
	...

08006028 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006034:	2300      	movs	r3, #0
 8006036:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <osMessagePut+0x1e>
    ticks = 1;
 8006042:	2301      	movs	r3, #1
 8006044:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006046:	f7ff ff4d 	bl	8005ee4 <inHandlerMode>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d018      	beq.n	8006082 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006050:	f107 0210 	add.w	r2, r7, #16
 8006054:	f107 0108 	add.w	r1, r7, #8
 8006058:	2300      	movs	r3, #0
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 fba0 	bl	80067a0 <xQueueGenericSendFromISR>
 8006060:	4603      	mov	r3, r0
 8006062:	2b01      	cmp	r3, #1
 8006064:	d001      	beq.n	800606a <osMessagePut+0x42>
      return osErrorOS;
 8006066:	23ff      	movs	r3, #255	; 0xff
 8006068:	e018      	b.n	800609c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d014      	beq.n	800609a <osMessagePut+0x72>
 8006070:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <osMessagePut+0x7c>)
 8006072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	e00b      	b.n	800609a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006082:	f107 0108 	add.w	r1, r7, #8
 8006086:	2300      	movs	r3, #0
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 fa82 	bl	8006594 <xQueueGenericSend>
 8006090:	4603      	mov	r3, r0
 8006092:	2b01      	cmp	r3, #1
 8006094:	d001      	beq.n	800609a <osMessagePut+0x72>
      return osErrorOS;
 8006096:	23ff      	movs	r3, #255	; 0xff
 8006098:	e000      	b.n	800609c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	e000ed04 	.word	0xe000ed04

080060a8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80060a8:	b590      	push	{r4, r7, lr}
 80060aa:	b08b      	sub	sp, #44	; 0x2c
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10a      	bne.n	80060d8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	617b      	str	r3, [r7, #20]
    return event;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	461c      	mov	r4, r3
 80060ca:	f107 0314 	add.w	r3, r7, #20
 80060ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060d6:	e054      	b.n	8006182 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80060d8:	2300      	movs	r3, #0
 80060da:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e6:	d103      	bne.n	80060f0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80060e8:	f04f 33ff 	mov.w	r3, #4294967295
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
 80060ee:	e009      	b.n	8006104 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d006      	beq.n	8006104 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <osMessageGet+0x5c>
      ticks = 1;
 8006100:	2301      	movs	r3, #1
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006104:	f7ff feee 	bl	8005ee4 <inHandlerMode>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01c      	beq.n	8006148 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800610e:	f107 0220 	add.w	r2, r7, #32
 8006112:	f107 0314 	add.w	r3, r7, #20
 8006116:	3304      	adds	r3, #4
 8006118:	4619      	mov	r1, r3
 800611a:	68b8      	ldr	r0, [r7, #8]
 800611c:	f000 fcc6 	bl	8006aac <xQueueReceiveFromISR>
 8006120:	4603      	mov	r3, r0
 8006122:	2b01      	cmp	r3, #1
 8006124:	d102      	bne.n	800612c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006126:	2310      	movs	r3, #16
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	e001      	b.n	8006130 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800612c:	2300      	movs	r3, #0
 800612e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01d      	beq.n	8006172 <osMessageGet+0xca>
 8006136:	4b15      	ldr	r3, [pc, #84]	; (800618c <osMessageGet+0xe4>)
 8006138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	e014      	b.n	8006172 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006148:	f107 0314 	add.w	r3, r7, #20
 800614c:	3304      	adds	r3, #4
 800614e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006150:	4619      	mov	r1, r3
 8006152:	68b8      	ldr	r0, [r7, #8]
 8006154:	f000 fbc4 	bl	80068e0 <xQueueReceive>
 8006158:	4603      	mov	r3, r0
 800615a:	2b01      	cmp	r3, #1
 800615c:	d102      	bne.n	8006164 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800615e:	2310      	movs	r3, #16
 8006160:	617b      	str	r3, [r7, #20]
 8006162:	e006      	b.n	8006172 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <osMessageGet+0xc6>
 800616a:	2300      	movs	r3, #0
 800616c:	e000      	b.n	8006170 <osMessageGet+0xc8>
 800616e:	2340      	movs	r3, #64	; 0x40
 8006170:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	461c      	mov	r4, r3
 8006176:	f107 0314 	add.w	r3, r7, #20
 800617a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800617e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	372c      	adds	r7, #44	; 0x2c
 8006186:	46bd      	mov	sp, r7
 8006188:	bd90      	pop	{r4, r7, pc}
 800618a:	bf00      	nop
 800618c:	e000ed04 	.word	0xe000ed04

08006190 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f103 0208 	add.w	r2, r3, #8
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f04f 32ff 	mov.w	r2, #4294967295
 80061a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f103 0208 	add.w	r2, r3, #8
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f103 0208 	add.w	r2, r3, #8
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061ea:	b480      	push	{r7}
 80061ec:	b085      	sub	sp, #20
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
}
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006232:	b480      	push	{r7}
 8006234:	b085      	sub	sp, #20
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d103      	bne.n	8006252 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	e00c      	b.n	800626c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3308      	adds	r3, #8
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e002      	b.n	8006260 <vListInsert+0x2e>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	429a      	cmp	r2, r3
 800626a:	d2f6      	bcs.n	800625a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	601a      	str	r2, [r3, #0]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6892      	ldr	r2, [r2, #8]
 80062ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6852      	ldr	r2, [r2, #4]
 80062c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d103      	bne.n	80062d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	1e5a      	subs	r2, r3, #1
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10c      	bne.n	8006326 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	b672      	cpsid	i
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	b662      	cpsie	i
 8006320:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006326:	f001 fd59 	bl	8007ddc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006332:	68f9      	ldr	r1, [r7, #12]
 8006334:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006336:	fb01 f303 	mul.w	r3, r1, r3
 800633a:	441a      	add	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006356:	3b01      	subs	r3, #1
 8006358:	68f9      	ldr	r1, [r7, #12]
 800635a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	441a      	add	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	22ff      	movs	r2, #255	; 0xff
 800636a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	22ff      	movs	r2, #255	; 0xff
 8006372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d114      	bne.n	80063a6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01a      	beq.n	80063ba <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3310      	adds	r3, #16
 8006388:	4618      	mov	r0, r3
 800638a:	f001 f945 	bl	8007618 <xTaskRemoveFromEventList>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d012      	beq.n	80063ba <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006394:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <xQueueGenericReset+0xd0>)
 8006396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	e009      	b.n	80063ba <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3310      	adds	r3, #16
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7ff fef0 	bl	8006190 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3324      	adds	r3, #36	; 0x24
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff feeb 	bl	8006190 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063ba:	f001 fd43 	bl	8007e44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80063be:	2301      	movs	r3, #1
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08e      	sub	sp, #56	; 0x38
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10c      	bne.n	80063fa <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	b672      	cpsid	i
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	b662      	cpsie	i
 80063f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10c      	bne.n	800641a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	b672      	cpsid	i
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	b662      	cpsie	i
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <xQueueGenericCreateStatic+0x5a>
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <xQueueGenericCreateStatic+0x5e>
 8006426:	2301      	movs	r3, #1
 8006428:	e000      	b.n	800642c <xQueueGenericCreateStatic+0x60>
 800642a:	2300      	movs	r3, #0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10c      	bne.n	800644a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	b672      	cpsid	i
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	b662      	cpsie	i
 8006444:	623b      	str	r3, [r7, #32]
}
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d102      	bne.n	8006456 <xQueueGenericCreateStatic+0x8a>
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <xQueueGenericCreateStatic+0x8e>
 8006456:	2301      	movs	r3, #1
 8006458:	e000      	b.n	800645c <xQueueGenericCreateStatic+0x90>
 800645a:	2300      	movs	r3, #0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10c      	bne.n	800647a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	b672      	cpsid	i
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	b662      	cpsie	i
 8006474:	61fb      	str	r3, [r7, #28]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800647a:	2348      	movs	r3, #72	; 0x48
 800647c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b48      	cmp	r3, #72	; 0x48
 8006482:	d00c      	beq.n	800649e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	b672      	cpsid	i
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	b662      	cpsie	i
 8006498:	61bb      	str	r3, [r7, #24]
}
 800649a:	bf00      	nop
 800649c:	e7fe      	b.n	800649c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800649e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00d      	beq.n	80064c6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	4613      	mov	r3, r2
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f847 	bl	8006554 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3730      	adds	r7, #48	; 0x30
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	; 0x28
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	4613      	mov	r3, r2
 80064dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10c      	bne.n	80064fe <xQueueGenericCreate+0x2e>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	b672      	cpsid	i
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	b662      	cpsie	i
 80064f8:	613b      	str	r3, [r7, #16]
}
 80064fa:	bf00      	nop
 80064fc:	e7fe      	b.n	80064fc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d102      	bne.n	800650a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006504:	2300      	movs	r3, #0
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	e004      	b.n	8006514 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	fb02 f303 	mul.w	r3, r2, r3
 8006512:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	3348      	adds	r3, #72	; 0x48
 8006518:	4618      	mov	r0, r3
 800651a:	f001 fd8b 	bl	8008034 <pvPortMalloc>
 800651e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d011      	beq.n	800654a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	3348      	adds	r3, #72	; 0x48
 800652e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006538:	79fa      	ldrb	r2, [r7, #7]
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	4613      	mov	r3, r2
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f805 	bl	8006554 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800654a:	69bb      	ldr	r3, [r7, #24]
	}
 800654c:	4618      	mov	r0, r3
 800654e:	3720      	adds	r7, #32
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d103      	bne.n	8006570 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	e002      	b.n	8006576 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006582:	2101      	movs	r1, #1
 8006584:	69b8      	ldr	r0, [r7, #24]
 8006586:	f7ff feb7 	bl	80062f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08e      	sub	sp, #56	; 0x38
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80065a2:	2300      	movs	r3, #0
 80065a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10c      	bne.n	80065ca <xQueueGenericSend+0x36>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	b672      	cpsid	i
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	b662      	cpsie	i
 80065c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d103      	bne.n	80065d8 <xQueueGenericSend+0x44>
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <xQueueGenericSend+0x48>
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <xQueueGenericSend+0x4a>
 80065dc:	2300      	movs	r3, #0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10c      	bne.n	80065fc <xQueueGenericSend+0x68>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e6:	b672      	cpsid	i
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	b662      	cpsie	i
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065f8:	bf00      	nop
 80065fa:	e7fe      	b.n	80065fa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d103      	bne.n	800660a <xQueueGenericSend+0x76>
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <xQueueGenericSend+0x7a>
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <xQueueGenericSend+0x7c>
 800660e:	2300      	movs	r3, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10c      	bne.n	800662e <xQueueGenericSend+0x9a>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	b672      	cpsid	i
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	b662      	cpsie	i
 8006628:	623b      	str	r3, [r7, #32]
}
 800662a:	bf00      	nop
 800662c:	e7fe      	b.n	800662c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800662e:	f001 f9b7 	bl	80079a0 <xTaskGetSchedulerState>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d102      	bne.n	800663e <xQueueGenericSend+0xaa>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <xQueueGenericSend+0xae>
 800663e:	2301      	movs	r3, #1
 8006640:	e000      	b.n	8006644 <xQueueGenericSend+0xb0>
 8006642:	2300      	movs	r3, #0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10c      	bne.n	8006662 <xQueueGenericSend+0xce>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	b672      	cpsid	i
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	b662      	cpsie	i
 800665c:	61fb      	str	r3, [r7, #28]
}
 800665e:	bf00      	nop
 8006660:	e7fe      	b.n	8006660 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006662:	f001 fbbb 	bl	8007ddc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666e:	429a      	cmp	r2, r3
 8006670:	d302      	bcc.n	8006678 <xQueueGenericSend+0xe4>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d129      	bne.n	80066cc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	68b9      	ldr	r1, [r7, #8]
 800667c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800667e:	f000 fa9b 	bl	8006bb8 <prvCopyDataToQueue>
 8006682:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	d010      	beq.n	80066ae <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	3324      	adds	r3, #36	; 0x24
 8006690:	4618      	mov	r0, r3
 8006692:	f000 ffc1 	bl	8007618 <xTaskRemoveFromEventList>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d013      	beq.n	80066c4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800669c:	4b3f      	ldr	r3, [pc, #252]	; (800679c <xQueueGenericSend+0x208>)
 800669e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	e00a      	b.n	80066c4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d007      	beq.n	80066c4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80066b4:	4b39      	ldr	r3, [pc, #228]	; (800679c <xQueueGenericSend+0x208>)
 80066b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80066c4:	f001 fbbe 	bl	8007e44 <vPortExitCritical>
				return pdPASS;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e063      	b.n	8006794 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d103      	bne.n	80066da <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066d2:	f001 fbb7 	bl	8007e44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	e05c      	b.n	8006794 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d106      	bne.n	80066ee <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066e0:	f107 0314 	add.w	r3, r7, #20
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 fffb 	bl	80076e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066ea:	2301      	movs	r3, #1
 80066ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066ee:	f001 fba9 	bl	8007e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066f2:	f000 fda7 	bl	8007244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066f6:	f001 fb71 	bl	8007ddc <vPortEnterCritical>
 80066fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006700:	b25b      	sxtb	r3, r3
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006706:	d103      	bne.n	8006710 <xQueueGenericSend+0x17c>
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006716:	b25b      	sxtb	r3, r3
 8006718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671c:	d103      	bne.n	8006726 <xQueueGenericSend+0x192>
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006726:	f001 fb8d 	bl	8007e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800672a:	1d3a      	adds	r2, r7, #4
 800672c:	f107 0314 	add.w	r3, r7, #20
 8006730:	4611      	mov	r1, r2
 8006732:	4618      	mov	r0, r3
 8006734:	f000 ffea 	bl	800770c <xTaskCheckForTimeOut>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d124      	bne.n	8006788 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800673e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006740:	f000 fb32 	bl	8006da8 <prvIsQueueFull>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d018      	beq.n	800677c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	3310      	adds	r3, #16
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	4611      	mov	r1, r2
 8006752:	4618      	mov	r0, r3
 8006754:	f000 ff3a 	bl	80075cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800675a:	f000 fabd 	bl	8006cd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800675e:	f000 fd7f 	bl	8007260 <xTaskResumeAll>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	f47f af7c 	bne.w	8006662 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800676a:	4b0c      	ldr	r3, [pc, #48]	; (800679c <xQueueGenericSend+0x208>)
 800676c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	e772      	b.n	8006662 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800677c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800677e:	f000 faab 	bl	8006cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006782:	f000 fd6d 	bl	8007260 <xTaskResumeAll>
 8006786:	e76c      	b.n	8006662 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800678a:	f000 faa5 	bl	8006cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800678e:	f000 fd67 	bl	8007260 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006792:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006794:	4618      	mov	r0, r3
 8006796:	3738      	adds	r7, #56	; 0x38
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	e000ed04 	.word	0xe000ed04

080067a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08e      	sub	sp, #56	; 0x38
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10c      	bne.n	80067d2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	b672      	cpsid	i
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	b662      	cpsie	i
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d103      	bne.n	80067e0 <xQueueGenericSendFromISR+0x40>
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <xQueueGenericSendFromISR+0x44>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <xQueueGenericSendFromISR+0x46>
 80067e4:	2300      	movs	r3, #0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10c      	bne.n	8006804 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	b672      	cpsid	i
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	b662      	cpsie	i
 80067fe:	623b      	str	r3, [r7, #32]
}
 8006800:	bf00      	nop
 8006802:	e7fe      	b.n	8006802 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b02      	cmp	r3, #2
 8006808:	d103      	bne.n	8006812 <xQueueGenericSendFromISR+0x72>
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680e:	2b01      	cmp	r3, #1
 8006810:	d101      	bne.n	8006816 <xQueueGenericSendFromISR+0x76>
 8006812:	2301      	movs	r3, #1
 8006814:	e000      	b.n	8006818 <xQueueGenericSendFromISR+0x78>
 8006816:	2300      	movs	r3, #0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10c      	bne.n	8006836 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	b672      	cpsid	i
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	b662      	cpsie	i
 8006830:	61fb      	str	r3, [r7, #28]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006836:	f001 fbb9 	bl	8007fac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800683a:	f3ef 8211 	mrs	r2, BASEPRI
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	b672      	cpsid	i
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	b662      	cpsie	i
 8006852:	61ba      	str	r2, [r7, #24]
 8006854:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006856:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006858:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006862:	429a      	cmp	r2, r3
 8006864:	d302      	bcc.n	800686c <xQueueGenericSendFromISR+0xcc>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d12c      	bne.n	80068c6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800687c:	f000 f99c 	bl	8006bb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006880:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006888:	d112      	bne.n	80068b0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	2b00      	cmp	r3, #0
 8006890:	d016      	beq.n	80068c0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	3324      	adds	r3, #36	; 0x24
 8006896:	4618      	mov	r0, r3
 8006898:	f000 febe 	bl	8007618 <xTaskRemoveFromEventList>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00e      	beq.n	80068c0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00b      	beq.n	80068c0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	e007      	b.n	80068c0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80068b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068b4:	3301      	adds	r3, #1
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	b25a      	sxtb	r2, r3
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80068c0:	2301      	movs	r3, #1
 80068c2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80068c4:	e001      	b.n	80068ca <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80068c6:	2300      	movs	r3, #0
 80068c8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068cc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80068d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3738      	adds	r7, #56	; 0x38
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08c      	sub	sp, #48	; 0x30
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80068ec:	2300      	movs	r3, #0
 80068ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80068f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10c      	bne.n	8006914 <xQueueReceive+0x34>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	b672      	cpsid	i
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	b662      	cpsie	i
 800690e:	623b      	str	r3, [r7, #32]
}
 8006910:	bf00      	nop
 8006912:	e7fe      	b.n	8006912 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d103      	bne.n	8006922 <xQueueReceive+0x42>
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <xQueueReceive+0x46>
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <xQueueReceive+0x48>
 8006926:	2300      	movs	r3, #0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10c      	bne.n	8006946 <xQueueReceive+0x66>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	b672      	cpsid	i
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	b662      	cpsie	i
 8006940:	61fb      	str	r3, [r7, #28]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006946:	f001 f82b 	bl	80079a0 <xTaskGetSchedulerState>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d102      	bne.n	8006956 <xQueueReceive+0x76>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <xQueueReceive+0x7a>
 8006956:	2301      	movs	r3, #1
 8006958:	e000      	b.n	800695c <xQueueReceive+0x7c>
 800695a:	2300      	movs	r3, #0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10c      	bne.n	800697a <xQueueReceive+0x9a>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	b672      	cpsid	i
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	b662      	cpsie	i
 8006974:	61bb      	str	r3, [r7, #24]
}
 8006976:	bf00      	nop
 8006978:	e7fe      	b.n	8006978 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800697a:	f001 fa2f 	bl	8007ddc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	d01f      	beq.n	80069ca <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800698e:	f000 f97d 	bl	8006c8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	1e5a      	subs	r2, r3, #1
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00f      	beq.n	80069c2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	3310      	adds	r3, #16
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fe36 	bl	8007618 <xTaskRemoveFromEventList>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d007      	beq.n	80069c2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069b2:	4b3d      	ldr	r3, [pc, #244]	; (8006aa8 <xQueueReceive+0x1c8>)
 80069b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80069c2:	f001 fa3f 	bl	8007e44 <vPortExitCritical>
				return pdPASS;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e069      	b.n	8006a9e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d103      	bne.n	80069d8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069d0:	f001 fa38 	bl	8007e44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80069d4:	2300      	movs	r3, #0
 80069d6:	e062      	b.n	8006a9e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d106      	bne.n	80069ec <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069de:	f107 0310 	add.w	r3, r7, #16
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fe7c 	bl	80076e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069e8:	2301      	movs	r3, #1
 80069ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069ec:	f001 fa2a 	bl	8007e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069f0:	f000 fc28 	bl	8007244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069f4:	f001 f9f2 	bl	8007ddc <vPortEnterCritical>
 80069f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069fe:	b25b      	sxtb	r3, r3
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d103      	bne.n	8006a0e <xQueueReceive+0x12e>
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a14:	b25b      	sxtb	r3, r3
 8006a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1a:	d103      	bne.n	8006a24 <xQueueReceive+0x144>
 8006a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a24:	f001 fa0e 	bl	8007e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a28:	1d3a      	adds	r2, r7, #4
 8006a2a:	f107 0310 	add.w	r3, r7, #16
 8006a2e:	4611      	mov	r1, r2
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fe6b 	bl	800770c <xTaskCheckForTimeOut>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d123      	bne.n	8006a84 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a3e:	f000 f99d 	bl	8006d7c <prvIsQueueEmpty>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d017      	beq.n	8006a78 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	3324      	adds	r3, #36	; 0x24
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	4611      	mov	r1, r2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 fdbb 	bl	80075cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a58:	f000 f93e 	bl	8006cd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a5c:	f000 fc00 	bl	8007260 <xTaskResumeAll>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d189      	bne.n	800697a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006a66:	4b10      	ldr	r3, [pc, #64]	; (8006aa8 <xQueueReceive+0x1c8>)
 8006a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	e780      	b.n	800697a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a7a:	f000 f92d 	bl	8006cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a7e:	f000 fbef 	bl	8007260 <xTaskResumeAll>
 8006a82:	e77a      	b.n	800697a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a86:	f000 f927 	bl	8006cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a8a:	f000 fbe9 	bl	8007260 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a90:	f000 f974 	bl	8006d7c <prvIsQueueEmpty>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f43f af6f 	beq.w	800697a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3730      	adds	r7, #48	; 0x30
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	e000ed04 	.word	0xe000ed04

08006aac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08e      	sub	sp, #56	; 0x38
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10c      	bne.n	8006adc <xQueueReceiveFromISR+0x30>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	b672      	cpsid	i
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	b662      	cpsie	i
 8006ad6:	623b      	str	r3, [r7, #32]
}
 8006ad8:	bf00      	nop
 8006ada:	e7fe      	b.n	8006ada <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d103      	bne.n	8006aea <xQueueReceiveFromISR+0x3e>
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <xQueueReceiveFromISR+0x42>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e000      	b.n	8006af0 <xQueueReceiveFromISR+0x44>
 8006aee:	2300      	movs	r3, #0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10c      	bne.n	8006b0e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	b672      	cpsid	i
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	b662      	cpsie	i
 8006b08:	61fb      	str	r3, [r7, #28]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b0e:	f001 fa4d 	bl	8007fac <vPortValidateInterruptPriority>
	__asm volatile
 8006b12:	f3ef 8211 	mrs	r2, BASEPRI
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	b672      	cpsid	i
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	b662      	cpsie	i
 8006b2a:	61ba      	str	r2, [r7, #24]
 8006b2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006b2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d02f      	beq.n	8006b9e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b48:	68b9      	ldr	r1, [r7, #8]
 8006b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b4c:	f000 f89e 	bl	8006c8c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b52:	1e5a      	subs	r2, r3, #1
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006b58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b60:	d112      	bne.n	8006b88 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d016      	beq.n	8006b98 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	3310      	adds	r3, #16
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fd52 	bl	8007618 <xTaskRemoveFromEventList>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00e      	beq.n	8006b98 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00b      	beq.n	8006b98 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	e007      	b.n	8006b98 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	b25a      	sxtb	r2, r3
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b9c:	e001      	b.n	8006ba2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f383 8811 	msr	BASEPRI, r3
}
 8006bac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3738      	adds	r7, #56	; 0x38
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10d      	bne.n	8006bf2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d14d      	bne.n	8006c7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fefa 	bl	80079dc <xTaskPriorityDisinherit>
 8006be8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	609a      	str	r2, [r3, #8]
 8006bf0:	e043      	b.n	8006c7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d119      	bne.n	8006c2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6858      	ldr	r0, [r3, #4]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c00:	461a      	mov	r2, r3
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	f001 fc26 	bl	8008454 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	441a      	add	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d32b      	bcc.n	8006c7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	605a      	str	r2, [r3, #4]
 8006c2a:	e026      	b.n	8006c7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	68d8      	ldr	r0, [r3, #12]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	461a      	mov	r2, r3
 8006c36:	68b9      	ldr	r1, [r7, #8]
 8006c38:	f001 fc0c 	bl	8008454 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c44:	425b      	negs	r3, r3
 8006c46:	441a      	add	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	68da      	ldr	r2, [r3, #12]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d207      	bcs.n	8006c68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	425b      	negs	r3, r3
 8006c62:	441a      	add	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d105      	bne.n	8006c7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c82:	697b      	ldr	r3, [r7, #20]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d018      	beq.n	8006cd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	441a      	add	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d303      	bcc.n	8006cc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68d9      	ldr	r1, [r3, #12]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6838      	ldr	r0, [r7, #0]
 8006ccc:	f001 fbc2 	bl	8008454 <memcpy>
	}
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ce0:	f001 f87c 	bl	8007ddc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cec:	e011      	b.n	8006d12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d012      	beq.n	8006d1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	3324      	adds	r3, #36	; 0x24
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 fc8c 	bl	8007618 <xTaskRemoveFromEventList>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d06:	f000 fd67 	bl	80077d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	dce9      	bgt.n	8006cee <prvUnlockQueue+0x16>
 8006d1a:	e000      	b.n	8006d1e <prvUnlockQueue+0x46>
					break;
 8006d1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	22ff      	movs	r2, #255	; 0xff
 8006d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d26:	f001 f88d 	bl	8007e44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d2a:	f001 f857 	bl	8007ddc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d36:	e011      	b.n	8006d5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d012      	beq.n	8006d66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3310      	adds	r3, #16
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 fc67 	bl	8007618 <xTaskRemoveFromEventList>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d50:	f000 fd42 	bl	80077d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	dce9      	bgt.n	8006d38 <prvUnlockQueue+0x60>
 8006d64:	e000      	b.n	8006d68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	22ff      	movs	r2, #255	; 0xff
 8006d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d70:	f001 f868 	bl	8007e44 <vPortExitCritical>
}
 8006d74:	bf00      	nop
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d84:	f001 f82a 	bl	8007ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d102      	bne.n	8006d96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d90:	2301      	movs	r3, #1
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	e001      	b.n	8006d9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d9a:	f001 f853 	bl	8007e44 <vPortExitCritical>

	return xReturn;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006db0:	f001 f814 	bl	8007ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d102      	bne.n	8006dc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	e001      	b.n	8006dca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dca:	f001 f83b 	bl	8007e44 <vPortExitCritical>

	return xReturn;
 8006dce:	68fb      	ldr	r3, [r7, #12]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08e      	sub	sp, #56	; 0x38
 8006ddc:	af04      	add	r7, sp, #16
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10c      	bne.n	8006e06 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	b672      	cpsid	i
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	b662      	cpsie	i
 8006e00:	623b      	str	r3, [r7, #32]
}
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10c      	bne.n	8006e26 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e10:	b672      	cpsid	i
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	b662      	cpsie	i
 8006e20:	61fb      	str	r3, [r7, #28]
}
 8006e22:	bf00      	nop
 8006e24:	e7fe      	b.n	8006e24 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e26:	2354      	movs	r3, #84	; 0x54
 8006e28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	2b54      	cmp	r3, #84	; 0x54
 8006e2e:	d00c      	beq.n	8006e4a <xTaskCreateStatic+0x72>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	b672      	cpsid	i
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	b662      	cpsie	i
 8006e44:	61bb      	str	r3, [r7, #24]
}
 8006e46:	bf00      	nop
 8006e48:	e7fe      	b.n	8006e48 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01e      	beq.n	8006e90 <xTaskCreateStatic+0xb8>
 8006e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01b      	beq.n	8006e90 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	2202      	movs	r2, #2
 8006e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9303      	str	r3, [sp, #12]
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	9302      	str	r3, [sp, #8]
 8006e72:	f107 0314 	add.w	r3, r7, #20
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	68b9      	ldr	r1, [r7, #8]
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 f850 	bl	8006f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e8a:	f000 f8d7 	bl	800703c <prvAddNewTaskToReadyList>
 8006e8e:	e001      	b.n	8006e94 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e94:	697b      	ldr	r3, [r7, #20]
	}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3728      	adds	r7, #40	; 0x28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b08c      	sub	sp, #48	; 0x30
 8006ea2:	af04      	add	r7, sp, #16
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	603b      	str	r3, [r7, #0]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 f8be 	bl	8008034 <pvPortMalloc>
 8006eb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00e      	beq.n	8006ede <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ec0:	2054      	movs	r0, #84	; 0x54
 8006ec2:	f001 f8b7 	bl	8008034 <pvPortMalloc>
 8006ec6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ed4:	e005      	b.n	8006ee2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ed6:	6978      	ldr	r0, [r7, #20]
 8006ed8:	f001 f976 	bl	80081c8 <vPortFree>
 8006edc:	e001      	b.n	8006ee2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d017      	beq.n	8006f18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ef0:	88fa      	ldrh	r2, [r7, #6]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	9303      	str	r3, [sp, #12]
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	9302      	str	r3, [sp, #8]
 8006efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efc:	9301      	str	r3, [sp, #4]
 8006efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 f80e 	bl	8006f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f0c:	69f8      	ldr	r0, [r7, #28]
 8006f0e:	f000 f895 	bl	800703c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f12:	2301      	movs	r3, #1
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	e002      	b.n	8006f1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f18:	f04f 33ff 	mov.w	r3, #4294967295
 8006f1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f1e:	69bb      	ldr	r3, [r7, #24]
	}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3720      	adds	r7, #32
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006f40:	440b      	add	r3, r1
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	f023 0307 	bic.w	r3, r3, #7
 8006f4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	f003 0307 	and.w	r3, r3, #7
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00c      	beq.n	8006f74 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	b672      	cpsid	i
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	b662      	cpsie	i
 8006f6e:	617b      	str	r3, [r7, #20]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d01f      	beq.n	8006fba <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61fb      	str	r3, [r7, #28]
 8006f7e:	e012      	b.n	8006fa6 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	7819      	ldrb	r1, [r3, #0]
 8006f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	3334      	adds	r3, #52	; 0x34
 8006f90:	460a      	mov	r2, r1
 8006f92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	4413      	add	r3, r2
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d006      	beq.n	8006fae <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	61fb      	str	r3, [r7, #28]
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	2b0f      	cmp	r3, #15
 8006faa:	d9e9      	bls.n	8006f80 <prvInitialiseNewTask+0x58>
 8006fac:	e000      	b.n	8006fb0 <prvInitialiseNewTask+0x88>
			{
				break;
 8006fae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fb8:	e003      	b.n	8006fc2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc4:	2b06      	cmp	r3, #6
 8006fc6:	d901      	bls.n	8006fcc <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006fc8:	2306      	movs	r3, #6
 8006fca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fd0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fd6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fda:	2200      	movs	r2, #0
 8006fdc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff f8f4 	bl	80061d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fea:	3318      	adds	r3, #24
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff f8ef 	bl	80061d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffa:	f1c3 0207 	rsb	r2, r3, #7
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007006:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	2200      	movs	r2, #0
 800700c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	68f9      	ldr	r1, [r7, #12]
 800701a:	69b8      	ldr	r0, [r7, #24]
 800701c:	f000 fdce 	bl	8007bbc <pxPortInitialiseStack>
 8007020:	4602      	mov	r2, r0
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007030:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007032:	bf00      	nop
 8007034:	3720      	adds	r7, #32
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
	...

0800703c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007044:	f000 feca 	bl	8007ddc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007048:	4b2a      	ldr	r3, [pc, #168]	; (80070f4 <prvAddNewTaskToReadyList+0xb8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3301      	adds	r3, #1
 800704e:	4a29      	ldr	r2, [pc, #164]	; (80070f4 <prvAddNewTaskToReadyList+0xb8>)
 8007050:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007052:	4b29      	ldr	r3, [pc, #164]	; (80070f8 <prvAddNewTaskToReadyList+0xbc>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d109      	bne.n	800706e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800705a:	4a27      	ldr	r2, [pc, #156]	; (80070f8 <prvAddNewTaskToReadyList+0xbc>)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007060:	4b24      	ldr	r3, [pc, #144]	; (80070f4 <prvAddNewTaskToReadyList+0xb8>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d110      	bne.n	800708a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007068:	f000 fbda 	bl	8007820 <prvInitialiseTaskLists>
 800706c:	e00d      	b.n	800708a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800706e:	4b23      	ldr	r3, [pc, #140]	; (80070fc <prvAddNewTaskToReadyList+0xc0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d109      	bne.n	800708a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007076:	4b20      	ldr	r3, [pc, #128]	; (80070f8 <prvAddNewTaskToReadyList+0xbc>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	429a      	cmp	r2, r3
 8007082:	d802      	bhi.n	800708a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007084:	4a1c      	ldr	r2, [pc, #112]	; (80070f8 <prvAddNewTaskToReadyList+0xbc>)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800708a:	4b1d      	ldr	r3, [pc, #116]	; (8007100 <prvAddNewTaskToReadyList+0xc4>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3301      	adds	r3, #1
 8007090:	4a1b      	ldr	r2, [pc, #108]	; (8007100 <prvAddNewTaskToReadyList+0xc4>)
 8007092:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007098:	2201      	movs	r2, #1
 800709a:	409a      	lsls	r2, r3
 800709c:	4b19      	ldr	r3, [pc, #100]	; (8007104 <prvAddNewTaskToReadyList+0xc8>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	4a18      	ldr	r2, [pc, #96]	; (8007104 <prvAddNewTaskToReadyList+0xc8>)
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070aa:	4613      	mov	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4a15      	ldr	r2, [pc, #84]	; (8007108 <prvAddNewTaskToReadyList+0xcc>)
 80070b4:	441a      	add	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	3304      	adds	r3, #4
 80070ba:	4619      	mov	r1, r3
 80070bc:	4610      	mov	r0, r2
 80070be:	f7ff f894 	bl	80061ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80070c2:	f000 febf 	bl	8007e44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80070c6:	4b0d      	ldr	r3, [pc, #52]	; (80070fc <prvAddNewTaskToReadyList+0xc0>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00e      	beq.n	80070ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80070ce:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <prvAddNewTaskToReadyList+0xbc>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d8:	429a      	cmp	r2, r3
 80070da:	d207      	bcs.n	80070ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80070dc:	4b0b      	ldr	r3, [pc, #44]	; (800710c <prvAddNewTaskToReadyList+0xd0>)
 80070de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	20000c48 	.word	0x20000c48
 80070f8:	20000b48 	.word	0x20000b48
 80070fc:	20000c54 	.word	0x20000c54
 8007100:	20000c64 	.word	0x20000c64
 8007104:	20000c50 	.word	0x20000c50
 8007108:	20000b4c 	.word	0x20000b4c
 800710c:	e000ed04 	.word	0xe000ed04

08007110 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007118:	2300      	movs	r3, #0
 800711a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d019      	beq.n	8007156 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007122:	4b14      	ldr	r3, [pc, #80]	; (8007174 <vTaskDelay+0x64>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00c      	beq.n	8007144 <vTaskDelay+0x34>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	b672      	cpsid	i
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	b662      	cpsie	i
 800713e:	60bb      	str	r3, [r7, #8]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007144:	f000 f87e 	bl	8007244 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007148:	2100      	movs	r1, #0
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fcd0 	bl	8007af0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007150:	f000 f886 	bl	8007260 <xTaskResumeAll>
 8007154:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d107      	bne.n	800716c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800715c:	4b06      	ldr	r3, [pc, #24]	; (8007178 <vTaskDelay+0x68>)
 800715e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800716c:	bf00      	nop
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20000c70 	.word	0x20000c70
 8007178:	e000ed04 	.word	0xe000ed04

0800717c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08a      	sub	sp, #40	; 0x28
 8007180:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007182:	2300      	movs	r3, #0
 8007184:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007186:	2300      	movs	r3, #0
 8007188:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800718a:	463a      	mov	r2, r7
 800718c:	1d39      	adds	r1, r7, #4
 800718e:	f107 0308 	add.w	r3, r7, #8
 8007192:	4618      	mov	r0, r3
 8007194:	f7f9 f9ba 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	9202      	str	r2, [sp, #8]
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	2300      	movs	r3, #0
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	2300      	movs	r3, #0
 80071a8:	460a      	mov	r2, r1
 80071aa:	4920      	ldr	r1, [pc, #128]	; (800722c <vTaskStartScheduler+0xb0>)
 80071ac:	4820      	ldr	r0, [pc, #128]	; (8007230 <vTaskStartScheduler+0xb4>)
 80071ae:	f7ff fe13 	bl	8006dd8 <xTaskCreateStatic>
 80071b2:	4603      	mov	r3, r0
 80071b4:	4a1f      	ldr	r2, [pc, #124]	; (8007234 <vTaskStartScheduler+0xb8>)
 80071b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80071b8:	4b1e      	ldr	r3, [pc, #120]	; (8007234 <vTaskStartScheduler+0xb8>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071c0:	2301      	movs	r3, #1
 80071c2:	617b      	str	r3, [r7, #20]
 80071c4:	e001      	b.n	80071ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d118      	bne.n	8007202 <vTaskStartScheduler+0x86>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	b672      	cpsid	i
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	b662      	cpsie	i
 80071e4:	613b      	str	r3, [r7, #16]
}
 80071e6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071e8:	4b13      	ldr	r3, [pc, #76]	; (8007238 <vTaskStartScheduler+0xbc>)
 80071ea:	f04f 32ff 	mov.w	r2, #4294967295
 80071ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071f0:	4b12      	ldr	r3, [pc, #72]	; (800723c <vTaskStartScheduler+0xc0>)
 80071f2:	2201      	movs	r2, #1
 80071f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80071f6:	4b12      	ldr	r3, [pc, #72]	; (8007240 <vTaskStartScheduler+0xc4>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071fc:	f000 fd70 	bl	8007ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007200:	e010      	b.n	8007224 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007208:	d10c      	bne.n	8007224 <vTaskStartScheduler+0xa8>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720e:	b672      	cpsid	i
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	b662      	cpsie	i
 800721e:	60fb      	str	r3, [r7, #12]
}
 8007220:	bf00      	nop
 8007222:	e7fe      	b.n	8007222 <vTaskStartScheduler+0xa6>
}
 8007224:	bf00      	nop
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	08008584 	.word	0x08008584
 8007230:	080077f1 	.word	0x080077f1
 8007234:	20000c6c 	.word	0x20000c6c
 8007238:	20000c68 	.word	0x20000c68
 800723c:	20000c54 	.word	0x20000c54
 8007240:	20000c4c 	.word	0x20000c4c

08007244 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007244:	b480      	push	{r7}
 8007246:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007248:	4b04      	ldr	r3, [pc, #16]	; (800725c <vTaskSuspendAll+0x18>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3301      	adds	r3, #1
 800724e:	4a03      	ldr	r2, [pc, #12]	; (800725c <vTaskSuspendAll+0x18>)
 8007250:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007252:	bf00      	nop
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	20000c70 	.word	0x20000c70

08007260 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007266:	2300      	movs	r3, #0
 8007268:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800726a:	2300      	movs	r3, #0
 800726c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800726e:	4b42      	ldr	r3, [pc, #264]	; (8007378 <xTaskResumeAll+0x118>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10c      	bne.n	8007290 <xTaskResumeAll+0x30>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	b672      	cpsid	i
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	b662      	cpsie	i
 800728a:	603b      	str	r3, [r7, #0]
}
 800728c:	bf00      	nop
 800728e:	e7fe      	b.n	800728e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007290:	f000 fda4 	bl	8007ddc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007294:	4b38      	ldr	r3, [pc, #224]	; (8007378 <xTaskResumeAll+0x118>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3b01      	subs	r3, #1
 800729a:	4a37      	ldr	r2, [pc, #220]	; (8007378 <xTaskResumeAll+0x118>)
 800729c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800729e:	4b36      	ldr	r3, [pc, #216]	; (8007378 <xTaskResumeAll+0x118>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d161      	bne.n	800736a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072a6:	4b35      	ldr	r3, [pc, #212]	; (800737c <xTaskResumeAll+0x11c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d05d      	beq.n	800736a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072ae:	e02e      	b.n	800730e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b0:	4b33      	ldr	r3, [pc, #204]	; (8007380 <xTaskResumeAll+0x120>)
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3318      	adds	r3, #24
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fe fff1 	bl	80062a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3304      	adds	r3, #4
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe ffec 	bl	80062a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	2201      	movs	r2, #1
 80072d2:	409a      	lsls	r2, r3
 80072d4:	4b2b      	ldr	r3, [pc, #172]	; (8007384 <xTaskResumeAll+0x124>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4313      	orrs	r3, r2
 80072da:	4a2a      	ldr	r2, [pc, #168]	; (8007384 <xTaskResumeAll+0x124>)
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e2:	4613      	mov	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4a27      	ldr	r2, [pc, #156]	; (8007388 <xTaskResumeAll+0x128>)
 80072ec:	441a      	add	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3304      	adds	r3, #4
 80072f2:	4619      	mov	r1, r3
 80072f4:	4610      	mov	r0, r2
 80072f6:	f7fe ff78 	bl	80061ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fe:	4b23      	ldr	r3, [pc, #140]	; (800738c <xTaskResumeAll+0x12c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007304:	429a      	cmp	r2, r3
 8007306:	d302      	bcc.n	800730e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007308:	4b21      	ldr	r3, [pc, #132]	; (8007390 <xTaskResumeAll+0x130>)
 800730a:	2201      	movs	r2, #1
 800730c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800730e:	4b1c      	ldr	r3, [pc, #112]	; (8007380 <xTaskResumeAll+0x120>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1cc      	bne.n	80072b0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800731c:	f000 fb20 	bl	8007960 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007320:	4b1c      	ldr	r3, [pc, #112]	; (8007394 <xTaskResumeAll+0x134>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d010      	beq.n	800734e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800732c:	f000 f836 	bl	800739c <xTaskIncrementTick>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007336:	4b16      	ldr	r3, [pc, #88]	; (8007390 <xTaskResumeAll+0x130>)
 8007338:	2201      	movs	r2, #1
 800733a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3b01      	subs	r3, #1
 8007340:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1f1      	bne.n	800732c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007348:	4b12      	ldr	r3, [pc, #72]	; (8007394 <xTaskResumeAll+0x134>)
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800734e:	4b10      	ldr	r3, [pc, #64]	; (8007390 <xTaskResumeAll+0x130>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d009      	beq.n	800736a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007356:	2301      	movs	r3, #1
 8007358:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800735a:	4b0f      	ldr	r3, [pc, #60]	; (8007398 <xTaskResumeAll+0x138>)
 800735c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800736a:	f000 fd6b 	bl	8007e44 <vPortExitCritical>

	return xAlreadyYielded;
 800736e:	68bb      	ldr	r3, [r7, #8]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	20000c70 	.word	0x20000c70
 800737c:	20000c48 	.word	0x20000c48
 8007380:	20000c08 	.word	0x20000c08
 8007384:	20000c50 	.word	0x20000c50
 8007388:	20000b4c 	.word	0x20000b4c
 800738c:	20000b48 	.word	0x20000b48
 8007390:	20000c5c 	.word	0x20000c5c
 8007394:	20000c58 	.word	0x20000c58
 8007398:	e000ed04 	.word	0xe000ed04

0800739c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073a6:	4b4f      	ldr	r3, [pc, #316]	; (80074e4 <xTaskIncrementTick+0x148>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f040 808a 	bne.w	80074c4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073b0:	4b4d      	ldr	r3, [pc, #308]	; (80074e8 <xTaskIncrementTick+0x14c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3301      	adds	r3, #1
 80073b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073b8:	4a4b      	ldr	r2, [pc, #300]	; (80074e8 <xTaskIncrementTick+0x14c>)
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d122      	bne.n	800740a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80073c4:	4b49      	ldr	r3, [pc, #292]	; (80074ec <xTaskIncrementTick+0x150>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00c      	beq.n	80073e8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	b672      	cpsid	i
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	b662      	cpsie	i
 80073e2:	603b      	str	r3, [r7, #0]
}
 80073e4:	bf00      	nop
 80073e6:	e7fe      	b.n	80073e6 <xTaskIncrementTick+0x4a>
 80073e8:	4b40      	ldr	r3, [pc, #256]	; (80074ec <xTaskIncrementTick+0x150>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	4b40      	ldr	r3, [pc, #256]	; (80074f0 <xTaskIncrementTick+0x154>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a3e      	ldr	r2, [pc, #248]	; (80074ec <xTaskIncrementTick+0x150>)
 80073f4:	6013      	str	r3, [r2, #0]
 80073f6:	4a3e      	ldr	r2, [pc, #248]	; (80074f0 <xTaskIncrementTick+0x154>)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	4b3d      	ldr	r3, [pc, #244]	; (80074f4 <xTaskIncrementTick+0x158>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	3301      	adds	r3, #1
 8007402:	4a3c      	ldr	r2, [pc, #240]	; (80074f4 <xTaskIncrementTick+0x158>)
 8007404:	6013      	str	r3, [r2, #0]
 8007406:	f000 faab 	bl	8007960 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800740a:	4b3b      	ldr	r3, [pc, #236]	; (80074f8 <xTaskIncrementTick+0x15c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	429a      	cmp	r2, r3
 8007412:	d348      	bcc.n	80074a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007414:	4b35      	ldr	r3, [pc, #212]	; (80074ec <xTaskIncrementTick+0x150>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d104      	bne.n	8007428 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800741e:	4b36      	ldr	r3, [pc, #216]	; (80074f8 <xTaskIncrementTick+0x15c>)
 8007420:	f04f 32ff 	mov.w	r2, #4294967295
 8007424:	601a      	str	r2, [r3, #0]
					break;
 8007426:	e03e      	b.n	80074a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007428:	4b30      	ldr	r3, [pc, #192]	; (80074ec <xTaskIncrementTick+0x150>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	429a      	cmp	r2, r3
 800743e:	d203      	bcs.n	8007448 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007440:	4a2d      	ldr	r2, [pc, #180]	; (80074f8 <xTaskIncrementTick+0x15c>)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007446:	e02e      	b.n	80074a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	3304      	adds	r3, #4
 800744c:	4618      	mov	r0, r3
 800744e:	f7fe ff29 	bl	80062a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007456:	2b00      	cmp	r3, #0
 8007458:	d004      	beq.n	8007464 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	3318      	adds	r3, #24
 800745e:	4618      	mov	r0, r3
 8007460:	f7fe ff20 	bl	80062a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007468:	2201      	movs	r2, #1
 800746a:	409a      	lsls	r2, r3
 800746c:	4b23      	ldr	r3, [pc, #140]	; (80074fc <xTaskIncrementTick+0x160>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4313      	orrs	r3, r2
 8007472:	4a22      	ldr	r2, [pc, #136]	; (80074fc <xTaskIncrementTick+0x160>)
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747a:	4613      	mov	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4a1f      	ldr	r2, [pc, #124]	; (8007500 <xTaskIncrementTick+0x164>)
 8007484:	441a      	add	r2, r3
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	3304      	adds	r3, #4
 800748a:	4619      	mov	r1, r3
 800748c:	4610      	mov	r0, r2
 800748e:	f7fe feac 	bl	80061ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007496:	4b1b      	ldr	r3, [pc, #108]	; (8007504 <xTaskIncrementTick+0x168>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	429a      	cmp	r2, r3
 800749e:	d3b9      	bcc.n	8007414 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80074a0:	2301      	movs	r3, #1
 80074a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074a4:	e7b6      	b.n	8007414 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074a6:	4b17      	ldr	r3, [pc, #92]	; (8007504 <xTaskIncrementTick+0x168>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ac:	4914      	ldr	r1, [pc, #80]	; (8007500 <xTaskIncrementTick+0x164>)
 80074ae:	4613      	mov	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	440b      	add	r3, r1
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d907      	bls.n	80074ce <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80074be:	2301      	movs	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	e004      	b.n	80074ce <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80074c4:	4b10      	ldr	r3, [pc, #64]	; (8007508 <xTaskIncrementTick+0x16c>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3301      	adds	r3, #1
 80074ca:	4a0f      	ldr	r2, [pc, #60]	; (8007508 <xTaskIncrementTick+0x16c>)
 80074cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80074ce:	4b0f      	ldr	r3, [pc, #60]	; (800750c <xTaskIncrementTick+0x170>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80074d6:	2301      	movs	r3, #1
 80074d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80074da:	697b      	ldr	r3, [r7, #20]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20000c70 	.word	0x20000c70
 80074e8:	20000c4c 	.word	0x20000c4c
 80074ec:	20000c00 	.word	0x20000c00
 80074f0:	20000c04 	.word	0x20000c04
 80074f4:	20000c60 	.word	0x20000c60
 80074f8:	20000c68 	.word	0x20000c68
 80074fc:	20000c50 	.word	0x20000c50
 8007500:	20000b4c 	.word	0x20000b4c
 8007504:	20000b48 	.word	0x20000b48
 8007508:	20000c58 	.word	0x20000c58
 800750c:	20000c5c 	.word	0x20000c5c

08007510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007516:	4b28      	ldr	r3, [pc, #160]	; (80075b8 <vTaskSwitchContext+0xa8>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800751e:	4b27      	ldr	r3, [pc, #156]	; (80075bc <vTaskSwitchContext+0xac>)
 8007520:	2201      	movs	r2, #1
 8007522:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007524:	e041      	b.n	80075aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007526:	4b25      	ldr	r3, [pc, #148]	; (80075bc <vTaskSwitchContext+0xac>)
 8007528:	2200      	movs	r2, #0
 800752a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800752c:	4b24      	ldr	r3, [pc, #144]	; (80075c0 <vTaskSwitchContext+0xb0>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	fab3 f383 	clz	r3, r3
 8007538:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800753a:	7afb      	ldrb	r3, [r7, #11]
 800753c:	f1c3 031f 	rsb	r3, r3, #31
 8007540:	617b      	str	r3, [r7, #20]
 8007542:	4920      	ldr	r1, [pc, #128]	; (80075c4 <vTaskSwitchContext+0xb4>)
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	4613      	mov	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	440b      	add	r3, r1
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10c      	bne.n	8007570 <vTaskSwitchContext+0x60>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755a:	b672      	cpsid	i
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	b662      	cpsie	i
 800756a:	607b      	str	r3, [r7, #4]
}
 800756c:	bf00      	nop
 800756e:	e7fe      	b.n	800756e <vTaskSwitchContext+0x5e>
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4a12      	ldr	r2, [pc, #72]	; (80075c4 <vTaskSwitchContext+0xb4>)
 800757c:	4413      	add	r3, r2
 800757e:	613b      	str	r3, [r7, #16]
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	605a      	str	r2, [r3, #4]
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	3308      	adds	r3, #8
 8007592:	429a      	cmp	r2, r3
 8007594:	d104      	bne.n	80075a0 <vTaskSwitchContext+0x90>
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	605a      	str	r2, [r3, #4]
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	4a08      	ldr	r2, [pc, #32]	; (80075c8 <vTaskSwitchContext+0xb8>)
 80075a8:	6013      	str	r3, [r2, #0]
}
 80075aa:	bf00      	nop
 80075ac:	371c      	adds	r7, #28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	20000c70 	.word	0x20000c70
 80075bc:	20000c5c 	.word	0x20000c5c
 80075c0:	20000c50 	.word	0x20000c50
 80075c4:	20000b4c 	.word	0x20000b4c
 80075c8:	20000b48 	.word	0x20000b48

080075cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10c      	bne.n	80075f6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	b672      	cpsid	i
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	b662      	cpsie	i
 80075f0:	60fb      	str	r3, [r7, #12]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075f6:	4b07      	ldr	r3, [pc, #28]	; (8007614 <vTaskPlaceOnEventList+0x48>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3318      	adds	r3, #24
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7fe fe17 	bl	8006232 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007604:	2101      	movs	r1, #1
 8007606:	6838      	ldr	r0, [r7, #0]
 8007608:	f000 fa72 	bl	8007af0 <prvAddCurrentTaskToDelayedList>
}
 800760c:	bf00      	nop
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	20000b48 	.word	0x20000b48

08007618 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10c      	bne.n	8007648 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	b672      	cpsid	i
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	b662      	cpsie	i
 8007642:	60fb      	str	r3, [r7, #12]
}
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	3318      	adds	r3, #24
 800764c:	4618      	mov	r0, r3
 800764e:	f7fe fe29 	bl	80062a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007652:	4b1d      	ldr	r3, [pc, #116]	; (80076c8 <xTaskRemoveFromEventList+0xb0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d11c      	bne.n	8007694 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	3304      	adds	r3, #4
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe fe20 	bl	80062a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	2201      	movs	r2, #1
 800766a:	409a      	lsls	r2, r3
 800766c:	4b17      	ldr	r3, [pc, #92]	; (80076cc <xTaskRemoveFromEventList+0xb4>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4313      	orrs	r3, r2
 8007672:	4a16      	ldr	r2, [pc, #88]	; (80076cc <xTaskRemoveFromEventList+0xb4>)
 8007674:	6013      	str	r3, [r2, #0]
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767a:	4613      	mov	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4a13      	ldr	r2, [pc, #76]	; (80076d0 <xTaskRemoveFromEventList+0xb8>)
 8007684:	441a      	add	r2, r3
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	3304      	adds	r3, #4
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f7fe fdac 	bl	80061ea <vListInsertEnd>
 8007692:	e005      	b.n	80076a0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3318      	adds	r3, #24
 8007698:	4619      	mov	r1, r3
 800769a:	480e      	ldr	r0, [pc, #56]	; (80076d4 <xTaskRemoveFromEventList+0xbc>)
 800769c:	f7fe fda5 	bl	80061ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a4:	4b0c      	ldr	r3, [pc, #48]	; (80076d8 <xTaskRemoveFromEventList+0xc0>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d905      	bls.n	80076ba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80076ae:	2301      	movs	r3, #1
 80076b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80076b2:	4b0a      	ldr	r3, [pc, #40]	; (80076dc <xTaskRemoveFromEventList+0xc4>)
 80076b4:	2201      	movs	r2, #1
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	e001      	b.n	80076be <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80076ba:	2300      	movs	r3, #0
 80076bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80076be:	697b      	ldr	r3, [r7, #20]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20000c70 	.word	0x20000c70
 80076cc:	20000c50 	.word	0x20000c50
 80076d0:	20000b4c 	.word	0x20000b4c
 80076d4:	20000c08 	.word	0x20000c08
 80076d8:	20000b48 	.word	0x20000b48
 80076dc:	20000c5c 	.word	0x20000c5c

080076e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076e8:	4b06      	ldr	r3, [pc, #24]	; (8007704 <vTaskInternalSetTimeOutState+0x24>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076f0:	4b05      	ldr	r3, [pc, #20]	; (8007708 <vTaskInternalSetTimeOutState+0x28>)
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	605a      	str	r2, [r3, #4]
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	20000c60 	.word	0x20000c60
 8007708:	20000c4c 	.word	0x20000c4c

0800770c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10c      	bne.n	8007736 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	b672      	cpsid	i
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	b662      	cpsie	i
 8007730:	613b      	str	r3, [r7, #16]
}
 8007732:	bf00      	nop
 8007734:	e7fe      	b.n	8007734 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10c      	bne.n	8007756 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	b672      	cpsid	i
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	b662      	cpsie	i
 8007750:	60fb      	str	r3, [r7, #12]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007756:	f000 fb41 	bl	8007ddc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800775a:	4b1d      	ldr	r3, [pc, #116]	; (80077d0 <xTaskCheckForTimeOut+0xc4>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007772:	d102      	bne.n	800777a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007774:	2300      	movs	r3, #0
 8007776:	61fb      	str	r3, [r7, #28]
 8007778:	e023      	b.n	80077c2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	4b15      	ldr	r3, [pc, #84]	; (80077d4 <xTaskCheckForTimeOut+0xc8>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d007      	beq.n	8007796 <xTaskCheckForTimeOut+0x8a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	429a      	cmp	r2, r3
 800778e:	d302      	bcc.n	8007796 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007790:	2301      	movs	r3, #1
 8007792:	61fb      	str	r3, [r7, #28]
 8007794:	e015      	b.n	80077c2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	429a      	cmp	r2, r3
 800779e:	d20b      	bcs.n	80077b8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	1ad2      	subs	r2, r2, r3
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7ff ff97 	bl	80076e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80077b2:	2300      	movs	r3, #0
 80077b4:	61fb      	str	r3, [r7, #28]
 80077b6:	e004      	b.n	80077c2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2200      	movs	r2, #0
 80077bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80077be:	2301      	movs	r3, #1
 80077c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80077c2:	f000 fb3f 	bl	8007e44 <vPortExitCritical>

	return xReturn;
 80077c6:	69fb      	ldr	r3, [r7, #28]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3720      	adds	r7, #32
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	20000c4c 	.word	0x20000c4c
 80077d4:	20000c60 	.word	0x20000c60

080077d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077d8:	b480      	push	{r7}
 80077da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077dc:	4b03      	ldr	r3, [pc, #12]	; (80077ec <vTaskMissedYield+0x14>)
 80077de:	2201      	movs	r2, #1
 80077e0:	601a      	str	r2, [r3, #0]
}
 80077e2:	bf00      	nop
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	20000c5c 	.word	0x20000c5c

080077f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077f8:	f000 f852 	bl	80078a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077fc:	4b06      	ldr	r3, [pc, #24]	; (8007818 <prvIdleTask+0x28>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d9f9      	bls.n	80077f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007804:	4b05      	ldr	r3, [pc, #20]	; (800781c <prvIdleTask+0x2c>)
 8007806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007814:	e7f0      	b.n	80077f8 <prvIdleTask+0x8>
 8007816:	bf00      	nop
 8007818:	20000b4c 	.word	0x20000b4c
 800781c:	e000ed04 	.word	0xe000ed04

08007820 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007826:	2300      	movs	r3, #0
 8007828:	607b      	str	r3, [r7, #4]
 800782a:	e00c      	b.n	8007846 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	4613      	mov	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4a12      	ldr	r2, [pc, #72]	; (8007880 <prvInitialiseTaskLists+0x60>)
 8007838:	4413      	add	r3, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe fca8 	bl	8006190 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3301      	adds	r3, #1
 8007844:	607b      	str	r3, [r7, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b06      	cmp	r3, #6
 800784a:	d9ef      	bls.n	800782c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800784c:	480d      	ldr	r0, [pc, #52]	; (8007884 <prvInitialiseTaskLists+0x64>)
 800784e:	f7fe fc9f 	bl	8006190 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007852:	480d      	ldr	r0, [pc, #52]	; (8007888 <prvInitialiseTaskLists+0x68>)
 8007854:	f7fe fc9c 	bl	8006190 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007858:	480c      	ldr	r0, [pc, #48]	; (800788c <prvInitialiseTaskLists+0x6c>)
 800785a:	f7fe fc99 	bl	8006190 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800785e:	480c      	ldr	r0, [pc, #48]	; (8007890 <prvInitialiseTaskLists+0x70>)
 8007860:	f7fe fc96 	bl	8006190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007864:	480b      	ldr	r0, [pc, #44]	; (8007894 <prvInitialiseTaskLists+0x74>)
 8007866:	f7fe fc93 	bl	8006190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800786a:	4b0b      	ldr	r3, [pc, #44]	; (8007898 <prvInitialiseTaskLists+0x78>)
 800786c:	4a05      	ldr	r2, [pc, #20]	; (8007884 <prvInitialiseTaskLists+0x64>)
 800786e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007870:	4b0a      	ldr	r3, [pc, #40]	; (800789c <prvInitialiseTaskLists+0x7c>)
 8007872:	4a05      	ldr	r2, [pc, #20]	; (8007888 <prvInitialiseTaskLists+0x68>)
 8007874:	601a      	str	r2, [r3, #0]
}
 8007876:	bf00      	nop
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	20000b4c 	.word	0x20000b4c
 8007884:	20000bd8 	.word	0x20000bd8
 8007888:	20000bec 	.word	0x20000bec
 800788c:	20000c08 	.word	0x20000c08
 8007890:	20000c1c 	.word	0x20000c1c
 8007894:	20000c34 	.word	0x20000c34
 8007898:	20000c00 	.word	0x20000c00
 800789c:	20000c04 	.word	0x20000c04

080078a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078a6:	e019      	b.n	80078dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078a8:	f000 fa98 	bl	8007ddc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078ac:	4b10      	ldr	r3, [pc, #64]	; (80078f0 <prvCheckTasksWaitingTermination+0x50>)
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3304      	adds	r3, #4
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fe fcf3 	bl	80062a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80078be:	4b0d      	ldr	r3, [pc, #52]	; (80078f4 <prvCheckTasksWaitingTermination+0x54>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	4a0b      	ldr	r2, [pc, #44]	; (80078f4 <prvCheckTasksWaitingTermination+0x54>)
 80078c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078c8:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <prvCheckTasksWaitingTermination+0x58>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	4a0a      	ldr	r2, [pc, #40]	; (80078f8 <prvCheckTasksWaitingTermination+0x58>)
 80078d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078d2:	f000 fab7 	bl	8007e44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f810 	bl	80078fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078dc:	4b06      	ldr	r3, [pc, #24]	; (80078f8 <prvCheckTasksWaitingTermination+0x58>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1e1      	bne.n	80078a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	20000c1c 	.word	0x20000c1c
 80078f4:	20000c48 	.word	0x20000c48
 80078f8:	20000c30 	.word	0x20000c30

080078fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800790a:	2b00      	cmp	r3, #0
 800790c:	d108      	bne.n	8007920 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fc58 	bl	80081c8 <vPortFree>
				vPortFree( pxTCB );
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fc55 	bl	80081c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800791e:	e01a      	b.n	8007956 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007926:	2b01      	cmp	r3, #1
 8007928:	d103      	bne.n	8007932 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fc4c 	bl	80081c8 <vPortFree>
	}
 8007930:	e011      	b.n	8007956 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007938:	2b02      	cmp	r3, #2
 800793a:	d00c      	beq.n	8007956 <prvDeleteTCB+0x5a>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007940:	b672      	cpsid	i
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	b662      	cpsie	i
 8007950:	60fb      	str	r3, [r7, #12]
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <prvDeleteTCB+0x58>
	}
 8007956:	bf00      	nop
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007966:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <prvResetNextTaskUnblockTime+0x38>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d104      	bne.n	800797a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007970:	4b0a      	ldr	r3, [pc, #40]	; (800799c <prvResetNextTaskUnblockTime+0x3c>)
 8007972:	f04f 32ff 	mov.w	r2, #4294967295
 8007976:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007978:	e008      	b.n	800798c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800797a:	4b07      	ldr	r3, [pc, #28]	; (8007998 <prvResetNextTaskUnblockTime+0x38>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	4a04      	ldr	r2, [pc, #16]	; (800799c <prvResetNextTaskUnblockTime+0x3c>)
 800798a:	6013      	str	r3, [r2, #0]
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	20000c00 	.word	0x20000c00
 800799c:	20000c68 	.word	0x20000c68

080079a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079a6:	4b0b      	ldr	r3, [pc, #44]	; (80079d4 <xTaskGetSchedulerState+0x34>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d102      	bne.n	80079b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079ae:	2301      	movs	r3, #1
 80079b0:	607b      	str	r3, [r7, #4]
 80079b2:	e008      	b.n	80079c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079b4:	4b08      	ldr	r3, [pc, #32]	; (80079d8 <xTaskGetSchedulerState+0x38>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d102      	bne.n	80079c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80079bc:	2302      	movs	r3, #2
 80079be:	607b      	str	r3, [r7, #4]
 80079c0:	e001      	b.n	80079c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079c2:	2300      	movs	r3, #0
 80079c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079c6:	687b      	ldr	r3, [r7, #4]
	}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	20000c54 	.word	0x20000c54
 80079d8:	20000c70 	.word	0x20000c70

080079dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079e8:	2300      	movs	r3, #0
 80079ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d072      	beq.n	8007ad8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079f2:	4b3c      	ldr	r3, [pc, #240]	; (8007ae4 <xTaskPriorityDisinherit+0x108>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d00c      	beq.n	8007a16 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	b672      	cpsid	i
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	b662      	cpsie	i
 8007a10:	60fb      	str	r3, [r7, #12]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10c      	bne.n	8007a38 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	b672      	cpsid	i
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	b662      	cpsie	i
 8007a32:	60bb      	str	r3, [r7, #8]
}
 8007a34:	bf00      	nop
 8007a36:	e7fe      	b.n	8007a36 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a3c:	1e5a      	subs	r2, r3, #1
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d044      	beq.n	8007ad8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d140      	bne.n	8007ad8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe fc22 	bl	80062a4 <uxListRemove>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d115      	bne.n	8007a92 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a6a:	491f      	ldr	r1, [pc, #124]	; (8007ae8 <xTaskPriorityDisinherit+0x10c>)
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10a      	bne.n	8007a92 <xTaskPriorityDisinherit+0xb6>
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a80:	2201      	movs	r2, #1
 8007a82:	fa02 f303 	lsl.w	r3, r2, r3
 8007a86:	43da      	mvns	r2, r3
 8007a88:	4b18      	ldr	r3, [pc, #96]	; (8007aec <xTaskPriorityDisinherit+0x110>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	4a17      	ldr	r2, [pc, #92]	; (8007aec <xTaskPriorityDisinherit+0x110>)
 8007a90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9e:	f1c3 0207 	rsb	r2, r3, #7
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aaa:	2201      	movs	r2, #1
 8007aac:	409a      	lsls	r2, r3
 8007aae:	4b0f      	ldr	r3, [pc, #60]	; (8007aec <xTaskPriorityDisinherit+0x110>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	4a0d      	ldr	r2, [pc, #52]	; (8007aec <xTaskPriorityDisinherit+0x110>)
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007abc:	4613      	mov	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4a08      	ldr	r2, [pc, #32]	; (8007ae8 <xTaskPriorityDisinherit+0x10c>)
 8007ac6:	441a      	add	r2, r3
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	3304      	adds	r3, #4
 8007acc:	4619      	mov	r1, r3
 8007ace:	4610      	mov	r0, r2
 8007ad0:	f7fe fb8b 	bl	80061ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ad8:	697b      	ldr	r3, [r7, #20]
	}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000b48 	.word	0x20000b48
 8007ae8:	20000b4c 	.word	0x20000b4c
 8007aec:	20000c50 	.word	0x20000c50

08007af0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007afa:	4b29      	ldr	r3, [pc, #164]	; (8007ba0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b00:	4b28      	ldr	r3, [pc, #160]	; (8007ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3304      	adds	r3, #4
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe fbcc 	bl	80062a4 <uxListRemove>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10b      	bne.n	8007b2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007b12:	4b24      	ldr	r3, [pc, #144]	; (8007ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b18:	2201      	movs	r2, #1
 8007b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1e:	43da      	mvns	r2, r3
 8007b20:	4b21      	ldr	r3, [pc, #132]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4013      	ands	r3, r2
 8007b26:	4a20      	ldr	r2, [pc, #128]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b30:	d10a      	bne.n	8007b48 <prvAddCurrentTaskToDelayedList+0x58>
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b38:	4b1a      	ldr	r3, [pc, #104]	; (8007ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	4619      	mov	r1, r3
 8007b40:	481a      	ldr	r0, [pc, #104]	; (8007bac <prvAddCurrentTaskToDelayedList+0xbc>)
 8007b42:	f7fe fb52 	bl	80061ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b46:	e026      	b.n	8007b96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b50:	4b14      	ldr	r3, [pc, #80]	; (8007ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d209      	bcs.n	8007b74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b60:	4b13      	ldr	r3, [pc, #76]	; (8007bb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	f7fe fb60 	bl	8006232 <vListInsert>
}
 8007b72:	e010      	b.n	8007b96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b74:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4610      	mov	r0, r2
 8007b82:	f7fe fb56 	bl	8006232 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b86:	4b0c      	ldr	r3, [pc, #48]	; (8007bb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d202      	bcs.n	8007b96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b90:	4a09      	ldr	r2, [pc, #36]	; (8007bb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	6013      	str	r3, [r2, #0]
}
 8007b96:	bf00      	nop
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20000c4c 	.word	0x20000c4c
 8007ba4:	20000b48 	.word	0x20000b48
 8007ba8:	20000c50 	.word	0x20000c50
 8007bac:	20000c34 	.word	0x20000c34
 8007bb0:	20000c04 	.word	0x20000c04
 8007bb4:	20000c00 	.word	0x20000c00
 8007bb8:	20000c68 	.word	0x20000c68

08007bbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3b04      	subs	r3, #4
 8007bcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3b04      	subs	r3, #4
 8007bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f023 0201 	bic.w	r2, r3, #1
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3b04      	subs	r3, #4
 8007bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007bec:	4a0c      	ldr	r2, [pc, #48]	; (8007c20 <pxPortInitialiseStack+0x64>)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3b14      	subs	r3, #20
 8007bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3b04      	subs	r3, #4
 8007c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f06f 0202 	mvn.w	r2, #2
 8007c0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3b20      	subs	r3, #32
 8007c10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c12:	68fb      	ldr	r3, [r7, #12]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	08007c25 	.word	0x08007c25

08007c24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c2e:	4b14      	ldr	r3, [pc, #80]	; (8007c80 <prvTaskExitError+0x5c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c36:	d00c      	beq.n	8007c52 <prvTaskExitError+0x2e>
	__asm volatile
 8007c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3c:	b672      	cpsid	i
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	b662      	cpsie	i
 8007c4c:	60fb      	str	r3, [r7, #12]
}
 8007c4e:	bf00      	nop
 8007c50:	e7fe      	b.n	8007c50 <prvTaskExitError+0x2c>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c56:	b672      	cpsid	i
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	b662      	cpsie	i
 8007c66:	60bb      	str	r3, [r7, #8]
}
 8007c68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c6a:	bf00      	nop
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0fc      	beq.n	8007c6c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c72:	bf00      	nop
 8007c74:	bf00      	nop
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	2000000c 	.word	0x2000000c
	...

08007c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c90:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <pxCurrentTCBConst2>)
 8007c92:	6819      	ldr	r1, [r3, #0]
 8007c94:	6808      	ldr	r0, [r1, #0]
 8007c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9a:	f380 8809 	msr	PSP, r0
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f04f 0000 	mov.w	r0, #0
 8007ca6:	f380 8811 	msr	BASEPRI, r0
 8007caa:	4770      	bx	lr
 8007cac:	f3af 8000 	nop.w

08007cb0 <pxCurrentTCBConst2>:
 8007cb0:	20000b48 	.word	0x20000b48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop

08007cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007cb8:	4808      	ldr	r0, [pc, #32]	; (8007cdc <prvPortStartFirstTask+0x24>)
 8007cba:	6800      	ldr	r0, [r0, #0]
 8007cbc:	6800      	ldr	r0, [r0, #0]
 8007cbe:	f380 8808 	msr	MSP, r0
 8007cc2:	f04f 0000 	mov.w	r0, #0
 8007cc6:	f380 8814 	msr	CONTROL, r0
 8007cca:	b662      	cpsie	i
 8007ccc:	b661      	cpsie	f
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	df00      	svc	0
 8007cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007cda:	bf00      	nop
 8007cdc:	e000ed08 	.word	0xe000ed08

08007ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ce6:	4b37      	ldr	r3, [pc, #220]	; (8007dc4 <xPortStartScheduler+0xe4>)
 8007ce8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	22ff      	movs	r2, #255	; 0xff
 8007cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	4b2f      	ldr	r3, [pc, #188]	; (8007dc8 <xPortStartScheduler+0xe8>)
 8007d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d0e:	4b2f      	ldr	r3, [pc, #188]	; (8007dcc <xPortStartScheduler+0xec>)
 8007d10:	2207      	movs	r2, #7
 8007d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d14:	e009      	b.n	8007d2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007d16:	4b2d      	ldr	r3, [pc, #180]	; (8007dcc <xPortStartScheduler+0xec>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	4a2b      	ldr	r2, [pc, #172]	; (8007dcc <xPortStartScheduler+0xec>)
 8007d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d32:	2b80      	cmp	r3, #128	; 0x80
 8007d34:	d0ef      	beq.n	8007d16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d36:	4b25      	ldr	r3, [pc, #148]	; (8007dcc <xPortStartScheduler+0xec>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f1c3 0307 	rsb	r3, r3, #7
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d00c      	beq.n	8007d5c <xPortStartScheduler+0x7c>
	__asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d46:	b672      	cpsid	i
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	b662      	cpsie	i
 8007d56:	60bb      	str	r3, [r7, #8]
}
 8007d58:	bf00      	nop
 8007d5a:	e7fe      	b.n	8007d5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d5c:	4b1b      	ldr	r3, [pc, #108]	; (8007dcc <xPortStartScheduler+0xec>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	021b      	lsls	r3, r3, #8
 8007d62:	4a1a      	ldr	r2, [pc, #104]	; (8007dcc <xPortStartScheduler+0xec>)
 8007d64:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d66:	4b19      	ldr	r3, [pc, #100]	; (8007dcc <xPortStartScheduler+0xec>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d6e:	4a17      	ldr	r2, [pc, #92]	; (8007dcc <xPortStartScheduler+0xec>)
 8007d70:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d7a:	4b15      	ldr	r3, [pc, #84]	; (8007dd0 <xPortStartScheduler+0xf0>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a14      	ldr	r2, [pc, #80]	; (8007dd0 <xPortStartScheduler+0xf0>)
 8007d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d84:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d86:	4b12      	ldr	r3, [pc, #72]	; (8007dd0 <xPortStartScheduler+0xf0>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a11      	ldr	r2, [pc, #68]	; (8007dd0 <xPortStartScheduler+0xf0>)
 8007d8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d90:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d92:	f000 f8dd 	bl	8007f50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d96:	4b0f      	ldr	r3, [pc, #60]	; (8007dd4 <xPortStartScheduler+0xf4>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d9c:	f000 f8fc 	bl	8007f98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007da0:	4b0d      	ldr	r3, [pc, #52]	; (8007dd8 <xPortStartScheduler+0xf8>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a0c      	ldr	r2, [pc, #48]	; (8007dd8 <xPortStartScheduler+0xf8>)
 8007da6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007daa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007dac:	f7ff ff84 	bl	8007cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007db0:	f7ff fbae 	bl	8007510 <vTaskSwitchContext>
	prvTaskExitError();
 8007db4:	f7ff ff36 	bl	8007c24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	e000e400 	.word	0xe000e400
 8007dc8:	20000c74 	.word	0x20000c74
 8007dcc:	20000c78 	.word	0x20000c78
 8007dd0:	e000ed20 	.word	0xe000ed20
 8007dd4:	2000000c 	.word	0x2000000c
 8007dd8:	e000ef34 	.word	0xe000ef34

08007ddc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de6:	b672      	cpsid	i
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	b662      	cpsie	i
 8007df6:	607b      	str	r3, [r7, #4]
}
 8007df8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dfa:	4b10      	ldr	r3, [pc, #64]	; (8007e3c <vPortEnterCritical+0x60>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	4a0e      	ldr	r2, [pc, #56]	; (8007e3c <vPortEnterCritical+0x60>)
 8007e02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e04:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <vPortEnterCritical+0x60>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d111      	bne.n	8007e30 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e0c:	4b0c      	ldr	r3, [pc, #48]	; (8007e40 <vPortEnterCritical+0x64>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00c      	beq.n	8007e30 <vPortEnterCritical+0x54>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	b672      	cpsid	i
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	b662      	cpsie	i
 8007e2a:	603b      	str	r3, [r7, #0]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <vPortEnterCritical+0x52>
	}
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	2000000c 	.word	0x2000000c
 8007e40:	e000ed04 	.word	0xe000ed04

08007e44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e4a:	4b13      	ldr	r3, [pc, #76]	; (8007e98 <vPortExitCritical+0x54>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10c      	bne.n	8007e6c <vPortExitCritical+0x28>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	b672      	cpsid	i
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	b662      	cpsie	i
 8007e66:	607b      	str	r3, [r7, #4]
}
 8007e68:	bf00      	nop
 8007e6a:	e7fe      	b.n	8007e6a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007e6c:	4b0a      	ldr	r3, [pc, #40]	; (8007e98 <vPortExitCritical+0x54>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	4a09      	ldr	r2, [pc, #36]	; (8007e98 <vPortExitCritical+0x54>)
 8007e74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e76:	4b08      	ldr	r3, [pc, #32]	; (8007e98 <vPortExitCritical+0x54>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d105      	bne.n	8007e8a <vPortExitCritical+0x46>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	f383 8811 	msr	BASEPRI, r3
}
 8007e88:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	2000000c 	.word	0x2000000c
 8007e9c:	00000000 	.word	0x00000000

08007ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ea0:	f3ef 8009 	mrs	r0, PSP
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <pxCurrentTCBConst>)
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	f01e 0f10 	tst.w	lr, #16
 8007eb0:	bf08      	it	eq
 8007eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eba:	6010      	str	r0, [r2, #0]
 8007ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ec4:	b672      	cpsid	i
 8007ec6:	f380 8811 	msr	BASEPRI, r0
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	b662      	cpsie	i
 8007ed4:	f7ff fb1c 	bl	8007510 <vTaskSwitchContext>
 8007ed8:	f04f 0000 	mov.w	r0, #0
 8007edc:	f380 8811 	msr	BASEPRI, r0
 8007ee0:	bc09      	pop	{r0, r3}
 8007ee2:	6819      	ldr	r1, [r3, #0]
 8007ee4:	6808      	ldr	r0, [r1, #0]
 8007ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eea:	f01e 0f10 	tst.w	lr, #16
 8007eee:	bf08      	it	eq
 8007ef0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ef4:	f380 8809 	msr	PSP, r0
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop

08007f00 <pxCurrentTCBConst>:
 8007f00:	20000b48 	.word	0x20000b48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop

08007f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	b672      	cpsid	i
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	b662      	cpsie	i
 8007f22:	607b      	str	r3, [r7, #4]
}
 8007f24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f26:	f7ff fa39 	bl	800739c <xTaskIncrementTick>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d003      	beq.n	8007f38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f30:	4b06      	ldr	r3, [pc, #24]	; (8007f4c <SysTick_Handler+0x44>)
 8007f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	f383 8811 	msr	BASEPRI, r3
}
 8007f42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	e000ed04 	.word	0xe000ed04

08007f50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f50:	b480      	push	{r7}
 8007f52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f54:	4b0b      	ldr	r3, [pc, #44]	; (8007f84 <vPortSetupTimerInterrupt+0x34>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <vPortSetupTimerInterrupt+0x38>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f60:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <vPortSetupTimerInterrupt+0x3c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a0a      	ldr	r2, [pc, #40]	; (8007f90 <vPortSetupTimerInterrupt+0x40>)
 8007f66:	fba2 2303 	umull	r2, r3, r2, r3
 8007f6a:	099b      	lsrs	r3, r3, #6
 8007f6c:	4a09      	ldr	r2, [pc, #36]	; (8007f94 <vPortSetupTimerInterrupt+0x44>)
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f72:	4b04      	ldr	r3, [pc, #16]	; (8007f84 <vPortSetupTimerInterrupt+0x34>)
 8007f74:	2207      	movs	r2, #7
 8007f76:	601a      	str	r2, [r3, #0]
}
 8007f78:	bf00      	nop
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	e000e010 	.word	0xe000e010
 8007f88:	e000e018 	.word	0xe000e018
 8007f8c:	20000000 	.word	0x20000000
 8007f90:	10624dd3 	.word	0x10624dd3
 8007f94:	e000e014 	.word	0xe000e014

08007f98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007fa8 <vPortEnableVFP+0x10>
 8007f9c:	6801      	ldr	r1, [r0, #0]
 8007f9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007fa2:	6001      	str	r1, [r0, #0]
 8007fa4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007fa6:	bf00      	nop
 8007fa8:	e000ed88 	.word	0xe000ed88

08007fac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007fb2:	f3ef 8305 	mrs	r3, IPSR
 8007fb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2b0f      	cmp	r3, #15
 8007fbc:	d916      	bls.n	8007fec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007fbe:	4a19      	ldr	r2, [pc, #100]	; (8008024 <vPortValidateInterruptPriority+0x78>)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007fc8:	4b17      	ldr	r3, [pc, #92]	; (8008028 <vPortValidateInterruptPriority+0x7c>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	7afa      	ldrb	r2, [r7, #11]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d20c      	bcs.n	8007fec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	b672      	cpsid	i
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	b662      	cpsie	i
 8007fe6:	607b      	str	r3, [r7, #4]
}
 8007fe8:	bf00      	nop
 8007fea:	e7fe      	b.n	8007fea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fec:	4b0f      	ldr	r3, [pc, #60]	; (800802c <vPortValidateInterruptPriority+0x80>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ff4:	4b0e      	ldr	r3, [pc, #56]	; (8008030 <vPortValidateInterruptPriority+0x84>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d90c      	bls.n	8008016 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8007ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008000:	b672      	cpsid	i
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	b662      	cpsie	i
 8008010:	603b      	str	r3, [r7, #0]
}
 8008012:	bf00      	nop
 8008014:	e7fe      	b.n	8008014 <vPortValidateInterruptPriority+0x68>
	}
 8008016:	bf00      	nop
 8008018:	3714      	adds	r7, #20
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	e000e3f0 	.word	0xe000e3f0
 8008028:	20000c74 	.word	0x20000c74
 800802c:	e000ed0c 	.word	0xe000ed0c
 8008030:	20000c78 	.word	0x20000c78

08008034 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b08a      	sub	sp, #40	; 0x28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800803c:	2300      	movs	r3, #0
 800803e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008040:	f7ff f900 	bl	8007244 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008044:	4b5b      	ldr	r3, [pc, #364]	; (80081b4 <pvPortMalloc+0x180>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800804c:	f000 f91a 	bl	8008284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008050:	4b59      	ldr	r3, [pc, #356]	; (80081b8 <pvPortMalloc+0x184>)
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4013      	ands	r3, r2
 8008058:	2b00      	cmp	r3, #0
 800805a:	f040 8092 	bne.w	8008182 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d01f      	beq.n	80080a4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008064:	2208      	movs	r2, #8
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4413      	add	r3, r2
 800806a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f003 0307 	and.w	r3, r3, #7
 8008072:	2b00      	cmp	r3, #0
 8008074:	d016      	beq.n	80080a4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f023 0307 	bic.w	r3, r3, #7
 800807c:	3308      	adds	r3, #8
 800807e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00c      	beq.n	80080a4 <pvPortMalloc+0x70>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	b672      	cpsid	i
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	b662      	cpsie	i
 800809e:	617b      	str	r3, [r7, #20]
}
 80080a0:	bf00      	nop
 80080a2:	e7fe      	b.n	80080a2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d06b      	beq.n	8008182 <pvPortMalloc+0x14e>
 80080aa:	4b44      	ldr	r3, [pc, #272]	; (80081bc <pvPortMalloc+0x188>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d866      	bhi.n	8008182 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80080b4:	4b42      	ldr	r3, [pc, #264]	; (80081c0 <pvPortMalloc+0x18c>)
 80080b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80080b8:	4b41      	ldr	r3, [pc, #260]	; (80081c0 <pvPortMalloc+0x18c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080be:	e004      	b.n	80080ca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d903      	bls.n	80080dc <pvPortMalloc+0xa8>
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1f1      	bne.n	80080c0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80080dc:	4b35      	ldr	r3, [pc, #212]	; (80081b4 <pvPortMalloc+0x180>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d04d      	beq.n	8008182 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2208      	movs	r2, #8
 80080ec:	4413      	add	r3, r2
 80080ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	1ad2      	subs	r2, r2, r3
 8008100:	2308      	movs	r3, #8
 8008102:	005b      	lsls	r3, r3, #1
 8008104:	429a      	cmp	r2, r3
 8008106:	d921      	bls.n	800814c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4413      	add	r3, r2
 800810e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	f003 0307 	and.w	r3, r3, #7
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00c      	beq.n	8008134 <pvPortMalloc+0x100>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	b672      	cpsid	i
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	b662      	cpsie	i
 800812e:	613b      	str	r3, [r7, #16]
}
 8008130:	bf00      	nop
 8008132:	e7fe      	b.n	8008132 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	1ad2      	subs	r2, r2, r3
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008146:	69b8      	ldr	r0, [r7, #24]
 8008148:	f000 f8fe 	bl	8008348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800814c:	4b1b      	ldr	r3, [pc, #108]	; (80081bc <pvPortMalloc+0x188>)
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	4a19      	ldr	r2, [pc, #100]	; (80081bc <pvPortMalloc+0x188>)
 8008158:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800815a:	4b18      	ldr	r3, [pc, #96]	; (80081bc <pvPortMalloc+0x188>)
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4b19      	ldr	r3, [pc, #100]	; (80081c4 <pvPortMalloc+0x190>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	429a      	cmp	r2, r3
 8008164:	d203      	bcs.n	800816e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008166:	4b15      	ldr	r3, [pc, #84]	; (80081bc <pvPortMalloc+0x188>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a16      	ldr	r2, [pc, #88]	; (80081c4 <pvPortMalloc+0x190>)
 800816c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	685a      	ldr	r2, [r3, #4]
 8008172:	4b11      	ldr	r3, [pc, #68]	; (80081b8 <pvPortMalloc+0x184>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	431a      	orrs	r2, r3
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	2200      	movs	r2, #0
 8008180:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008182:	f7ff f86d 	bl	8007260 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	f003 0307 	and.w	r3, r3, #7
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00c      	beq.n	80081aa <pvPortMalloc+0x176>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008194:	b672      	cpsid	i
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	b662      	cpsie	i
 80081a4:	60fb      	str	r3, [r7, #12]
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <pvPortMalloc+0x174>
	return pvReturn;
 80081aa:	69fb      	ldr	r3, [r7, #28]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3728      	adds	r7, #40	; 0x28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	20004884 	.word	0x20004884
 80081b8:	20004890 	.word	0x20004890
 80081bc:	20004888 	.word	0x20004888
 80081c0:	2000487c 	.word	0x2000487c
 80081c4:	2000488c 	.word	0x2000488c

080081c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d04c      	beq.n	8008274 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081da:	2308      	movs	r3, #8
 80081dc:	425b      	negs	r3, r3
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	4413      	add	r3, r2
 80081e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	4b23      	ldr	r3, [pc, #140]	; (800827c <vPortFree+0xb4>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4013      	ands	r3, r2
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10c      	bne.n	8008210 <vPortFree+0x48>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	b672      	cpsid	i
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	b662      	cpsie	i
 800820a:	60fb      	str	r3, [r7, #12]
}
 800820c:	bf00      	nop
 800820e:	e7fe      	b.n	800820e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00c      	beq.n	8008232 <vPortFree+0x6a>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821c:	b672      	cpsid	i
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	b662      	cpsie	i
 800822c:	60bb      	str	r3, [r7, #8]
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	4b11      	ldr	r3, [pc, #68]	; (800827c <vPortFree+0xb4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4013      	ands	r3, r2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d019      	beq.n	8008274 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d115      	bne.n	8008274 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	4b0b      	ldr	r3, [pc, #44]	; (800827c <vPortFree+0xb4>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	43db      	mvns	r3, r3
 8008252:	401a      	ands	r2, r3
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008258:	f7fe fff4 	bl	8007244 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	4b07      	ldr	r3, [pc, #28]	; (8008280 <vPortFree+0xb8>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4413      	add	r3, r2
 8008266:	4a06      	ldr	r2, [pc, #24]	; (8008280 <vPortFree+0xb8>)
 8008268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800826a:	6938      	ldr	r0, [r7, #16]
 800826c:	f000 f86c 	bl	8008348 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008270:	f7fe fff6 	bl	8007260 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008274:	bf00      	nop
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20004890 	.word	0x20004890
 8008280:	20004888 	.word	0x20004888

08008284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800828a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800828e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008290:	4b27      	ldr	r3, [pc, #156]	; (8008330 <prvHeapInit+0xac>)
 8008292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00c      	beq.n	80082b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3307      	adds	r3, #7
 80082a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f023 0307 	bic.w	r3, r3, #7
 80082aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	4a1f      	ldr	r2, [pc, #124]	; (8008330 <prvHeapInit+0xac>)
 80082b4:	4413      	add	r3, r2
 80082b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80082bc:	4a1d      	ldr	r2, [pc, #116]	; (8008334 <prvHeapInit+0xb0>)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80082c2:	4b1c      	ldr	r3, [pc, #112]	; (8008334 <prvHeapInit+0xb0>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	4413      	add	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082d0:	2208      	movs	r2, #8
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	1a9b      	subs	r3, r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f023 0307 	bic.w	r3, r3, #7
 80082de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	4a15      	ldr	r2, [pc, #84]	; (8008338 <prvHeapInit+0xb4>)
 80082e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082e6:	4b14      	ldr	r3, [pc, #80]	; (8008338 <prvHeapInit+0xb4>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2200      	movs	r2, #0
 80082ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082ee:	4b12      	ldr	r3, [pc, #72]	; (8008338 <prvHeapInit+0xb4>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2200      	movs	r2, #0
 80082f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	1ad2      	subs	r2, r2, r3
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008304:	4b0c      	ldr	r3, [pc, #48]	; (8008338 <prvHeapInit+0xb4>)
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	4a0a      	ldr	r2, [pc, #40]	; (800833c <prvHeapInit+0xb8>)
 8008312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	4a09      	ldr	r2, [pc, #36]	; (8008340 <prvHeapInit+0xbc>)
 800831a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800831c:	4b09      	ldr	r3, [pc, #36]	; (8008344 <prvHeapInit+0xc0>)
 800831e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008322:	601a      	str	r2, [r3, #0]
}
 8008324:	bf00      	nop
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	20000c7c 	.word	0x20000c7c
 8008334:	2000487c 	.word	0x2000487c
 8008338:	20004884 	.word	0x20004884
 800833c:	2000488c 	.word	0x2000488c
 8008340:	20004888 	.word	0x20004888
 8008344:	20004890 	.word	0x20004890

08008348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008350:	4b28      	ldr	r3, [pc, #160]	; (80083f4 <prvInsertBlockIntoFreeList+0xac>)
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	e002      	b.n	800835c <prvInsertBlockIntoFreeList+0x14>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	429a      	cmp	r2, r3
 8008364:	d8f7      	bhi.n	8008356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	4413      	add	r3, r2
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	429a      	cmp	r2, r3
 8008376:	d108      	bne.n	800838a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	441a      	add	r2, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	441a      	add	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d118      	bne.n	80083d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	4b15      	ldr	r3, [pc, #84]	; (80083f8 <prvInsertBlockIntoFreeList+0xb0>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d00d      	beq.n	80083c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	441a      	add	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	e008      	b.n	80083d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80083c6:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <prvInsertBlockIntoFreeList+0xb0>)
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	e003      	b.n	80083d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d002      	beq.n	80083e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083e6:	bf00      	nop
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	2000487c 	.word	0x2000487c
 80083f8:	20004884 	.word	0x20004884

080083fc <memset>:
 80083fc:	4402      	add	r2, r0
 80083fe:	4603      	mov	r3, r0
 8008400:	4293      	cmp	r3, r2
 8008402:	d100      	bne.n	8008406 <memset+0xa>
 8008404:	4770      	bx	lr
 8008406:	f803 1b01 	strb.w	r1, [r3], #1
 800840a:	e7f9      	b.n	8008400 <memset+0x4>

0800840c <__libc_init_array>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	4d0d      	ldr	r5, [pc, #52]	; (8008444 <__libc_init_array+0x38>)
 8008410:	4c0d      	ldr	r4, [pc, #52]	; (8008448 <__libc_init_array+0x3c>)
 8008412:	1b64      	subs	r4, r4, r5
 8008414:	10a4      	asrs	r4, r4, #2
 8008416:	2600      	movs	r6, #0
 8008418:	42a6      	cmp	r6, r4
 800841a:	d109      	bne.n	8008430 <__libc_init_array+0x24>
 800841c:	4d0b      	ldr	r5, [pc, #44]	; (800844c <__libc_init_array+0x40>)
 800841e:	4c0c      	ldr	r4, [pc, #48]	; (8008450 <__libc_init_array+0x44>)
 8008420:	f000 f826 	bl	8008470 <_init>
 8008424:	1b64      	subs	r4, r4, r5
 8008426:	10a4      	asrs	r4, r4, #2
 8008428:	2600      	movs	r6, #0
 800842a:	42a6      	cmp	r6, r4
 800842c:	d105      	bne.n	800843a <__libc_init_array+0x2e>
 800842e:	bd70      	pop	{r4, r5, r6, pc}
 8008430:	f855 3b04 	ldr.w	r3, [r5], #4
 8008434:	4798      	blx	r3
 8008436:	3601      	adds	r6, #1
 8008438:	e7ee      	b.n	8008418 <__libc_init_array+0xc>
 800843a:	f855 3b04 	ldr.w	r3, [r5], #4
 800843e:	4798      	blx	r3
 8008440:	3601      	adds	r6, #1
 8008442:	e7f2      	b.n	800842a <__libc_init_array+0x1e>
 8008444:	080085ac 	.word	0x080085ac
 8008448:	080085ac 	.word	0x080085ac
 800844c:	080085ac 	.word	0x080085ac
 8008450:	080085b0 	.word	0x080085b0

08008454 <memcpy>:
 8008454:	440a      	add	r2, r1
 8008456:	4291      	cmp	r1, r2
 8008458:	f100 33ff 	add.w	r3, r0, #4294967295
 800845c:	d100      	bne.n	8008460 <memcpy+0xc>
 800845e:	4770      	bx	lr
 8008460:	b510      	push	{r4, lr}
 8008462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800846a:	4291      	cmp	r1, r2
 800846c:	d1f9      	bne.n	8008462 <memcpy+0xe>
 800846e:	bd10      	pop	{r4, pc}

08008470 <_init>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	bf00      	nop
 8008474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008476:	bc08      	pop	{r3}
 8008478:	469e      	mov	lr, r3
 800847a:	4770      	bx	lr

0800847c <_fini>:
 800847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847e:	bf00      	nop
 8008480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008482:	bc08      	pop	{r3}
 8008484:	469e      	mov	lr, r3
 8008486:	4770      	bx	lr
