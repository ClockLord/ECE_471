
ECE471_Hw11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a550  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  0800a720  0800a720  0001a720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8e0  0800a8e0  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8e0  0800a8e0  0001a8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8e8  0800a8e8  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8e8  0800a8e8  0001a8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8ec  0800a8ec  0001a8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800a8f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b48  20000160  0800aa50  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005ca8  0800aa50  00025ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b2d5  00000000  00000000  000201d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000476c  00000000  00000000  0003b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c0  00000000  00000000  0003fc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001211  00000000  00000000  000413d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ae3a  00000000  00000000  000425e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ec28  00000000  00000000  0006d423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f87dc  00000000  00000000  0008c04b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006504  00000000  00000000  00184828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0018ad2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000160 	.word	0x20000160
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a708 	.word	0x0800a708

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000164 	.word	0x20000164
 800020c:	0800a708 	.word	0x0800a708

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4a07      	ldr	r2, [pc, #28]	; (8000548 <vApplicationGetIdleTaskMemory+0x2c>)
 800052c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	4a06      	ldr	r2, [pc, #24]	; (800054c <vApplicationGetIdleTaskMemory+0x30>)
 8000532:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	2000017c 	.word	0x2000017c
 800054c:	200001d0 	.word	0x200001d0

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b08c      	sub	sp, #48	; 0x30
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 fbc2 	bl	8000cde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f82d 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 f893 	bl	8000688 <MX_GPIO_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of vcom_rx_queue */
  osMessageQDef(vcom_rx_queue, 80, uint8_t);
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <main+0x58>)
 8000564:	f107 0420 	add.w	r4, r7, #32
 8000568:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800056a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  vcom_rx_queueHandle = osMessageCreate(osMessageQ(vcom_rx_queue), NULL);
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f007 f9fa 	bl	800796e <osMessageCreate>
 800057a:	4603      	mov	r3, r0
 800057c:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <main+0x5c>)
 800057e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <main+0x60>)
 8000582:	1d3c      	adds	r4, r7, #4
 8000584:	461d      	mov	r5, r3
 8000586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f007 f989 	bl	80078ae <osThreadCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <main+0x64>)
 80005a0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005a2:	f007 f97d 	bl	80078a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <main+0x56>
 80005a8:	0800a720 	.word	0x0800a720
 80005ac:	200003d4 	.word	0x200003d4
 80005b0:	0800a73c 	.word	0x0800a73c
 80005b4:	200003d0 	.word	0x200003d0

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00a f800 	bl	800a5cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005dc:	f002 f948 	bl	8002870 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <SystemClock_Config+0xc8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a26      	ldr	r2, [pc, #152]	; (8000680 <SystemClock_Config+0xc8>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <SystemClock_Config+0xc8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <SystemClock_Config+0xcc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000600:	4a20      	ldr	r2, [pc, #128]	; (8000684 <SystemClock_Config+0xcc>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <SystemClock_Config+0xcc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000618:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800062c:	2348      	movs	r3, #72	; 0x48
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000634:	2303      	movs	r3, #3
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f002 f927 	bl	8002890 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000648:	f000 fa07 	bl	8000a5a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2102      	movs	r1, #2
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fbb5 	bl	8002dd8 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000674:	f000 f9f1 	bl	8000a5a <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3750      	adds	r7, #80	; 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	; 0x30
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	4b70      	ldr	r3, [pc, #448]	; (8000860 <MX_GPIO_Init+0x1d8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a6f      	ldr	r2, [pc, #444]	; (8000860 <MX_GPIO_Init+0x1d8>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b6d      	ldr	r3, [pc, #436]	; (8000860 <MX_GPIO_Init+0x1d8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	61bb      	str	r3, [r7, #24]
 80006b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	4b6a      	ldr	r3, [pc, #424]	; (8000860 <MX_GPIO_Init+0x1d8>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a69      	ldr	r2, [pc, #420]	; (8000860 <MX_GPIO_Init+0x1d8>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b67      	ldr	r3, [pc, #412]	; (8000860 <MX_GPIO_Init+0x1d8>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b64      	ldr	r3, [pc, #400]	; (8000860 <MX_GPIO_Init+0x1d8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a63      	ldr	r2, [pc, #396]	; (8000860 <MX_GPIO_Init+0x1d8>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b61      	ldr	r3, [pc, #388]	; (8000860 <MX_GPIO_Init+0x1d8>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b5e      	ldr	r3, [pc, #376]	; (8000860 <MX_GPIO_Init+0x1d8>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a5d      	ldr	r2, [pc, #372]	; (8000860 <MX_GPIO_Init+0x1d8>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b5b      	ldr	r3, [pc, #364]	; (8000860 <MX_GPIO_Init+0x1d8>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	4b58      	ldr	r3, [pc, #352]	; (8000860 <MX_GPIO_Init+0x1d8>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a57      	ldr	r2, [pc, #348]	; (8000860 <MX_GPIO_Init+0x1d8>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b55      	ldr	r3, [pc, #340]	; (8000860 <MX_GPIO_Init+0x1d8>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000716:	4b52      	ldr	r3, [pc, #328]	; (8000860 <MX_GPIO_Init+0x1d8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a51      	ldr	r2, [pc, #324]	; (8000860 <MX_GPIO_Init+0x1d8>)
 800071c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b4f      	ldr	r3, [pc, #316]	; (8000860 <MX_GPIO_Init+0x1d8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f244 0181 	movw	r1, #16513	; 0x4081
 8000734:	484b      	ldr	r0, [pc, #300]	; (8000864 <MX_GPIO_Init+0x1dc>)
 8000736:	f000 fdc9 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2140      	movs	r1, #64	; 0x40
 800073e:	484a      	ldr	r0, [pc, #296]	; (8000868 <MX_GPIO_Init+0x1e0>)
 8000740:	f000 fdc4 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800074a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800074e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	4844      	ldr	r0, [pc, #272]	; (800086c <MX_GPIO_Init+0x1e4>)
 800075c:	f000 fbf2 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000760:	2332      	movs	r3, #50	; 0x32
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000770:	230b      	movs	r3, #11
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	483c      	ldr	r0, [pc, #240]	; (800086c <MX_GPIO_Init+0x1e4>)
 800077c:	f000 fbe2 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000780:	2386      	movs	r3, #134	; 0x86
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000790:	230b      	movs	r3, #11
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4619      	mov	r1, r3
 800079a:	4835      	ldr	r0, [pc, #212]	; (8000870 <MX_GPIO_Init+0x1e8>)
 800079c:	f000 fbd2 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007a0:	f244 0381 	movw	r3, #16513	; 0x4081
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	482a      	ldr	r0, [pc, #168]	; (8000864 <MX_GPIO_Init+0x1dc>)
 80007ba:	f000 fbc3 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d0:	230b      	movs	r3, #11
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4822      	ldr	r0, [pc, #136]	; (8000864 <MX_GPIO_Init+0x1dc>)
 80007dc:	f000 fbb2 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007f2:	2307      	movs	r3, #7
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	481d      	ldr	r0, [pc, #116]	; (8000874 <MX_GPIO_Init+0x1ec>)
 80007fe:	f000 fba1 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000802:	2340      	movs	r3, #64	; 0x40
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4813      	ldr	r0, [pc, #76]	; (8000868 <MX_GPIO_Init+0x1e0>)
 800081a:	f000 fb93 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800081e:	2380      	movs	r3, #128	; 0x80
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_GPIO_Init+0x1e0>)
 8000832:	f000 fb87 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000836:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000848:	230b      	movs	r3, #11
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_GPIO_Init+0x1e0>)
 8000854:	f000 fb76 	bl	8000f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000858:	bf00      	nop
 800085a:	3730      	adds	r7, #48	; 0x30
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40020400 	.word	0x40020400
 8000868:	40021800 	.word	0x40021800
 800086c:	40020800 	.word	0x40020800
 8000870:	40020000 	.word	0x40020000
 8000874:	40020c00 	.word	0x40020c00

08000878 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000880:	f009 f82c 	bl	80098dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  GPIO_PinState pin_status = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  char channel = 'G';
 800088a:	2347      	movs	r3, #71	; 0x47
 800088c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  /* Infinite loop */
  for(;;)
  {
    uint8_t buffer_usb_byte;
    BaseType_t status = xQueueReceive(vcom_rx_queueHandle, &buffer_usb_byte, 0 );
 8000890:	4b62      	ldr	r3, [pc, #392]	; (8000a1c <StartDefaultTask+0x1a4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f107 011d 	add.w	r1, r7, #29
 8000898:	2200      	movs	r2, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f007 fb32 	bl	8007f04 <xQueueReceive>
 80008a0:	6238      	str	r0, [r7, #32]
    if (status) {
 80008a2:	6a3b      	ldr	r3, [r7, #32]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	f000 8085 	beq.w	80009b4 <StartDefaultTask+0x13c>
      switch (buffer_usb_byte) {
 80008aa:	7f7b      	ldrb	r3, [r7, #29]
 80008ac:	2b72      	cmp	r3, #114	; 0x72
 80008ae:	dc79      	bgt.n	80009a4 <StartDefaultTask+0x12c>
 80008b0:	2b62      	cmp	r3, #98	; 0x62
 80008b2:	da08      	bge.n	80008c6 <StartDefaultTask+0x4e>
 80008b4:	2b52      	cmp	r3, #82	; 0x52
 80008b6:	dc75      	bgt.n	80009a4 <StartDefaultTask+0x12c>
 80008b8:	2b42      	cmp	r3, #66	; 0x42
 80008ba:	da12      	bge.n	80008e2 <StartDefaultTask+0x6a>
 80008bc:	2b30      	cmp	r3, #48	; 0x30
 80008be:	d033      	beq.n	8000928 <StartDefaultTask+0xb0>
 80008c0:	2b31      	cmp	r3, #49	; 0x31
 80008c2:	d050      	beq.n	8000966 <StartDefaultTask+0xee>
 80008c4:	e06e      	b.n	80009a4 <StartDefaultTask+0x12c>
 80008c6:	3b62      	subs	r3, #98	; 0x62
 80008c8:	4a55      	ldr	r2, [pc, #340]	; (8000a20 <StartDefaultTask+0x1a8>)
 80008ca:	fa22 f303 	lsr.w	r3, r2, r3
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	bf14      	ite	ne
 80008d6:	2301      	movne	r3, #1
 80008d8:	2300      	moveq	r3, #0
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d111      	bne.n	8000904 <StartDefaultTask+0x8c>
 80008e0:	e060      	b.n	80009a4 <StartDefaultTask+0x12c>
 80008e2:	3b42      	subs	r3, #66	; 0x42
 80008e4:	4a4e      	ldr	r2, [pc, #312]	; (8000a20 <StartDefaultTask+0x1a8>)
 80008e6:	fa22 f303 	lsr.w	r3, r2, r3
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bf14      	ite	ne
 80008f2:	2301      	movne	r3, #1
 80008f4:	2300      	moveq	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d053      	beq.n	80009a4 <StartDefaultTask+0x12c>
        case 'R': case 'G': case 'B':
          channel=buffer_usb_byte;
 80008fc:	7f7b      	ldrb	r3, [r7, #29]
 80008fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        break;
 8000902:	e057      	b.n	80009b4 <StartDefaultTask+0x13c>
        case 'r': case 'g': case 'b':
          channel=toupper(buffer_usb_byte);
 8000904:	7f7b      	ldrb	r3, [r7, #29]
 8000906:	77fb      	strb	r3, [r7, #31]
 8000908:	7ffb      	ldrb	r3, [r7, #31]
 800090a:	3301      	adds	r3, #1
 800090c:	4a45      	ldr	r2, [pc, #276]	; (8000a24 <StartDefaultTask+0x1ac>)
 800090e:	4413      	add	r3, r2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	2b02      	cmp	r3, #2
 8000918:	d102      	bne.n	8000920 <StartDefaultTask+0xa8>
 800091a:	7ffb      	ldrb	r3, [r7, #31]
 800091c:	3b20      	subs	r3, #32
 800091e:	e000      	b.n	8000922 <StartDefaultTask+0xaa>
 8000920:	7ffb      	ldrb	r3, [r7, #31]
 8000922:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        break;
 8000926:	e045      	b.n	80009b4 <StartDefaultTask+0x13c>
        case '0':
          switch(channel) {
 8000928:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800092c:	2b52      	cmp	r3, #82	; 0x52
 800092e:	d006      	beq.n	800093e <StartDefaultTask+0xc6>
 8000930:	2b52      	cmp	r3, #82	; 0x52
 8000932:	dc3c      	bgt.n	80009ae <StartDefaultTask+0x136>
 8000934:	2b42      	cmp	r3, #66	; 0x42
 8000936:	d00f      	beq.n	8000958 <StartDefaultTask+0xe0>
 8000938:	2b47      	cmp	r3, #71	; 0x47
 800093a:	d007      	beq.n	800094c <StartDefaultTask+0xd4>
            break;
            case'B':
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
            break;
          }
        break;
 800093c:	e037      	b.n	80009ae <StartDefaultTask+0x136>
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000944:	4838      	ldr	r0, [pc, #224]	; (8000a28 <StartDefaultTask+0x1b0>)
 8000946:	f000 fcc1 	bl	80012cc <HAL_GPIO_WritePin>
            break;
 800094a:	e00b      	b.n	8000964 <StartDefaultTask+0xec>
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2101      	movs	r1, #1
 8000950:	4835      	ldr	r0, [pc, #212]	; (8000a28 <StartDefaultTask+0x1b0>)
 8000952:	f000 fcbb 	bl	80012cc <HAL_GPIO_WritePin>
            break;
 8000956:	e005      	b.n	8000964 <StartDefaultTask+0xec>
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2180      	movs	r1, #128	; 0x80
 800095c:	4832      	ldr	r0, [pc, #200]	; (8000a28 <StartDefaultTask+0x1b0>)
 800095e:	f000 fcb5 	bl	80012cc <HAL_GPIO_WritePin>
            break;
 8000962:	bf00      	nop
        break;
 8000964:	e023      	b.n	80009ae <StartDefaultTask+0x136>

        case '1':
            switch(channel) {
 8000966:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800096a:	2b52      	cmp	r3, #82	; 0x52
 800096c:	d006      	beq.n	800097c <StartDefaultTask+0x104>
 800096e:	2b52      	cmp	r3, #82	; 0x52
 8000970:	dc1f      	bgt.n	80009b2 <StartDefaultTask+0x13a>
 8000972:	2b42      	cmp	r3, #66	; 0x42
 8000974:	d00f      	beq.n	8000996 <StartDefaultTask+0x11e>
 8000976:	2b47      	cmp	r3, #71	; 0x47
 8000978:	d007      	beq.n	800098a <StartDefaultTask+0x112>
              break;
              case'B':
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
              break;
            }
        break;
 800097a:	e01a      	b.n	80009b2 <StartDefaultTask+0x13a>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000982:	4829      	ldr	r0, [pc, #164]	; (8000a28 <StartDefaultTask+0x1b0>)
 8000984:	f000 fca2 	bl	80012cc <HAL_GPIO_WritePin>
              break;
 8000988:	e00b      	b.n	80009a2 <StartDefaultTask+0x12a>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800098a:	2201      	movs	r2, #1
 800098c:	2101      	movs	r1, #1
 800098e:	4826      	ldr	r0, [pc, #152]	; (8000a28 <StartDefaultTask+0x1b0>)
 8000990:	f000 fc9c 	bl	80012cc <HAL_GPIO_WritePin>
              break;
 8000994:	e005      	b.n	80009a2 <StartDefaultTask+0x12a>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	2180      	movs	r1, #128	; 0x80
 800099a:	4823      	ldr	r0, [pc, #140]	; (8000a28 <StartDefaultTask+0x1b0>)
 800099c:	f000 fc96 	bl	80012cc <HAL_GPIO_WritePin>
              break;
 80009a0:	bf00      	nop
        break;
 80009a2:	e006      	b.n	80009b2 <StartDefaultTask+0x13a>
        default:
          CDC_Transmit_FS( (uint8_t *)"?", 1 );
 80009a4:	2101      	movs	r1, #1
 80009a6:	4821      	ldr	r0, [pc, #132]	; (8000a2c <StartDefaultTask+0x1b4>)
 80009a8:	f009 f87c 	bl	8009aa4 <CDC_Transmit_FS>
 80009ac:	e002      	b.n	80009b4 <StartDefaultTask+0x13c>
        break;
 80009ae:	bf00      	nop
 80009b0:	e000      	b.n	80009b4 <StartDefaultTask+0x13c>
        break;
 80009b2:	bf00      	nop
      }
    }

    GPIO_PinState new_status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80009b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b8:	481d      	ldr	r0, [pc, #116]	; (8000a30 <StartDefaultTask+0x1b8>)
 80009ba:	f000 fc6f 	bl	800129c <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	77bb      	strb	r3, [r7, #30]
    if ( pin_status!=new_status ) {
 80009c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80009c6:	7fbb      	ldrb	r3, [r7, #30]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d023      	beq.n	8000a14 <StartDefaultTask+0x19c>
      pin_status=new_status;
 80009cc:	7fbb      	ldrb	r3, [r7, #30]
 80009ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // Prepare the buffer to send the event message out
      char buffer_usb_out[20]; // consider making it static so that it is not on the task stack
      if (pin_status) strcpy(buffer_usb_out, "pressed\r\n");
 80009d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d006      	beq.n	80009e8 <StartDefaultTask+0x170>
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <StartDefaultTask+0x1bc>)
 80009e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80009e2:	c303      	stmia	r3!, {r0, r1}
 80009e4:	801a      	strh	r2, [r3, #0]
 80009e6:	e008      	b.n	80009fa <StartDefaultTask+0x182>
      else strcpy(buffer_usb_out, "released\r\n");
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <StartDefaultTask+0x1c0>)
 80009ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80009f0:	c303      	stmia	r3!, {r0, r1}
 80009f2:	801a      	strh	r2, [r3, #0]
 80009f4:	3302      	adds	r3, #2
 80009f6:	0c12      	lsrs	r2, r2, #16
 80009f8:	701a      	strb	r2, [r3, #0]
      CDC_Transmit_FS( (uint8_t *)buffer_usb_out, strlen(buffer_usb_out) );
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fc06 	bl	8000210 <strlen>
 8000a04:	4603      	mov	r3, r0
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f009 f848 	bl	8009aa4 <CDC_Transmit_FS>
    }
    osDelay(10);
 8000a14:	200a      	movs	r0, #10
 8000a16:	f006 ff96 	bl	8007946 <osDelay>
  {
 8000a1a:	e739      	b.n	8000890 <StartDefaultTask+0x18>
 8000a1c:	200003d4 	.word	0x200003d4
 8000a20:	00010021 	.word	0x00010021
 8000a24:	0800a7dc 	.word	0x0800a7dc
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	0800a758 	.word	0x0800a758
 8000a30:	40020800 	.word	0x40020800
 8000a34:	0800a75c 	.word	0x0800a75c
 8000a38:	0800a768 	.word	0x0800a768

08000a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a4c:	d101      	bne.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4e:	f000 f953 	bl	8000cf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5e:	b672      	cpsid	i
}
 8000a60:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	f06f 0001 	mvn.w	r0, #1
 8000aa2:	f000 fa25 	bl	8000ef0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08e      	sub	sp, #56	; 0x38
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000ac4:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <HAL_InitTick+0xe4>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a33      	ldr	r2, [pc, #204]	; (8000b98 <HAL_InitTick+0xe4>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad0:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <HAL_InitTick+0xe4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000adc:	f107 0210 	add.w	r2, r7, #16
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 fb88 	bl	80031fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aec:	6a3b      	ldr	r3, [r7, #32]
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d103      	bne.n	8000afe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000af6:	f002 fb6d 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 8000afa:	6378      	str	r0, [r7, #52]	; 0x34
 8000afc:	e004      	b.n	8000b08 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000afe:	f002 fb69 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 8000b02:	4603      	mov	r3, r0
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0a:	4a24      	ldr	r2, [pc, #144]	; (8000b9c <HAL_InitTick+0xe8>)
 8000b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b10:	0c9b      	lsrs	r3, r3, #18
 8000b12:	3b01      	subs	r3, #1
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <HAL_InitTick+0xec>)
 8000b18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <HAL_InitTick+0xec>)
 8000b20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b24:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000b26:	4a1e      	ldr	r2, [pc, #120]	; (8000ba0 <HAL_InitTick+0xec>)
 8000b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HAL_InitTick+0xec>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <HAL_InitTick+0xec>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b38:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <HAL_InitTick+0xec>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000b3e:	4818      	ldr	r0, [pc, #96]	; (8000ba0 <HAL_InitTick+0xec>)
 8000b40:	f002 ff7e 	bl	8003a40 <HAL_TIM_Base_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d11b      	bne.n	8000b8a <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000b52:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <HAL_InitTick+0xec>)
 8000b54:	f002 ffd6 	bl	8003b04 <HAL_TIM_Base_Start_IT>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d111      	bne.n	8000b8a <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b66:	201c      	movs	r0, #28
 8000b68:	f000 f9de 	bl	8000f28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b0f      	cmp	r3, #15
 8000b70:	d808      	bhi.n	8000b84 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000b72:	2200      	movs	r2, #0
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	201c      	movs	r0, #28
 8000b78:	f000 f9ba 	bl	8000ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b7c:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <HAL_InitTick+0xf0>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e002      	b.n	8000b8a <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3738      	adds	r7, #56	; 0x38
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	431bde83 	.word	0x431bde83
 8000ba0:	200003d8 	.word	0x200003d8
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <TIM2_IRQHandler+0x10>)
 8000bda:	f003 f80b 	bl	8003bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200003d8 	.word	0x200003d8

08000be8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <OTG_FS_IRQHandler+0x10>)
 8000bee:	f000 fccc 	bl	800158a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20005658 	.word	0x20005658

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f009 fce6 	bl	800a5fc <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20050000 	.word	0x20050000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	20000424 	.word	0x20000424
 8000c64:	20005ca8 	.word	0x20005ca8

08000c68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c92:	490e      	ldr	r1, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca8:	4c0b      	ldr	r4, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb6:	f7ff ffd7 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f009 fca5 	bl	800a608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fc47 	bl	8000550 <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000cd0:	0800a8f0 	.word	0x0800a8f0
  ldr r2, =_sbss
 8000cd4:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000cd8:	20005ca8 	.word	0x20005ca8

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>

08000cde <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce2:	2003      	movs	r0, #3
 8000ce4:	f000 f8f9 	bl	8000eda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce8:	200f      	movs	r0, #15
 8000cea:	f7ff fee3 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cee:	f7ff feb9 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000428 	.word	0x20000428

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000428 	.word	0x20000428

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff ffee 	bl	8000d20 <HAL_GetTick>
 8000d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_Delay+0x44>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d5e:	bf00      	nop
 8000d60:	f7ff ffde 	bl	8000d20 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	4313      	orrs	r3, r2
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00
 8000dc4:	05fa0000 	.word	0x05fa0000

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db0b      	blt.n	8000e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 021f 	and.w	r2, r3, #31
 8000dfc:	4907      	ldr	r1, [pc, #28]	; (8000e1c <__NVIC_EnableIRQ+0x38>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	2001      	movs	r0, #1
 8000e06:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	; (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff4c 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f02:	f7ff ff61 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	68b9      	ldr	r1, [r7, #8]
 8000f0c:	6978      	ldr	r0, [r7, #20]
 8000f0e:	f7ff ffb1 	bl	8000e74 <NVIC_EncodePriority>
 8000f12:	4602      	mov	r2, r0
 8000f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff80 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff54 	bl	8000de4 <__NVIC_EnableIRQ>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e175      	b.n	8001250 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	f040 8164 	bne.w	800124a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d005      	beq.n	8000f9a <HAL_GPIO_Init+0x56>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d130      	bne.n	8000ffc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	f003 0201 	and.w	r2, r3, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b03      	cmp	r3, #3
 8001006:	d017      	beq.n	8001038 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d123      	bne.n	800108c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	69b9      	ldr	r1, [r7, #24]
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0203 	and.w	r2, r3, #3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80be 	beq.w	800124a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	4b66      	ldr	r3, [pc, #408]	; (8001268 <HAL_GPIO_Init+0x324>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a65      	ldr	r2, [pc, #404]	; (8001268 <HAL_GPIO_Init+0x324>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b63      	ldr	r3, [pc, #396]	; (8001268 <HAL_GPIO_Init+0x324>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010e6:	4a61      	ldr	r2, [pc, #388]	; (800126c <HAL_GPIO_Init+0x328>)
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a58      	ldr	r2, [pc, #352]	; (8001270 <HAL_GPIO_Init+0x32c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d037      	beq.n	8001182 <HAL_GPIO_Init+0x23e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a57      	ldr	r2, [pc, #348]	; (8001274 <HAL_GPIO_Init+0x330>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d031      	beq.n	800117e <HAL_GPIO_Init+0x23a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a56      	ldr	r2, [pc, #344]	; (8001278 <HAL_GPIO_Init+0x334>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d02b      	beq.n	800117a <HAL_GPIO_Init+0x236>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a55      	ldr	r2, [pc, #340]	; (800127c <HAL_GPIO_Init+0x338>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d025      	beq.n	8001176 <HAL_GPIO_Init+0x232>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a54      	ldr	r2, [pc, #336]	; (8001280 <HAL_GPIO_Init+0x33c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d01f      	beq.n	8001172 <HAL_GPIO_Init+0x22e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a53      	ldr	r2, [pc, #332]	; (8001284 <HAL_GPIO_Init+0x340>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d019      	beq.n	800116e <HAL_GPIO_Init+0x22a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a52      	ldr	r2, [pc, #328]	; (8001288 <HAL_GPIO_Init+0x344>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0x226>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a51      	ldr	r2, [pc, #324]	; (800128c <HAL_GPIO_Init+0x348>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00d      	beq.n	8001166 <HAL_GPIO_Init+0x222>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a50      	ldr	r2, [pc, #320]	; (8001290 <HAL_GPIO_Init+0x34c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_Init+0x21e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4f      	ldr	r2, [pc, #316]	; (8001294 <HAL_GPIO_Init+0x350>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_GPIO_Init+0x21a>
 800115a:	2309      	movs	r3, #9
 800115c:	e012      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800115e:	230a      	movs	r3, #10
 8001160:	e010      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001162:	2308      	movs	r3, #8
 8001164:	e00e      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001166:	2307      	movs	r3, #7
 8001168:	e00c      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800116a:	2306      	movs	r3, #6
 800116c:	e00a      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800116e:	2305      	movs	r3, #5
 8001170:	e008      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001172:	2304      	movs	r3, #4
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001176:	2303      	movs	r3, #3
 8001178:	e004      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800117a:	2302      	movs	r3, #2
 800117c:	e002      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001182:	2300      	movs	r3, #0
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	4093      	lsls	r3, r2
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001194:	4935      	ldr	r1, [pc, #212]	; (800126c <HAL_GPIO_Init+0x328>)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c6:	4a34      	ldr	r2, [pc, #208]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f0:	4a29      	ldr	r2, [pc, #164]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800121a:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <HAL_GPIO_Init+0x354>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_GPIO_Init+0x354>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <HAL_GPIO_Init+0x354>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	f67f ae86 	bls.w	8000f64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40013800 	.word	0x40013800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	40020800 	.word	0x40020800
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40021000 	.word	0x40021000
 8001284:	40021400 	.word	0x40021400
 8001288:	40021800 	.word	0x40021800
 800128c:	40021c00 	.word	0x40021c00
 8001290:	40022000 	.word	0x40022000
 8001294:	40022400 	.word	0x40022400
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e001      	b.n	80012be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001300:	b08f      	sub	sp, #60	; 0x3c
 8001302:	af0a      	add	r7, sp, #40	; 0x28
 8001304:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e116      	b.n	800153e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f008 fd14 	bl	8009d58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f002 ff61 	bl	8004216 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	687e      	ldr	r6, [r7, #4]
 800135c:	466d      	mov	r5, sp
 800135e:	f106 0410 	add.w	r4, r6, #16
 8001362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800136a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800136e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001372:	1d33      	adds	r3, r6, #4
 8001374:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001376:	6838      	ldr	r0, [r7, #0]
 8001378:	f002 fe42 	bl	8004000 <USB_CoreInit>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2202      	movs	r2, #2
 8001386:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e0d7      	b.n	800153e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f002 ff4f 	bl	8004238 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	e04a      	b.n	8001436 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	333d      	adds	r3, #61	; 0x3d
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	333c      	adds	r3, #60	; 0x3c
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	b298      	uxth	r0, r3
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	3344      	adds	r3, #68	; 0x44
 80013dc:	4602      	mov	r2, r0
 80013de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	3340      	adds	r3, #64	; 0x40
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	3348      	adds	r3, #72	; 0x48
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	334c      	adds	r3, #76	; 0x4c
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4413      	add	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	3354      	adds	r3, #84	; 0x54
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	3301      	adds	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	d3af      	bcc.n	80013a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e044      	b.n	80014d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800149e:	7bfa      	ldrb	r2, [r7, #15]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	3301      	adds	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3b5      	bcc.n	8001446 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	687e      	ldr	r6, [r7, #4]
 80014e2:	466d      	mov	r5, sp
 80014e4:	f106 0410 	add.w	r4, r6, #16
 80014e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f8:	1d33      	adds	r3, r6, #4
 80014fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f002 fee7 	bl	80042d0 <USB_DevInit>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e014      	b.n	800153e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	2b01      	cmp	r3, #1
 800152a:	d102      	bne.n	8001532 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f001 f97b 	bl	8002828 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f004 f835 	bl	80055a6 <USB_DevDisconnect>

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001546 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_PCD_Start+0x16>
 8001558:	2302      	movs	r3, #2
 800155a:	e012      	b.n	8001582 <HAL_PCD_Start+0x3c>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fe43 	bl	80041f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f003 fff6 	bl	8005564 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800158a:	b590      	push	{r4, r7, lr}
 800158c:	b08d      	sub	sp, #52	; 0x34
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f004 f8b4 	bl	800570e <USB_GetMode>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f040 84b7 	bne.w	8001f1c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f004 f818 	bl	80055e8 <USB_ReadInterrupts>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 84ad 	beq.w	8001f1a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f004 f805 	bl	80055e8 <USB_ReadInterrupts>
 80015de:	4603      	mov	r3, r0
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d107      	bne.n	80015f8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f002 0202 	and.w	r2, r2, #2
 80015f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 fff3 	bl	80055e8 <USB_ReadInterrupts>
 8001602:	4603      	mov	r3, r0
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	2b10      	cmp	r3, #16
 800160a:	d161      	bne.n	80016d0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699a      	ldr	r2, [r3, #24]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0210 	bic.w	r2, r2, #16
 800161a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	f003 020f 	and.w	r2, r3, #15
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	3304      	adds	r3, #4
 800163a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	0c5b      	lsrs	r3, r3, #17
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	2b02      	cmp	r3, #2
 8001646:	d124      	bne.n	8001692 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d035      	beq.n	80016c0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800165e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001662:	b29b      	uxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	6a38      	ldr	r0, [r7, #32]
 8001668:	f003 fe2a 	bl	80052c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	091b      	lsrs	r3, r3, #4
 8001674:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001678:	441a      	add	r2, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	6a1a      	ldr	r2, [r3, #32]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800168a:	441a      	add	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	621a      	str	r2, [r3, #32]
 8001690:	e016      	b.n	80016c0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	0c5b      	lsrs	r3, r3, #17
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	2b06      	cmp	r3, #6
 800169c:	d110      	bne.n	80016c0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016a4:	2208      	movs	r2, #8
 80016a6:	4619      	mov	r1, r3
 80016a8:	6a38      	ldr	r0, [r7, #32]
 80016aa:	f003 fe09 	bl	80052c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	6a1a      	ldr	r2, [r3, #32]
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ba:	441a      	add	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0210 	orr.w	r2, r2, #16
 80016ce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 ff87 	bl	80055e8 <USB_ReadInterrupts>
 80016da:	4603      	mov	r3, r0
 80016dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016e4:	f040 80a7 	bne.w	8001836 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 ff8c 	bl	800560e <USB_ReadDevAllOutEpInterrupt>
 80016f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80016f8:	e099      	b.n	800182e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80016fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 808e 	beq.w	8001822 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f003 ffb0 	bl	8005676 <USB_ReadDevOutEPInterrupt>
 8001716:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00c      	beq.n	800173c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	015a      	lsls	r2, r3, #5
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800172e:	461a      	mov	r2, r3
 8001730:	2301      	movs	r3, #1
 8001732:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 fef0 	bl	800251c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	015a      	lsls	r2, r3, #5
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	4413      	add	r3, r2
 800174e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001752:	461a      	mov	r2, r3
 8001754:	2308      	movs	r3, #8
 8001756:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 ffc6 	bl	80026ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b00      	cmp	r3, #0
 8001768:	d008      	beq.n	800177c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	4413      	add	r3, r2
 8001772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001776:	461a      	mov	r2, r3
 8001778:	2310      	movs	r3, #16
 800177a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d030      	beq.n	80017e8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178e:	2b80      	cmp	r3, #128	; 0x80
 8001790:	d109      	bne.n	80017a6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80017a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a8:	4613      	mov	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4413      	add	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	3304      	adds	r3, #4
 80017ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	78db      	ldrb	r3, [r3, #3]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d108      	bne.n	80017d6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2200      	movs	r2, #0
 80017c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f008 fbf5 	bl	8009fc0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	015a      	lsls	r2, r3, #5
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	4413      	add	r3, r2
 80017de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017e2:	461a      	mov	r2, r3
 80017e4:	2302      	movs	r3, #2
 80017e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d008      	beq.n	8001804 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	015a      	lsls	r2, r3, #5
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	4413      	add	r3, r2
 80017fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017fe:	461a      	mov	r2, r3
 8001800:	2320      	movs	r3, #32
 8001802:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	015a      	lsls	r2, r3, #5
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	4413      	add	r3, r2
 8001816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800181a:	461a      	mov	r2, r3
 800181c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001820:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	3301      	adds	r3, #1
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182a:	085b      	lsrs	r3, r3, #1
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001830:	2b00      	cmp	r3, #0
 8001832:	f47f af62 	bne.w	80016fa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f003 fed4 	bl	80055e8 <USB_ReadInterrupts>
 8001840:	4603      	mov	r3, r0
 8001842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001846:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800184a:	f040 80db 	bne.w	8001a04 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f003 fef5 	bl	8005642 <USB_ReadDevAllInEpInterrupt>
 8001858:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800185e:	e0cd      	b.n	80019fc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80c2 	beq.w	80019f0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f003 ff1b 	bl	80056b2 <USB_ReadDevInEPInterrupt>
 800187c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d057      	beq.n	8001938 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	2201      	movs	r2, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69f9      	ldr	r1, [r7, #28]
 80018a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018a8:	4013      	ands	r3, r2
 80018aa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	015a      	lsls	r2, r3, #5
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	4413      	add	r3, r2
 80018b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018b8:	461a      	mov	r2, r3
 80018ba:	2301      	movs	r3, #1
 80018bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d132      	bne.n	800192c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	334c      	adds	r3, #76	; 0x4c
 80018d6:	6819      	ldr	r1, [r3, #0]
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018dc:	4613      	mov	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4403      	add	r3, r0
 80018e6:	3348      	adds	r3, #72	; 0x48
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4419      	add	r1, r3
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4403      	add	r3, r0
 80018fa:	334c      	adds	r3, #76	; 0x4c
 80018fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	2b00      	cmp	r3, #0
 8001902:	d113      	bne.n	800192c <HAL_PCD_IRQHandler+0x3a2>
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	3354      	adds	r3, #84	; 0x54
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d108      	bne.n	800192c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001924:	461a      	mov	r2, r3
 8001926:	2101      	movs	r1, #1
 8001928:	f003 ff24 	bl	8005774 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	b2db      	uxtb	r3, r3
 8001930:	4619      	mov	r1, r3
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f008 fabf 	bl	8009eb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d008      	beq.n	8001954 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	015a      	lsls	r2, r3, #5
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	4413      	add	r3, r2
 800194a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800194e:	461a      	mov	r2, r3
 8001950:	2308      	movs	r3, #8
 8001952:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	2b00      	cmp	r3, #0
 800195c:	d008      	beq.n	8001970 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	015a      	lsls	r2, r3, #5
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800196a:	461a      	mov	r2, r3
 800196c:	2310      	movs	r3, #16
 800196e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	015a      	lsls	r2, r3, #5
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	4413      	add	r3, r2
 8001982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001986:	461a      	mov	r2, r3
 8001988:	2340      	movs	r3, #64	; 0x40
 800198a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d023      	beq.n	80019de <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001996:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001998:	6a38      	ldr	r0, [r7, #32]
 800199a:	f002 fdf7 	bl	800458c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800199e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a0:	4613      	mov	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	3338      	adds	r3, #56	; 0x38
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	3304      	adds	r3, #4
 80019b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	78db      	ldrb	r3, [r3, #3]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d108      	bne.n	80019cc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2200      	movs	r2, #0
 80019be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	4619      	mov	r1, r3
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f008 fb0c 	bl	8009fe4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	015a      	lsls	r2, r3, #5
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	4413      	add	r3, r2
 80019d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019d8:	461a      	mov	r2, r3
 80019da:	2302      	movs	r3, #2
 80019dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 fd08 	bl	8002400 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	3301      	adds	r3, #1
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f8:	085b      	lsrs	r3, r3, #1
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f47f af2e 	bne.w	8001860 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f003 fded 	bl	80055e8 <USB_ReadInterrupts>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a18:	d122      	bne.n	8001a60 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d108      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a40:	2100      	movs	r1, #0
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f008 fc86 	bl	800a354 <HAL_PCDEx_LPM_Callback>
 8001a48:	e002      	b.n	8001a50 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f008 faaa 	bl	8009fa4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f003 fdbf 	bl	80055e8 <USB_ReadInterrupts>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a74:	d112      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d102      	bne.n	8001a8c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f008 fa66 	bl	8009f58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 fda1 	bl	80055e8 <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ab0:	d121      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001ac0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d111      	bne.n	8001af0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	f003 020f 	and.w	r2, r3, #15
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f008 fc33 	bl	800a354 <HAL_PCDEx_LPM_Callback>
 8001aee:	e002      	b.n	8001af6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f008 fa31 	bl	8009f58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fd74 	bl	80055e8 <USB_ReadInterrupts>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b0a:	f040 80b7 	bne.w	8001c7c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2110      	movs	r1, #16
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f002 fd2f 	bl	800458c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b32:	e046      	b.n	8001bc2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b36:	015a      	lsls	r2, r3, #5
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b40:	461a      	mov	r2, r3
 8001b42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b46:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b58:	0151      	lsls	r1, r2, #5
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	440a      	add	r2, r1
 8001b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b74:	461a      	mov	r2, r3
 8001b76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b7a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7e:	015a      	lsls	r2, r3, #5
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b8c:	0151      	lsls	r1, r2, #5
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	440a      	add	r2, r1
 8001b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9e:	015a      	lsls	r2, r3, #5
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bac:	0151      	lsls	r1, r2, #5
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	440a      	add	r2, r1
 8001bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d3b3      	bcc.n	8001b34 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bda:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001bde:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d016      	beq.n	8001c16 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf8:	f043 030b 	orr.w	r3, r3, #11
 8001bfc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c0e:	f043 030b 	orr.w	r3, r3, #11
 8001c12:	6453      	str	r3, [r2, #68]	; 0x44
 8001c14:	e015      	b.n	8001c42 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c24:	4619      	mov	r1, r3
 8001c26:	f242 032b 	movw	r3, #8235	; 0x202b
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c3c:	f043 030b 	orr.w	r3, r3, #11
 8001c40:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c50:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c54:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6818      	ldr	r0, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c66:	461a      	mov	r2, r3
 8001c68:	f003 fd84 	bl	8005774 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 fcb1 	bl	80055e8 <USB_ReadInterrupts>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c90:	d124      	bne.n	8001cdc <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 fd48 	bl	800572c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f002 fcf0 	bl	8004686 <USB_GetDevSpeed>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681c      	ldr	r4, [r3, #0]
 8001cb2:	f001 fa83 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 8001cb6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f002 f9f5 	bl	80040b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f008 f91d 	bl	8009f06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695a      	ldr	r2, [r3, #20]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001cda:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 fc81 	bl	80055e8 <USB_ReadInterrupts>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d10a      	bne.n	8001d06 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f008 f8fa 	bl	8009eea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f002 0208 	and.w	r2, r2, #8
 8001d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f003 fc6c 	bl	80055e8 <USB_ReadInterrupts>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b80      	cmp	r3, #128	; 0x80
 8001d18:	d122      	bne.n	8001d60 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d26:	2301      	movs	r3, #1
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2a:	e014      	b.n	8001d56 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	4619      	mov	r1, r3
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fb27 	bl	800239e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	3301      	adds	r3, #1
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d3e5      	bcc.n	8001d2c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 fc3f 	bl	80055e8 <USB_ReadInterrupts>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d74:	d13b      	bne.n	8001dee <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d76:	2301      	movs	r3, #1
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	e02b      	b.n	8001dd4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	3340      	adds	r3, #64	; 0x40
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001da2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	da12      	bge.n	8001dce <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	333f      	adds	r3, #63	; 0x3f
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 fae8 	bl	800239e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d3ce      	bcc.n	8001d7c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695a      	ldr	r2, [r3, #20]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 fbf8 	bl	80055e8 <USB_ReadInterrupts>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e02:	d155      	bne.n	8001eb0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e04:	2301      	movs	r3, #1
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
 8001e08:	e045      	b.n	8001e96 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1e:	4613      	mov	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d12e      	bne.n	8001e90 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e32:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	da2b      	bge.n	8001e90 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e44:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d121      	bne.n	8001e90 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10a      	bne.n	8001e90 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8c:	6053      	str	r3, [r2, #4]
            break;
 8001e8e:	e007      	b.n	8001ea0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	3301      	adds	r3, #1
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d3b4      	bcc.n	8001e0a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001eae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 fb97 	bl	80055e8 <USB_ReadInterrupts>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec4:	d10a      	bne.n	8001edc <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f008 f89e 	bl	800a008 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 fb81 	bl	80055e8 <USB_ReadInterrupts>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d115      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f008 f88e 	bl	800a024 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6859      	ldr	r1, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	e000      	b.n	8001f1c <HAL_PCD_IRQHandler+0x992>
      return;
 8001f1a:	bf00      	nop
    }
  }
}
 8001f1c:	3734      	adds	r7, #52	; 0x34
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}

08001f22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_PCD_SetAddress+0x1a>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e013      	b.n	8001f64 <HAL_PCD_SetAddress+0x42>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	78fa      	ldrb	r2, [r7, #3]
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 fadf 	bl	8005518 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	4608      	mov	r0, r1
 8001f76:	4611      	mov	r1, r2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	70fb      	strb	r3, [r7, #3]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	803b      	strh	r3, [r7, #0]
 8001f82:	4613      	mov	r3, r2
 8001f84:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	da0f      	bge.n	8001fb2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	f003 020f 	and.w	r2, r3, #15
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	3338      	adds	r3, #56	; 0x38
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	705a      	strb	r2, [r3, #1]
 8001fb0:	e00f      	b.n	8001fd2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	f003 020f 	and.w	r2, r3, #15
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3304      	adds	r3, #4
 8001fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fde:	883a      	ldrh	r2, [r7, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	78ba      	ldrb	r2, [r7, #2]
 8001fe8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	785b      	ldrb	r3, [r3, #1]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ffc:	78bb      	ldrb	r3, [r7, #2]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d102      	bne.n	8002008 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_PCD_EP_Open+0xaa>
 8002012:	2302      	movs	r3, #2
 8002014:	e00e      	b.n	8002034 <HAL_PCD_EP_Open+0xc8>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68f9      	ldr	r1, [r7, #12]
 8002024:	4618      	mov	r0, r3
 8002026:	f002 fb53 	bl	80046d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002032:	7afb      	ldrb	r3, [r7, #11]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002048:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800204c:	2b00      	cmp	r3, #0
 800204e:	da0f      	bge.n	8002070 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	f003 020f 	and.w	r2, r3, #15
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	3338      	adds	r3, #56	; 0x38
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	3304      	adds	r3, #4
 8002066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	705a      	strb	r2, [r3, #1]
 800206e:	e00f      	b.n	8002090 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	f003 020f 	and.w	r2, r3, #15
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	3304      	adds	r3, #4
 8002088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	b2da      	uxtb	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_PCD_EP_Close+0x6e>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e00e      	b.n	80020c8 <HAL_PCD_EP_Close+0x8c>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68f9      	ldr	r1, [r7, #12]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 fb91 	bl	80047e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	460b      	mov	r3, r1
 80020de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020e0:	7afb      	ldrb	r3, [r7, #11]
 80020e2:	f003 020f 	and.w	r2, r3, #15
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4413      	add	r3, r2
 80020f6:	3304      	adds	r3, #4
 80020f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2200      	movs	r2, #0
 8002110:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002112:	7afb      	ldrb	r3, [r7, #11]
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	b2da      	uxtb	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d102      	bne.n	800212c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800212c:	7afb      	ldrb	r3, [r7, #11]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	6979      	ldr	r1, [r7, #20]
 8002144:	f002 fe78 	bl	8004e38 <USB_EP0StartXfer>
 8002148:	e008      	b.n	800215c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	6979      	ldr	r1, [r7, #20]
 8002158:	f002 fc1e 	bl	8004998 <USB_EPStartXfer>
  }

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	f003 020f 	and.w	r2, r3, #15
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002188:	681b      	ldr	r3, [r3, #0]
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	460b      	mov	r3, r1
 80021a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021a6:	7afb      	ldrb	r3, [r7, #11]
 80021a8:	f003 020f 	and.w	r2, r3, #15
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	3338      	adds	r3, #56	; 0x38
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4413      	add	r3, r2
 80021ba:	3304      	adds	r3, #4
 80021bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2200      	movs	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2201      	movs	r2, #1
 80021d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021d6:	7afb      	ldrb	r3, [r7, #11]
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d102      	bne.n	80021f0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021f0:	7afb      	ldrb	r3, [r7, #11]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	6979      	ldr	r1, [r7, #20]
 8002208:	f002 fe16 	bl	8004e38 <USB_EP0StartXfer>
 800220c:	e008      	b.n	8002220 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	6979      	ldr	r1, [r7, #20]
 800221c:	f002 fbbc 	bl	8004998 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	f003 020f 	and.w	r2, r3, #15
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	d901      	bls.n	8002248 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e050      	b.n	80022ea <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800224c:	2b00      	cmp	r3, #0
 800224e:	da0f      	bge.n	8002270 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	f003 020f 	and.w	r2, r3, #15
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	3338      	adds	r3, #56	; 0x38
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	3304      	adds	r3, #4
 8002266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	705a      	strb	r2, [r3, #1]
 800226e:	e00d      	b.n	800228c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	3304      	adds	r3, #4
 8002284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	b2da      	uxtb	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_PCD_EP_SetStall+0x82>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e01e      	b.n	80022ea <HAL_PCD_EP_SetStall+0xc0>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68f9      	ldr	r1, [r7, #12]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 f858 	bl	8005370 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	b2d9      	uxtb	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022da:	461a      	mov	r2, r3
 80022dc:	f003 fa4a 	bl	8005774 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	460b      	mov	r3, r1
 80022fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	f003 020f 	and.w	r2, r3, #15
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	d901      	bls.n	8002310 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e042      	b.n	8002396 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002314:	2b00      	cmp	r3, #0
 8002316:	da0f      	bge.n	8002338 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	f003 020f 	and.w	r2, r3, #15
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	3338      	adds	r3, #56	; 0x38
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	3304      	adds	r3, #4
 800232e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	705a      	strb	r2, [r3, #1]
 8002336:	e00f      	b.n	8002358 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 020f 	and.w	r2, r3, #15
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	3304      	adds	r3, #4
 8002350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	b2da      	uxtb	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_PCD_EP_ClrStall+0x86>
 8002374:	2302      	movs	r3, #2
 8002376:	e00e      	b.n	8002396 <HAL_PCD_EP_ClrStall+0xa4>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68f9      	ldr	r1, [r7, #12]
 8002386:	4618      	mov	r0, r3
 8002388:	f003 f860 	bl	800544c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80023aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	da0c      	bge.n	80023cc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 020f 	and.w	r2, r3, #15
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	3338      	adds	r3, #56	; 0x38
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	3304      	adds	r3, #4
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	e00c      	b.n	80023e6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 020f 	and.w	r2, r3, #15
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	3304      	adds	r3, #4
 80023e4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68f9      	ldr	r1, [r7, #12]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f002 fe7f 	bl	80050f0 <USB_EPStopXfer>
 80023f2:	4603      	mov	r3, r0
 80023f4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80023f6:	7afb      	ldrb	r3, [r7, #11]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	; 0x28
 8002404:	af02      	add	r7, sp, #8
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	3338      	adds	r3, #56	; 0x38
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	3304      	adds	r3, #4
 8002426:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a1a      	ldr	r2, [r3, #32]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	429a      	cmp	r2, r3
 8002432:	d901      	bls.n	8002438 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e06c      	b.n	8002512 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	699a      	ldr	r2, [r3, #24]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	429a      	cmp	r2, r3
 800244c:	d902      	bls.n	8002454 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	3303      	adds	r3, #3
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800245c:	e02b      	b.n	80024b6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	429a      	cmp	r2, r3
 8002472:	d902      	bls.n	800247a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3303      	adds	r3, #3
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6919      	ldr	r1, [r3, #16]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	b2da      	uxtb	r2, r3
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002492:	b2db      	uxtb	r3, r3
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	4603      	mov	r3, r0
 8002498:	6978      	ldr	r0, [r7, #20]
 800249a:	f002 fed3 	bl	8005244 <USB_WritePacket>

    ep->xfer_buff  += len;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	441a      	add	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a1a      	ldr	r2, [r3, #32]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	441a      	add	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d809      	bhi.n	80024e0 <PCD_WriteEmptyTxFifo+0xe0>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a1a      	ldr	r2, [r3, #32]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d203      	bcs.n	80024e0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1be      	bne.n	800245e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	699a      	ldr	r2, [r3, #24]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d811      	bhi.n	8002510 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	2201      	movs	r2, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	43db      	mvns	r3, r3
 8002506:	6939      	ldr	r1, [r7, #16]
 8002508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800250c:	4013      	ands	r3, r2
 800250e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	333c      	adds	r3, #60	; 0x3c
 8002534:	3304      	adds	r3, #4
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4413      	add	r3, r2
 8002542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d17b      	bne.n	800264a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d015      	beq.n	8002588 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	4a61      	ldr	r2, [pc, #388]	; (80026e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	f240 80b9 	bls.w	80026d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80b3 	beq.w	80026d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4413      	add	r3, r2
 800257a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800257e:	461a      	mov	r2, r3
 8002580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002584:	6093      	str	r3, [r2, #8]
 8002586:	e0a7      	b.n	80026d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	4413      	add	r3, r2
 800259a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800259e:	461a      	mov	r2, r3
 80025a0:	2320      	movs	r3, #32
 80025a2:	6093      	str	r3, [r2, #8]
 80025a4:	e098      	b.n	80026d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f040 8093 	bne.w	80026d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	4a4b      	ldr	r2, [pc, #300]	; (80026e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d90f      	bls.n	80025da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d0:	461a      	mov	r2, r3
 80025d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d6:	6093      	str	r3, [r2, #8]
 80025d8:	e07e      	b.n	80026d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	4413      	add	r3, r2
 80025ec:	3304      	adds	r3, #4
 80025ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	69da      	ldr	r2, [r3, #28]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	0159      	lsls	r1, r3, #5
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	440b      	add	r3, r1
 80025fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002606:	1ad2      	subs	r2, r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d114      	bne.n	800263c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002624:	461a      	mov	r2, r3
 8002626:	2101      	movs	r1, #1
 8002628:	f003 f8a4 	bl	8005774 <USB_EP0_OutStart>
 800262c:	e006      	b.n	800263c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	441a      	add	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	4619      	mov	r1, r3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f007 fc1c 	bl	8009e80 <HAL_PCD_DataOutStageCallback>
 8002648:	e046      	b.n	80026d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	4a26      	ldr	r2, [pc, #152]	; (80026e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d124      	bne.n	800269c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002668:	461a      	mov	r2, r3
 800266a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800266e:	6093      	str	r3, [r2, #8]
 8002670:	e032      	b.n	80026d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002688:	461a      	mov	r2, r3
 800268a:	2320      	movs	r3, #32
 800268c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	4619      	mov	r1, r3
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f007 fbf3 	bl	8009e80 <HAL_PCD_DataOutStageCallback>
 800269a:	e01d      	b.n	80026d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d114      	bne.n	80026cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d108      	bne.n	80026cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026c4:	461a      	mov	r2, r3
 80026c6:	2100      	movs	r1, #0
 80026c8:	f003 f854 	bl	8005774 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	4619      	mov	r1, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f007 fbd4 	bl	8009e80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	4f54300a 	.word	0x4f54300a
 80026e8:	4f54310a 	.word	0x4f54310a

080026ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	333c      	adds	r3, #60	; 0x3c
 8002704:	3304      	adds	r3, #4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4a15      	ldr	r2, [pc, #84]	; (8002774 <PCD_EP_OutSetupPacket_int+0x88>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d90e      	bls.n	8002740 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002728:	2b00      	cmp	r3, #0
 800272a:	d009      	beq.n	8002740 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002738:	461a      	mov	r2, r3
 800273a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800273e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f007 fb8b 	bl	8009e5c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <PCD_EP_OutSetupPacket_int+0x88>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d90c      	bls.n	8002768 <PCD_EP_OutSetupPacket_int+0x7c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d108      	bne.n	8002768 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002760:	461a      	mov	r2, r3
 8002762:	2101      	movs	r1, #1
 8002764:	f003 f806 	bl	8005774 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	4f54300a 	.word	0x4f54300a

08002778 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	70fb      	strb	r3, [r7, #3]
 8002784:	4613      	mov	r3, r2
 8002786:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d107      	bne.n	80027a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002796:	883b      	ldrh	r3, [r7, #0]
 8002798:	0419      	lsls	r1, r3, #16
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28
 80027a4:	e028      	b.n	80027f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	4413      	add	r3, r2
 80027b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e00d      	b.n	80027d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	3340      	adds	r3, #64	; 0x40
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	0c1b      	lsrs	r3, r3, #16
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	4413      	add	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	3301      	adds	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	3b01      	subs	r3, #1
 80027dc:	429a      	cmp	r2, r3
 80027de:	d3ec      	bcc.n	80027ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027e0:	883b      	ldrh	r3, [r7, #0]
 80027e2:	0418      	lsls	r0, r3, #16
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6819      	ldr	r1, [r3, #0]
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	4302      	orrs	r2, r0
 80027f0:	3340      	adds	r3, #64	; 0x40
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	460b      	mov	r3, r1
 8002810:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	887a      	ldrh	r2, [r7, #2]
 8002818:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_PCDEx_ActivateLPM+0x44>)
 8002858:	4313      	orrs	r3, r2
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	10000003 	.word	0x10000003

08002870 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a04      	ldr	r2, [pc, #16]	; (800288c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800287a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287e:	6013      	str	r3, [r2, #0]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40007000 	.word	0x40007000

08002890 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002898:	2300      	movs	r3, #0
 800289a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e291      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8087 	beq.w	80029c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b4:	4b96      	ldr	r3, [pc, #600]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d00c      	beq.n	80028da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c0:	4b93      	ldr	r3, [pc, #588]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d112      	bne.n	80028f2 <HAL_RCC_OscConfig+0x62>
 80028cc:	4b90      	ldr	r3, [pc, #576]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d8:	d10b      	bne.n	80028f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028da:	4b8d      	ldr	r3, [pc, #564]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d06c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x130>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d168      	bne.n	80029c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e26b      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x7a>
 80028fc:	4b84      	ldr	r3, [pc, #528]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a83      	ldr	r2, [pc, #524]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	e02e      	b.n	8002968 <HAL_RCC_OscConfig+0xd8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x9c>
 8002912:	4b7f      	ldr	r3, [pc, #508]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a7e      	ldr	r2, [pc, #504]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b7c      	ldr	r3, [pc, #496]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a7b      	ldr	r2, [pc, #492]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e01d      	b.n	8002968 <HAL_RCC_OscConfig+0xd8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0xc0>
 8002936:	4b76      	ldr	r3, [pc, #472]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a75      	ldr	r2, [pc, #468]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 800293c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	4b73      	ldr	r3, [pc, #460]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a72      	ldr	r2, [pc, #456]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0xd8>
 8002950:	4b6f      	ldr	r3, [pc, #444]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a6e      	ldr	r2, [pc, #440]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b6c      	ldr	r3, [pc, #432]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6b      	ldr	r2, [pc, #428]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe f9d6 	bl	8000d20 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7fe f9d2 	bl	8000d20 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e21f      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b61      	ldr	r3, [pc, #388]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0xe8>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe f9c2 	bl	8000d20 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fe f9be 	bl	8000d20 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e20b      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	4b57      	ldr	r3, [pc, #348]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x110>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d069      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ce:	4b50      	ldr	r3, [pc, #320]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029da:	4b4d      	ldr	r3, [pc, #308]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d11c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x190>
 80029e6:	4b4a      	ldr	r3, [pc, #296]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d116      	bne.n	8002a20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	4b47      	ldr	r3, [pc, #284]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_RCC_OscConfig+0x17a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e1df      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	4b41      	ldr	r3, [pc, #260]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	493d      	ldr	r1, [pc, #244]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	e040      	b.n	8002aa2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d023      	beq.n	8002a70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a28:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a38      	ldr	r2, [pc, #224]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe f974 	bl	8000d20 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3c:	f7fe f970 	bl	8000d20 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e1bd      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4e:	4b30      	ldr	r3, [pc, #192]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4929      	ldr	r1, [pc, #164]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
 8002a6e:	e018      	b.n	8002aa2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a70:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a26      	ldr	r2, [pc, #152]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002a76:	f023 0301 	bic.w	r3, r3, #1
 8002a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7fe f950 	bl	8000d20 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a84:	f7fe f94c 	bl	8000d20 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e199      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a96:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d038      	beq.n	8002b20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d019      	beq.n	8002aea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aba:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7fe f92d 	bl	8000d20 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aca:	f7fe f929 	bl	8000d20 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e176      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x23a>
 8002ae8:	e01a      	b.n	8002b20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aee:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <HAL_RCC_OscConfig+0x280>)
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af6:	f7fe f913 	bl	8000d20 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afe:	f7fe f90f 	bl	8000d20 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d903      	bls.n	8002b14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e15c      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>
 8002b10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b14:	4b91      	ldr	r3, [pc, #580]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1ee      	bne.n	8002afe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80a4 	beq.w	8002c76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2e:	4b8b      	ldr	r3, [pc, #556]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10d      	bne.n	8002b56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	4b88      	ldr	r3, [pc, #544]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a87      	ldr	r2, [pc, #540]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b85      	ldr	r3, [pc, #532]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b52:	2301      	movs	r3, #1
 8002b54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b56:	4b82      	ldr	r3, [pc, #520]	; (8002d60 <HAL_RCC_OscConfig+0x4d0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d118      	bne.n	8002b94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b62:	4b7f      	ldr	r3, [pc, #508]	; (8002d60 <HAL_RCC_OscConfig+0x4d0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a7e      	ldr	r2, [pc, #504]	; (8002d60 <HAL_RCC_OscConfig+0x4d0>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe f8d7 	bl	8000d20 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b76:	f7fe f8d3 	bl	8000d20 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b64      	cmp	r3, #100	; 0x64
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e120      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b88:	4b75      	ldr	r3, [pc, #468]	; (8002d60 <HAL_RCC_OscConfig+0x4d0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x31a>
 8002b9c:	4b6f      	ldr	r3, [pc, #444]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a6e      	ldr	r2, [pc, #440]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba8:	e02d      	b.n	8002c06 <HAL_RCC_OscConfig+0x376>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x33c>
 8002bb2:	4b6a      	ldr	r3, [pc, #424]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	4a69      	ldr	r2, [pc, #420]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bbe:	4b67      	ldr	r3, [pc, #412]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	4a66      	ldr	r2, [pc, #408]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002bc4:	f023 0304 	bic.w	r3, r3, #4
 8002bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bca:	e01c      	b.n	8002c06 <HAL_RCC_OscConfig+0x376>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d10c      	bne.n	8002bee <HAL_RCC_OscConfig+0x35e>
 8002bd4:	4b61      	ldr	r3, [pc, #388]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	4a60      	ldr	r2, [pc, #384]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002bda:	f043 0304 	orr.w	r3, r3, #4
 8002bde:	6713      	str	r3, [r2, #112]	; 0x70
 8002be0:	4b5e      	ldr	r3, [pc, #376]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	4a5d      	ldr	r2, [pc, #372]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6713      	str	r3, [r2, #112]	; 0x70
 8002bec:	e00b      	b.n	8002c06 <HAL_RCC_OscConfig+0x376>
 8002bee:	4b5b      	ldr	r3, [pc, #364]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	4a5a      	ldr	r2, [pc, #360]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfa:	4b58      	ldr	r3, [pc, #352]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a57      	ldr	r2, [pc, #348]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002c00:	f023 0304 	bic.w	r3, r3, #4
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d015      	beq.n	8002c3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0e:	f7fe f887 	bl	8000d20 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c14:	e00a      	b.n	8002c2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7fe f883 	bl	8000d20 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e0ce      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	4b4b      	ldr	r3, [pc, #300]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ee      	beq.n	8002c16 <HAL_RCC_OscConfig+0x386>
 8002c38:	e014      	b.n	8002c64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7fe f871 	bl	8000d20 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe f86d 	bl	8000d20 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0b8      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c58:	4b40      	ldr	r3, [pc, #256]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ee      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d105      	bne.n	8002c76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6a:	4b3c      	ldr	r3, [pc, #240]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	4a3b      	ldr	r2, [pc, #236]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 80a4 	beq.w	8002dc8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c80:	4b36      	ldr	r3, [pc, #216]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d06b      	beq.n	8002d64 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d149      	bne.n	8002d28 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c94:	4b31      	ldr	r3, [pc, #196]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a30      	ldr	r2, [pc, #192]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe f83e 	bl	8000d20 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe f83a 	bl	8000d20 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e087      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cba:	4b28      	ldr	r3, [pc, #160]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	019b      	lsls	r3, r3, #6
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	061b      	lsls	r3, r3, #24
 8002cea:	4313      	orrs	r3, r2
 8002cec:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002cee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cf2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf4:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe f80e 	bl	8000d20 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe f80a 	bl	8000d20 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e057      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x478>
 8002d26:	e04f      	b.n	8002dc8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0b      	ldr	r2, [pc, #44]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fd fff4 	bl	8000d20 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fd fff0 	bl	8000d20 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e03d      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4e:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_RCC_OscConfig+0x4cc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x4ac>
 8002d5a:	e035      	b.n	8002dc8 <HAL_RCC_OscConfig+0x538>
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d64:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_RCC_OscConfig+0x544>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d028      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d121      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d11a      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d94:	4013      	ands	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d111      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	085b      	lsrs	r3, r3, #1
 8002dac:	3b01      	subs	r3, #1
 8002dae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d107      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800

08002dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0d0      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002df0:	4b6a      	ldr	r3, [pc, #424]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d910      	bls.n	8002e20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b67      	ldr	r3, [pc, #412]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 020f 	bic.w	r2, r3, #15
 8002e06:	4965      	ldr	r1, [pc, #404]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b63      	ldr	r3, [pc, #396]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0b8      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e38:	4b59      	ldr	r3, [pc, #356]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a58      	ldr	r2, [pc, #352]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e50:	4b53      	ldr	r3, [pc, #332]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4a52      	ldr	r2, [pc, #328]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e5c:	4b50      	ldr	r3, [pc, #320]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	494d      	ldr	r1, [pc, #308]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d040      	beq.n	8002efc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	4b47      	ldr	r3, [pc, #284]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d115      	bne.n	8002eba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e07f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d107      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9a:	4b41      	ldr	r3, [pc, #260]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e073      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e06b      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f023 0203 	bic.w	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4936      	ldr	r1, [pc, #216]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ecc:	f7fd ff28 	bl	8000d20 <HAL_GetTick>
 8002ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed4:	f7fd ff24 	bl	8000d20 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e053      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 020c 	and.w	r2, r3, #12
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d1eb      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002efc:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d210      	bcs.n	8002f2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0a:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 020f 	bic.w	r2, r3, #15
 8002f12:	4922      	ldr	r1, [pc, #136]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e032      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f38:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4916      	ldr	r1, [pc, #88]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f56:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	490e      	ldr	r1, [pc, #56]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f6a:	f000 f821 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	490a      	ldr	r1, [pc, #40]	; (8002fa4 <HAL_RCC_ClockConfig+0x1cc>)
 8002f7c:	5ccb      	ldrb	r3, [r1, r3]
 8002f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f82:	4a09      	ldr	r2, [pc, #36]	; (8002fa8 <HAL_RCC_ClockConfig+0x1d0>)
 8002f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x1d4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd fd92 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023c00 	.word	0x40023c00
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	0800a7c4 	.word	0x0800a7c4
 8002fa8:	20000000 	.word	0x20000000
 8002fac:	20000004 	.word	0x20000004

08002fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb4:	b094      	sub	sp, #80	; 0x50
 8002fb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	647b      	str	r3, [r7, #68]	; 0x44
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc8:	4b79      	ldr	r3, [pc, #484]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d00d      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x40>
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	f200 80e1 	bhi.w	800319c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d003      	beq.n	8002fea <HAL_RCC_GetSysClockFreq+0x3a>
 8002fe2:	e0db      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe4:	4b73      	ldr	r3, [pc, #460]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fe6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fe8:	e0db      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fea:	4b73      	ldr	r3, [pc, #460]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fee:	e0d8      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ff0:	4b6f      	ldr	r3, [pc, #444]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ff8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ffa:	4b6d      	ldr	r3, [pc, #436]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d063      	beq.n	80030ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003006:	4b6a      	ldr	r3, [pc, #424]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	099b      	lsrs	r3, r3, #6
 800300c:	2200      	movs	r2, #0
 800300e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003010:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003018:	633b      	str	r3, [r7, #48]	; 0x30
 800301a:	2300      	movs	r3, #0
 800301c:	637b      	str	r3, [r7, #52]	; 0x34
 800301e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003022:	4622      	mov	r2, r4
 8003024:	462b      	mov	r3, r5
 8003026:	f04f 0000 	mov.w	r0, #0
 800302a:	f04f 0100 	mov.w	r1, #0
 800302e:	0159      	lsls	r1, r3, #5
 8003030:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003034:	0150      	lsls	r0, r2, #5
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4621      	mov	r1, r4
 800303c:	1a51      	subs	r1, r2, r1
 800303e:	6139      	str	r1, [r7, #16]
 8003040:	4629      	mov	r1, r5
 8003042:	eb63 0301 	sbc.w	r3, r3, r1
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003054:	4659      	mov	r1, fp
 8003056:	018b      	lsls	r3, r1, #6
 8003058:	4651      	mov	r1, sl
 800305a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800305e:	4651      	mov	r1, sl
 8003060:	018a      	lsls	r2, r1, #6
 8003062:	4651      	mov	r1, sl
 8003064:	ebb2 0801 	subs.w	r8, r2, r1
 8003068:	4659      	mov	r1, fp
 800306a:	eb63 0901 	sbc.w	r9, r3, r1
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800307a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800307e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003082:	4690      	mov	r8, r2
 8003084:	4699      	mov	r9, r3
 8003086:	4623      	mov	r3, r4
 8003088:	eb18 0303 	adds.w	r3, r8, r3
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	462b      	mov	r3, r5
 8003090:	eb49 0303 	adc.w	r3, r9, r3
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030a2:	4629      	mov	r1, r5
 80030a4:	024b      	lsls	r3, r1, #9
 80030a6:	4621      	mov	r1, r4
 80030a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030ac:	4621      	mov	r1, r4
 80030ae:	024a      	lsls	r2, r1, #9
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b6:	2200      	movs	r2, #0
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030c0:	f7fd f8ae 	bl	8000220 <__aeabi_uldivmod>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4613      	mov	r3, r2
 80030ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030cc:	e058      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ce:	4b38      	ldr	r3, [pc, #224]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	099b      	lsrs	r3, r3, #6
 80030d4:	2200      	movs	r2, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	4611      	mov	r1, r2
 80030da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030de:	623b      	str	r3, [r7, #32]
 80030e0:	2300      	movs	r3, #0
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
 80030e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030e8:	4642      	mov	r2, r8
 80030ea:	464b      	mov	r3, r9
 80030ec:	f04f 0000 	mov.w	r0, #0
 80030f0:	f04f 0100 	mov.w	r1, #0
 80030f4:	0159      	lsls	r1, r3, #5
 80030f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030fa:	0150      	lsls	r0, r2, #5
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4641      	mov	r1, r8
 8003102:	ebb2 0a01 	subs.w	sl, r2, r1
 8003106:	4649      	mov	r1, r9
 8003108:	eb63 0b01 	sbc.w	fp, r3, r1
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003118:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800311c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003120:	ebb2 040a 	subs.w	r4, r2, sl
 8003124:	eb63 050b 	sbc.w	r5, r3, fp
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	00eb      	lsls	r3, r5, #3
 8003132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003136:	00e2      	lsls	r2, r4, #3
 8003138:	4614      	mov	r4, r2
 800313a:	461d      	mov	r5, r3
 800313c:	4643      	mov	r3, r8
 800313e:	18e3      	adds	r3, r4, r3
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	464b      	mov	r3, r9
 8003144:	eb45 0303 	adc.w	r3, r5, r3
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003156:	4629      	mov	r1, r5
 8003158:	028b      	lsls	r3, r1, #10
 800315a:	4621      	mov	r1, r4
 800315c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003160:	4621      	mov	r1, r4
 8003162:	028a      	lsls	r2, r1, #10
 8003164:	4610      	mov	r0, r2
 8003166:	4619      	mov	r1, r3
 8003168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800316a:	2200      	movs	r2, #0
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	61fa      	str	r2, [r7, #28]
 8003170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003174:	f7fd f854 	bl	8000220 <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4613      	mov	r3, r2
 800317e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	0c1b      	lsrs	r3, r3, #16
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	3301      	adds	r3, #1
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003190:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800319a:	e002      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800319e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3750      	adds	r7, #80	; 0x50
 80031a8:	46bd      	mov	sp, r7
 80031aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800
 80031b4:	00f42400 	.word	0x00f42400
 80031b8:	007a1200 	.word	0x007a1200

080031bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c0:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000000 	.word	0x20000000

080031d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d8:	f7ff fff0 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	0a9b      	lsrs	r3, r3, #10
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	4903      	ldr	r1, [pc, #12]	; (80031f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ea:	5ccb      	ldrb	r3, [r1, r3]
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40023800 	.word	0x40023800
 80031f8:	0800a7d4 	.word	0x0800a7d4

080031fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	220f      	movs	r2, #15
 800320a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_RCC_GetClockConfig+0x5c>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0203 	and.w	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003218:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <HAL_RCC_GetClockConfig+0x5c>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <HAL_RCC_GetClockConfig+0x5c>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_RCC_GetClockConfig+0x5c>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	08db      	lsrs	r3, r3, #3
 8003236:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <HAL_RCC_GetClockConfig+0x60>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 020f 	and.w	r2, r3, #15
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	601a      	str	r2, [r3, #0]
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	40023c00 	.word	0x40023c00

08003260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003288:	4b69      	ldr	r3, [pc, #420]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4a68      	ldr	r2, [pc, #416]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003292:	6093      	str	r3, [r2, #8]
 8003294:	4b66      	ldr	r3, [pc, #408]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329c:	4964      	ldr	r1, [pc, #400]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80032aa:	2301      	movs	r3, #1
 80032ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d017      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032ba:	4b5d      	ldr	r3, [pc, #372]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c8:	4959      	ldr	r1, [pc, #356]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032d8:	d101      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80032da:	2301      	movs	r3, #1
 80032dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032e6:	2301      	movs	r3, #1
 80032e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d017      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032f6:	4b4e      	ldr	r3, [pc, #312]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	494a      	ldr	r1, [pc, #296]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003314:	d101      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003316:	2301      	movs	r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003322:	2301      	movs	r3, #1
 8003324:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003332:	2301      	movs	r3, #1
 8003334:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 808b 	beq.w	800345a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003344:	4b3a      	ldr	r3, [pc, #232]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	4a39      	ldr	r2, [pc, #228]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334e:	6413      	str	r3, [r2, #64]	; 0x40
 8003350:	4b37      	ldr	r3, [pc, #220]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800335c:	4b35      	ldr	r3, [pc, #212]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a34      	ldr	r2, [pc, #208]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003368:	f7fd fcda 	bl	8000d20 <HAL_GetTick>
 800336c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003370:	f7fd fcd6 	bl	8000d20 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e357      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003382:	4b2c      	ldr	r3, [pc, #176]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800338e:	4b28      	ldr	r3, [pc, #160]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003396:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d035      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d02e      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033ac:	4b20      	ldr	r3, [pc, #128]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033b6:	4b1e      	ldr	r3, [pc, #120]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033c2:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	4a1a      	ldr	r2, [pc, #104]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80033ce:	4a18      	ldr	r2, [pc, #96]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033d4:	4b16      	ldr	r3, [pc, #88]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d114      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fd fc9e 	bl	8000d20 <HAL_GetTick>
 80033e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	e00a      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7fd fc9a 	bl	8000d20 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e319      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fe:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0ee      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003416:	d111      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003426:	400b      	ands	r3, r1
 8003428:	4901      	ldr	r1, [pc, #4]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
 800342e:	e00b      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003430:	40023800 	.word	0x40023800
 8003434:	40007000 	.word	0x40007000
 8003438:	0ffffcff 	.word	0x0ffffcff
 800343c:	4baa      	ldr	r3, [pc, #680]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4aa9      	ldr	r2, [pc, #676]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003442:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003446:	6093      	str	r3, [r2, #8]
 8003448:	4ba7      	ldr	r3, [pc, #668]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800344a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003454:	49a4      	ldr	r1, [pc, #656]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003456:	4313      	orrs	r3, r2
 8003458:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	2b00      	cmp	r3, #0
 8003464:	d010      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003466:	4ba0      	ldr	r3, [pc, #640]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800346c:	4a9e      	ldr	r2, [pc, #632]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800346e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003472:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003476:	4b9c      	ldr	r3, [pc, #624]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003478:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	4999      	ldr	r1, [pc, #612]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003494:	4b94      	ldr	r3, [pc, #592]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a2:	4991      	ldr	r1, [pc, #580]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034b6:	4b8c      	ldr	r3, [pc, #560]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c4:	4988      	ldr	r1, [pc, #544]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034d8:	4b83      	ldr	r3, [pc, #524]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e6:	4980      	ldr	r1, [pc, #512]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034fa:	4b7b      	ldr	r3, [pc, #492]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003500:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	4977      	ldr	r1, [pc, #476]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800351c:	4b72      	ldr	r3, [pc, #456]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	f023 0203 	bic.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	496f      	ldr	r1, [pc, #444]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800353e:	4b6a      	ldr	r3, [pc, #424]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003544:	f023 020c 	bic.w	r2, r3, #12
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354c:	4966      	ldr	r1, [pc, #408]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003560:	4b61      	ldr	r3, [pc, #388]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003566:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356e:	495e      	ldr	r1, [pc, #376]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003582:	4b59      	ldr	r3, [pc, #356]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003588:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003590:	4955      	ldr	r1, [pc, #340]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035a4:	4b50      	ldr	r3, [pc, #320]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	494d      	ldr	r1, [pc, #308]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035c6:	4b48      	ldr	r3, [pc, #288]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	4944      	ldr	r1, [pc, #272]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035e8:	4b3f      	ldr	r3, [pc, #252]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f6:	493c      	ldr	r1, [pc, #240]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800360a:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003610:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003618:	4933      	ldr	r1, [pc, #204]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800362c:	4b2e      	ldr	r3, [pc, #184]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003632:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800363a:	492b      	ldr	r1, [pc, #172]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d011      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800364e:	4b26      	ldr	r3, [pc, #152]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003654:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800365c:	4922      	ldr	r1, [pc, #136]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800366c:	d101      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800366e:	2301      	movs	r3, #1
 8003670:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800368e:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003694:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369c:	4912      	ldr	r1, [pc, #72]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00b      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c0:	4909      	ldr	r1, [pc, #36]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d006      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80d9 	beq.w	800388e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036dc:	4b02      	ldr	r3, [pc, #8]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a01      	ldr	r2, [pc, #4]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036e6:	e001      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80036e8:	40023800 	.word	0x40023800
 80036ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ee:	f7fd fb17 	bl	8000d20 <HAL_GetTick>
 80036f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036f6:	f7fd fb13 	bl	8000d20 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b64      	cmp	r3, #100	; 0x64
 8003702:	d901      	bls.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e194      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003708:	4b6c      	ldr	r3, [pc, #432]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f0      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d021      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	2b00      	cmp	r3, #0
 8003726:	d11d      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003728:	4b64      	ldr	r3, [pc, #400]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800372a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800372e:	0c1b      	lsrs	r3, r3, #16
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003736:	4b61      	ldr	r3, [pc, #388]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800373c:	0e1b      	lsrs	r3, r3, #24
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	019a      	lsls	r2, r3, #6
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	041b      	lsls	r3, r3, #16
 800374e:	431a      	orrs	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	061b      	lsls	r3, r3, #24
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	071b      	lsls	r3, r3, #28
 800375c:	4957      	ldr	r1, [pc, #348]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d004      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003778:	d00a      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003782:	2b00      	cmp	r3, #0
 8003784:	d02e      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378e:	d129      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003790:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003796:	0c1b      	lsrs	r3, r3, #16
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800379e:	4b47      	ldr	r3, [pc, #284]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a4:	0f1b      	lsrs	r3, r3, #28
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	019a      	lsls	r2, r3, #6
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	041b      	lsls	r3, r3, #16
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	061b      	lsls	r3, r3, #24
 80037be:	431a      	orrs	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	071b      	lsls	r3, r3, #28
 80037c4:	493d      	ldr	r1, [pc, #244]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037cc:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d2:	f023 021f 	bic.w	r2, r3, #31
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	3b01      	subs	r3, #1
 80037dc:	4937      	ldr	r1, [pc, #220]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01d      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037f0:	4b32      	ldr	r3, [pc, #200]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f6:	0e1b      	lsrs	r3, r3, #24
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037fe:	4b2f      	ldr	r3, [pc, #188]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003804:	0f1b      	lsrs	r3, r3, #28
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	019a      	lsls	r2, r3, #6
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	431a      	orrs	r2, r3
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	431a      	orrs	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	071b      	lsls	r3, r3, #28
 8003824:	4925      	ldr	r1, [pc, #148]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d011      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	019a      	lsls	r2, r3, #6
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	041b      	lsls	r3, r3, #16
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	061b      	lsls	r3, r3, #24
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	071b      	lsls	r3, r3, #28
 8003854:	4919      	ldr	r1, [pc, #100]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800385c:	4b17      	ldr	r3, [pc, #92]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a16      	ldr	r2, [pc, #88]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003862:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003868:	f7fd fa5a 	bl	8000d20 <HAL_GetTick>
 800386c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003870:	f7fd fa56 	bl	8000d20 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	; 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e0d7      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	2b01      	cmp	r3, #1
 8003892:	f040 80cd 	bne.w	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a08      	ldr	r2, [pc, #32]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800389c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a2:	f7fd fa3d 	bl	8000d20 <HAL_GetTick>
 80038a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038a8:	e00a      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038aa:	f7fd fa39 	bl	8000d20 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b64      	cmp	r3, #100	; 0x64
 80038b6:	d903      	bls.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e0ba      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80038bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038c0:	4b5e      	ldr	r3, [pc, #376]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038cc:	d0ed      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d02e      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d12a      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038f6:	4b51      	ldr	r3, [pc, #324]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003904:	4b4d      	ldr	r3, [pc, #308]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390a:	0f1b      	lsrs	r3, r3, #28
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	019a      	lsls	r2, r3, #6
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	041b      	lsls	r3, r3, #16
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	061b      	lsls	r3, r3, #24
 8003924:	431a      	orrs	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	071b      	lsls	r3, r3, #28
 800392a:	4944      	ldr	r1, [pc, #272]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003932:	4b42      	ldr	r3, [pc, #264]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003938:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	3b01      	subs	r3, #1
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	493d      	ldr	r1, [pc, #244]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d022      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800395c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003960:	d11d      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003962:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	0e1b      	lsrs	r3, r3, #24
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003970:	4b32      	ldr	r3, [pc, #200]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	0f1b      	lsrs	r3, r3, #28
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	019a      	lsls	r2, r3, #6
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	041b      	lsls	r3, r3, #16
 800398a:	431a      	orrs	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	061b      	lsls	r3, r3, #24
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	071b      	lsls	r3, r3, #28
 8003996:	4929      	ldr	r1, [pc, #164]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d028      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039aa:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	0e1b      	lsrs	r3, r3, #24
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039b8:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	0c1b      	lsrs	r3, r3, #16
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	019a      	lsls	r2, r3, #6
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	041b      	lsls	r3, r3, #16
 80039d0:	431a      	orrs	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	061b      	lsls	r3, r3, #24
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	071b      	lsls	r3, r3, #28
 80039de:	4917      	ldr	r1, [pc, #92]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039e6:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	4911      	ldr	r1, [pc, #68]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039fc:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0e      	ldr	r2, [pc, #56]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a08:	f7fd f98a 	bl	8000d20 <HAL_GetTick>
 8003a0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a10:	f7fd f986 	bl	8000d20 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e007      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a2e:	d1ef      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800

08003a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e049      	b.n	8003ae6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f841 	bl	8003aee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f000 fa00 	bl	8003e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d001      	beq.n	8003b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e054      	b.n	8003bc6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a26      	ldr	r2, [pc, #152]	; (8003bd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d022      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b46:	d01d      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a22      	ldr	r2, [pc, #136]	; (8003bd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d018      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a21      	ldr	r2, [pc, #132]	; (8003bdc <HAL_TIM_Base_Start_IT+0xd8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d013      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1f      	ldr	r2, [pc, #124]	; (8003be0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00e      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d009      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a1c      	ldr	r2, [pc, #112]	; (8003be8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1b      	ldr	r2, [pc, #108]	; (8003bec <HAL_TIM_Base_Start_IT+0xe8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d115      	bne.n	8003bb0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_TIM_Base_Start_IT+0xec>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b06      	cmp	r3, #6
 8003b94:	d015      	beq.n	8003bc2 <HAL_TIM_Base_Start_IT+0xbe>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9c:	d011      	beq.n	8003bc2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bae:	e008      	b.n	8003bc2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	e000      	b.n	8003bc4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40010000 	.word	0x40010000
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40000800 	.word	0x40000800
 8003be0:	40000c00 	.word	0x40000c00
 8003be4:	40010400 	.word	0x40010400
 8003be8:	40014000 	.word	0x40014000
 8003bec:	40001800 	.word	0x40001800
 8003bf0:	00010007 	.word	0x00010007

08003bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d122      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d11b      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0202 	mvn.w	r2, #2
 8003c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f905 	bl	8003e46 <HAL_TIM_IC_CaptureCallback>
 8003c3c:	e005      	b.n	8003c4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f8f7 	bl	8003e32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f908 	bl	8003e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d122      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d11b      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0204 	mvn.w	r2, #4
 8003c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f8db 	bl	8003e46 <HAL_TIM_IC_CaptureCallback>
 8003c90:	e005      	b.n	8003c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f8cd 	bl	8003e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f8de 	bl	8003e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d122      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d11b      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0208 	mvn.w	r2, #8
 8003cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2204      	movs	r2, #4
 8003cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f8b1 	bl	8003e46 <HAL_TIM_IC_CaptureCallback>
 8003ce4:	e005      	b.n	8003cf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f8a3 	bl	8003e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f8b4 	bl	8003e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d122      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b10      	cmp	r3, #16
 8003d12:	d11b      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0210 	mvn.w	r2, #16
 8003d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2208      	movs	r2, #8
 8003d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f887 	bl	8003e46 <HAL_TIM_IC_CaptureCallback>
 8003d38:	e005      	b.n	8003d46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f879 	bl	8003e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f88a 	bl	8003e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d10e      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d107      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0201 	mvn.w	r2, #1
 8003d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fc fe62 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d82:	2b80      	cmp	r3, #128	; 0x80
 8003d84:	d10e      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d90:	2b80      	cmp	r3, #128	; 0x80
 8003d92:	d107      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f91a 	bl	8003fd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db2:	d10e      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbe:	2b80      	cmp	r3, #128	; 0x80
 8003dc0:	d107      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f90d 	bl	8003fec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ddc:	2b40      	cmp	r3, #64	; 0x40
 8003dde:	d10e      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dea:	2b40      	cmp	r3, #64	; 0x40
 8003dec:	d107      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f838 	bl	8003e6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d10e      	bne.n	8003e2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d107      	bne.n	8003e2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f06f 0220 	mvn.w	r2, #32
 8003e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f8cd 	bl	8003fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a40      	ldr	r2, [pc, #256]	; (8003f98 <TIM_Base_SetConfig+0x114>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d013      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea2:	d00f      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3d      	ldr	r2, [pc, #244]	; (8003f9c <TIM_Base_SetConfig+0x118>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00b      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3c      	ldr	r2, [pc, #240]	; (8003fa0 <TIM_Base_SetConfig+0x11c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d007      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3b      	ldr	r2, [pc, #236]	; (8003fa4 <TIM_Base_SetConfig+0x120>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3a      	ldr	r2, [pc, #232]	; (8003fa8 <TIM_Base_SetConfig+0x124>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d108      	bne.n	8003ed6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2f      	ldr	r2, [pc, #188]	; (8003f98 <TIM_Base_SetConfig+0x114>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d02b      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee4:	d027      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2c      	ldr	r2, [pc, #176]	; (8003f9c <TIM_Base_SetConfig+0x118>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d023      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2b      	ldr	r2, [pc, #172]	; (8003fa0 <TIM_Base_SetConfig+0x11c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01f      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <TIM_Base_SetConfig+0x120>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01b      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <TIM_Base_SetConfig+0x124>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d017      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a28      	ldr	r2, [pc, #160]	; (8003fac <TIM_Base_SetConfig+0x128>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a27      	ldr	r2, [pc, #156]	; (8003fb0 <TIM_Base_SetConfig+0x12c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00f      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a26      	ldr	r2, [pc, #152]	; (8003fb4 <TIM_Base_SetConfig+0x130>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00b      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a25      	ldr	r2, [pc, #148]	; (8003fb8 <TIM_Base_SetConfig+0x134>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d007      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a24      	ldr	r2, [pc, #144]	; (8003fbc <TIM_Base_SetConfig+0x138>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a23      	ldr	r2, [pc, #140]	; (8003fc0 <TIM_Base_SetConfig+0x13c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d108      	bne.n	8003f48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <TIM_Base_SetConfig+0x114>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_Base_SetConfig+0xf8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a0c      	ldr	r2, [pc, #48]	; (8003fa8 <TIM_Base_SetConfig+0x124>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d103      	bne.n	8003f84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	615a      	str	r2, [r3, #20]
}
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40010000 	.word	0x40010000
 8003f9c:	40000400 	.word	0x40000400
 8003fa0:	40000800 	.word	0x40000800
 8003fa4:	40000c00 	.word	0x40000c00
 8003fa8:	40010400 	.word	0x40010400
 8003fac:	40014000 	.word	0x40014000
 8003fb0:	40014400 	.word	0x40014400
 8003fb4:	40014800 	.word	0x40014800
 8003fb8:	40001800 	.word	0x40001800
 8003fbc:	40001c00 	.word	0x40001c00
 8003fc0:	40002000 	.word	0x40002000

08003fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004000:	b084      	sub	sp, #16
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	f107 001c 	add.w	r0, r7, #28
 800400e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	2b01      	cmp	r3, #1
 8004016:	d120      	bne.n	800405a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	4b20      	ldr	r3, [pc, #128]	; (80040ac <USB_CoreInit+0xac>)
 800402a:	4013      	ands	r3, r2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800403c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403e:	2b01      	cmp	r3, #1
 8004040:	d105      	bne.n	800404e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f001 fbee 	bl	8005830 <USB_CoreReset>
 8004054:	4603      	mov	r3, r0
 8004056:	73fb      	strb	r3, [r7, #15]
 8004058:	e010      	b.n	800407c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f001 fbe2 	bl	8005830 <USB_CoreReset>
 800406c:	4603      	mov	r3, r0
 800406e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	2b01      	cmp	r3, #1
 8004080:	d10b      	bne.n	800409a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f043 0206 	orr.w	r2, r3, #6
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f043 0220 	orr.w	r2, r3, #32
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800409a:	7bfb      	ldrb	r3, [r7, #15]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040a6:	b004      	add	sp, #16
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	ffbdffbf 	.word	0xffbdffbf

080040b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	4613      	mov	r3, r2
 80040bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d165      	bne.n	8004190 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4a41      	ldr	r2, [pc, #260]	; (80041cc <USB_SetTurnaroundTime+0x11c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d906      	bls.n	80040da <USB_SetTurnaroundTime+0x2a>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4a40      	ldr	r2, [pc, #256]	; (80041d0 <USB_SetTurnaroundTime+0x120>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d202      	bcs.n	80040da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80040d4:	230f      	movs	r3, #15
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	e062      	b.n	80041a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4a3c      	ldr	r2, [pc, #240]	; (80041d0 <USB_SetTurnaroundTime+0x120>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d306      	bcc.n	80040f0 <USB_SetTurnaroundTime+0x40>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	4a3b      	ldr	r2, [pc, #236]	; (80041d4 <USB_SetTurnaroundTime+0x124>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d202      	bcs.n	80040f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80040ea:	230e      	movs	r3, #14
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e057      	b.n	80041a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4a38      	ldr	r2, [pc, #224]	; (80041d4 <USB_SetTurnaroundTime+0x124>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d306      	bcc.n	8004106 <USB_SetTurnaroundTime+0x56>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4a37      	ldr	r2, [pc, #220]	; (80041d8 <USB_SetTurnaroundTime+0x128>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d202      	bcs.n	8004106 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004100:	230d      	movs	r3, #13
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	e04c      	b.n	80041a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4a33      	ldr	r2, [pc, #204]	; (80041d8 <USB_SetTurnaroundTime+0x128>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d306      	bcc.n	800411c <USB_SetTurnaroundTime+0x6c>
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	4a32      	ldr	r2, [pc, #200]	; (80041dc <USB_SetTurnaroundTime+0x12c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d802      	bhi.n	800411c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004116:	230c      	movs	r3, #12
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	e041      	b.n	80041a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4a2f      	ldr	r2, [pc, #188]	; (80041dc <USB_SetTurnaroundTime+0x12c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d906      	bls.n	8004132 <USB_SetTurnaroundTime+0x82>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4a2e      	ldr	r2, [pc, #184]	; (80041e0 <USB_SetTurnaroundTime+0x130>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d802      	bhi.n	8004132 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800412c:	230b      	movs	r3, #11
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e036      	b.n	80041a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4a2a      	ldr	r2, [pc, #168]	; (80041e0 <USB_SetTurnaroundTime+0x130>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d906      	bls.n	8004148 <USB_SetTurnaroundTime+0x98>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4a29      	ldr	r2, [pc, #164]	; (80041e4 <USB_SetTurnaroundTime+0x134>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d802      	bhi.n	8004148 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004142:	230a      	movs	r3, #10
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	e02b      	b.n	80041a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4a26      	ldr	r2, [pc, #152]	; (80041e4 <USB_SetTurnaroundTime+0x134>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d906      	bls.n	800415e <USB_SetTurnaroundTime+0xae>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4a25      	ldr	r2, [pc, #148]	; (80041e8 <USB_SetTurnaroundTime+0x138>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d202      	bcs.n	800415e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004158:	2309      	movs	r3, #9
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	e020      	b.n	80041a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4a21      	ldr	r2, [pc, #132]	; (80041e8 <USB_SetTurnaroundTime+0x138>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d306      	bcc.n	8004174 <USB_SetTurnaroundTime+0xc4>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4a20      	ldr	r2, [pc, #128]	; (80041ec <USB_SetTurnaroundTime+0x13c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d802      	bhi.n	8004174 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800416e:	2308      	movs	r3, #8
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	e015      	b.n	80041a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <USB_SetTurnaroundTime+0x13c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d906      	bls.n	800418a <USB_SetTurnaroundTime+0xda>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4a1c      	ldr	r2, [pc, #112]	; (80041f0 <USB_SetTurnaroundTime+0x140>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d202      	bcs.n	800418a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004184:	2307      	movs	r3, #7
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	e00a      	b.n	80041a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800418a:	2306      	movs	r3, #6
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	e007      	b.n	80041a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004190:	79fb      	ldrb	r3, [r7, #7]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d102      	bne.n	800419c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004196:	2309      	movs	r3, #9
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	e001      	b.n	80041a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800419c:	2309      	movs	r3, #9
 800419e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	029b      	lsls	r3, r3, #10
 80041b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80041b8:	431a      	orrs	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	00d8acbf 	.word	0x00d8acbf
 80041d0:	00e4e1c0 	.word	0x00e4e1c0
 80041d4:	00f42400 	.word	0x00f42400
 80041d8:	01067380 	.word	0x01067380
 80041dc:	011a499f 	.word	0x011a499f
 80041e0:	01312cff 	.word	0x01312cff
 80041e4:	014ca43f 	.word	0x014ca43f
 80041e8:	016e3600 	.word	0x016e3600
 80041ec:	01a6ab1f 	.word	0x01a6ab1f
 80041f0:	01e84800 	.word	0x01e84800

080041f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f043 0201 	orr.w	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f023 0201 	bic.w	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d115      	bne.n	8004286 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004266:	2001      	movs	r0, #1
 8004268:	f7fc fd66 	bl	8000d38 <HAL_Delay>
      ms++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3301      	adds	r3, #1
 8004270:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f001 fa4b 	bl	800570e <USB_GetMode>
 8004278:	4603      	mov	r3, r0
 800427a:	2b01      	cmp	r3, #1
 800427c:	d01e      	beq.n	80042bc <USB_SetCurrentMode+0x84>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b31      	cmp	r3, #49	; 0x31
 8004282:	d9f0      	bls.n	8004266 <USB_SetCurrentMode+0x2e>
 8004284:	e01a      	b.n	80042bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d115      	bne.n	80042b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004298:	2001      	movs	r0, #1
 800429a:	f7fc fd4d 	bl	8000d38 <HAL_Delay>
      ms++;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3301      	adds	r3, #1
 80042a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f001 fa32 	bl	800570e <USB_GetMode>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <USB_SetCurrentMode+0x84>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b31      	cmp	r3, #49	; 0x31
 80042b4:	d9f0      	bls.n	8004298 <USB_SetCurrentMode+0x60>
 80042b6:	e001      	b.n	80042bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e005      	b.n	80042c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b32      	cmp	r3, #50	; 0x32
 80042c0:	d101      	bne.n	80042c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042d0:	b084      	sub	sp, #16
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b086      	sub	sp, #24
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	e009      	b.n	8004304 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	3340      	adds	r3, #64	; 0x40
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	2200      	movs	r2, #0
 80042fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	3301      	adds	r3, #1
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b0e      	cmp	r3, #14
 8004308:	d9f2      	bls.n	80042f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800430a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800430c:	2b00      	cmp	r3, #0
 800430e:	d11c      	bne.n	800434a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800431e:	f043 0302 	orr.w	r3, r3, #2
 8004322:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	e005      	b.n	8004356 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800435c:	461a      	mov	r2, r3
 800435e:	2300      	movs	r3, #0
 8004360:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004368:	4619      	mov	r1, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004370:	461a      	mov	r2, r3
 8004372:	680b      	ldr	r3, [r1, #0]
 8004374:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004378:	2b01      	cmp	r3, #1
 800437a:	d10c      	bne.n	8004396 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d104      	bne.n	800438c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004382:	2100      	movs	r1, #0
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f965 	bl	8004654 <USB_SetDevSpeed>
 800438a:	e008      	b.n	800439e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800438c:	2101      	movs	r1, #1
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f960 	bl	8004654 <USB_SetDevSpeed>
 8004394:	e003      	b.n	800439e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004396:	2103      	movs	r1, #3
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f95b 	bl	8004654 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800439e:	2110      	movs	r1, #16
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f8f3 	bl	800458c <USB_FlushTxFifo>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f91f 	bl	80045f4 <USB_FlushRxFifo>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c6:	461a      	mov	r2, r3
 80043c8:	2300      	movs	r3, #0
 80043ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d2:	461a      	mov	r2, r3
 80043d4:	2300      	movs	r3, #0
 80043d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043de:	461a      	mov	r2, r3
 80043e0:	2300      	movs	r3, #0
 80043e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043e4:	2300      	movs	r3, #0
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	e043      	b.n	8004472 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004400:	d118      	bne.n	8004434 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004414:	461a      	mov	r2, r3
 8004416:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	e013      	b.n	8004446 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442a:	461a      	mov	r2, r3
 800442c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e008      	b.n	8004446 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004440:	461a      	mov	r2, r3
 8004442:	2300      	movs	r3, #0
 8004444:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004452:	461a      	mov	r2, r3
 8004454:	2300      	movs	r3, #0
 8004456:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004464:	461a      	mov	r2, r3
 8004466:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800446a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	3301      	adds	r3, #1
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	429a      	cmp	r2, r3
 8004478:	d3b7      	bcc.n	80043ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800447a:	2300      	movs	r3, #0
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	e043      	b.n	8004508 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004496:	d118      	bne.n	80044ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044aa:	461a      	mov	r2, r3
 80044ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e013      	b.n	80044dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c0:	461a      	mov	r2, r3
 80044c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	e008      	b.n	80044dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d6:	461a      	mov	r2, r3
 80044d8:	2300      	movs	r3, #0
 80044da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e8:	461a      	mov	r2, r3
 80044ea:	2300      	movs	r3, #0
 80044ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fa:	461a      	mov	r2, r3
 80044fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004500:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	3301      	adds	r3, #1
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	429a      	cmp	r2, r3
 800450e:	d3b7      	bcc.n	8004480 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800451e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004522:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004530:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	2b00      	cmp	r3, #0
 8004536:	d105      	bne.n	8004544 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f043 0210 	orr.w	r2, r3, #16
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <USB_DevInit+0x2b4>)
 800454a:	4313      	orrs	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f043 0208 	orr.w	r2, r3, #8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <USB_DevInit+0x2b8>)
 800456e:	4313      	orrs	r3, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004574:	7dfb      	ldrb	r3, [r7, #23]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004580:	b004      	add	sp, #16
 8004582:	4770      	bx	lr
 8004584:	803c3800 	.word	0x803c3800
 8004588:	40000004 	.word	0x40000004

0800458c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3301      	adds	r3, #1
 800459e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <USB_FlushTxFifo+0x64>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d901      	bls.n	80045ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e01b      	b.n	80045e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	daf2      	bge.n	800459a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	019b      	lsls	r3, r3, #6
 80045bc:	f043 0220 	orr.w	r2, r3, #32
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3301      	adds	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a08      	ldr	r2, [pc, #32]	; (80045f0 <USB_FlushTxFifo+0x64>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e006      	b.n	80045e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d0f0      	beq.n	80045c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	00030d40 	.word	0x00030d40

080045f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3301      	adds	r3, #1
 8004604:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4a11      	ldr	r2, [pc, #68]	; (8004650 <USB_FlushRxFifo+0x5c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e018      	b.n	8004644 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	daf2      	bge.n	8004600 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2210      	movs	r2, #16
 8004622:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3301      	adds	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4a08      	ldr	r2, [pc, #32]	; (8004650 <USB_FlushRxFifo+0x5c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e006      	b.n	8004644 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b10      	cmp	r3, #16
 8004640:	d0f0      	beq.n	8004624 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	00030d40 	.word	0x00030d40

08004654 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	68f9      	ldr	r1, [r7, #12]
 8004670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004674:	4313      	orrs	r3, r2
 8004676:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004686:	b480      	push	{r7}
 8004688:	b087      	sub	sp, #28
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0306 	and.w	r3, r3, #6
 800469e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d102      	bne.n	80046ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80046a6:	2300      	movs	r3, #0
 80046a8:	75fb      	strb	r3, [r7, #23]
 80046aa:	e00a      	b.n	80046c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d002      	beq.n	80046b8 <USB_GetDevSpeed+0x32>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b06      	cmp	r3, #6
 80046b6:	d102      	bne.n	80046be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80046b8:	2302      	movs	r3, #2
 80046ba:	75fb      	strb	r3, [r7, #23]
 80046bc:	e001      	b.n	80046c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80046be:	230f      	movs	r3, #15
 80046c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	785b      	ldrb	r3, [r3, #1]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d139      	bne.n	8004760 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f2:	69da      	ldr	r2, [r3, #28]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	2101      	movs	r1, #1
 80046fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004702:	b29b      	uxth	r3, r3
 8004704:	68f9      	ldr	r1, [r7, #12]
 8004706:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800470a:	4313      	orrs	r3, r2
 800470c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d153      	bne.n	80047cc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	791b      	ldrb	r3, [r3, #4]
 800473e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004740:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	059b      	lsls	r3, r3, #22
 8004746:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004748:	431a      	orrs	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	0159      	lsls	r1, r3, #5
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	440b      	add	r3, r1
 8004752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004756:	4619      	mov	r1, r3
 8004758:	4b20      	ldr	r3, [pc, #128]	; (80047dc <USB_ActivateEndpoint+0x10c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
 800475e:	e035      	b.n	80047cc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	2101      	movs	r1, #1
 8004772:	fa01 f303 	lsl.w	r3, r1, r3
 8004776:	041b      	lsls	r3, r3, #16
 8004778:	68f9      	ldr	r1, [r7, #12]
 800477a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800477e:	4313      	orrs	r3, r2
 8004780:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d119      	bne.n	80047cc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	791b      	ldrb	r3, [r3, #4]
 80047b2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047b4:	430b      	orrs	r3, r1
 80047b6:	431a      	orrs	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	0159      	lsls	r1, r3, #5
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	440b      	add	r3, r1
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	4619      	mov	r1, r3
 80047c6:	4b05      	ldr	r3, [pc, #20]	; (80047dc <USB_ActivateEndpoint+0x10c>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	10008000 	.word	0x10008000

080047e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	785b      	ldrb	r3, [r3, #1]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d161      	bne.n	80048c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800480e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004812:	d11f      	bne.n	8004854 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	0151      	lsls	r1, r2, #5
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	440a      	add	r2, r1
 800482a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800482e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004832:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	0151      	lsls	r1, r2, #5
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	440a      	add	r2, r1
 800484a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004852:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	2101      	movs	r1, #1
 8004866:	fa01 f303 	lsl.w	r3, r1, r3
 800486a:	b29b      	uxth	r3, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	68f9      	ldr	r1, [r7, #12]
 8004870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004874:	4013      	ands	r3, r2
 8004876:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	2101      	movs	r1, #1
 800488a:	fa01 f303 	lsl.w	r3, r1, r3
 800488e:	b29b      	uxth	r3, r3
 8004890:	43db      	mvns	r3, r3
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004898:	4013      	ands	r3, r2
 800489a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	0159      	lsls	r1, r3, #5
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	440b      	add	r3, r1
 80048b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b6:	4619      	mov	r1, r3
 80048b8:	4b35      	ldr	r3, [pc, #212]	; (8004990 <USB_DeactivateEndpoint+0x1b0>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	600b      	str	r3, [r1, #0]
 80048be:	e060      	b.n	8004982 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d6:	d11f      	bne.n	8004918 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	440a      	add	r2, r1
 800490e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004912:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004916:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	2101      	movs	r1, #1
 800492a:	fa01 f303 	lsl.w	r3, r1, r3
 800492e:	041b      	lsls	r3, r3, #16
 8004930:	43db      	mvns	r3, r3
 8004932:	68f9      	ldr	r1, [r7, #12]
 8004934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004938:	4013      	ands	r3, r2
 800493a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	2101      	movs	r1, #1
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	041b      	lsls	r3, r3, #16
 8004954:	43db      	mvns	r3, r3
 8004956:	68f9      	ldr	r1, [r7, #12]
 8004958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800495c:	4013      	ands	r3, r2
 800495e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	0159      	lsls	r1, r3, #5
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	440b      	add	r3, r1
 8004976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497a:	4619      	mov	r1, r3
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <USB_DeactivateEndpoint+0x1b4>)
 800497e:	4013      	ands	r3, r2
 8004980:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	ec337800 	.word	0xec337800
 8004994:	eff37800 	.word	0xeff37800

08004998 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08a      	sub	sp, #40	; 0x28
 800499c:	af02      	add	r7, sp, #8
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	785b      	ldrb	r3, [r3, #1]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	f040 8163 	bne.w	8004c80 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d132      	bne.n	8004a28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	0159      	lsls	r1, r3, #5
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	440b      	add	r3, r1
 80049d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049dc:	4619      	mov	r1, r3
 80049de:	4ba5      	ldr	r3, [pc, #660]	; (8004c74 <USB_EPStartXfer+0x2dc>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	0151      	lsls	r1, r2, #5
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	440a      	add	r2, r1
 80049fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	0159      	lsls	r1, r3, #5
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	440b      	add	r3, r1
 8004a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4b95      	ldr	r3, [pc, #596]	; (8004c78 <USB_EPStartXfer+0x2e0>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	610b      	str	r3, [r1, #16]
 8004a26:	e074      	b.n	8004b12 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	0159      	lsls	r1, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	440b      	add	r3, r1
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a42:	4619      	mov	r1, r3
 8004a44:	4b8c      	ldr	r3, [pc, #560]	; (8004c78 <USB_EPStartXfer+0x2e0>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	0159      	lsls	r1, r3, #5
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	440b      	add	r3, r1
 8004a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a64:	4619      	mov	r1, r3
 8004a66:	4b83      	ldr	r3, [pc, #524]	; (8004c74 <USB_EPStartXfer+0x2dc>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	6999      	ldr	r1, [r3, #24]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	440b      	add	r3, r1
 8004a84:	1e59      	subs	r1, r3, #1
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a8e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a90:	4b7a      	ldr	r3, [pc, #488]	; (8004c7c <USB_EPStartXfer+0x2e4>)
 8004a92:	400b      	ands	r3, r1
 8004a94:	69b9      	ldr	r1, [r7, #24]
 8004a96:	0148      	lsls	r0, r1, #5
 8004a98:	69f9      	ldr	r1, [r7, #28]
 8004a9a:	4401      	add	r1, r0
 8004a9c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aba:	69b9      	ldr	r1, [r7, #24]
 8004abc:	0148      	lsls	r0, r1, #5
 8004abe:	69f9      	ldr	r1, [r7, #28]
 8004ac0:	4401      	add	r1, r0
 8004ac2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	791b      	ldrb	r3, [r3, #4]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d11f      	bne.n	8004b12 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	0151      	lsls	r1, r2, #5
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	440a      	add	r2, r1
 8004ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004af0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	0151      	lsls	r1, r2, #5
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b10:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d14b      	bne.n	8004bb0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d009      	beq.n	8004b34 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	791b      	ldrb	r3, [r3, #4]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d128      	bne.n	8004b8e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d110      	bne.n	8004b6e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	e00f      	b.n	8004b8e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	0151      	lsls	r1, r2, #5
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	440a      	add	r2, r1
 8004b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	0151      	lsls	r1, r2, #5
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	e137      	b.n	8004e20 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	0151      	lsls	r1, r2, #5
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	791b      	ldrb	r3, [r3, #4]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d015      	beq.n	8004c04 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 811f 	beq.w	8004e20 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf8:	69f9      	ldr	r1, [r7, #28]
 8004bfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	634b      	str	r3, [r1, #52]	; 0x34
 8004c02:	e10d      	b.n	8004e20 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d110      	bne.n	8004c36 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	0151      	lsls	r1, r2, #5
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	440a      	add	r2, r1
 8004c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	e00f      	b.n	8004c56 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	0151      	lsls	r1, r2, #5
 8004c48:	69fa      	ldr	r2, [r7, #28]
 8004c4a:	440a      	add	r2, r1
 8004c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c54:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6919      	ldr	r1, [r3, #16]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	781a      	ldrb	r2, [r3, #0]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	b298      	uxth	r0, r3
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	4603      	mov	r3, r0
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 faea 	bl	8005244 <USB_WritePacket>
 8004c70:	e0d6      	b.n	8004e20 <USB_EPStartXfer+0x488>
 8004c72:	bf00      	nop
 8004c74:	e007ffff 	.word	0xe007ffff
 8004c78:	fff80000 	.word	0xfff80000
 8004c7c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	0159      	lsls	r1, r3, #5
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	440b      	add	r3, r1
 8004c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4b63      	ldr	r3, [pc, #396]	; (8004e2c <USB_EPStartXfer+0x494>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	0159      	lsls	r1, r3, #5
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	440b      	add	r3, r1
 8004cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4b5c      	ldr	r3, [pc, #368]	; (8004e30 <USB_EPStartXfer+0x498>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d123      	bne.n	8004d14 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce2:	69b9      	ldr	r1, [r7, #24]
 8004ce4:	0148      	lsls	r0, r1, #5
 8004ce6:	69f9      	ldr	r1, [r7, #28]
 8004ce8:	4401      	add	r1, r0
 8004cea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d10:	6113      	str	r3, [r2, #16]
 8004d12:	e037      	b.n	8004d84 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	699a      	ldr	r2, [r3, #24]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	1e5a      	subs	r2, r3, #1
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	8afa      	ldrh	r2, [r7, #22]
 8004d30:	fb03 f202 	mul.w	r2, r3, r2
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	8afb      	ldrh	r3, [r7, #22]
 8004d48:	04d9      	lsls	r1, r3, #19
 8004d4a:	4b3a      	ldr	r3, [pc, #232]	; (8004e34 <USB_EPStartXfer+0x49c>)
 8004d4c:	400b      	ands	r3, r1
 8004d4e:	69b9      	ldr	r1, [r7, #24]
 8004d50:	0148      	lsls	r0, r1, #5
 8004d52:	69f9      	ldr	r1, [r7, #28]
 8004d54:	4401      	add	r1, r0
 8004d56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d74:	69b9      	ldr	r1, [r7, #24]
 8004d76:	0148      	lsls	r0, r1, #5
 8004d78:	69f9      	ldr	r1, [r7, #28]
 8004d7a:	4401      	add	r1, r0
 8004d7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d80:	4313      	orrs	r3, r2
 8004d82:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d10d      	bne.n	8004da6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d009      	beq.n	8004da6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	6919      	ldr	r1, [r3, #16]
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da2:	460a      	mov	r2, r1
 8004da4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	791b      	ldrb	r3, [r3, #4]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d128      	bne.n	8004e00 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d110      	bne.n	8004de0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	0151      	lsls	r1, r2, #5
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	440a      	add	r2, r1
 8004dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	e00f      	b.n	8004e00 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	0151      	lsls	r1, r2, #5
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	440a      	add	r2, r1
 8004df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	0151      	lsls	r1, r2, #5
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	440a      	add	r2, r1
 8004e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	fff80000 	.word	0xfff80000
 8004e30:	e007ffff 	.word	0xe007ffff
 8004e34:	1ff80000 	.word	0x1ff80000

08004e38 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	4613      	mov	r3, r2
 8004e44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	f040 80ce 	bne.w	8004ff6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d132      	bne.n	8004ec8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	0159      	lsls	r1, r3, #5
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	440b      	add	r3, r1
 8004e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4b9a      	ldr	r3, [pc, #616]	; (80050e8 <USB_EP0StartXfer+0x2b0>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	0151      	lsls	r1, r2, #5
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	440a      	add	r2, r1
 8004e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ea2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	0159      	lsls	r1, r3, #5
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	440b      	add	r3, r1
 8004eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4b8a      	ldr	r3, [pc, #552]	; (80050ec <USB_EP0StartXfer+0x2b4>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	610b      	str	r3, [r1, #16]
 8004ec6:	e04e      	b.n	8004f66 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	0159      	lsls	r1, r3, #5
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	440b      	add	r3, r1
 8004ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4b81      	ldr	r3, [pc, #516]	; (80050ec <USB_EP0StartXfer+0x2b4>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	0159      	lsls	r1, r3, #5
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	440b      	add	r3, r1
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	4619      	mov	r1, r3
 8004f06:	4b78      	ldr	r3, [pc, #480]	; (80050e8 <USB_EP0StartXfer+0x2b0>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	699a      	ldr	r2, [r3, #24]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d903      	bls.n	8004f20 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	0151      	lsls	r1, r2, #5
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	440a      	add	r2, r1
 8004f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f56:	6939      	ldr	r1, [r7, #16]
 8004f58:	0148      	lsls	r0, r1, #5
 8004f5a:	6979      	ldr	r1, [r7, #20]
 8004f5c:	4401      	add	r1, r0
 8004f5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f62:	4313      	orrs	r3, r2
 8004f64:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d11e      	bne.n	8004faa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d009      	beq.n	8004f88 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f80:	461a      	mov	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	0151      	lsls	r1, r2, #5
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	e097      	b.n	80050da <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	0151      	lsls	r1, r2, #5
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	440a      	add	r2, r1
 8004fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fc8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8083 	beq.w	80050da <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	f003 030f 	and.w	r3, r3, #15
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fea:	6979      	ldr	r1, [r7, #20]
 8004fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	634b      	str	r3, [r1, #52]	; 0x34
 8004ff4:	e071      	b.n	80050da <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	0159      	lsls	r1, r3, #5
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	440b      	add	r3, r1
 800500c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005010:	4619      	mov	r1, r3
 8005012:	4b36      	ldr	r3, [pc, #216]	; (80050ec <USB_EP0StartXfer+0x2b4>)
 8005014:	4013      	ands	r3, r2
 8005016:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005024:	691a      	ldr	r2, [r3, #16]
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	0159      	lsls	r1, r3, #5
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	440b      	add	r3, r1
 800502e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005032:	4619      	mov	r1, r3
 8005034:	4b2c      	ldr	r3, [pc, #176]	; (80050e8 <USB_EP0StartXfer+0x2b0>)
 8005036:	4013      	ands	r3, r2
 8005038:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	0151      	lsls	r1, r2, #5
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	440a      	add	r2, r1
 8005068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800506c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005070:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005088:	6939      	ldr	r1, [r7, #16]
 800508a:	0148      	lsls	r0, r1, #5
 800508c:	6979      	ldr	r1, [r7, #20]
 800508e:	4401      	add	r1, r0
 8005090:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005094:	4313      	orrs	r3, r2
 8005096:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005098:	79fb      	ldrb	r3, [r7, #7]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d10d      	bne.n	80050ba <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	6919      	ldr	r1, [r3, #16]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b6:	460a      	mov	r2, r1
 80050b8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	0151      	lsls	r1, r2, #5
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	440a      	add	r2, r1
 80050d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	e007ffff 	.word	0xe007ffff
 80050ec:	fff80000 	.word	0xfff80000

080050f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	785b      	ldrb	r3, [r3, #1]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d14a      	bne.n	80051a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005126:	f040 8086 	bne.w	8005236 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	7812      	ldrb	r2, [r2, #0]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	440a      	add	r2, r1
 8005144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005148:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800514c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	7812      	ldrb	r2, [r2, #0]
 8005162:	0151      	lsls	r1, r2, #5
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	440a      	add	r2, r1
 8005168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800516c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005170:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3301      	adds	r3, #1
 8005176:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f242 7210 	movw	r2, #10000	; 0x2710
 800517e:	4293      	cmp	r3, r2
 8005180:	d902      	bls.n	8005188 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	75fb      	strb	r3, [r7, #23]
          break;
 8005186:	e056      	b.n	8005236 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800519c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a0:	d0e7      	beq.n	8005172 <USB_EPStopXfer+0x82>
 80051a2:	e048      	b.n	8005236 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051bc:	d13b      	bne.n	8005236 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	7812      	ldrb	r2, [r2, #0]
 80051f6:	0151      	lsls	r1, r2, #5
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	440a      	add	r2, r1
 80051fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005200:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005204:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3301      	adds	r3, #1
 800520a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005212:	4293      	cmp	r3, r2
 8005214:	d902      	bls.n	800521c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	75fb      	strb	r3, [r7, #23]
          break;
 800521a:	e00c      	b.n	8005236 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005234:	d0e7      	beq.n	8005206 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005236:	7dfb      	ldrb	r3, [r7, #23]
}
 8005238:	4618      	mov	r0, r3
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005244:	b480      	push	{r7}
 8005246:	b089      	sub	sp, #36	; 0x24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	4611      	mov	r1, r2
 8005250:	461a      	mov	r2, r3
 8005252:	460b      	mov	r3, r1
 8005254:	71fb      	strb	r3, [r7, #7]
 8005256:	4613      	mov	r3, r2
 8005258:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005262:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005266:	2b00      	cmp	r3, #0
 8005268:	d123      	bne.n	80052b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800526a:	88bb      	ldrh	r3, [r7, #4]
 800526c:	3303      	adds	r3, #3
 800526e:	089b      	lsrs	r3, r3, #2
 8005270:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005272:	2300      	movs	r3, #0
 8005274:	61bb      	str	r3, [r7, #24]
 8005276:	e018      	b.n	80052aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	031a      	lsls	r2, r3, #12
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	4413      	add	r3, r2
 8005280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005284:	461a      	mov	r2, r3
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	3301      	adds	r3, #1
 8005290:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	3301      	adds	r3, #1
 8005296:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	3301      	adds	r3, #1
 800529c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	3301      	adds	r3, #1
 80052a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	3301      	adds	r3, #1
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d3e2      	bcc.n	8005278 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3724      	adds	r7, #36	; 0x24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b08b      	sub	sp, #44	; 0x2c
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	089b      	lsrs	r3, r3, #2
 80052da:	b29b      	uxth	r3, r3
 80052dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052de:	88fb      	ldrh	r3, [r7, #6]
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052e6:	2300      	movs	r3, #0
 80052e8:	623b      	str	r3, [r7, #32]
 80052ea:	e014      	b.n	8005316 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	3301      	adds	r3, #1
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	3301      	adds	r3, #1
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	3301      	adds	r3, #1
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	3301      	adds	r3, #1
 800530e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	3301      	adds	r3, #1
 8005314:	623b      	str	r3, [r7, #32]
 8005316:	6a3a      	ldr	r2, [r7, #32]
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	429a      	cmp	r2, r3
 800531c:	d3e6      	bcc.n	80052ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800531e:	8bfb      	ldrh	r3, [r7, #30]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01e      	beq.n	8005362 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800532e:	461a      	mov	r2, r3
 8005330:	f107 0310 	add.w	r3, r7, #16
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
 8005344:	b2da      	uxtb	r2, r3
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	701a      	strb	r2, [r3, #0]
      i++;
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	3301      	adds	r3, #1
 800534e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	3301      	adds	r3, #1
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005356:	8bfb      	ldrh	r3, [r7, #30]
 8005358:	3b01      	subs	r3, #1
 800535a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800535c:	8bfb      	ldrh	r3, [r7, #30]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1ea      	bne.n	8005338 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005364:	4618      	mov	r0, r3
 8005366:	372c      	adds	r7, #44	; 0x2c
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d12c      	bne.n	80053e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	db12      	blt.n	80053c4 <USB_EPSetStall+0x54>
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00f      	beq.n	80053c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	e02b      	b.n	800543e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	db12      	blt.n	800541e <USB_EPSetStall+0xae>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00f      	beq.n	800541e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	0151      	lsls	r1, r2, #5
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	440a      	add	r2, r1
 8005414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005418:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800541c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	0151      	lsls	r1, r2, #5
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	440a      	add	r2, r1
 8005434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005438:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800543c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d128      	bne.n	80054ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	0151      	lsls	r1, r2, #5
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	440a      	add	r2, r1
 800547e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005482:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005486:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	791b      	ldrb	r3, [r3, #4]
 800548c:	2b03      	cmp	r3, #3
 800548e:	d003      	beq.n	8005498 <USB_EPClearStall+0x4c>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	791b      	ldrb	r3, [r3, #4]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d138      	bne.n	800550a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	0151      	lsls	r1, r2, #5
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	440a      	add	r2, r1
 80054ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	e027      	b.n	800550a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	791b      	ldrb	r3, [r3, #4]
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d003      	beq.n	80054ea <USB_EPClearStall+0x9e>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	791b      	ldrb	r3, [r3, #4]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d10f      	bne.n	800550a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	0151      	lsls	r1, r2, #5
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	440a      	add	r2, r1
 8005500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005508:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005536:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800553a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800554c:	68f9      	ldr	r1, [r7, #12]
 800554e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005552:	4313      	orrs	r3, r2
 8005554:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800557e:	f023 0303 	bic.w	r3, r3, #3
 8005582:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005592:	f023 0302 	bic.w	r3, r3, #2
 8005596:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055c0:	f023 0303 	bic.w	r3, r3, #3
 80055c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055d4:	f043 0302 	orr.w	r3, r3, #2
 80055d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4013      	ands	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005600:	68fb      	ldr	r3, [r7, #12]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800560e:	b480      	push	{r7}
 8005610:	b085      	sub	sp, #20
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	4013      	ands	r3, r2
 8005630:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	0c1b      	lsrs	r3, r3, #16
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	4013      	ands	r3, r2
 8005664:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	b29b      	uxth	r3, r3
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	460b      	mov	r3, r1
 8005680:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005686:	78fb      	ldrb	r3, [r7, #3]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	4013      	ands	r3, r2
 80056a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056a4:	68bb      	ldr	r3, [r7, #8]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b087      	sub	sp, #28
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	460b      	mov	r3, r1
 80056bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	fa22 f303 	lsr.w	r3, r2, r3
 80056e2:	01db      	lsls	r3, r3, #7
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4013      	ands	r3, r2
 80056fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005700:	68bb      	ldr	r3, [r7, #8]
}
 8005702:	4618      	mov	r0, r3
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	f003 0301 	and.w	r3, r3, #1
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
	...

0800572c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005746:	4619      	mov	r1, r3
 8005748:	4b09      	ldr	r3, [pc, #36]	; (8005770 <USB_ActivateSetup+0x44>)
 800574a:	4013      	ands	r3, r2
 800574c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800575c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005760:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	fffff800 	.word	0xfffff800

08005774 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	460b      	mov	r3, r1
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	333c      	adds	r3, #60	; 0x3c
 800578a:	3304      	adds	r3, #4
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4a26      	ldr	r2, [pc, #152]	; (800582c <USB_EP0_OutStart+0xb8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d90a      	bls.n	80057ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057a8:	d101      	bne.n	80057ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e037      	b.n	800581e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b4:	461a      	mov	r2, r3
 80057b6:	2300      	movs	r3, #0
 80057b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057dc:	f043 0318 	orr.w	r3, r3, #24
 80057e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80057f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80057f6:	7afb      	ldrb	r3, [r7, #11]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d10f      	bne.n	800581c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005802:	461a      	mov	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005816:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800581a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	4f54300a 	.word	0x4f54300a

08005830 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3301      	adds	r3, #1
 8005840:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4a13      	ldr	r2, [pc, #76]	; (8005894 <USB_CoreReset+0x64>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d901      	bls.n	800584e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e01b      	b.n	8005886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	daf2      	bge.n	800583c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f043 0201 	orr.w	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3301      	adds	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4a09      	ldr	r2, [pc, #36]	; (8005894 <USB_CoreReset+0x64>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d901      	bls.n	8005878 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e006      	b.n	8005886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b01      	cmp	r3, #1
 8005882:	d0f0      	beq.n	8005866 <USB_CoreReset+0x36>

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	00030d40 	.word	0x00030d40

08005898 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80058a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80058a8:	f004 fdd4 	bl	800a454 <malloc>
 80058ac:	4603      	mov	r3, r0
 80058ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	32b0      	adds	r2, #176	; 0xb0
 80058c0:	2100      	movs	r1, #0
 80058c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80058c6:	2302      	movs	r3, #2
 80058c8:	e0d4      	b.n	8005a74 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80058ca:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80058ce:	2100      	movs	r1, #0
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f004 fe7b 	bl	800a5cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	32b0      	adds	r2, #176	; 0xb0
 80058e0:	68f9      	ldr	r1, [r7, #12]
 80058e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	32b0      	adds	r2, #176	; 0xb0
 80058f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	7c1b      	ldrb	r3, [r3, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d138      	bne.n	8005974 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005902:	4b5e      	ldr	r3, [pc, #376]	; (8005a7c <USBD_CDC_Init+0x1e4>)
 8005904:	7819      	ldrb	r1, [r3, #0]
 8005906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800590a:	2202      	movs	r2, #2
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f004 fbfe 	bl	800a10e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005912:	4b5a      	ldr	r3, [pc, #360]	; (8005a7c <USBD_CDC_Init+0x1e4>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	f003 020f 	and.w	r2, r3, #15
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	440b      	add	r3, r1
 8005926:	3324      	adds	r3, #36	; 0x24
 8005928:	2201      	movs	r2, #1
 800592a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800592c:	4b54      	ldr	r3, [pc, #336]	; (8005a80 <USBD_CDC_Init+0x1e8>)
 800592e:	7819      	ldrb	r1, [r3, #0]
 8005930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005934:	2202      	movs	r2, #2
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f004 fbe9 	bl	800a10e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800593c:	4b50      	ldr	r3, [pc, #320]	; (8005a80 <USBD_CDC_Init+0x1e8>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f003 020f 	and.w	r2, r3, #15
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	440b      	add	r3, r1
 8005950:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005954:	2201      	movs	r2, #1
 8005956:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005958:	4b4a      	ldr	r3, [pc, #296]	; (8005a84 <USBD_CDC_Init+0x1ec>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	f003 020f 	and.w	r2, r3, #15
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	440b      	add	r3, r1
 800596c:	3326      	adds	r3, #38	; 0x26
 800596e:	2210      	movs	r2, #16
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	e035      	b.n	80059e0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005974:	4b41      	ldr	r3, [pc, #260]	; (8005a7c <USBD_CDC_Init+0x1e4>)
 8005976:	7819      	ldrb	r1, [r3, #0]
 8005978:	2340      	movs	r3, #64	; 0x40
 800597a:	2202      	movs	r2, #2
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f004 fbc6 	bl	800a10e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005982:	4b3e      	ldr	r3, [pc, #248]	; (8005a7c <USBD_CDC_Init+0x1e4>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	f003 020f 	and.w	r2, r3, #15
 800598a:	6879      	ldr	r1, [r7, #4]
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	440b      	add	r3, r1
 8005996:	3324      	adds	r3, #36	; 0x24
 8005998:	2201      	movs	r2, #1
 800599a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800599c:	4b38      	ldr	r3, [pc, #224]	; (8005a80 <USBD_CDC_Init+0x1e8>)
 800599e:	7819      	ldrb	r1, [r3, #0]
 80059a0:	2340      	movs	r3, #64	; 0x40
 80059a2:	2202      	movs	r2, #2
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f004 fbb2 	bl	800a10e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80059aa:	4b35      	ldr	r3, [pc, #212]	; (8005a80 <USBD_CDC_Init+0x1e8>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	f003 020f 	and.w	r2, r3, #15
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059c2:	2201      	movs	r2, #1
 80059c4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80059c6:	4b2f      	ldr	r3, [pc, #188]	; (8005a84 <USBD_CDC_Init+0x1ec>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	f003 020f 	and.w	r2, r3, #15
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	3326      	adds	r3, #38	; 0x26
 80059dc:	2210      	movs	r2, #16
 80059de:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059e0:	4b28      	ldr	r3, [pc, #160]	; (8005a84 <USBD_CDC_Init+0x1ec>)
 80059e2:	7819      	ldrb	r1, [r3, #0]
 80059e4:	2308      	movs	r3, #8
 80059e6:	2203      	movs	r2, #3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f004 fb90 	bl	800a10e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80059ee:	4b25      	ldr	r3, [pc, #148]	; (8005a84 <USBD_CDC_Init+0x1ec>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	f003 020f 	and.w	r2, r3, #15
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	3324      	adds	r3, #36	; 0x24
 8005a04:	2201      	movs	r2, #1
 8005a06:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	33b0      	adds	r3, #176	; 0xb0
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e018      	b.n	8005a74 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	7c1b      	ldrb	r3, [r3, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	; (8005a80 <USBD_CDC_Init+0x1e8>)
 8005a4c:	7819      	ldrb	r1, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f004 fc47 	bl	800a2ec <USBD_LL_PrepareReceive>
 8005a5e:	e008      	b.n	8005a72 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a60:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <USBD_CDC_Init+0x1e8>)
 8005a62:	7819      	ldrb	r1, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a6a:	2340      	movs	r3, #64	; 0x40
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f004 fc3d 	bl	800a2ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	20000093 	.word	0x20000093
 8005a80:	20000094 	.word	0x20000094
 8005a84:	20000095 	.word	0x20000095

08005a88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005a94:	4b3a      	ldr	r3, [pc, #232]	; (8005b80 <USBD_CDC_DeInit+0xf8>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f004 fb5d 	bl	800a15a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005aa0:	4b37      	ldr	r3, [pc, #220]	; (8005b80 <USBD_CDC_DeInit+0xf8>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	f003 020f 	and.w	r2, r3, #15
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	3324      	adds	r3, #36	; 0x24
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005aba:	4b32      	ldr	r3, [pc, #200]	; (8005b84 <USBD_CDC_DeInit+0xfc>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f004 fb4a 	bl	800a15a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005ac6:	4b2f      	ldr	r3, [pc, #188]	; (8005b84 <USBD_CDC_DeInit+0xfc>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	f003 020f 	and.w	r2, r3, #15
 8005ace:	6879      	ldr	r1, [r7, #4]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	440b      	add	r3, r1
 8005ada:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ade:	2200      	movs	r2, #0
 8005ae0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005ae2:	4b29      	ldr	r3, [pc, #164]	; (8005b88 <USBD_CDC_DeInit+0x100>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f004 fb36 	bl	800a15a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005aee:	4b26      	ldr	r3, [pc, #152]	; (8005b88 <USBD_CDC_DeInit+0x100>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	f003 020f 	and.w	r2, r3, #15
 8005af6:	6879      	ldr	r1, [r7, #4]
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	440b      	add	r3, r1
 8005b02:	3324      	adds	r3, #36	; 0x24
 8005b04:	2200      	movs	r2, #0
 8005b06:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005b08:	4b1f      	ldr	r3, [pc, #124]	; (8005b88 <USBD_CDC_DeInit+0x100>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	f003 020f 	and.w	r2, r3, #15
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	3326      	adds	r3, #38	; 0x26
 8005b1e:	2200      	movs	r2, #0
 8005b20:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	32b0      	adds	r2, #176	; 0xb0
 8005b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01f      	beq.n	8005b74 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	33b0      	adds	r3, #176	; 0xb0
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	32b0      	adds	r2, #176	; 0xb0
 8005b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f004 fc84 	bl	800a464 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	32b0      	adds	r2, #176	; 0xb0
 8005b66:	2100      	movs	r1, #0
 8005b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000093 	.word	0x20000093
 8005b84:	20000094 	.word	0x20000094
 8005b88:	20000095 	.word	0x20000095

08005b8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	32b0      	adds	r2, #176	; 0xb0
 8005ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e0bf      	b.n	8005d3c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d050      	beq.n	8005c6a <USBD_CDC_Setup+0xde>
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	f040 80af 	bne.w	8005d2c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	88db      	ldrh	r3, [r3, #6]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d03a      	beq.n	8005c4c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	b25b      	sxtb	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	da1b      	bge.n	8005c18 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	33b0      	adds	r3, #176	; 0xb0
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005bf6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	88d2      	ldrh	r2, [r2, #6]
 8005bfc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	88db      	ldrh	r3, [r3, #6]
 8005c02:	2b07      	cmp	r3, #7
 8005c04:	bf28      	it	cs
 8005c06:	2307      	movcs	r3, #7
 8005c08:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	89fa      	ldrh	r2, [r7, #14]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f001 fdad 	bl	8007770 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005c16:	e090      	b.n	8005d3a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	785a      	ldrb	r2, [r3, #1]
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	88db      	ldrh	r3, [r3, #6]
 8005c26:	2b3f      	cmp	r3, #63	; 0x3f
 8005c28:	d803      	bhi.n	8005c32 <USBD_CDC_Setup+0xa6>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	88db      	ldrh	r3, [r3, #6]
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	e000      	b.n	8005c34 <USBD_CDC_Setup+0xa8>
 8005c32:	2240      	movs	r2, #64	; 0x40
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005c3a:	6939      	ldr	r1, [r7, #16]
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005c42:	461a      	mov	r2, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f001 fdbf 	bl	80077c8 <USBD_CtlPrepareRx>
      break;
 8005c4a:	e076      	b.n	8005d3a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	33b0      	adds	r3, #176	; 0xb0
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	7850      	ldrb	r0, [r2, #1]
 8005c62:	2200      	movs	r2, #0
 8005c64:	6839      	ldr	r1, [r7, #0]
 8005c66:	4798      	blx	r3
      break;
 8005c68:	e067      	b.n	8005d3a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	2b0b      	cmp	r3, #11
 8005c70:	d851      	bhi.n	8005d16 <USBD_CDC_Setup+0x18a>
 8005c72:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <USBD_CDC_Setup+0xec>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005ca9 	.word	0x08005ca9
 8005c7c:	08005d25 	.word	0x08005d25
 8005c80:	08005d17 	.word	0x08005d17
 8005c84:	08005d17 	.word	0x08005d17
 8005c88:	08005d17 	.word	0x08005d17
 8005c8c:	08005d17 	.word	0x08005d17
 8005c90:	08005d17 	.word	0x08005d17
 8005c94:	08005d17 	.word	0x08005d17
 8005c98:	08005d17 	.word	0x08005d17
 8005c9c:	08005d17 	.word	0x08005d17
 8005ca0:	08005cd3 	.word	0x08005cd3
 8005ca4:	08005cfd 	.word	0x08005cfd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d107      	bne.n	8005cc4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005cb4:	f107 030a 	add.w	r3, r7, #10
 8005cb8:	2202      	movs	r2, #2
 8005cba:	4619      	mov	r1, r3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f001 fd57 	bl	8007770 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cc2:	e032      	b.n	8005d2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f001 fce1 	bl	800768e <USBD_CtlError>
            ret = USBD_FAIL;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	75fb      	strb	r3, [r7, #23]
          break;
 8005cd0:	e02b      	b.n	8005d2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d107      	bne.n	8005cee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005cde:	f107 030d 	add.w	r3, r7, #13
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 fd42 	bl	8007770 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cec:	e01d      	b.n	8005d2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f001 fccc 	bl	800768e <USBD_CtlError>
            ret = USBD_FAIL;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8005cfa:	e016      	b.n	8005d2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d00f      	beq.n	8005d28 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f001 fcbf 	bl	800768e <USBD_CtlError>
            ret = USBD_FAIL;
 8005d10:	2303      	movs	r3, #3
 8005d12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d14:	e008      	b.n	8005d28 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d16:	6839      	ldr	r1, [r7, #0]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f001 fcb8 	bl	800768e <USBD_CtlError>
          ret = USBD_FAIL;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	75fb      	strb	r3, [r7, #23]
          break;
 8005d22:	e002      	b.n	8005d2a <USBD_CDC_Setup+0x19e>
          break;
 8005d24:	bf00      	nop
 8005d26:	e008      	b.n	8005d3a <USBD_CDC_Setup+0x1ae>
          break;
 8005d28:	bf00      	nop
      }
      break;
 8005d2a:	e006      	b.n	8005d3a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f001 fcad 	bl	800768e <USBD_CtlError>
      ret = USBD_FAIL;
 8005d34:	2303      	movs	r3, #3
 8005d36:	75fb      	strb	r3, [r7, #23]
      break;
 8005d38:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005d56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	32b0      	adds	r2, #176	; 0xb0
 8005d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e065      	b.n	8005e3a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	32b0      	adds	r2, #176	; 0xb0
 8005d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	f003 020f 	and.w	r2, r3, #15
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	3318      	adds	r3, #24
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d02f      	beq.n	8005df8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	f003 020f 	and.w	r2, r3, #15
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	3318      	adds	r3, #24
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	78fb      	ldrb	r3, [r7, #3]
 8005db0:	f003 010f 	and.w	r1, r3, #15
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	460b      	mov	r3, r1
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	440b      	add	r3, r1
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4403      	add	r3, r0
 8005dc0:	3348      	adds	r3, #72	; 0x48
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005dc8:	fb01 f303 	mul.w	r3, r1, r3
 8005dcc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d112      	bne.n	8005df8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005dd2:	78fb      	ldrb	r3, [r7, #3]
 8005dd4:	f003 020f 	and.w	r2, r3, #15
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	3318      	adds	r3, #24
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005dea:	78f9      	ldrb	r1, [r7, #3]
 8005dec:	2300      	movs	r3, #0
 8005dee:	2200      	movs	r2, #0
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f004 fa5a 	bl	800a2aa <USBD_LL_Transmit>
 8005df6:	e01f      	b.n	8005e38 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	33b0      	adds	r3, #176	; 0xb0
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d010      	beq.n	8005e38 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	33b0      	adds	r3, #176	; 0xb0
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005e34:	78fa      	ldrb	r2, [r7, #3]
 8005e36:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	32b0      	adds	r2, #176	; 0xb0
 8005e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	32b0      	adds	r2, #176	; 0xb0
 8005e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e01a      	b.n	8005eaa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f004 fa58 	bl	800a32e <USBD_LL_GetRxDataSize>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	33b0      	adds	r3, #176	; 0xb0
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	32b0      	adds	r2, #176	; 0xb0
 8005ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e025      	b.n	8005f20 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	33b0      	adds	r3, #176	; 0xb0
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01a      	beq.n	8005f1e <USBD_CDC_EP0_RxReady+0x6c>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005eee:	2bff      	cmp	r3, #255	; 0xff
 8005ef0:	d015      	beq.n	8005f1e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	33b0      	adds	r3, #176	; 0xb0
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005f0a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f12:	b292      	uxth	r2, r2
 8005f14:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	22ff      	movs	r2, #255	; 0xff
 8005f1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f30:	2182      	movs	r1, #130	; 0x82
 8005f32:	4818      	ldr	r0, [pc, #96]	; (8005f94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f34:	f000 fd49 	bl	80069ca <USBD_GetEpDesc>
 8005f38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	4815      	ldr	r0, [pc, #84]	; (8005f94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f3e:	f000 fd44 	bl	80069ca <USBD_GetEpDesc>
 8005f42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f44:	2181      	movs	r1, #129	; 0x81
 8005f46:	4813      	ldr	r0, [pc, #76]	; (8005f94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f48:	f000 fd3f 	bl	80069ca <USBD_GetEpDesc>
 8005f4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2210      	movs	r2, #16
 8005f58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d006      	beq.n	8005f6e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f68:	711a      	strb	r2, [r3, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d006      	beq.n	8005f82 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f7c:	711a      	strb	r2, [r3, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2243      	movs	r2, #67	; 0x43
 8005f86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f88:	4b02      	ldr	r3, [pc, #8]	; (8005f94 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20000050 	.word	0x20000050

08005f98 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fa0:	2182      	movs	r1, #130	; 0x82
 8005fa2:	4818      	ldr	r0, [pc, #96]	; (8006004 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005fa4:	f000 fd11 	bl	80069ca <USBD_GetEpDesc>
 8005fa8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005faa:	2101      	movs	r1, #1
 8005fac:	4815      	ldr	r0, [pc, #84]	; (8006004 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005fae:	f000 fd0c 	bl	80069ca <USBD_GetEpDesc>
 8005fb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fb4:	2181      	movs	r1, #129	; 0x81
 8005fb6:	4813      	ldr	r0, [pc, #76]	; (8006004 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005fb8:	f000 fd07 	bl	80069ca <USBD_GetEpDesc>
 8005fbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2210      	movs	r2, #16
 8005fc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d006      	beq.n	8005fde <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	711a      	strb	r2, [r3, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f042 0202 	orr.w	r2, r2, #2
 8005fdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d006      	beq.n	8005ff2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	711a      	strb	r2, [r3, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f042 0202 	orr.w	r2, r2, #2
 8005ff0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2243      	movs	r2, #67	; 0x43
 8005ff6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ff8:	4b02      	ldr	r3, [pc, #8]	; (8006004 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000050 	.word	0x20000050

08006008 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006010:	2182      	movs	r1, #130	; 0x82
 8006012:	4818      	ldr	r0, [pc, #96]	; (8006074 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006014:	f000 fcd9 	bl	80069ca <USBD_GetEpDesc>
 8006018:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800601a:	2101      	movs	r1, #1
 800601c:	4815      	ldr	r0, [pc, #84]	; (8006074 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800601e:	f000 fcd4 	bl	80069ca <USBD_GetEpDesc>
 8006022:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006024:	2181      	movs	r1, #129	; 0x81
 8006026:	4813      	ldr	r0, [pc, #76]	; (8006074 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006028:	f000 fccf 	bl	80069ca <USBD_GetEpDesc>
 800602c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	2210      	movs	r2, #16
 8006038:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d006      	beq.n	800604e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2200      	movs	r2, #0
 8006044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006048:	711a      	strb	r2, [r3, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d006      	beq.n	8006062 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800605c:	711a      	strb	r2, [r3, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2243      	movs	r2, #67	; 0x43
 8006066:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006068:	4b02      	ldr	r3, [pc, #8]	; (8006074 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800606a:	4618      	mov	r0, r3
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000050 	.word	0x20000050

08006078 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	220a      	movs	r2, #10
 8006084:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006086:	4b03      	ldr	r3, [pc, #12]	; (8006094 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	2000000c 	.word	0x2000000c

08006098 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e009      	b.n	80060c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	33b0      	adds	r3, #176	; 0xb0
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	32b0      	adds	r2, #176	; 0xb0
 80060e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e008      	b.n	8006104 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	32b0      	adds	r2, #176	; 0xb0
 8006124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006128:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006130:	2303      	movs	r3, #3
 8006132:	e004      	b.n	800613e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
	...

0800614c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	32b0      	adds	r2, #176	; 0xb0
 800615e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006162:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006164:	2301      	movs	r3, #1
 8006166:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800616e:	2303      	movs	r3, #3
 8006170:	e025      	b.n	80061be <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006178:	2b00      	cmp	r3, #0
 800617a:	d11f      	bne.n	80061bc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2201      	movs	r2, #1
 8006180:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006184:	4b10      	ldr	r3, [pc, #64]	; (80061c8 <USBD_CDC_TransmitPacket+0x7c>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	f003 020f 	and.w	r2, r3, #15
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4403      	add	r3, r0
 800619e:	3318      	adds	r3, #24
 80061a0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80061a2:	4b09      	ldr	r3, [pc, #36]	; (80061c8 <USBD_CDC_TransmitPacket+0x7c>)
 80061a4:	7819      	ldrb	r1, [r3, #0]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f004 f879 	bl	800a2aa <USBD_LL_Transmit>

    ret = USBD_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000093 	.word	0x20000093

080061cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	32b0      	adds	r2, #176	; 0xb0
 80061de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	32b0      	adds	r2, #176	; 0xb0
 80061ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e018      	b.n	800622c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	7c1b      	ldrb	r3, [r3, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006202:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <USBD_CDC_ReceivePacket+0x68>)
 8006204:	7819      	ldrb	r1, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800620c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f004 f86b 	bl	800a2ec <USBD_LL_PrepareReceive>
 8006216:	e008      	b.n	800622a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006218:	4b06      	ldr	r3, [pc, #24]	; (8006234 <USBD_CDC_ReceivePacket+0x68>)
 800621a:	7819      	ldrb	r1, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006222:	2340      	movs	r3, #64	; 0x40
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f004 f861 	bl	800a2ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20000094 	.word	0x20000094

08006238 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	4613      	mov	r3, r2
 8006244:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800624c:	2303      	movs	r3, #3
 800624e:	e01f      	b.n	8006290 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	79fa      	ldrb	r2, [r7, #7]
 8006282:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f003 fedb 	bl	800a040 <USBD_LL_Init>
 800628a:	4603      	mov	r3, r0
 800628c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800628e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e025      	b.n	80062fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	32ae      	adds	r2, #174	; 0xae
 80062c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00f      	beq.n	80062ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	32ae      	adds	r2, #174	; 0xae
 80062d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	f107 020e 	add.w	r2, r7, #14
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
 80062e4:	4602      	mov	r2, r0
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f003 fee3 	bl	800a0d8 <USBD_LL_Start>
 8006312:	4603      	mov	r3, r0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006324:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	460b      	mov	r3, r1
 800633c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006348:	2b00      	cmp	r3, #0
 800634a:	d009      	beq.n	8006360 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	78fa      	ldrb	r2, [r7, #3]
 8006356:	4611      	mov	r1, r2
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	460b      	mov	r3, r1
 8006374:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	78fa      	ldrb	r2, [r7, #3]
 8006384:	4611      	mov	r1, r2
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006390:	2303      	movs	r3, #3
 8006392:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006394:	7bfb      	ldrb	r3, [r7, #15]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 f932 	bl	800761a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80063c4:	461a      	mov	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d01a      	beq.n	8006410 <USBD_LL_SetupStage+0x72>
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d822      	bhi.n	8006424 <USBD_LL_SetupStage+0x86>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <USBD_LL_SetupStage+0x4a>
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d00a      	beq.n	80063fc <USBD_LL_SetupStage+0x5e>
 80063e6:	e01d      	b.n	8006424 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fb5f 	bl	8006ab4 <USBD_StdDevReq>
 80063f6:	4603      	mov	r3, r0
 80063f8:	73fb      	strb	r3, [r7, #15]
      break;
 80063fa:	e020      	b.n	800643e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fbc7 	bl	8006b98 <USBD_StdItfReq>
 800640a:	4603      	mov	r3, r0
 800640c:	73fb      	strb	r3, [r7, #15]
      break;
 800640e:	e016      	b.n	800643e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fc29 	bl	8006c70 <USBD_StdEPReq>
 800641e:	4603      	mov	r3, r0
 8006420:	73fb      	strb	r3, [r7, #15]
      break;
 8006422:	e00c      	b.n	800643e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800642a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800642e:	b2db      	uxtb	r3, r3
 8006430:	4619      	mov	r1, r3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f003 feb0 	bl	800a198 <USBD_LL_StallEP>
 8006438:	4603      	mov	r3, r0
 800643a:	73fb      	strb	r3, [r7, #15]
      break;
 800643c:	bf00      	nop
  }

  return ret;
 800643e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	460b      	mov	r3, r1
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800645a:	7afb      	ldrb	r3, [r7, #11]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d16e      	bne.n	800653e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006466:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800646e:	2b03      	cmp	r3, #3
 8006470:	f040 8098 	bne.w	80065a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	429a      	cmp	r2, r3
 800647e:	d913      	bls.n	80064a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	1ad2      	subs	r2, r2, r3
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	4293      	cmp	r3, r2
 8006498:	bf28      	it	cs
 800649a:	4613      	movcs	r3, r2
 800649c:	461a      	mov	r2, r3
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f001 f9ae 	bl	8007802 <USBD_CtlContinueRx>
 80064a6:	e07d      	b.n	80065a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064ae:	f003 031f 	and.w	r3, r3, #31
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d014      	beq.n	80064e0 <USBD_LL_DataOutStage+0x98>
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d81d      	bhi.n	80064f6 <USBD_LL_DataOutStage+0xae>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <USBD_LL_DataOutStage+0x7c>
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d003      	beq.n	80064ca <USBD_LL_DataOutStage+0x82>
 80064c2:	e018      	b.n	80064f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	75bb      	strb	r3, [r7, #22]
            break;
 80064c8:	e018      	b.n	80064fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	4619      	mov	r1, r3
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 fa5e 	bl	8006996 <USBD_CoreFindIF>
 80064da:	4603      	mov	r3, r0
 80064dc:	75bb      	strb	r3, [r7, #22]
            break;
 80064de:	e00d      	b.n	80064fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	4619      	mov	r1, r3
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 fa60 	bl	80069b0 <USBD_CoreFindEP>
 80064f0:	4603      	mov	r3, r0
 80064f2:	75bb      	strb	r3, [r7, #22]
            break;
 80064f4:	e002      	b.n	80064fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	75bb      	strb	r3, [r7, #22]
            break;
 80064fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80064fc:	7dbb      	ldrb	r3, [r7, #22]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d119      	bne.n	8006536 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b03      	cmp	r3, #3
 800650c:	d113      	bne.n	8006536 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800650e:	7dba      	ldrb	r2, [r7, #22]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	32ae      	adds	r2, #174	; 0xae
 8006514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00b      	beq.n	8006536 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800651e:	7dba      	ldrb	r2, [r7, #22]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006526:	7dba      	ldrb	r2, [r7, #22]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	32ae      	adds	r2, #174	; 0xae
 800652c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f001 f974 	bl	8007824 <USBD_CtlSendStatus>
 800653c:	e032      	b.n	80065a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800653e:	7afb      	ldrb	r3, [r7, #11]
 8006540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006544:	b2db      	uxtb	r3, r3
 8006546:	4619      	mov	r1, r3
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fa31 	bl	80069b0 <USBD_CoreFindEP>
 800654e:	4603      	mov	r3, r0
 8006550:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006552:	7dbb      	ldrb	r3, [r7, #22]
 8006554:	2bff      	cmp	r3, #255	; 0xff
 8006556:	d025      	beq.n	80065a4 <USBD_LL_DataOutStage+0x15c>
 8006558:	7dbb      	ldrb	r3, [r7, #22]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d122      	bne.n	80065a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b03      	cmp	r3, #3
 8006568:	d117      	bne.n	800659a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800656a:	7dba      	ldrb	r2, [r7, #22]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	32ae      	adds	r2, #174	; 0xae
 8006570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00f      	beq.n	800659a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800657a:	7dba      	ldrb	r2, [r7, #22]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006582:	7dba      	ldrb	r2, [r7, #22]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	32ae      	adds	r2, #174	; 0xae
 8006588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	7afa      	ldrb	r2, [r7, #11]
 8006590:	4611      	mov	r1, r2
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	4798      	blx	r3
 8006596:	4603      	mov	r3, r0
 8006598:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
 80065a2:	e000      	b.n	80065a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b086      	sub	sp, #24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	460b      	mov	r3, r1
 80065b8:	607a      	str	r2, [r7, #4]
 80065ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80065bc:	7afb      	ldrb	r3, [r7, #11]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d16f      	bne.n	80066a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3314      	adds	r3, #20
 80065c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d15a      	bne.n	8006688 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d914      	bls.n	8006608 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	1ad2      	subs	r2, r2, r3
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	461a      	mov	r2, r3
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f001 f8d6 	bl	80077a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065fa:	2300      	movs	r3, #0
 80065fc:	2200      	movs	r2, #0
 80065fe:	2100      	movs	r1, #0
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f003 fe73 	bl	800a2ec <USBD_LL_PrepareReceive>
 8006606:	e03f      	b.n	8006688 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	429a      	cmp	r2, r3
 8006612:	d11c      	bne.n	800664e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800661c:	429a      	cmp	r2, r3
 800661e:	d316      	bcc.n	800664e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800662a:	429a      	cmp	r2, r3
 800662c:	d20f      	bcs.n	800664e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800662e:	2200      	movs	r2, #0
 8006630:	2100      	movs	r1, #0
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f001 f8b7 	bl	80077a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006640:	2300      	movs	r3, #0
 8006642:	2200      	movs	r2, #0
 8006644:	2100      	movs	r1, #0
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f003 fe50 	bl	800a2ec <USBD_LL_PrepareReceive>
 800664c:	e01c      	b.n	8006688 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b03      	cmp	r3, #3
 8006658:	d10f      	bne.n	800667a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d009      	beq.n	800667a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800667a:	2180      	movs	r1, #128	; 0x80
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f003 fd8b 	bl	800a198 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f001 f8e1 	bl	800784a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d03a      	beq.n	8006708 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f7ff fe42 	bl	800631c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066a0:	e032      	b.n	8006708 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80066a2:	7afb      	ldrb	r3, [r7, #11]
 80066a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	4619      	mov	r1, r3
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f97f 	bl	80069b0 <USBD_CoreFindEP>
 80066b2:	4603      	mov	r3, r0
 80066b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	2bff      	cmp	r3, #255	; 0xff
 80066ba:	d025      	beq.n	8006708 <USBD_LL_DataInStage+0x15a>
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d122      	bne.n	8006708 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d11c      	bne.n	8006708 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80066ce:	7dfa      	ldrb	r2, [r7, #23]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	32ae      	adds	r2, #174	; 0xae
 80066d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d014      	beq.n	8006708 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80066de:	7dfa      	ldrb	r2, [r7, #23]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80066e6:	7dfa      	ldrb	r2, [r7, #23]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	32ae      	adds	r2, #174	; 0xae
 80066ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	7afa      	ldrb	r2, [r7, #11]
 80066f4:	4611      	mov	r1, r2
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	4798      	blx	r3
 80066fa:	4603      	mov	r3, r0
 80066fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80066fe:	7dbb      	ldrb	r3, [r7, #22]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006704:	7dbb      	ldrb	r3, [r7, #22]
 8006706:	e000      	b.n	800670a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d014      	beq.n	8006778 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00e      	beq.n	8006778 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6852      	ldr	r2, [r2, #4]
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	4611      	mov	r1, r2
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006774:	2303      	movs	r3, #3
 8006776:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006778:	2340      	movs	r3, #64	; 0x40
 800677a:	2200      	movs	r2, #0
 800677c:	2100      	movs	r1, #0
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f003 fcc5 	bl	800a10e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2240      	movs	r2, #64	; 0x40
 8006790:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006794:	2340      	movs	r3, #64	; 0x40
 8006796:	2200      	movs	r2, #0
 8006798:	2180      	movs	r1, #128	; 0x80
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f003 fcb7 	bl	800a10e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2240      	movs	r2, #64	; 0x40
 80067aa:	621a      	str	r2, [r3, #32]

  return ret;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	460b      	mov	r3, r1
 80067c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2204      	movs	r2, #4
 80067f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b04      	cmp	r3, #4
 8006814:	d106      	bne.n	8006824 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800681c:	b2da      	uxtb	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b082      	sub	sp, #8
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b03      	cmp	r3, #3
 8006844:	d110      	bne.n	8006868 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d005      	beq.n	8006868 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b082      	sub	sp, #8
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	460b      	mov	r3, r1
 800687c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	32ae      	adds	r2, #174	; 0xae
 8006888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006890:	2303      	movs	r3, #3
 8006892:	e01c      	b.n	80068ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b03      	cmp	r3, #3
 800689e:	d115      	bne.n	80068cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	32ae      	adds	r2, #174	; 0xae
 80068aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00b      	beq.n	80068cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	32ae      	adds	r2, #174	; 0xae
 80068be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	78fa      	ldrb	r2, [r7, #3]
 80068c6:	4611      	mov	r1, r2
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	32ae      	adds	r2, #174	; 0xae
 80068ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e01c      	b.n	8006932 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b03      	cmp	r3, #3
 8006902:	d115      	bne.n	8006930 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	32ae      	adds	r2, #174	; 0xae
 800690e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00b      	beq.n	8006930 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	32ae      	adds	r2, #174	; 0xae
 8006922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	78fa      	ldrb	r2, [r7, #3]
 800692a:	4611      	mov	r1, r2
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00e      	beq.n	800698c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6852      	ldr	r2, [r2, #4]
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	4611      	mov	r1, r2
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	4798      	blx	r3
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006988:	2303      	movs	r3, #3
 800698a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	460b      	mov	r3, r1
 80069a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069be:	4618      	mov	r0, r3
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b086      	sub	sp, #24
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	460b      	mov	r3, r1
 80069d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	885b      	ldrh	r3, [r3, #2]
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d920      	bls.n	8006a34 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80069fa:	e013      	b.n	8006a24 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80069fc:	f107 030a 	add.w	r3, r7, #10
 8006a00:	4619      	mov	r1, r3
 8006a02:	6978      	ldr	r0, [r7, #20]
 8006a04:	f000 f81b 	bl	8006a3e <USBD_GetNextDesc>
 8006a08:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	785b      	ldrb	r3, [r3, #1]
 8006a0e:	2b05      	cmp	r3, #5
 8006a10:	d108      	bne.n	8006a24 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	789b      	ldrb	r3, [r3, #2]
 8006a1a:	78fa      	ldrb	r2, [r7, #3]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d008      	beq.n	8006a32 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	885b      	ldrh	r3, [r3, #2]
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	897b      	ldrh	r3, [r7, #10]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d8e5      	bhi.n	80069fc <USBD_GetEpDesc+0x32>
 8006a30:	e000      	b.n	8006a34 <USBD_GetEpDesc+0x6a>
          break;
 8006a32:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a34:	693b      	ldr	r3, [r7, #16]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b085      	sub	sp, #20
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	881a      	ldrh	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	4413      	add	r3, r2
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4413      	add	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a96:	8a3b      	ldrh	r3, [r7, #16]
 8006a98:	021b      	lsls	r3, r3, #8
 8006a9a:	b21a      	sxth	r2, r3
 8006a9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	b21b      	sxth	r3, r3
 8006aa4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006aa6:	89fb      	ldrh	r3, [r7, #14]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	371c      	adds	r7, #28
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d005      	beq.n	8006ada <USBD_StdDevReq+0x26>
 8006ace:	2b40      	cmp	r3, #64	; 0x40
 8006ad0:	d857      	bhi.n	8006b82 <USBD_StdDevReq+0xce>
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00f      	beq.n	8006af6 <USBD_StdDevReq+0x42>
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d153      	bne.n	8006b82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	32ae      	adds	r2, #174	; 0xae
 8006ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	4798      	blx	r3
 8006af0:	4603      	mov	r3, r0
 8006af2:	73fb      	strb	r3, [r7, #15]
      break;
 8006af4:	e04a      	b.n	8006b8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	2b09      	cmp	r3, #9
 8006afc:	d83b      	bhi.n	8006b76 <USBD_StdDevReq+0xc2>
 8006afe:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <USBD_StdDevReq+0x50>)
 8006b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b04:	08006b59 	.word	0x08006b59
 8006b08:	08006b6d 	.word	0x08006b6d
 8006b0c:	08006b77 	.word	0x08006b77
 8006b10:	08006b63 	.word	0x08006b63
 8006b14:	08006b77 	.word	0x08006b77
 8006b18:	08006b37 	.word	0x08006b37
 8006b1c:	08006b2d 	.word	0x08006b2d
 8006b20:	08006b77 	.word	0x08006b77
 8006b24:	08006b4f 	.word	0x08006b4f
 8006b28:	08006b41 	.word	0x08006b41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa3c 	bl	8006fac <USBD_GetDescriptor>
          break;
 8006b34:	e024      	b.n	8006b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fbcb 	bl	80072d4 <USBD_SetAddress>
          break;
 8006b3e:	e01f      	b.n	8006b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fc0a 	bl	800735c <USBD_SetConfig>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73fb      	strb	r3, [r7, #15]
          break;
 8006b4c:	e018      	b.n	8006b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fcad 	bl	80074b0 <USBD_GetConfig>
          break;
 8006b56:	e013      	b.n	8006b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fcde 	bl	800751c <USBD_GetStatus>
          break;
 8006b60:	e00e      	b.n	8006b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fd0d 	bl	8007584 <USBD_SetFeature>
          break;
 8006b6a:	e009      	b.n	8006b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fd31 	bl	80075d6 <USBD_ClrFeature>
          break;
 8006b74:	e004      	b.n	8006b80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fd88 	bl	800768e <USBD_CtlError>
          break;
 8006b7e:	bf00      	nop
      }
      break;
 8006b80:	e004      	b.n	8006b8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fd82 	bl	800768e <USBD_CtlError>
      break;
 8006b8a:	bf00      	nop
  }

  return ret;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop

08006b98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bae:	2b40      	cmp	r3, #64	; 0x40
 8006bb0:	d005      	beq.n	8006bbe <USBD_StdItfReq+0x26>
 8006bb2:	2b40      	cmp	r3, #64	; 0x40
 8006bb4:	d852      	bhi.n	8006c5c <USBD_StdItfReq+0xc4>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <USBD_StdItfReq+0x26>
 8006bba:	2b20      	cmp	r3, #32
 8006bbc:	d14e      	bne.n	8006c5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d840      	bhi.n	8006c4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	889b      	ldrh	r3, [r3, #4]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d836      	bhi.n	8006c44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	889b      	ldrh	r3, [r3, #4]
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7ff fed9 	bl	8006996 <USBD_CoreFindIF>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	2bff      	cmp	r3, #255	; 0xff
 8006bec:	d01d      	beq.n	8006c2a <USBD_StdItfReq+0x92>
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d11a      	bne.n	8006c2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006bf4:	7bba      	ldrb	r2, [r7, #14]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	32ae      	adds	r2, #174	; 0xae
 8006bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00f      	beq.n	8006c24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c04:	7bba      	ldrb	r2, [r7, #14]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c0c:	7bba      	ldrb	r2, [r7, #14]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	32ae      	adds	r2, #174	; 0xae
 8006c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
 8006c1e:	4603      	mov	r3, r0
 8006c20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c22:	e004      	b.n	8006c2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c24:	2303      	movs	r3, #3
 8006c26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c28:	e001      	b.n	8006c2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	88db      	ldrh	r3, [r3, #6]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d110      	bne.n	8006c58 <USBD_StdItfReq+0xc0>
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10d      	bne.n	8006c58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fdf1 	bl	8007824 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c42:	e009      	b.n	8006c58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fd21 	bl	800768e <USBD_CtlError>
          break;
 8006c4c:	e004      	b.n	8006c58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fd1c 	bl	800768e <USBD_CtlError>
          break;
 8006c56:	e000      	b.n	8006c5a <USBD_StdItfReq+0xc2>
          break;
 8006c58:	bf00      	nop
      }
      break;
 8006c5a:	e004      	b.n	8006c66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fd15 	bl	800768e <USBD_CtlError>
      break;
 8006c64:	bf00      	nop
  }

  return ret;
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	889b      	ldrh	r3, [r3, #4]
 8006c82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c8c:	2b40      	cmp	r3, #64	; 0x40
 8006c8e:	d007      	beq.n	8006ca0 <USBD_StdEPReq+0x30>
 8006c90:	2b40      	cmp	r3, #64	; 0x40
 8006c92:	f200 817f 	bhi.w	8006f94 <USBD_StdEPReq+0x324>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d02a      	beq.n	8006cf0 <USBD_StdEPReq+0x80>
 8006c9a:	2b20      	cmp	r3, #32
 8006c9c:	f040 817a 	bne.w	8006f94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff fe83 	bl	80069b0 <USBD_CoreFindEP>
 8006caa:	4603      	mov	r3, r0
 8006cac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cae:	7b7b      	ldrb	r3, [r7, #13]
 8006cb0:	2bff      	cmp	r3, #255	; 0xff
 8006cb2:	f000 8174 	beq.w	8006f9e <USBD_StdEPReq+0x32e>
 8006cb6:	7b7b      	ldrb	r3, [r7, #13]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f040 8170 	bne.w	8006f9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006cbe:	7b7a      	ldrb	r2, [r7, #13]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006cc6:	7b7a      	ldrb	r2, [r7, #13]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	32ae      	adds	r2, #174	; 0xae
 8006ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 8163 	beq.w	8006f9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006cd8:	7b7a      	ldrb	r2, [r7, #13]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	32ae      	adds	r2, #174	; 0xae
 8006cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	4798      	blx	r3
 8006cea:	4603      	mov	r3, r0
 8006cec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cee:	e156      	b.n	8006f9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	785b      	ldrb	r3, [r3, #1]
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d008      	beq.n	8006d0a <USBD_StdEPReq+0x9a>
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	f300 8145 	bgt.w	8006f88 <USBD_StdEPReq+0x318>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 809b 	beq.w	8006e3a <USBD_StdEPReq+0x1ca>
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d03c      	beq.n	8006d82 <USBD_StdEPReq+0x112>
 8006d08:	e13e      	b.n	8006f88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d002      	beq.n	8006d1c <USBD_StdEPReq+0xac>
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d016      	beq.n	8006d48 <USBD_StdEPReq+0xd8>
 8006d1a:	e02c      	b.n	8006d76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00d      	beq.n	8006d3e <USBD_StdEPReq+0xce>
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	2b80      	cmp	r3, #128	; 0x80
 8006d26:	d00a      	beq.n	8006d3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f003 fa33 	bl	800a198 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d32:	2180      	movs	r1, #128	; 0x80
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f003 fa2f 	bl	800a198 <USBD_LL_StallEP>
 8006d3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d3c:	e020      	b.n	8006d80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fca4 	bl	800768e <USBD_CtlError>
              break;
 8006d46:	e01b      	b.n	8006d80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	885b      	ldrh	r3, [r3, #2]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10e      	bne.n	8006d6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00b      	beq.n	8006d6e <USBD_StdEPReq+0xfe>
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	2b80      	cmp	r3, #128	; 0x80
 8006d5a:	d008      	beq.n	8006d6e <USBD_StdEPReq+0xfe>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	88db      	ldrh	r3, [r3, #6]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d104      	bne.n	8006d6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f003 fa15 	bl	800a198 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fd58 	bl	8007824 <USBD_CtlSendStatus>

              break;
 8006d74:	e004      	b.n	8006d80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fc88 	bl	800768e <USBD_CtlError>
              break;
 8006d7e:	bf00      	nop
          }
          break;
 8006d80:	e107      	b.n	8006f92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d002      	beq.n	8006d94 <USBD_StdEPReq+0x124>
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d016      	beq.n	8006dc0 <USBD_StdEPReq+0x150>
 8006d92:	e04b      	b.n	8006e2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00d      	beq.n	8006db6 <USBD_StdEPReq+0x146>
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	2b80      	cmp	r3, #128	; 0x80
 8006d9e:	d00a      	beq.n	8006db6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f003 f9f7 	bl	800a198 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006daa:	2180      	movs	r1, #128	; 0x80
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f003 f9f3 	bl	800a198 <USBD_LL_StallEP>
 8006db2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006db4:	e040      	b.n	8006e38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fc68 	bl	800768e <USBD_CtlError>
              break;
 8006dbe:	e03b      	b.n	8006e38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	885b      	ldrh	r3, [r3, #2]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d136      	bne.n	8006e36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f003 f9fd 	bl	800a1d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fd21 	bl	8007824 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7ff fde2 	bl	80069b0 <USBD_CoreFindEP>
 8006dec:	4603      	mov	r3, r0
 8006dee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006df0:	7b7b      	ldrb	r3, [r7, #13]
 8006df2:	2bff      	cmp	r3, #255	; 0xff
 8006df4:	d01f      	beq.n	8006e36 <USBD_StdEPReq+0x1c6>
 8006df6:	7b7b      	ldrb	r3, [r7, #13]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d11c      	bne.n	8006e36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006dfc:	7b7a      	ldrb	r2, [r7, #13]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e04:	7b7a      	ldrb	r2, [r7, #13]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	32ae      	adds	r2, #174	; 0xae
 8006e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d010      	beq.n	8006e36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e14:	7b7a      	ldrb	r2, [r7, #13]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	32ae      	adds	r2, #174	; 0xae
 8006e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e2a:	e004      	b.n	8006e36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fc2d 	bl	800768e <USBD_CtlError>
              break;
 8006e34:	e000      	b.n	8006e38 <USBD_StdEPReq+0x1c8>
              break;
 8006e36:	bf00      	nop
          }
          break;
 8006e38:	e0ab      	b.n	8006f92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d002      	beq.n	8006e4c <USBD_StdEPReq+0x1dc>
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d032      	beq.n	8006eb0 <USBD_StdEPReq+0x240>
 8006e4a:	e097      	b.n	8006f7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d007      	beq.n	8006e62 <USBD_StdEPReq+0x1f2>
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	2b80      	cmp	r3, #128	; 0x80
 8006e56:	d004      	beq.n	8006e62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fc17 	bl	800768e <USBD_CtlError>
                break;
 8006e60:	e091      	b.n	8006f86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	da0b      	bge.n	8006e82 <USBD_StdEPReq+0x212>
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e70:	4613      	mov	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	3310      	adds	r3, #16
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	3304      	adds	r3, #4
 8006e80:	e00b      	b.n	8006e9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	4413      	add	r3, r2
 8006e98:	3304      	adds	r3, #4
 8006e9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fc61 	bl	8007770 <USBD_CtlSendData>
              break;
 8006eae:	e06a      	b.n	8006f86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	da11      	bge.n	8006edc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	f003 020f 	and.w	r2, r3, #15
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	3324      	adds	r3, #36	; 0x24
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d117      	bne.n	8006f02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fbda 	bl	800768e <USBD_CtlError>
                  break;
 8006eda:	e054      	b.n	8006f86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	f003 020f 	and.w	r2, r3, #15
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	440b      	add	r3, r1
 8006eee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fbc7 	bl	800768e <USBD_CtlError>
                  break;
 8006f00:	e041      	b.n	8006f86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	da0b      	bge.n	8006f22 <USBD_StdEPReq+0x2b2>
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f10:	4613      	mov	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	3310      	adds	r3, #16
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	3304      	adds	r3, #4
 8006f20:	e00b      	b.n	8006f3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	4413      	add	r3, r2
 8006f38:	3304      	adds	r3, #4
 8006f3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <USBD_StdEPReq+0x2d8>
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
 8006f44:	2b80      	cmp	r3, #128	; 0x80
 8006f46:	d103      	bne.n	8006f50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e00e      	b.n	8006f6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f003 f95d 	bl	800a214 <USBD_LL_IsStallEP>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2201      	movs	r2, #1
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	e002      	b.n	8006f6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2202      	movs	r2, #2
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fbfb 	bl	8007770 <USBD_CtlSendData>
              break;
 8006f7a:	e004      	b.n	8006f86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fb85 	bl	800768e <USBD_CtlError>
              break;
 8006f84:	bf00      	nop
          }
          break;
 8006f86:	e004      	b.n	8006f92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fb7f 	bl	800768e <USBD_CtlError>
          break;
 8006f90:	bf00      	nop
      }
      break;
 8006f92:	e005      	b.n	8006fa0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fb79 	bl	800768e <USBD_CtlError>
      break;
 8006f9c:	e000      	b.n	8006fa0 <USBD_StdEPReq+0x330>
      break;
 8006f9e:	bf00      	nop
  }

  return ret;
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	885b      	ldrh	r3, [r3, #2]
 8006fc6:	0a1b      	lsrs	r3, r3, #8
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	2b0e      	cmp	r3, #14
 8006fce:	f200 8152 	bhi.w	8007276 <USBD_GetDescriptor+0x2ca>
 8006fd2:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <USBD_GetDescriptor+0x2c>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08007049 	.word	0x08007049
 8006fdc:	08007061 	.word	0x08007061
 8006fe0:	080070a1 	.word	0x080070a1
 8006fe4:	08007277 	.word	0x08007277
 8006fe8:	08007277 	.word	0x08007277
 8006fec:	08007217 	.word	0x08007217
 8006ff0:	08007243 	.word	0x08007243
 8006ff4:	08007277 	.word	0x08007277
 8006ff8:	08007277 	.word	0x08007277
 8006ffc:	08007277 	.word	0x08007277
 8007000:	08007277 	.word	0x08007277
 8007004:	08007277 	.word	0x08007277
 8007008:	08007277 	.word	0x08007277
 800700c:	08007277 	.word	0x08007277
 8007010:	08007015 	.word	0x08007015
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00b      	beq.n	8007038 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007026:	69db      	ldr	r3, [r3, #28]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	7c12      	ldrb	r2, [r2, #16]
 800702c:	f107 0108 	add.w	r1, r7, #8
 8007030:	4610      	mov	r0, r2
 8007032:	4798      	blx	r3
 8007034:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007036:	e126      	b.n	8007286 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fb27 	bl	800768e <USBD_CtlError>
        err++;
 8007040:	7afb      	ldrb	r3, [r7, #11]
 8007042:	3301      	adds	r3, #1
 8007044:	72fb      	strb	r3, [r7, #11]
      break;
 8007046:	e11e      	b.n	8007286 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	7c12      	ldrb	r2, [r2, #16]
 8007054:	f107 0108 	add.w	r1, r7, #8
 8007058:	4610      	mov	r0, r2
 800705a:	4798      	blx	r3
 800705c:	60f8      	str	r0, [r7, #12]
      break;
 800705e:	e112      	b.n	8007286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	7c1b      	ldrb	r3, [r3, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10d      	bne.n	8007084 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007070:	f107 0208 	add.w	r2, r7, #8
 8007074:	4610      	mov	r0, r2
 8007076:	4798      	blx	r3
 8007078:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	3301      	adds	r3, #1
 800707e:	2202      	movs	r2, #2
 8007080:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007082:	e100      	b.n	8007286 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708c:	f107 0208 	add.w	r2, r7, #8
 8007090:	4610      	mov	r0, r2
 8007092:	4798      	blx	r3
 8007094:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3301      	adds	r3, #1
 800709a:	2202      	movs	r2, #2
 800709c:	701a      	strb	r2, [r3, #0]
      break;
 800709e:	e0f2      	b.n	8007286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	885b      	ldrh	r3, [r3, #2]
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b05      	cmp	r3, #5
 80070a8:	f200 80ac 	bhi.w	8007204 <USBD_GetDescriptor+0x258>
 80070ac:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <USBD_GetDescriptor+0x108>)
 80070ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b2:	bf00      	nop
 80070b4:	080070cd 	.word	0x080070cd
 80070b8:	08007101 	.word	0x08007101
 80070bc:	08007135 	.word	0x08007135
 80070c0:	08007169 	.word	0x08007169
 80070c4:	0800719d 	.word	0x0800719d
 80070c8:	080071d1 	.word	0x080071d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00b      	beq.n	80070f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	7c12      	ldrb	r2, [r2, #16]
 80070e4:	f107 0108 	add.w	r1, r7, #8
 80070e8:	4610      	mov	r0, r2
 80070ea:	4798      	blx	r3
 80070ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ee:	e091      	b.n	8007214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 facb 	bl	800768e <USBD_CtlError>
            err++;
 80070f8:	7afb      	ldrb	r3, [r7, #11]
 80070fa:	3301      	adds	r3, #1
 80070fc:	72fb      	strb	r3, [r7, #11]
          break;
 80070fe:	e089      	b.n	8007214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00b      	beq.n	8007124 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	7c12      	ldrb	r2, [r2, #16]
 8007118:	f107 0108 	add.w	r1, r7, #8
 800711c:	4610      	mov	r0, r2
 800711e:	4798      	blx	r3
 8007120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007122:	e077      	b.n	8007214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fab1 	bl	800768e <USBD_CtlError>
            err++;
 800712c:	7afb      	ldrb	r3, [r7, #11]
 800712e:	3301      	adds	r3, #1
 8007130:	72fb      	strb	r3, [r7, #11]
          break;
 8007132:	e06f      	b.n	8007214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00b      	beq.n	8007158 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	7c12      	ldrb	r2, [r2, #16]
 800714c:	f107 0108 	add.w	r1, r7, #8
 8007150:	4610      	mov	r0, r2
 8007152:	4798      	blx	r3
 8007154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007156:	e05d      	b.n	8007214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fa97 	bl	800768e <USBD_CtlError>
            err++;
 8007160:	7afb      	ldrb	r3, [r7, #11]
 8007162:	3301      	adds	r3, #1
 8007164:	72fb      	strb	r3, [r7, #11]
          break;
 8007166:	e055      	b.n	8007214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00b      	beq.n	800718c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	7c12      	ldrb	r2, [r2, #16]
 8007180:	f107 0108 	add.w	r1, r7, #8
 8007184:	4610      	mov	r0, r2
 8007186:	4798      	blx	r3
 8007188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800718a:	e043      	b.n	8007214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fa7d 	bl	800768e <USBD_CtlError>
            err++;
 8007194:	7afb      	ldrb	r3, [r7, #11]
 8007196:	3301      	adds	r3, #1
 8007198:	72fb      	strb	r3, [r7, #11]
          break;
 800719a:	e03b      	b.n	8007214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00b      	beq.n	80071c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	7c12      	ldrb	r2, [r2, #16]
 80071b4:	f107 0108 	add.w	r1, r7, #8
 80071b8:	4610      	mov	r0, r2
 80071ba:	4798      	blx	r3
 80071bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071be:	e029      	b.n	8007214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fa63 	bl	800768e <USBD_CtlError>
            err++;
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	3301      	adds	r3, #1
 80071cc:	72fb      	strb	r3, [r7, #11]
          break;
 80071ce:	e021      	b.n	8007214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	7c12      	ldrb	r2, [r2, #16]
 80071e8:	f107 0108 	add.w	r1, r7, #8
 80071ec:	4610      	mov	r0, r2
 80071ee:	4798      	blx	r3
 80071f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071f2:	e00f      	b.n	8007214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fa49 	bl	800768e <USBD_CtlError>
            err++;
 80071fc:	7afb      	ldrb	r3, [r7, #11]
 80071fe:	3301      	adds	r3, #1
 8007200:	72fb      	strb	r3, [r7, #11]
          break;
 8007202:	e007      	b.n	8007214 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa41 	bl	800768e <USBD_CtlError>
          err++;
 800720c:	7afb      	ldrb	r3, [r7, #11]
 800720e:	3301      	adds	r3, #1
 8007210:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007212:	bf00      	nop
      }
      break;
 8007214:	e037      	b.n	8007286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7c1b      	ldrb	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d109      	bne.n	8007232 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007226:	f107 0208 	add.w	r2, r7, #8
 800722a:	4610      	mov	r0, r2
 800722c:	4798      	blx	r3
 800722e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007230:	e029      	b.n	8007286 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fa2a 	bl	800768e <USBD_CtlError>
        err++;
 800723a:	7afb      	ldrb	r3, [r7, #11]
 800723c:	3301      	adds	r3, #1
 800723e:	72fb      	strb	r3, [r7, #11]
      break;
 8007240:	e021      	b.n	8007286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	7c1b      	ldrb	r3, [r3, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10d      	bne.n	8007266 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007252:	f107 0208 	add.w	r2, r7, #8
 8007256:	4610      	mov	r0, r2
 8007258:	4798      	blx	r3
 800725a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3301      	adds	r3, #1
 8007260:	2207      	movs	r2, #7
 8007262:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007264:	e00f      	b.n	8007286 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fa10 	bl	800768e <USBD_CtlError>
        err++;
 800726e:	7afb      	ldrb	r3, [r7, #11]
 8007270:	3301      	adds	r3, #1
 8007272:	72fb      	strb	r3, [r7, #11]
      break;
 8007274:	e007      	b.n	8007286 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fa08 	bl	800768e <USBD_CtlError>
      err++;
 800727e:	7afb      	ldrb	r3, [r7, #11]
 8007280:	3301      	adds	r3, #1
 8007282:	72fb      	strb	r3, [r7, #11]
      break;
 8007284:	bf00      	nop
  }

  if (err != 0U)
 8007286:	7afb      	ldrb	r3, [r7, #11]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d11e      	bne.n	80072ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	88db      	ldrh	r3, [r3, #6]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d016      	beq.n	80072c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007294:	893b      	ldrh	r3, [r7, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00e      	beq.n	80072b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	88da      	ldrh	r2, [r3, #6]
 800729e:	893b      	ldrh	r3, [r7, #8]
 80072a0:	4293      	cmp	r3, r2
 80072a2:	bf28      	it	cs
 80072a4:	4613      	movcs	r3, r2
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072aa:	893b      	ldrh	r3, [r7, #8]
 80072ac:	461a      	mov	r2, r3
 80072ae:	68f9      	ldr	r1, [r7, #12]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa5d 	bl	8007770 <USBD_CtlSendData>
 80072b6:	e009      	b.n	80072cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f9e7 	bl	800768e <USBD_CtlError>
 80072c0:	e004      	b.n	80072cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 faae 	bl	8007824 <USBD_CtlSendStatus>
 80072c8:	e000      	b.n	80072cc <USBD_GetDescriptor+0x320>
    return;
 80072ca:	bf00      	nop
  }
}
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop

080072d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	889b      	ldrh	r3, [r3, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d131      	bne.n	800734a <USBD_SetAddress+0x76>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	88db      	ldrh	r3, [r3, #6]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d12d      	bne.n	800734a <USBD_SetAddress+0x76>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	885b      	ldrh	r3, [r3, #2]
 80072f2:	2b7f      	cmp	r3, #127	; 0x7f
 80072f4:	d829      	bhi.n	800734a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	885b      	ldrh	r3, [r3, #2]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007300:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b03      	cmp	r3, #3
 800730c:	d104      	bne.n	8007318 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f9bc 	bl	800768e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007316:	e01d      	b.n	8007354 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	7bfa      	ldrb	r2, [r7, #15]
 800731c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007320:	7bfb      	ldrb	r3, [r7, #15]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f002 ffa1 	bl	800a26c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fa7a 	bl	8007824 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007330:	7bfb      	ldrb	r3, [r7, #15]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d004      	beq.n	8007340 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2202      	movs	r2, #2
 800733a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733e:	e009      	b.n	8007354 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007348:	e004      	b.n	8007354 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f99e 	bl	800768e <USBD_CtlError>
  }
}
 8007352:	bf00      	nop
 8007354:	bf00      	nop
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	885b      	ldrh	r3, [r3, #2]
 800736e:	b2da      	uxtb	r2, r3
 8007370:	4b4e      	ldr	r3, [pc, #312]	; (80074ac <USBD_SetConfig+0x150>)
 8007372:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007374:	4b4d      	ldr	r3, [pc, #308]	; (80074ac <USBD_SetConfig+0x150>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d905      	bls.n	8007388 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f985 	bl	800768e <USBD_CtlError>
    return USBD_FAIL;
 8007384:	2303      	movs	r3, #3
 8007386:	e08c      	b.n	80074a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b02      	cmp	r3, #2
 8007392:	d002      	beq.n	800739a <USBD_SetConfig+0x3e>
 8007394:	2b03      	cmp	r3, #3
 8007396:	d029      	beq.n	80073ec <USBD_SetConfig+0x90>
 8007398:	e075      	b.n	8007486 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800739a:	4b44      	ldr	r3, [pc, #272]	; (80074ac <USBD_SetConfig+0x150>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d020      	beq.n	80073e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80073a2:	4b42      	ldr	r3, [pc, #264]	; (80074ac <USBD_SetConfig+0x150>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073ac:	4b3f      	ldr	r3, [pc, #252]	; (80074ac <USBD_SetConfig+0x150>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7fe ffbd 	bl	8006332 <USBD_SetClassConfig>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d008      	beq.n	80073d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f962 	bl	800768e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2202      	movs	r2, #2
 80073ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073d2:	e065      	b.n	80074a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fa25 	bl	8007824 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2203      	movs	r2, #3
 80073de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073e2:	e05d      	b.n	80074a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fa1d 	bl	8007824 <USBD_CtlSendStatus>
      break;
 80073ea:	e059      	b.n	80074a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073ec:	4b2f      	ldr	r3, [pc, #188]	; (80074ac <USBD_SetConfig+0x150>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d112      	bne.n	800741a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2202      	movs	r2, #2
 80073f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80073fc:	4b2b      	ldr	r3, [pc, #172]	; (80074ac <USBD_SetConfig+0x150>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007406:	4b29      	ldr	r3, [pc, #164]	; (80074ac <USBD_SetConfig+0x150>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7fe ffac 	bl	800636a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa06 	bl	8007824 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007418:	e042      	b.n	80074a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800741a:	4b24      	ldr	r3, [pc, #144]	; (80074ac <USBD_SetConfig+0x150>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	461a      	mov	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	429a      	cmp	r2, r3
 8007426:	d02a      	beq.n	800747e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7fe ff9a 	bl	800636a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007436:	4b1d      	ldr	r3, [pc, #116]	; (80074ac <USBD_SetConfig+0x150>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007440:	4b1a      	ldr	r3, [pc, #104]	; (80074ac <USBD_SetConfig+0x150>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7fe ff73 	bl	8006332 <USBD_SetClassConfig>
 800744c:	4603      	mov	r3, r0
 800744e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00f      	beq.n	8007476 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f918 	bl	800768e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7fe ff7f 	bl	800636a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007474:	e014      	b.n	80074a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f9d4 	bl	8007824 <USBD_CtlSendStatus>
      break;
 800747c:	e010      	b.n	80074a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f9d0 	bl	8007824 <USBD_CtlSendStatus>
      break;
 8007484:	e00c      	b.n	80074a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f900 	bl	800768e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800748e:	4b07      	ldr	r3, [pc, #28]	; (80074ac <USBD_SetConfig+0x150>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7fe ff68 	bl	800636a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800749a:	2303      	movs	r3, #3
 800749c:	73fb      	strb	r3, [r7, #15]
      break;
 800749e:	bf00      	nop
  }

  return ret;
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	2000042c 	.word	0x2000042c

080074b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	88db      	ldrh	r3, [r3, #6]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d004      	beq.n	80074cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f8e2 	bl	800768e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074ca:	e023      	b.n	8007514 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	dc02      	bgt.n	80074de <USBD_GetConfig+0x2e>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	dc03      	bgt.n	80074e4 <USBD_GetConfig+0x34>
 80074dc:	e015      	b.n	800750a <USBD_GetConfig+0x5a>
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d00b      	beq.n	80074fa <USBD_GetConfig+0x4a>
 80074e2:	e012      	b.n	800750a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3308      	adds	r3, #8
 80074ee:	2201      	movs	r2, #1
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f93c 	bl	8007770 <USBD_CtlSendData>
        break;
 80074f8:	e00c      	b.n	8007514 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	3304      	adds	r3, #4
 80074fe:	2201      	movs	r2, #1
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f934 	bl	8007770 <USBD_CtlSendData>
        break;
 8007508:	e004      	b.n	8007514 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f8be 	bl	800768e <USBD_CtlError>
        break;
 8007512:	bf00      	nop
}
 8007514:	bf00      	nop
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800752c:	b2db      	uxtb	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	2b02      	cmp	r3, #2
 8007532:	d81e      	bhi.n	8007572 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	88db      	ldrh	r3, [r3, #6]
 8007538:	2b02      	cmp	r3, #2
 800753a:	d004      	beq.n	8007546 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f8a5 	bl	800768e <USBD_CtlError>
        break;
 8007544:	e01a      	b.n	800757c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007552:	2b00      	cmp	r3, #0
 8007554:	d005      	beq.n	8007562 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f043 0202 	orr.w	r2, r3, #2
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	330c      	adds	r3, #12
 8007566:	2202      	movs	r2, #2
 8007568:	4619      	mov	r1, r3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f900 	bl	8007770 <USBD_CtlSendData>
      break;
 8007570:	e004      	b.n	800757c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f88a 	bl	800768e <USBD_CtlError>
      break;
 800757a:	bf00      	nop
  }
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	885b      	ldrh	r3, [r3, #2]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d107      	bne.n	80075a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f940 	bl	8007824 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80075a4:	e013      	b.n	80075ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	885b      	ldrh	r3, [r3, #2]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d10b      	bne.n	80075c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	889b      	ldrh	r3, [r3, #4]
 80075b2:	0a1b      	lsrs	r3, r3, #8
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f930 	bl	8007824 <USBD_CtlSendStatus>
}
 80075c4:	e003      	b.n	80075ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f860 	bl	800768e <USBD_CtlError>
}
 80075ce:	bf00      	nop
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	3b01      	subs	r3, #1
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d80b      	bhi.n	8007606 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	885b      	ldrh	r3, [r3, #2]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d10c      	bne.n	8007610 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f910 	bl	8007824 <USBD_CtlSendStatus>
      }
      break;
 8007604:	e004      	b.n	8007610 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f840 	bl	800768e <USBD_CtlError>
      break;
 800760e:	e000      	b.n	8007612 <USBD_ClrFeature+0x3c>
      break;
 8007610:	bf00      	nop
  }
}
 8007612:	bf00      	nop
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	781a      	ldrb	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3301      	adds	r3, #1
 8007634:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	781a      	ldrb	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3301      	adds	r3, #1
 8007642:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f7ff fa17 	bl	8006a78 <SWAPBYTE>
 800764a:	4603      	mov	r3, r0
 800764c:	461a      	mov	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3301      	adds	r3, #1
 8007656:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	3301      	adds	r3, #1
 800765c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f7ff fa0a 	bl	8006a78 <SWAPBYTE>
 8007664:	4603      	mov	r3, r0
 8007666:	461a      	mov	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	3301      	adds	r3, #1
 8007670:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3301      	adds	r3, #1
 8007676:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f7ff f9fd 	bl	8006a78 <SWAPBYTE>
 800767e:	4603      	mov	r3, r0
 8007680:	461a      	mov	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	80da      	strh	r2, [r3, #6]
}
 8007686:	bf00      	nop
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007698:	2180      	movs	r1, #128	; 0x80
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f002 fd7c 	bl	800a198 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076a0:	2100      	movs	r1, #0
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f002 fd78 	bl	800a198 <USBD_LL_StallEP>
}
 80076a8:	bf00      	nop
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d036      	beq.n	8007734 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80076ca:	6938      	ldr	r0, [r7, #16]
 80076cc:	f000 f836 	bl	800773c <USBD_GetLen>
 80076d0:	4603      	mov	r3, r0
 80076d2:	3301      	adds	r3, #1
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	b29a      	uxth	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	4413      	add	r3, r2
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	7812      	ldrb	r2, [r2, #0]
 80076e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	3301      	adds	r3, #1
 80076ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	4413      	add	r3, r2
 80076f6:	2203      	movs	r2, #3
 80076f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	3301      	adds	r3, #1
 80076fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007700:	e013      	b.n	800772a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	4413      	add	r3, r2
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	7812      	ldrb	r2, [r2, #0]
 800770c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	3301      	adds	r3, #1
 8007712:	613b      	str	r3, [r7, #16]
    idx++;
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	3301      	adds	r3, #1
 8007718:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800771a:	7dfb      	ldrb	r3, [r7, #23]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	4413      	add	r3, r2
 8007720:	2200      	movs	r2, #0
 8007722:	701a      	strb	r2, [r3, #0]
    idx++;
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	3301      	adds	r3, #1
 8007728:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1e7      	bne.n	8007702 <USBD_GetString+0x52>
 8007732:	e000      	b.n	8007736 <USBD_GetString+0x86>
    return;
 8007734:	bf00      	nop
  }
}
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800774c:	e005      	b.n	800775a <USBD_GetLen+0x1e>
  {
    len++;
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	3301      	adds	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	3301      	adds	r3, #1
 8007758:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1f5      	bne.n	800774e <USBD_GetLen+0x12>
  }

  return len;
 8007762:	7bfb      	ldrb	r3, [r7, #15]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2202      	movs	r2, #2
 8007780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	2100      	movs	r1, #0
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f002 fd87 	bl	800a2aa <USBD_LL_Transmit>

  return USBD_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b084      	sub	sp, #16
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	2100      	movs	r1, #0
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f002 fd76 	bl	800a2aa <USBD_LL_Transmit>

  return USBD_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2203      	movs	r2, #3
 80077d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	2100      	movs	r1, #0
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f002 fd7a 	bl	800a2ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b084      	sub	sp, #16
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	2100      	movs	r1, #0
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f002 fd69 	bl	800a2ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2204      	movs	r2, #4
 8007830:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007834:	2300      	movs	r3, #0
 8007836:	2200      	movs	r2, #0
 8007838:	2100      	movs	r1, #0
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f002 fd35 	bl	800a2aa <USBD_LL_Transmit>

  return USBD_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2205      	movs	r2, #5
 8007856:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800785a:	2300      	movs	r3, #0
 800785c:	2200      	movs	r2, #0
 800785e:	2100      	movs	r1, #0
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f002 fd43 	bl	800a2ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800787a:	2300      	movs	r3, #0
 800787c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800787e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007882:	2b84      	cmp	r3, #132	; 0x84
 8007884:	d005      	beq.n	8007892 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007886:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	4413      	add	r3, r2
 800788e:	3303      	adds	r3, #3
 8007890:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007892:	68fb      	ldr	r3, [r7, #12]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80078a4:	f000 fede 	bl	8008664 <vTaskStartScheduler>
  
  return osOK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	bd80      	pop	{r7, pc}

080078ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80078ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078b0:	b089      	sub	sp, #36	; 0x24
 80078b2:	af04      	add	r7, sp, #16
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d020      	beq.n	8007902 <osThreadCreate+0x54>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d01c      	beq.n	8007902 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685c      	ldr	r4, [r3, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	691e      	ldr	r6, [r3, #16]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff ffc8 	bl	8007870 <makeFreeRtosPriority>
 80078e0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078ea:	9202      	str	r2, [sp, #8]
 80078ec:	9301      	str	r3, [sp, #4]
 80078ee:	9100      	str	r1, [sp, #0]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	4632      	mov	r2, r6
 80078f4:	4629      	mov	r1, r5
 80078f6:	4620      	mov	r0, r4
 80078f8:	f000 fce2 	bl	80082c0 <xTaskCreateStatic>
 80078fc:	4603      	mov	r3, r0
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	e01c      	b.n	800793c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685c      	ldr	r4, [r3, #4]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800790e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007916:	4618      	mov	r0, r3
 8007918:	f7ff ffaa 	bl	8007870 <makeFreeRtosPriority>
 800791c:	4602      	mov	r2, r0
 800791e:	f107 030c 	add.w	r3, r7, #12
 8007922:	9301      	str	r3, [sp, #4]
 8007924:	9200      	str	r2, [sp, #0]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	4632      	mov	r2, r6
 800792a:	4629      	mov	r1, r5
 800792c:	4620      	mov	r0, r4
 800792e:	f000 fd2a 	bl	8008386 <xTaskCreate>
 8007932:	4603      	mov	r3, r0
 8007934:	2b01      	cmp	r3, #1
 8007936:	d001      	beq.n	800793c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007938:	2300      	movs	r3, #0
 800793a:	e000      	b.n	800793e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800793c:	68fb      	ldr	r3, [r7, #12]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007946 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <osDelay+0x16>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	e000      	b.n	800795e <osDelay+0x18>
 800795c:	2301      	movs	r3, #1
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fe4a 	bl	80085f8 <vTaskDelay>
  
  return osOK;
 8007964:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800796e:	b590      	push	{r4, r7, lr}
 8007970:	b085      	sub	sp, #20
 8007972:	af02      	add	r7, sp, #8
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d011      	beq.n	80079a4 <osMessageCreate+0x36>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00d      	beq.n	80079a4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6818      	ldr	r0, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6859      	ldr	r1, [r3, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	2400      	movs	r4, #0
 800799a:	9400      	str	r4, [sp, #0]
 800799c:	f000 f92e 	bl	8007bfc <xQueueGenericCreateStatic>
 80079a0:	4603      	mov	r3, r0
 80079a2:	e008      	b.n	80079b6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6818      	ldr	r0, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	4619      	mov	r1, r3
 80079b0:	f000 f9a6 	bl	8007d00 <xQueueGenericCreate>
 80079b4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd90      	pop	{r4, r7, pc}

080079be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f103 0208 	add.w	r2, r3, #8
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f04f 32ff 	mov.w	r2, #4294967295
 80079d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f103 0208 	add.w	r2, r3, #8
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f103 0208 	add.w	r2, r3, #8
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	1c5a      	adds	r2, r3, #1
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	601a      	str	r2, [r3, #0]
}
 8007a54:	bf00      	nop
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a76:	d103      	bne.n	8007a80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	e00c      	b.n	8007a9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3308      	adds	r3, #8
 8007a84:	60fb      	str	r3, [r7, #12]
 8007a86:	e002      	b.n	8007a8e <vListInsert+0x2e>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d2f6      	bcs.n	8007a88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	601a      	str	r2, [r3, #0]
}
 8007ac6:	bf00      	nop
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	6892      	ldr	r2, [r2, #8]
 8007ae8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	6852      	ldr	r2, [r2, #4]
 8007af2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d103      	bne.n	8007b06 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	1e5a      	subs	r2, r3, #1
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
	...

08007b28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10c      	bne.n	8007b56 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	b672      	cpsid	i
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	b662      	cpsie	i
 8007b50:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b52:	bf00      	nop
 8007b54:	e7fe      	b.n	8007b54 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007b56:	f001 fbb1 	bl	80092bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b62:	68f9      	ldr	r1, [r7, #12]
 8007b64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b66:	fb01 f303 	mul.w	r3, r1, r3
 8007b6a:	441a      	add	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b86:	3b01      	subs	r3, #1
 8007b88:	68f9      	ldr	r1, [r7, #12]
 8007b8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b8c:	fb01 f303 	mul.w	r3, r1, r3
 8007b90:	441a      	add	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	22ff      	movs	r2, #255	; 0xff
 8007b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	22ff      	movs	r2, #255	; 0xff
 8007ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d114      	bne.n	8007bd6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01a      	beq.n	8007bea <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3310      	adds	r3, #16
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 ffa1 	bl	8008b00 <xTaskRemoveFromEventList>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d012      	beq.n	8007bea <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <xQueueGenericReset+0xd0>)
 8007bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	e009      	b.n	8007bea <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3310      	adds	r3, #16
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7ff feef 	bl	80079be <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3324      	adds	r3, #36	; 0x24
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff feea 	bl	80079be <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007bea:	f001 fb9b 	bl	8009324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007bee:	2301      	movs	r3, #1
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	e000ed04 	.word	0xe000ed04

08007bfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08e      	sub	sp, #56	; 0x38
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10c      	bne.n	8007c2a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c14:	b672      	cpsid	i
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	b662      	cpsie	i
 8007c24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c26:	bf00      	nop
 8007c28:	e7fe      	b.n	8007c28 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10c      	bne.n	8007c4a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	b672      	cpsid	i
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	b662      	cpsie	i
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c46:	bf00      	nop
 8007c48:	e7fe      	b.n	8007c48 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <xQueueGenericCreateStatic+0x5a>
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <xQueueGenericCreateStatic+0x5e>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e000      	b.n	8007c5c <xQueueGenericCreateStatic+0x60>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10c      	bne.n	8007c7a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	b672      	cpsid	i
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	b662      	cpsie	i
 8007c74:	623b      	str	r3, [r7, #32]
}
 8007c76:	bf00      	nop
 8007c78:	e7fe      	b.n	8007c78 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <xQueueGenericCreateStatic+0x8a>
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <xQueueGenericCreateStatic+0x8e>
 8007c86:	2301      	movs	r3, #1
 8007c88:	e000      	b.n	8007c8c <xQueueGenericCreateStatic+0x90>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10c      	bne.n	8007caa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	b672      	cpsid	i
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	b662      	cpsie	i
 8007ca4:	61fb      	str	r3, [r7, #28]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007caa:	2348      	movs	r3, #72	; 0x48
 8007cac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2b48      	cmp	r3, #72	; 0x48
 8007cb2:	d00c      	beq.n	8007cce <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	b672      	cpsid	i
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	b662      	cpsie	i
 8007cc8:	61bb      	str	r3, [r7, #24]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007cce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00d      	beq.n	8007cf6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ce2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	4613      	mov	r3, r2
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 f847 	bl	8007d84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3730      	adds	r7, #48	; 0x30
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08a      	sub	sp, #40	; 0x28
 8007d04:	af02      	add	r7, sp, #8
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10c      	bne.n	8007d2e <xQueueGenericCreate+0x2e>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	b672      	cpsid	i
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	b662      	cpsie	i
 8007d28:	613b      	str	r3, [r7, #16]
}
 8007d2a:	bf00      	nop
 8007d2c:	e7fe      	b.n	8007d2c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d102      	bne.n	8007d3a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	61fb      	str	r3, [r7, #28]
 8007d38:	e004      	b.n	8007d44 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	fb02 f303 	mul.w	r3, r2, r3
 8007d42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	3348      	adds	r3, #72	; 0x48
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f001 fbe3 	bl	8009514 <pvPortMalloc>
 8007d4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d011      	beq.n	8007d7a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	3348      	adds	r3, #72	; 0x48
 8007d5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d68:	79fa      	ldrb	r2, [r7, #7]
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	68b9      	ldr	r1, [r7, #8]
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 f805 	bl	8007d84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
	}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3720      	adds	r7, #32
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d103      	bne.n	8007da0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	e002      	b.n	8007da6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007db2:	2101      	movs	r1, #1
 8007db4:	69b8      	ldr	r0, [r7, #24]
 8007db6:	f7ff feb7 	bl	8007b28 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007dba:	bf00      	nop
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b08e      	sub	sp, #56	; 0x38
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	607a      	str	r2, [r7, #4]
 8007dce:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10c      	bne.n	8007df4 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dde:	b672      	cpsid	i
 8007de0:	f383 8811 	msr	BASEPRI, r3
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	b662      	cpsie	i
 8007dee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007df0:	bf00      	nop
 8007df2:	e7fe      	b.n	8007df2 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d103      	bne.n	8007e02 <xQueueGenericSendFromISR+0x40>
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <xQueueGenericSendFromISR+0x44>
 8007e02:	2301      	movs	r3, #1
 8007e04:	e000      	b.n	8007e08 <xQueueGenericSendFromISR+0x46>
 8007e06:	2300      	movs	r3, #0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10c      	bne.n	8007e26 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	b672      	cpsid	i
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	b662      	cpsie	i
 8007e20:	623b      	str	r3, [r7, #32]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d103      	bne.n	8007e34 <xQueueGenericSendFromISR+0x72>
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d101      	bne.n	8007e38 <xQueueGenericSendFromISR+0x76>
 8007e34:	2301      	movs	r3, #1
 8007e36:	e000      	b.n	8007e3a <xQueueGenericSendFromISR+0x78>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10c      	bne.n	8007e58 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	b672      	cpsid	i
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	b662      	cpsie	i
 8007e52:	61fb      	str	r3, [r7, #28]
}
 8007e54:	bf00      	nop
 8007e56:	e7fe      	b.n	8007e56 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e58:	f001 fb18 	bl	800948c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e5c:	f3ef 8211 	mrs	r2, BASEPRI
 8007e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e64:	b672      	cpsid	i
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	b662      	cpsie	i
 8007e74:	61ba      	str	r2, [r7, #24]
 8007e76:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e78:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d302      	bcc.n	8007e8e <xQueueGenericSendFromISR+0xcc>
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d12c      	bne.n	8007ee8 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	68b9      	ldr	r1, [r7, #8]
 8007e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e9e:	f000 f917 	bl	80080d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ea2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eaa:	d112      	bne.n	8007ed2 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d016      	beq.n	8007ee2 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	3324      	adds	r3, #36	; 0x24
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 fe21 	bl	8008b00 <xTaskRemoveFromEventList>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00e      	beq.n	8007ee2 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00b      	beq.n	8007ee2 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	e007      	b.n	8007ee2 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ed2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	b25a      	sxtb	r2, r3
 8007edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007ee6:	e001      	b.n	8007eec <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	637b      	str	r3, [r7, #52]	; 0x34
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ef6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3738      	adds	r7, #56	; 0x38
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
	...

08007f04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08c      	sub	sp, #48	; 0x30
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f10:	2300      	movs	r3, #0
 8007f12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10c      	bne.n	8007f38 <xQueueReceive+0x34>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	b672      	cpsid	i
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	b662      	cpsie	i
 8007f32:	623b      	str	r3, [r7, #32]
}
 8007f34:	bf00      	nop
 8007f36:	e7fe      	b.n	8007f36 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d103      	bne.n	8007f46 <xQueueReceive+0x42>
 8007f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <xQueueReceive+0x46>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <xQueueReceive+0x48>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10c      	bne.n	8007f6a <xQueueReceive+0x66>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	b672      	cpsid	i
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	b662      	cpsie	i
 8007f64:	61fb      	str	r3, [r7, #28]
}
 8007f66:	bf00      	nop
 8007f68:	e7fe      	b.n	8007f68 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f6a:	f000 ff8d 	bl	8008e88 <xTaskGetSchedulerState>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d102      	bne.n	8007f7a <xQueueReceive+0x76>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <xQueueReceive+0x7a>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e000      	b.n	8007f80 <xQueueReceive+0x7c>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10c      	bne.n	8007f9e <xQueueReceive+0x9a>
	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	b672      	cpsid	i
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	b662      	cpsie	i
 8007f98:	61bb      	str	r3, [r7, #24]
}
 8007f9a:	bf00      	nop
 8007f9c:	e7fe      	b.n	8007f9c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f9e:	f001 f98d 	bl	80092bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d01f      	beq.n	8007fee <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fae:	68b9      	ldr	r1, [r7, #8]
 8007fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fb2:	f000 f8f7 	bl	80081a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	1e5a      	subs	r2, r3, #1
 8007fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00f      	beq.n	8007fe6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc8:	3310      	adds	r3, #16
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fd98 	bl	8008b00 <xTaskRemoveFromEventList>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d007      	beq.n	8007fe6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007fd6:	4b3d      	ldr	r3, [pc, #244]	; (80080cc <xQueueReceive+0x1c8>)
 8007fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007fe6:	f001 f99d 	bl	8009324 <vPortExitCritical>
				return pdPASS;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e069      	b.n	80080c2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d103      	bne.n	8007ffc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ff4:	f001 f996 	bl	8009324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	e062      	b.n	80080c2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d106      	bne.n	8008010 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008002:	f107 0310 	add.w	r3, r7, #16
 8008006:	4618      	mov	r0, r3
 8008008:	f000 fdde 	bl	8008bc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800800c:	2301      	movs	r3, #1
 800800e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008010:	f001 f988 	bl	8009324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008014:	f000 fb8a 	bl	800872c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008018:	f001 f950 	bl	80092bc <vPortEnterCritical>
 800801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008022:	b25b      	sxtb	r3, r3
 8008024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008028:	d103      	bne.n	8008032 <xQueueReceive+0x12e>
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008038:	b25b      	sxtb	r3, r3
 800803a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803e:	d103      	bne.n	8008048 <xQueueReceive+0x144>
 8008040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008048:	f001 f96c 	bl	8009324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800804c:	1d3a      	adds	r2, r7, #4
 800804e:	f107 0310 	add.w	r3, r7, #16
 8008052:	4611      	mov	r1, r2
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fdcd 	bl	8008bf4 <xTaskCheckForTimeOut>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d123      	bne.n	80080a8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008062:	f000 f917 	bl	8008294 <prvIsQueueEmpty>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d017      	beq.n	800809c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806e:	3324      	adds	r3, #36	; 0x24
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	4611      	mov	r1, r2
 8008074:	4618      	mov	r0, r3
 8008076:	f000 fd1d 	bl	8008ab4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800807a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800807c:	f000 f8b8 	bl	80081f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008080:	f000 fb62 	bl	8008748 <xTaskResumeAll>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d189      	bne.n	8007f9e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800808a:	4b10      	ldr	r3, [pc, #64]	; (80080cc <xQueueReceive+0x1c8>)
 800808c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	e780      	b.n	8007f9e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800809c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800809e:	f000 f8a7 	bl	80081f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080a2:	f000 fb51 	bl	8008748 <xTaskResumeAll>
 80080a6:	e77a      	b.n	8007f9e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80080a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080aa:	f000 f8a1 	bl	80081f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080ae:	f000 fb4b 	bl	8008748 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080b4:	f000 f8ee 	bl	8008294 <prvIsQueueEmpty>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f43f af6f 	beq.w	8007f9e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3730      	adds	r7, #48	; 0x30
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	e000ed04 	.word	0xe000ed04

080080d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80080dc:	2300      	movs	r3, #0
 80080de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10d      	bne.n	800810a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d14d      	bne.n	8008192 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fee2 	bl	8008ec4 <xTaskPriorityDisinherit>
 8008100:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	609a      	str	r2, [r3, #8]
 8008108:	e043      	b.n	8008192 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d119      	bne.n	8008144 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6858      	ldr	r0, [r3, #4]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008118:	461a      	mov	r2, r3
 800811a:	68b9      	ldr	r1, [r7, #8]
 800811c:	f002 fa9a 	bl	800a654 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008128:	441a      	add	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	429a      	cmp	r2, r3
 8008138:	d32b      	bcc.n	8008192 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	605a      	str	r2, [r3, #4]
 8008142:	e026      	b.n	8008192 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	68d8      	ldr	r0, [r3, #12]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814c:	461a      	mov	r2, r3
 800814e:	68b9      	ldr	r1, [r7, #8]
 8008150:	f002 fa80 	bl	800a654 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	68da      	ldr	r2, [r3, #12]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	425b      	negs	r3, r3
 800815e:	441a      	add	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	68da      	ldr	r2, [r3, #12]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	429a      	cmp	r2, r3
 800816e:	d207      	bcs.n	8008180 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008178:	425b      	negs	r3, r3
 800817a:	441a      	add	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b02      	cmp	r3, #2
 8008184:	d105      	bne.n	8008192 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	3b01      	subs	r3, #1
 8008190:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800819a:	697b      	ldr	r3, [r7, #20]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d018      	beq.n	80081e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	441a      	add	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68da      	ldr	r2, [r3, #12]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d303      	bcc.n	80081d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68d9      	ldr	r1, [r3, #12]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e0:	461a      	mov	r2, r3
 80081e2:	6838      	ldr	r0, [r7, #0]
 80081e4:	f002 fa36 	bl	800a654 <memcpy>
	}
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80081f8:	f001 f860 	bl	80092bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008202:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008204:	e011      	b.n	800822a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	2b00      	cmp	r3, #0
 800820c:	d012      	beq.n	8008234 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3324      	adds	r3, #36	; 0x24
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fc74 	bl	8008b00 <xTaskRemoveFromEventList>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800821e:	f000 fd4f 	bl	8008cc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	3b01      	subs	r3, #1
 8008226:	b2db      	uxtb	r3, r3
 8008228:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800822a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800822e:	2b00      	cmp	r3, #0
 8008230:	dce9      	bgt.n	8008206 <prvUnlockQueue+0x16>
 8008232:	e000      	b.n	8008236 <prvUnlockQueue+0x46>
					break;
 8008234:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	22ff      	movs	r2, #255	; 0xff
 800823a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800823e:	f001 f871 	bl	8009324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008242:	f001 f83b 	bl	80092bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800824c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800824e:	e011      	b.n	8008274 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d012      	beq.n	800827e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3310      	adds	r3, #16
 800825c:	4618      	mov	r0, r3
 800825e:	f000 fc4f 	bl	8008b00 <xTaskRemoveFromEventList>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d001      	beq.n	800826c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008268:	f000 fd2a 	bl	8008cc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	3b01      	subs	r3, #1
 8008270:	b2db      	uxtb	r3, r3
 8008272:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008278:	2b00      	cmp	r3, #0
 800827a:	dce9      	bgt.n	8008250 <prvUnlockQueue+0x60>
 800827c:	e000      	b.n	8008280 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800827e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	22ff      	movs	r2, #255	; 0xff
 8008284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008288:	f001 f84c 	bl	8009324 <vPortExitCritical>
}
 800828c:	bf00      	nop
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800829c:	f001 f80e 	bl	80092bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d102      	bne.n	80082ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80082a8:	2301      	movs	r3, #1
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	e001      	b.n	80082b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082b2:	f001 f837 	bl	8009324 <vPortExitCritical>

	return xReturn;
 80082b6:	68fb      	ldr	r3, [r7, #12]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b08e      	sub	sp, #56	; 0x38
 80082c4:	af04      	add	r7, sp, #16
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80082ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10c      	bne.n	80082ee <xTaskCreateStatic+0x2e>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	b672      	cpsid	i
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	b662      	cpsie	i
 80082e8:	623b      	str	r3, [r7, #32]
}
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80082ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10c      	bne.n	800830e <xTaskCreateStatic+0x4e>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f8:	b672      	cpsid	i
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	b662      	cpsie	i
 8008308:	61fb      	str	r3, [r7, #28]
}
 800830a:	bf00      	nop
 800830c:	e7fe      	b.n	800830c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800830e:	2354      	movs	r3, #84	; 0x54
 8008310:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b54      	cmp	r3, #84	; 0x54
 8008316:	d00c      	beq.n	8008332 <xTaskCreateStatic+0x72>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	b672      	cpsid	i
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	b662      	cpsie	i
 800832c:	61bb      	str	r3, [r7, #24]
}
 800832e:	bf00      	nop
 8008330:	e7fe      	b.n	8008330 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008332:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	2b00      	cmp	r3, #0
 8008338:	d01e      	beq.n	8008378 <xTaskCreateStatic+0xb8>
 800833a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833c:	2b00      	cmp	r3, #0
 800833e:	d01b      	beq.n	8008378 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008348:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834c:	2202      	movs	r2, #2
 800834e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008352:	2300      	movs	r3, #0
 8008354:	9303      	str	r3, [sp, #12]
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	9302      	str	r3, [sp, #8]
 800835a:	f107 0314 	add.w	r3, r7, #20
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	68b9      	ldr	r1, [r7, #8]
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 f850 	bl	8008410 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008372:	f000 f8d7 	bl	8008524 <prvAddNewTaskToReadyList>
 8008376:	e001      	b.n	800837c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008378:	2300      	movs	r3, #0
 800837a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800837c:	697b      	ldr	r3, [r7, #20]
	}
 800837e:	4618      	mov	r0, r3
 8008380:	3728      	adds	r7, #40	; 0x28
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008386:	b580      	push	{r7, lr}
 8008388:	b08c      	sub	sp, #48	; 0x30
 800838a:	af04      	add	r7, sp, #16
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	603b      	str	r3, [r7, #0]
 8008392:	4613      	mov	r3, r2
 8008394:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008396:	88fb      	ldrh	r3, [r7, #6]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4618      	mov	r0, r3
 800839c:	f001 f8ba 	bl	8009514 <pvPortMalloc>
 80083a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00e      	beq.n	80083c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083a8:	2054      	movs	r0, #84	; 0x54
 80083aa:	f001 f8b3 	bl	8009514 <pvPortMalloc>
 80083ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d003      	beq.n	80083be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	631a      	str	r2, [r3, #48]	; 0x30
 80083bc:	e005      	b.n	80083ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083be:	6978      	ldr	r0, [r7, #20]
 80083c0:	f001 f972 	bl	80096a8 <vPortFree>
 80083c4:	e001      	b.n	80083ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d017      	beq.n	8008400 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083d8:	88fa      	ldrh	r2, [r7, #6]
 80083da:	2300      	movs	r3, #0
 80083dc:	9303      	str	r3, [sp, #12]
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	9302      	str	r3, [sp, #8]
 80083e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e4:	9301      	str	r3, [sp, #4]
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	68b9      	ldr	r1, [r7, #8]
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 f80e 	bl	8008410 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083f4:	69f8      	ldr	r0, [r7, #28]
 80083f6:	f000 f895 	bl	8008524 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083fa:	2301      	movs	r3, #1
 80083fc:	61bb      	str	r3, [r7, #24]
 80083fe:	e002      	b.n	8008406 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008400:	f04f 33ff 	mov.w	r3, #4294967295
 8008404:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008406:	69bb      	ldr	r3, [r7, #24]
	}
 8008408:	4618      	mov	r0, r3
 800840a:	3720      	adds	r7, #32
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b088      	sub	sp, #32
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
 800841c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008428:	440b      	add	r3, r1
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	f023 0307 	bic.w	r3, r3, #7
 8008436:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	f003 0307 	and.w	r3, r3, #7
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00c      	beq.n	800845c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	b672      	cpsid	i
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	b662      	cpsie	i
 8008456:	617b      	str	r3, [r7, #20]
}
 8008458:	bf00      	nop
 800845a:	e7fe      	b.n	800845a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d01f      	beq.n	80084a2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008462:	2300      	movs	r3, #0
 8008464:	61fb      	str	r3, [r7, #28]
 8008466:	e012      	b.n	800848e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	4413      	add	r3, r2
 800846e:	7819      	ldrb	r1, [r3, #0]
 8008470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	4413      	add	r3, r2
 8008476:	3334      	adds	r3, #52	; 0x34
 8008478:	460a      	mov	r2, r1
 800847a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	4413      	add	r3, r2
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d006      	beq.n	8008496 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	3301      	adds	r3, #1
 800848c:	61fb      	str	r3, [r7, #28]
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	2b0f      	cmp	r3, #15
 8008492:	d9e9      	bls.n	8008468 <prvInitialiseNewTask+0x58>
 8008494:	e000      	b.n	8008498 <prvInitialiseNewTask+0x88>
			{
				break;
 8008496:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084a0:	e003      	b.n	80084aa <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ac:	2b06      	cmp	r3, #6
 80084ae:	d901      	bls.n	80084b4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084b0:	2306      	movs	r3, #6
 80084b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	2200      	movs	r2, #0
 80084c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	3304      	adds	r3, #4
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7ff fa97 	bl	80079fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	3318      	adds	r3, #24
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7ff fa92 	bl	80079fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e2:	f1c3 0207 	rsb	r2, r3, #7
 80084e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f2:	2200      	movs	r2, #0
 80084f4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	68f9      	ldr	r1, [r7, #12]
 8008502:	69b8      	ldr	r0, [r7, #24]
 8008504:	f000 fdce 	bl	80090a4 <pxPortInitialiseStack>
 8008508:	4602      	mov	r2, r0
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008518:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800851a:	bf00      	nop
 800851c:	3720      	adds	r7, #32
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800852c:	f000 fec6 	bl	80092bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008530:	4b2a      	ldr	r3, [pc, #168]	; (80085dc <prvAddNewTaskToReadyList+0xb8>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3301      	adds	r3, #1
 8008536:	4a29      	ldr	r2, [pc, #164]	; (80085dc <prvAddNewTaskToReadyList+0xb8>)
 8008538:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800853a:	4b29      	ldr	r3, [pc, #164]	; (80085e0 <prvAddNewTaskToReadyList+0xbc>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d109      	bne.n	8008556 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008542:	4a27      	ldr	r2, [pc, #156]	; (80085e0 <prvAddNewTaskToReadyList+0xbc>)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008548:	4b24      	ldr	r3, [pc, #144]	; (80085dc <prvAddNewTaskToReadyList+0xb8>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d110      	bne.n	8008572 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008550:	f000 fbda 	bl	8008d08 <prvInitialiseTaskLists>
 8008554:	e00d      	b.n	8008572 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008556:	4b23      	ldr	r3, [pc, #140]	; (80085e4 <prvAddNewTaskToReadyList+0xc0>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800855e:	4b20      	ldr	r3, [pc, #128]	; (80085e0 <prvAddNewTaskToReadyList+0xbc>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008568:	429a      	cmp	r2, r3
 800856a:	d802      	bhi.n	8008572 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800856c:	4a1c      	ldr	r2, [pc, #112]	; (80085e0 <prvAddNewTaskToReadyList+0xbc>)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008572:	4b1d      	ldr	r3, [pc, #116]	; (80085e8 <prvAddNewTaskToReadyList+0xc4>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3301      	adds	r3, #1
 8008578:	4a1b      	ldr	r2, [pc, #108]	; (80085e8 <prvAddNewTaskToReadyList+0xc4>)
 800857a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	2201      	movs	r2, #1
 8008582:	409a      	lsls	r2, r3
 8008584:	4b19      	ldr	r3, [pc, #100]	; (80085ec <prvAddNewTaskToReadyList+0xc8>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4313      	orrs	r3, r2
 800858a:	4a18      	ldr	r2, [pc, #96]	; (80085ec <prvAddNewTaskToReadyList+0xc8>)
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4a15      	ldr	r2, [pc, #84]	; (80085f0 <prvAddNewTaskToReadyList+0xcc>)
 800859c:	441a      	add	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3304      	adds	r3, #4
 80085a2:	4619      	mov	r1, r3
 80085a4:	4610      	mov	r0, r2
 80085a6:	f7ff fa37 	bl	8007a18 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085aa:	f000 febb 	bl	8009324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085ae:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <prvAddNewTaskToReadyList+0xc0>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00e      	beq.n	80085d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085b6:	4b0a      	ldr	r3, [pc, #40]	; (80085e0 <prvAddNewTaskToReadyList+0xbc>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d207      	bcs.n	80085d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085c4:	4b0b      	ldr	r3, [pc, #44]	; (80085f4 <prvAddNewTaskToReadyList+0xd0>)
 80085c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085d4:	bf00      	nop
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20000530 	.word	0x20000530
 80085e0:	20000430 	.word	0x20000430
 80085e4:	2000053c 	.word	0x2000053c
 80085e8:	2000054c 	.word	0x2000054c
 80085ec:	20000538 	.word	0x20000538
 80085f0:	20000434 	.word	0x20000434
 80085f4:	e000ed04 	.word	0xe000ed04

080085f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008600:	2300      	movs	r3, #0
 8008602:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d019      	beq.n	800863e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800860a:	4b14      	ldr	r3, [pc, #80]	; (800865c <vTaskDelay+0x64>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00c      	beq.n	800862c <vTaskDelay+0x34>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	b672      	cpsid	i
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	b662      	cpsie	i
 8008626:	60bb      	str	r3, [r7, #8]
}
 8008628:	bf00      	nop
 800862a:	e7fe      	b.n	800862a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800862c:	f000 f87e 	bl	800872c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008630:	2100      	movs	r1, #0
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fcd0 	bl	8008fd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008638:	f000 f886 	bl	8008748 <xTaskResumeAll>
 800863c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d107      	bne.n	8008654 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008644:	4b06      	ldr	r3, [pc, #24]	; (8008660 <vTaskDelay+0x68>)
 8008646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008654:	bf00      	nop
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	20000558 	.word	0x20000558
 8008660:	e000ed04 	.word	0xe000ed04

08008664 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b08a      	sub	sp, #40	; 0x28
 8008668:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800866a:	2300      	movs	r3, #0
 800866c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008672:	463a      	mov	r2, r7
 8008674:	1d39      	adds	r1, r7, #4
 8008676:	f107 0308 	add.w	r3, r7, #8
 800867a:	4618      	mov	r0, r3
 800867c:	f7f7 ff4e 	bl	800051c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	9202      	str	r2, [sp, #8]
 8008688:	9301      	str	r3, [sp, #4]
 800868a:	2300      	movs	r3, #0
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	2300      	movs	r3, #0
 8008690:	460a      	mov	r2, r1
 8008692:	4920      	ldr	r1, [pc, #128]	; (8008714 <vTaskStartScheduler+0xb0>)
 8008694:	4820      	ldr	r0, [pc, #128]	; (8008718 <vTaskStartScheduler+0xb4>)
 8008696:	f7ff fe13 	bl	80082c0 <xTaskCreateStatic>
 800869a:	4603      	mov	r3, r0
 800869c:	4a1f      	ldr	r2, [pc, #124]	; (800871c <vTaskStartScheduler+0xb8>)
 800869e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086a0:	4b1e      	ldr	r3, [pc, #120]	; (800871c <vTaskStartScheduler+0xb8>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086a8:	2301      	movs	r3, #1
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	e001      	b.n	80086b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086ae:	2300      	movs	r3, #0
 80086b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d118      	bne.n	80086ea <vTaskStartScheduler+0x86>
	__asm volatile
 80086b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086bc:	b672      	cpsid	i
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	b662      	cpsie	i
 80086cc:	613b      	str	r3, [r7, #16]
}
 80086ce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086d0:	4b13      	ldr	r3, [pc, #76]	; (8008720 <vTaskStartScheduler+0xbc>)
 80086d2:	f04f 32ff 	mov.w	r2, #4294967295
 80086d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086d8:	4b12      	ldr	r3, [pc, #72]	; (8008724 <vTaskStartScheduler+0xc0>)
 80086da:	2201      	movs	r2, #1
 80086dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086de:	4b12      	ldr	r3, [pc, #72]	; (8008728 <vTaskStartScheduler+0xc4>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086e4:	f000 fd6c 	bl	80091c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086e8:	e010      	b.n	800870c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f0:	d10c      	bne.n	800870c <vTaskStartScheduler+0xa8>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	b672      	cpsid	i
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	b662      	cpsie	i
 8008706:	60fb      	str	r3, [r7, #12]
}
 8008708:	bf00      	nop
 800870a:	e7fe      	b.n	800870a <vTaskStartScheduler+0xa6>
}
 800870c:	bf00      	nop
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	0800a774 	.word	0x0800a774
 8008718:	08008cd9 	.word	0x08008cd9
 800871c:	20000554 	.word	0x20000554
 8008720:	20000550 	.word	0x20000550
 8008724:	2000053c 	.word	0x2000053c
 8008728:	20000534 	.word	0x20000534

0800872c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008730:	4b04      	ldr	r3, [pc, #16]	; (8008744 <vTaskSuspendAll+0x18>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3301      	adds	r3, #1
 8008736:	4a03      	ldr	r2, [pc, #12]	; (8008744 <vTaskSuspendAll+0x18>)
 8008738:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800873a:	bf00      	nop
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	20000558 	.word	0x20000558

08008748 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800874e:	2300      	movs	r3, #0
 8008750:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008752:	2300      	movs	r3, #0
 8008754:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008756:	4b42      	ldr	r3, [pc, #264]	; (8008860 <xTaskResumeAll+0x118>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10c      	bne.n	8008778 <xTaskResumeAll+0x30>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	b672      	cpsid	i
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	b662      	cpsie	i
 8008772:	603b      	str	r3, [r7, #0]
}
 8008774:	bf00      	nop
 8008776:	e7fe      	b.n	8008776 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008778:	f000 fda0 	bl	80092bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800877c:	4b38      	ldr	r3, [pc, #224]	; (8008860 <xTaskResumeAll+0x118>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3b01      	subs	r3, #1
 8008782:	4a37      	ldr	r2, [pc, #220]	; (8008860 <xTaskResumeAll+0x118>)
 8008784:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008786:	4b36      	ldr	r3, [pc, #216]	; (8008860 <xTaskResumeAll+0x118>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d161      	bne.n	8008852 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800878e:	4b35      	ldr	r3, [pc, #212]	; (8008864 <xTaskResumeAll+0x11c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d05d      	beq.n	8008852 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008796:	e02e      	b.n	80087f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008798:	4b33      	ldr	r3, [pc, #204]	; (8008868 <xTaskResumeAll+0x120>)
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3318      	adds	r3, #24
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7ff f994 	bl	8007ad2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3304      	adds	r3, #4
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7ff f98f 	bl	8007ad2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	2201      	movs	r2, #1
 80087ba:	409a      	lsls	r2, r3
 80087bc:	4b2b      	ldr	r3, [pc, #172]	; (800886c <xTaskResumeAll+0x124>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	4a2a      	ldr	r2, [pc, #168]	; (800886c <xTaskResumeAll+0x124>)
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ca:	4613      	mov	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4a27      	ldr	r2, [pc, #156]	; (8008870 <xTaskResumeAll+0x128>)
 80087d4:	441a      	add	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3304      	adds	r3, #4
 80087da:	4619      	mov	r1, r3
 80087dc:	4610      	mov	r0, r2
 80087de:	f7ff f91b 	bl	8007a18 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e6:	4b23      	ldr	r3, [pc, #140]	; (8008874 <xTaskResumeAll+0x12c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d302      	bcc.n	80087f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80087f0:	4b21      	ldr	r3, [pc, #132]	; (8008878 <xTaskResumeAll+0x130>)
 80087f2:	2201      	movs	r2, #1
 80087f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087f6:	4b1c      	ldr	r3, [pc, #112]	; (8008868 <xTaskResumeAll+0x120>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1cc      	bne.n	8008798 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008804:	f000 fb20 	bl	8008e48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008808:	4b1c      	ldr	r3, [pc, #112]	; (800887c <xTaskResumeAll+0x134>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d010      	beq.n	8008836 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008814:	f000 f836 	bl	8008884 <xTaskIncrementTick>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800881e:	4b16      	ldr	r3, [pc, #88]	; (8008878 <xTaskResumeAll+0x130>)
 8008820:	2201      	movs	r2, #1
 8008822:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3b01      	subs	r3, #1
 8008828:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1f1      	bne.n	8008814 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8008830:	4b12      	ldr	r3, [pc, #72]	; (800887c <xTaskResumeAll+0x134>)
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008836:	4b10      	ldr	r3, [pc, #64]	; (8008878 <xTaskResumeAll+0x130>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d009      	beq.n	8008852 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800883e:	2301      	movs	r3, #1
 8008840:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008842:	4b0f      	ldr	r3, [pc, #60]	; (8008880 <xTaskResumeAll+0x138>)
 8008844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008852:	f000 fd67 	bl	8009324 <vPortExitCritical>

	return xAlreadyYielded;
 8008856:	68bb      	ldr	r3, [r7, #8]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	20000558 	.word	0x20000558
 8008864:	20000530 	.word	0x20000530
 8008868:	200004f0 	.word	0x200004f0
 800886c:	20000538 	.word	0x20000538
 8008870:	20000434 	.word	0x20000434
 8008874:	20000430 	.word	0x20000430
 8008878:	20000544 	.word	0x20000544
 800887c:	20000540 	.word	0x20000540
 8008880:	e000ed04 	.word	0xe000ed04

08008884 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800888a:	2300      	movs	r3, #0
 800888c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800888e:	4b4f      	ldr	r3, [pc, #316]	; (80089cc <xTaskIncrementTick+0x148>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	f040 808a 	bne.w	80089ac <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008898:	4b4d      	ldr	r3, [pc, #308]	; (80089d0 <xTaskIncrementTick+0x14c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3301      	adds	r3, #1
 800889e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088a0:	4a4b      	ldr	r2, [pc, #300]	; (80089d0 <xTaskIncrementTick+0x14c>)
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d122      	bne.n	80088f2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80088ac:	4b49      	ldr	r3, [pc, #292]	; (80089d4 <xTaskIncrementTick+0x150>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00c      	beq.n	80088d0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ba:	b672      	cpsid	i
 80088bc:	f383 8811 	msr	BASEPRI, r3
 80088c0:	f3bf 8f6f 	isb	sy
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	b662      	cpsie	i
 80088ca:	603b      	str	r3, [r7, #0]
}
 80088cc:	bf00      	nop
 80088ce:	e7fe      	b.n	80088ce <xTaskIncrementTick+0x4a>
 80088d0:	4b40      	ldr	r3, [pc, #256]	; (80089d4 <xTaskIncrementTick+0x150>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	60fb      	str	r3, [r7, #12]
 80088d6:	4b40      	ldr	r3, [pc, #256]	; (80089d8 <xTaskIncrementTick+0x154>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a3e      	ldr	r2, [pc, #248]	; (80089d4 <xTaskIncrementTick+0x150>)
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	4a3e      	ldr	r2, [pc, #248]	; (80089d8 <xTaskIncrementTick+0x154>)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6013      	str	r3, [r2, #0]
 80088e4:	4b3d      	ldr	r3, [pc, #244]	; (80089dc <xTaskIncrementTick+0x158>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3301      	adds	r3, #1
 80088ea:	4a3c      	ldr	r2, [pc, #240]	; (80089dc <xTaskIncrementTick+0x158>)
 80088ec:	6013      	str	r3, [r2, #0]
 80088ee:	f000 faab 	bl	8008e48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088f2:	4b3b      	ldr	r3, [pc, #236]	; (80089e0 <xTaskIncrementTick+0x15c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d348      	bcc.n	800898e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088fc:	4b35      	ldr	r3, [pc, #212]	; (80089d4 <xTaskIncrementTick+0x150>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d104      	bne.n	8008910 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008906:	4b36      	ldr	r3, [pc, #216]	; (80089e0 <xTaskIncrementTick+0x15c>)
 8008908:	f04f 32ff 	mov.w	r2, #4294967295
 800890c:	601a      	str	r2, [r3, #0]
					break;
 800890e:	e03e      	b.n	800898e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008910:	4b30      	ldr	r3, [pc, #192]	; (80089d4 <xTaskIncrementTick+0x150>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	429a      	cmp	r2, r3
 8008926:	d203      	bcs.n	8008930 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008928:	4a2d      	ldr	r2, [pc, #180]	; (80089e0 <xTaskIncrementTick+0x15c>)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800892e:	e02e      	b.n	800898e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	3304      	adds	r3, #4
 8008934:	4618      	mov	r0, r3
 8008936:	f7ff f8cc 	bl	8007ad2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893e:	2b00      	cmp	r3, #0
 8008940:	d004      	beq.n	800894c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	3318      	adds	r3, #24
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff f8c3 	bl	8007ad2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	2201      	movs	r2, #1
 8008952:	409a      	lsls	r2, r3
 8008954:	4b23      	ldr	r3, [pc, #140]	; (80089e4 <xTaskIncrementTick+0x160>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4313      	orrs	r3, r2
 800895a:	4a22      	ldr	r2, [pc, #136]	; (80089e4 <xTaskIncrementTick+0x160>)
 800895c:	6013      	str	r3, [r2, #0]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008962:	4613      	mov	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4a1f      	ldr	r2, [pc, #124]	; (80089e8 <xTaskIncrementTick+0x164>)
 800896c:	441a      	add	r2, r3
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	3304      	adds	r3, #4
 8008972:	4619      	mov	r1, r3
 8008974:	4610      	mov	r0, r2
 8008976:	f7ff f84f 	bl	8007a18 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897e:	4b1b      	ldr	r3, [pc, #108]	; (80089ec <xTaskIncrementTick+0x168>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	429a      	cmp	r2, r3
 8008986:	d3b9      	bcc.n	80088fc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008988:	2301      	movs	r3, #1
 800898a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800898c:	e7b6      	b.n	80088fc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800898e:	4b17      	ldr	r3, [pc, #92]	; (80089ec <xTaskIncrementTick+0x168>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008994:	4914      	ldr	r1, [pc, #80]	; (80089e8 <xTaskIncrementTick+0x164>)
 8008996:	4613      	mov	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	440b      	add	r3, r1
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d907      	bls.n	80089b6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80089a6:	2301      	movs	r3, #1
 80089a8:	617b      	str	r3, [r7, #20]
 80089aa:	e004      	b.n	80089b6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80089ac:	4b10      	ldr	r3, [pc, #64]	; (80089f0 <xTaskIncrementTick+0x16c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3301      	adds	r3, #1
 80089b2:	4a0f      	ldr	r2, [pc, #60]	; (80089f0 <xTaskIncrementTick+0x16c>)
 80089b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80089b6:	4b0f      	ldr	r3, [pc, #60]	; (80089f4 <xTaskIncrementTick+0x170>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80089be:	2301      	movs	r3, #1
 80089c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80089c2:	697b      	ldr	r3, [r7, #20]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3718      	adds	r7, #24
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	20000558 	.word	0x20000558
 80089d0:	20000534 	.word	0x20000534
 80089d4:	200004e8 	.word	0x200004e8
 80089d8:	200004ec 	.word	0x200004ec
 80089dc:	20000548 	.word	0x20000548
 80089e0:	20000550 	.word	0x20000550
 80089e4:	20000538 	.word	0x20000538
 80089e8:	20000434 	.word	0x20000434
 80089ec:	20000430 	.word	0x20000430
 80089f0:	20000540 	.word	0x20000540
 80089f4:	20000544 	.word	0x20000544

080089f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089fe:	4b28      	ldr	r3, [pc, #160]	; (8008aa0 <vTaskSwitchContext+0xa8>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a06:	4b27      	ldr	r3, [pc, #156]	; (8008aa4 <vTaskSwitchContext+0xac>)
 8008a08:	2201      	movs	r2, #1
 8008a0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a0c:	e041      	b.n	8008a92 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008a0e:	4b25      	ldr	r3, [pc, #148]	; (8008aa4 <vTaskSwitchContext+0xac>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a14:	4b24      	ldr	r3, [pc, #144]	; (8008aa8 <vTaskSwitchContext+0xb0>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	fab3 f383 	clz	r3, r3
 8008a20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008a22:	7afb      	ldrb	r3, [r7, #11]
 8008a24:	f1c3 031f 	rsb	r3, r3, #31
 8008a28:	617b      	str	r3, [r7, #20]
 8008a2a:	4920      	ldr	r1, [pc, #128]	; (8008aac <vTaskSwitchContext+0xb4>)
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	440b      	add	r3, r1
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10c      	bne.n	8008a58 <vTaskSwitchContext+0x60>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	b672      	cpsid	i
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	b662      	cpsie	i
 8008a52:	607b      	str	r3, [r7, #4]
}
 8008a54:	bf00      	nop
 8008a56:	e7fe      	b.n	8008a56 <vTaskSwitchContext+0x5e>
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4a12      	ldr	r2, [pc, #72]	; (8008aac <vTaskSwitchContext+0xb4>)
 8008a64:	4413      	add	r3, r2
 8008a66:	613b      	str	r3, [r7, #16]
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	605a      	str	r2, [r3, #4]
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	3308      	adds	r3, #8
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d104      	bne.n	8008a88 <vTaskSwitchContext+0x90>
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	605a      	str	r2, [r3, #4]
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	4a08      	ldr	r2, [pc, #32]	; (8008ab0 <vTaskSwitchContext+0xb8>)
 8008a90:	6013      	str	r3, [r2, #0]
}
 8008a92:	bf00      	nop
 8008a94:	371c      	adds	r7, #28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	20000558 	.word	0x20000558
 8008aa4:	20000544 	.word	0x20000544
 8008aa8:	20000538 	.word	0x20000538
 8008aac:	20000434 	.word	0x20000434
 8008ab0:	20000430 	.word	0x20000430

08008ab4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10c      	bne.n	8008ade <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac8:	b672      	cpsid	i
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	b662      	cpsie	i
 8008ad8:	60fb      	str	r3, [r7, #12]
}
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ade:	4b07      	ldr	r3, [pc, #28]	; (8008afc <vTaskPlaceOnEventList+0x48>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3318      	adds	r3, #24
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7fe ffba 	bl	8007a60 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008aec:	2101      	movs	r1, #1
 8008aee:	6838      	ldr	r0, [r7, #0]
 8008af0:	f000 fa72 	bl	8008fd8 <prvAddCurrentTaskToDelayedList>
}
 8008af4:	bf00      	nop
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	20000430 	.word	0x20000430

08008b00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10c      	bne.n	8008b30 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1a:	b672      	cpsid	i
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	b662      	cpsie	i
 8008b2a:	60fb      	str	r3, [r7, #12]
}
 8008b2c:	bf00      	nop
 8008b2e:	e7fe      	b.n	8008b2e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	3318      	adds	r3, #24
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fe ffcc 	bl	8007ad2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b3a:	4b1d      	ldr	r3, [pc, #116]	; (8008bb0 <xTaskRemoveFromEventList+0xb0>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d11c      	bne.n	8008b7c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	3304      	adds	r3, #4
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe ffc3 	bl	8007ad2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b50:	2201      	movs	r2, #1
 8008b52:	409a      	lsls	r2, r3
 8008b54:	4b17      	ldr	r3, [pc, #92]	; (8008bb4 <xTaskRemoveFromEventList+0xb4>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	4a16      	ldr	r2, [pc, #88]	; (8008bb4 <xTaskRemoveFromEventList+0xb4>)
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4a13      	ldr	r2, [pc, #76]	; (8008bb8 <xTaskRemoveFromEventList+0xb8>)
 8008b6c:	441a      	add	r2, r3
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	3304      	adds	r3, #4
 8008b72:	4619      	mov	r1, r3
 8008b74:	4610      	mov	r0, r2
 8008b76:	f7fe ff4f 	bl	8007a18 <vListInsertEnd>
 8008b7a:	e005      	b.n	8008b88 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	3318      	adds	r3, #24
 8008b80:	4619      	mov	r1, r3
 8008b82:	480e      	ldr	r0, [pc, #56]	; (8008bbc <xTaskRemoveFromEventList+0xbc>)
 8008b84:	f7fe ff48 	bl	8007a18 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8c:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <xTaskRemoveFromEventList+0xc0>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d905      	bls.n	8008ba2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b96:	2301      	movs	r3, #1
 8008b98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b9a:	4b0a      	ldr	r3, [pc, #40]	; (8008bc4 <xTaskRemoveFromEventList+0xc4>)
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	601a      	str	r2, [r3, #0]
 8008ba0:	e001      	b.n	8008ba6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ba6:	697b      	ldr	r3, [r7, #20]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	20000558 	.word	0x20000558
 8008bb4:	20000538 	.word	0x20000538
 8008bb8:	20000434 	.word	0x20000434
 8008bbc:	200004f0 	.word	0x200004f0
 8008bc0:	20000430 	.word	0x20000430
 8008bc4:	20000544 	.word	0x20000544

08008bc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bd0:	4b06      	ldr	r3, [pc, #24]	; (8008bec <vTaskInternalSetTimeOutState+0x24>)
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008bd8:	4b05      	ldr	r3, [pc, #20]	; (8008bf0 <vTaskInternalSetTimeOutState+0x28>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	605a      	str	r2, [r3, #4]
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	20000548 	.word	0x20000548
 8008bf0:	20000534 	.word	0x20000534

08008bf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b088      	sub	sp, #32
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10c      	bne.n	8008c1e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c08:	b672      	cpsid	i
 8008c0a:	f383 8811 	msr	BASEPRI, r3
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	f3bf 8f4f 	dsb	sy
 8008c16:	b662      	cpsie	i
 8008c18:	613b      	str	r3, [r7, #16]
}
 8008c1a:	bf00      	nop
 8008c1c:	e7fe      	b.n	8008c1c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10c      	bne.n	8008c3e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c28:	b672      	cpsid	i
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	b662      	cpsie	i
 8008c38:	60fb      	str	r3, [r7, #12]
}
 8008c3a:	bf00      	nop
 8008c3c:	e7fe      	b.n	8008c3c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008c3e:	f000 fb3d 	bl	80092bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c42:	4b1d      	ldr	r3, [pc, #116]	; (8008cb8 <xTaskCheckForTimeOut+0xc4>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5a:	d102      	bne.n	8008c62 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	61fb      	str	r3, [r7, #28]
 8008c60:	e023      	b.n	8008caa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	4b15      	ldr	r3, [pc, #84]	; (8008cbc <xTaskCheckForTimeOut+0xc8>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d007      	beq.n	8008c7e <xTaskCheckForTimeOut+0x8a>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d302      	bcc.n	8008c7e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	61fb      	str	r3, [r7, #28]
 8008c7c:	e015      	b.n	8008caa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d20b      	bcs.n	8008ca0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	1ad2      	subs	r2, r2, r3
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7ff ff97 	bl	8008bc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	61fb      	str	r3, [r7, #28]
 8008c9e:	e004      	b.n	8008caa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008caa:	f000 fb3b 	bl	8009324 <vPortExitCritical>

	return xReturn;
 8008cae:	69fb      	ldr	r3, [r7, #28]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3720      	adds	r7, #32
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	20000534 	.word	0x20000534
 8008cbc:	20000548 	.word	0x20000548

08008cc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008cc4:	4b03      	ldr	r3, [pc, #12]	; (8008cd4 <vTaskMissedYield+0x14>)
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	601a      	str	r2, [r3, #0]
}
 8008cca:	bf00      	nop
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	20000544 	.word	0x20000544

08008cd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ce0:	f000 f852 	bl	8008d88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ce4:	4b06      	ldr	r3, [pc, #24]	; (8008d00 <prvIdleTask+0x28>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d9f9      	bls.n	8008ce0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008cec:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <prvIdleTask+0x2c>)
 8008cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	f3bf 8f4f 	dsb	sy
 8008cf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008cfc:	e7f0      	b.n	8008ce0 <prvIdleTask+0x8>
 8008cfe:	bf00      	nop
 8008d00:	20000434 	.word	0x20000434
 8008d04:	e000ed04 	.word	0xe000ed04

08008d08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d0e:	2300      	movs	r3, #0
 8008d10:	607b      	str	r3, [r7, #4]
 8008d12:	e00c      	b.n	8008d2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	4613      	mov	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4a12      	ldr	r2, [pc, #72]	; (8008d68 <prvInitialiseTaskLists+0x60>)
 8008d20:	4413      	add	r3, r2
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe fe4b 	bl	80079be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	607b      	str	r3, [r7, #4]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2b06      	cmp	r3, #6
 8008d32:	d9ef      	bls.n	8008d14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d34:	480d      	ldr	r0, [pc, #52]	; (8008d6c <prvInitialiseTaskLists+0x64>)
 8008d36:	f7fe fe42 	bl	80079be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d3a:	480d      	ldr	r0, [pc, #52]	; (8008d70 <prvInitialiseTaskLists+0x68>)
 8008d3c:	f7fe fe3f 	bl	80079be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d40:	480c      	ldr	r0, [pc, #48]	; (8008d74 <prvInitialiseTaskLists+0x6c>)
 8008d42:	f7fe fe3c 	bl	80079be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d46:	480c      	ldr	r0, [pc, #48]	; (8008d78 <prvInitialiseTaskLists+0x70>)
 8008d48:	f7fe fe39 	bl	80079be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d4c:	480b      	ldr	r0, [pc, #44]	; (8008d7c <prvInitialiseTaskLists+0x74>)
 8008d4e:	f7fe fe36 	bl	80079be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d52:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <prvInitialiseTaskLists+0x78>)
 8008d54:	4a05      	ldr	r2, [pc, #20]	; (8008d6c <prvInitialiseTaskLists+0x64>)
 8008d56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d58:	4b0a      	ldr	r3, [pc, #40]	; (8008d84 <prvInitialiseTaskLists+0x7c>)
 8008d5a:	4a05      	ldr	r2, [pc, #20]	; (8008d70 <prvInitialiseTaskLists+0x68>)
 8008d5c:	601a      	str	r2, [r3, #0]
}
 8008d5e:	bf00      	nop
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20000434 	.word	0x20000434
 8008d6c:	200004c0 	.word	0x200004c0
 8008d70:	200004d4 	.word	0x200004d4
 8008d74:	200004f0 	.word	0x200004f0
 8008d78:	20000504 	.word	0x20000504
 8008d7c:	2000051c 	.word	0x2000051c
 8008d80:	200004e8 	.word	0x200004e8
 8008d84:	200004ec 	.word	0x200004ec

08008d88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d8e:	e019      	b.n	8008dc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d90:	f000 fa94 	bl	80092bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d94:	4b10      	ldr	r3, [pc, #64]	; (8008dd8 <prvCheckTasksWaitingTermination+0x50>)
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe fe96 	bl	8007ad2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008da6:	4b0d      	ldr	r3, [pc, #52]	; (8008ddc <prvCheckTasksWaitingTermination+0x54>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	4a0b      	ldr	r2, [pc, #44]	; (8008ddc <prvCheckTasksWaitingTermination+0x54>)
 8008dae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008db0:	4b0b      	ldr	r3, [pc, #44]	; (8008de0 <prvCheckTasksWaitingTermination+0x58>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3b01      	subs	r3, #1
 8008db6:	4a0a      	ldr	r2, [pc, #40]	; (8008de0 <prvCheckTasksWaitingTermination+0x58>)
 8008db8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008dba:	f000 fab3 	bl	8009324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f810 	bl	8008de4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dc4:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <prvCheckTasksWaitingTermination+0x58>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e1      	bne.n	8008d90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008dcc:	bf00      	nop
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	20000504 	.word	0x20000504
 8008ddc:	20000530 	.word	0x20000530
 8008de0:	20000518 	.word	0x20000518

08008de4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d108      	bne.n	8008e08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fc54 	bl	80096a8 <vPortFree>
				vPortFree( pxTCB );
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fc51 	bl	80096a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e06:	e01a      	b.n	8008e3e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d103      	bne.n	8008e1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fc48 	bl	80096a8 <vPortFree>
	}
 8008e18:	e011      	b.n	8008e3e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d00c      	beq.n	8008e3e <prvDeleteTCB+0x5a>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	b672      	cpsid	i
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	b662      	cpsie	i
 8008e38:	60fb      	str	r3, [r7, #12]
}
 8008e3a:	bf00      	nop
 8008e3c:	e7fe      	b.n	8008e3c <prvDeleteTCB+0x58>
	}
 8008e3e:	bf00      	nop
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
	...

08008e48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e4e:	4b0c      	ldr	r3, [pc, #48]	; (8008e80 <prvResetNextTaskUnblockTime+0x38>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d104      	bne.n	8008e62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e58:	4b0a      	ldr	r3, [pc, #40]	; (8008e84 <prvResetNextTaskUnblockTime+0x3c>)
 8008e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e60:	e008      	b.n	8008e74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e62:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <prvResetNextTaskUnblockTime+0x38>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	4a04      	ldr	r2, [pc, #16]	; (8008e84 <prvResetNextTaskUnblockTime+0x3c>)
 8008e72:	6013      	str	r3, [r2, #0]
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	200004e8 	.word	0x200004e8
 8008e84:	20000550 	.word	0x20000550

08008e88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e8e:	4b0b      	ldr	r3, [pc, #44]	; (8008ebc <xTaskGetSchedulerState+0x34>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d102      	bne.n	8008e9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e96:	2301      	movs	r3, #1
 8008e98:	607b      	str	r3, [r7, #4]
 8008e9a:	e008      	b.n	8008eae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e9c:	4b08      	ldr	r3, [pc, #32]	; (8008ec0 <xTaskGetSchedulerState+0x38>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d102      	bne.n	8008eaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	607b      	str	r3, [r7, #4]
 8008ea8:	e001      	b.n	8008eae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008eae:	687b      	ldr	r3, [r7, #4]
	}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	2000053c 	.word	0x2000053c
 8008ec0:	20000558 	.word	0x20000558

08008ec4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d072      	beq.n	8008fc0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008eda:	4b3c      	ldr	r3, [pc, #240]	; (8008fcc <xTaskPriorityDisinherit+0x108>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	693a      	ldr	r2, [r7, #16]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d00c      	beq.n	8008efe <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee8:	b672      	cpsid	i
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	b662      	cpsie	i
 8008ef8:	60fb      	str	r3, [r7, #12]
}
 8008efa:	bf00      	nop
 8008efc:	e7fe      	b.n	8008efc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10c      	bne.n	8008f20 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0a:	b672      	cpsid	i
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	b662      	cpsie	i
 8008f1a:	60bb      	str	r3, [r7, #8]
}
 8008f1c:	bf00      	nop
 8008f1e:	e7fe      	b.n	8008f1e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f24:	1e5a      	subs	r2, r3, #1
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d044      	beq.n	8008fc0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d140      	bne.n	8008fc0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	3304      	adds	r3, #4
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe fdc5 	bl	8007ad2 <uxListRemove>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d115      	bne.n	8008f7a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f52:	491f      	ldr	r1, [pc, #124]	; (8008fd0 <xTaskPriorityDisinherit+0x10c>)
 8008f54:	4613      	mov	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	440b      	add	r3, r1
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10a      	bne.n	8008f7a <xTaskPriorityDisinherit+0xb6>
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f68:	2201      	movs	r2, #1
 8008f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6e:	43da      	mvns	r2, r3
 8008f70:	4b18      	ldr	r3, [pc, #96]	; (8008fd4 <xTaskPriorityDisinherit+0x110>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4013      	ands	r3, r2
 8008f76:	4a17      	ldr	r2, [pc, #92]	; (8008fd4 <xTaskPriorityDisinherit+0x110>)
 8008f78:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f86:	f1c3 0207 	rsb	r2, r3, #7
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f92:	2201      	movs	r2, #1
 8008f94:	409a      	lsls	r2, r3
 8008f96:	4b0f      	ldr	r3, [pc, #60]	; (8008fd4 <xTaskPriorityDisinherit+0x110>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	4a0d      	ldr	r2, [pc, #52]	; (8008fd4 <xTaskPriorityDisinherit+0x110>)
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4413      	add	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4a08      	ldr	r2, [pc, #32]	; (8008fd0 <xTaskPriorityDisinherit+0x10c>)
 8008fae:	441a      	add	r2, r3
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	f7fe fd2e 	bl	8007a18 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fc0:	697b      	ldr	r3, [r7, #20]
	}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3718      	adds	r7, #24
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20000430 	.word	0x20000430
 8008fd0:	20000434 	.word	0x20000434
 8008fd4:	20000538 	.word	0x20000538

08008fd8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fe2:	4b29      	ldr	r3, [pc, #164]	; (8009088 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fe8:	4b28      	ldr	r3, [pc, #160]	; (800908c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3304      	adds	r3, #4
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fe fd6f 	bl	8007ad2 <uxListRemove>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10b      	bne.n	8009012 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008ffa:	4b24      	ldr	r3, [pc, #144]	; (800908c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	2201      	movs	r2, #1
 8009002:	fa02 f303 	lsl.w	r3, r2, r3
 8009006:	43da      	mvns	r2, r3
 8009008:	4b21      	ldr	r3, [pc, #132]	; (8009090 <prvAddCurrentTaskToDelayedList+0xb8>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4013      	ands	r3, r2
 800900e:	4a20      	ldr	r2, [pc, #128]	; (8009090 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009010:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009018:	d10a      	bne.n	8009030 <prvAddCurrentTaskToDelayedList+0x58>
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d007      	beq.n	8009030 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009020:	4b1a      	ldr	r3, [pc, #104]	; (800908c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3304      	adds	r3, #4
 8009026:	4619      	mov	r1, r3
 8009028:	481a      	ldr	r0, [pc, #104]	; (8009094 <prvAddCurrentTaskToDelayedList+0xbc>)
 800902a:	f7fe fcf5 	bl	8007a18 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800902e:	e026      	b.n	800907e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4413      	add	r3, r2
 8009036:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009038:	4b14      	ldr	r3, [pc, #80]	; (800908c <prvAddCurrentTaskToDelayedList+0xb4>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	429a      	cmp	r2, r3
 8009046:	d209      	bcs.n	800905c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009048:	4b13      	ldr	r3, [pc, #76]	; (8009098 <prvAddCurrentTaskToDelayedList+0xc0>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	4b0f      	ldr	r3, [pc, #60]	; (800908c <prvAddCurrentTaskToDelayedList+0xb4>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3304      	adds	r3, #4
 8009052:	4619      	mov	r1, r3
 8009054:	4610      	mov	r0, r2
 8009056:	f7fe fd03 	bl	8007a60 <vListInsert>
}
 800905a:	e010      	b.n	800907e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800905c:	4b0f      	ldr	r3, [pc, #60]	; (800909c <prvAddCurrentTaskToDelayedList+0xc4>)
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	4b0a      	ldr	r3, [pc, #40]	; (800908c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3304      	adds	r3, #4
 8009066:	4619      	mov	r1, r3
 8009068:	4610      	mov	r0, r2
 800906a:	f7fe fcf9 	bl	8007a60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800906e:	4b0c      	ldr	r3, [pc, #48]	; (80090a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	429a      	cmp	r2, r3
 8009076:	d202      	bcs.n	800907e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009078:	4a09      	ldr	r2, [pc, #36]	; (80090a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	6013      	str	r3, [r2, #0]
}
 800907e:	bf00      	nop
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20000534 	.word	0x20000534
 800908c:	20000430 	.word	0x20000430
 8009090:	20000538 	.word	0x20000538
 8009094:	2000051c 	.word	0x2000051c
 8009098:	200004ec 	.word	0x200004ec
 800909c:	200004e8 	.word	0x200004e8
 80090a0:	20000550 	.word	0x20000550

080090a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	3b04      	subs	r3, #4
 80090b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80090bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3b04      	subs	r3, #4
 80090c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f023 0201 	bic.w	r2, r3, #1
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3b04      	subs	r3, #4
 80090d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090d4:	4a0c      	ldr	r2, [pc, #48]	; (8009108 <pxPortInitialiseStack+0x64>)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3b14      	subs	r3, #20
 80090de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3b04      	subs	r3, #4
 80090ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f06f 0202 	mvn.w	r2, #2
 80090f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	3b20      	subs	r3, #32
 80090f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090fa:	68fb      	ldr	r3, [r7, #12]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	0800910d 	.word	0x0800910d

0800910c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009116:	4b14      	ldr	r3, [pc, #80]	; (8009168 <prvTaskExitError+0x5c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911e:	d00c      	beq.n	800913a <prvTaskExitError+0x2e>
	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	b672      	cpsid	i
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	b662      	cpsie	i
 8009134:	60fb      	str	r3, [r7, #12]
}
 8009136:	bf00      	nop
 8009138:	e7fe      	b.n	8009138 <prvTaskExitError+0x2c>
	__asm volatile
 800913a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913e:	b672      	cpsid	i
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	b662      	cpsie	i
 800914e:	60bb      	str	r3, [r7, #8]
}
 8009150:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009152:	bf00      	nop
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0fc      	beq.n	8009154 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800915a:	bf00      	nop
 800915c:	bf00      	nop
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	20000098 	.word	0x20000098
 800916c:	00000000 	.word	0x00000000

08009170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009170:	4b07      	ldr	r3, [pc, #28]	; (8009190 <pxCurrentTCBConst2>)
 8009172:	6819      	ldr	r1, [r3, #0]
 8009174:	6808      	ldr	r0, [r1, #0]
 8009176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917a:	f380 8809 	msr	PSP, r0
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f04f 0000 	mov.w	r0, #0
 8009186:	f380 8811 	msr	BASEPRI, r0
 800918a:	4770      	bx	lr
 800918c:	f3af 8000 	nop.w

08009190 <pxCurrentTCBConst2>:
 8009190:	20000430 	.word	0x20000430
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop

08009198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009198:	4808      	ldr	r0, [pc, #32]	; (80091bc <prvPortStartFirstTask+0x24>)
 800919a:	6800      	ldr	r0, [r0, #0]
 800919c:	6800      	ldr	r0, [r0, #0]
 800919e:	f380 8808 	msr	MSP, r0
 80091a2:	f04f 0000 	mov.w	r0, #0
 80091a6:	f380 8814 	msr	CONTROL, r0
 80091aa:	b662      	cpsie	i
 80091ac:	b661      	cpsie	f
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	df00      	svc	0
 80091b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091ba:	bf00      	nop
 80091bc:	e000ed08 	.word	0xe000ed08

080091c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091c6:	4b37      	ldr	r3, [pc, #220]	; (80092a4 <xPortStartScheduler+0xe4>)
 80091c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	22ff      	movs	r2, #255	; 0xff
 80091d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	4b2f      	ldr	r3, [pc, #188]	; (80092a8 <xPortStartScheduler+0xe8>)
 80091ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091ee:	4b2f      	ldr	r3, [pc, #188]	; (80092ac <xPortStartScheduler+0xec>)
 80091f0:	2207      	movs	r2, #7
 80091f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091f4:	e009      	b.n	800920a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80091f6:	4b2d      	ldr	r3, [pc, #180]	; (80092ac <xPortStartScheduler+0xec>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3b01      	subs	r3, #1
 80091fc:	4a2b      	ldr	r2, [pc, #172]	; (80092ac <xPortStartScheduler+0xec>)
 80091fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009200:	78fb      	ldrb	r3, [r7, #3]
 8009202:	b2db      	uxtb	r3, r3
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	b2db      	uxtb	r3, r3
 8009208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800920a:	78fb      	ldrb	r3, [r7, #3]
 800920c:	b2db      	uxtb	r3, r3
 800920e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009212:	2b80      	cmp	r3, #128	; 0x80
 8009214:	d0ef      	beq.n	80091f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009216:	4b25      	ldr	r3, [pc, #148]	; (80092ac <xPortStartScheduler+0xec>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f1c3 0307 	rsb	r3, r3, #7
 800921e:	2b04      	cmp	r3, #4
 8009220:	d00c      	beq.n	800923c <xPortStartScheduler+0x7c>
	__asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009226:	b672      	cpsid	i
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	b662      	cpsie	i
 8009236:	60bb      	str	r3, [r7, #8]
}
 8009238:	bf00      	nop
 800923a:	e7fe      	b.n	800923a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800923c:	4b1b      	ldr	r3, [pc, #108]	; (80092ac <xPortStartScheduler+0xec>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	021b      	lsls	r3, r3, #8
 8009242:	4a1a      	ldr	r2, [pc, #104]	; (80092ac <xPortStartScheduler+0xec>)
 8009244:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009246:	4b19      	ldr	r3, [pc, #100]	; (80092ac <xPortStartScheduler+0xec>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800924e:	4a17      	ldr	r2, [pc, #92]	; (80092ac <xPortStartScheduler+0xec>)
 8009250:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	b2da      	uxtb	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800925a:	4b15      	ldr	r3, [pc, #84]	; (80092b0 <xPortStartScheduler+0xf0>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a14      	ldr	r2, [pc, #80]	; (80092b0 <xPortStartScheduler+0xf0>)
 8009260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009264:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009266:	4b12      	ldr	r3, [pc, #72]	; (80092b0 <xPortStartScheduler+0xf0>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a11      	ldr	r2, [pc, #68]	; (80092b0 <xPortStartScheduler+0xf0>)
 800926c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009270:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009272:	f000 f8dd 	bl	8009430 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009276:	4b0f      	ldr	r3, [pc, #60]	; (80092b4 <xPortStartScheduler+0xf4>)
 8009278:	2200      	movs	r2, #0
 800927a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800927c:	f000 f8fc 	bl	8009478 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009280:	4b0d      	ldr	r3, [pc, #52]	; (80092b8 <xPortStartScheduler+0xf8>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a0c      	ldr	r2, [pc, #48]	; (80092b8 <xPortStartScheduler+0xf8>)
 8009286:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800928a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800928c:	f7ff ff84 	bl	8009198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009290:	f7ff fbb2 	bl	80089f8 <vTaskSwitchContext>
	prvTaskExitError();
 8009294:	f7ff ff3a 	bl	800910c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	e000e400 	.word	0xe000e400
 80092a8:	2000055c 	.word	0x2000055c
 80092ac:	20000560 	.word	0x20000560
 80092b0:	e000ed20 	.word	0xe000ed20
 80092b4:	20000098 	.word	0x20000098
 80092b8:	e000ef34 	.word	0xe000ef34

080092bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
	__asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	b672      	cpsid	i
 80092c8:	f383 8811 	msr	BASEPRI, r3
 80092cc:	f3bf 8f6f 	isb	sy
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	b662      	cpsie	i
 80092d6:	607b      	str	r3, [r7, #4]
}
 80092d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092da:	4b10      	ldr	r3, [pc, #64]	; (800931c <vPortEnterCritical+0x60>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	3301      	adds	r3, #1
 80092e0:	4a0e      	ldr	r2, [pc, #56]	; (800931c <vPortEnterCritical+0x60>)
 80092e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092e4:	4b0d      	ldr	r3, [pc, #52]	; (800931c <vPortEnterCritical+0x60>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d111      	bne.n	8009310 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092ec:	4b0c      	ldr	r3, [pc, #48]	; (8009320 <vPortEnterCritical+0x64>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00c      	beq.n	8009310 <vPortEnterCritical+0x54>
	__asm volatile
 80092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fa:	b672      	cpsid	i
 80092fc:	f383 8811 	msr	BASEPRI, r3
 8009300:	f3bf 8f6f 	isb	sy
 8009304:	f3bf 8f4f 	dsb	sy
 8009308:	b662      	cpsie	i
 800930a:	603b      	str	r3, [r7, #0]
}
 800930c:	bf00      	nop
 800930e:	e7fe      	b.n	800930e <vPortEnterCritical+0x52>
	}
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	20000098 	.word	0x20000098
 8009320:	e000ed04 	.word	0xe000ed04

08009324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800932a:	4b13      	ldr	r3, [pc, #76]	; (8009378 <vPortExitCritical+0x54>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10c      	bne.n	800934c <vPortExitCritical+0x28>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	b672      	cpsid	i
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	b662      	cpsie	i
 8009346:	607b      	str	r3, [r7, #4]
}
 8009348:	bf00      	nop
 800934a:	e7fe      	b.n	800934a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800934c:	4b0a      	ldr	r3, [pc, #40]	; (8009378 <vPortExitCritical+0x54>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3b01      	subs	r3, #1
 8009352:	4a09      	ldr	r2, [pc, #36]	; (8009378 <vPortExitCritical+0x54>)
 8009354:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009356:	4b08      	ldr	r3, [pc, #32]	; (8009378 <vPortExitCritical+0x54>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d105      	bne.n	800936a <vPortExitCritical+0x46>
 800935e:	2300      	movs	r3, #0
 8009360:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	f383 8811 	msr	BASEPRI, r3
}
 8009368:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800936a:	bf00      	nop
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	20000098 	.word	0x20000098
 800937c:	00000000 	.word	0x00000000

08009380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009380:	f3ef 8009 	mrs	r0, PSP
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	4b15      	ldr	r3, [pc, #84]	; (80093e0 <pxCurrentTCBConst>)
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	f01e 0f10 	tst.w	lr, #16
 8009390:	bf08      	it	eq
 8009392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939a:	6010      	str	r0, [r2, #0]
 800939c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80093a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80093a4:	b672      	cpsid	i
 80093a6:	f380 8811 	msr	BASEPRI, r0
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	b662      	cpsie	i
 80093b4:	f7ff fb20 	bl	80089f8 <vTaskSwitchContext>
 80093b8:	f04f 0000 	mov.w	r0, #0
 80093bc:	f380 8811 	msr	BASEPRI, r0
 80093c0:	bc09      	pop	{r0, r3}
 80093c2:	6819      	ldr	r1, [r3, #0]
 80093c4:	6808      	ldr	r0, [r1, #0]
 80093c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ca:	f01e 0f10 	tst.w	lr, #16
 80093ce:	bf08      	it	eq
 80093d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80093d4:	f380 8809 	msr	PSP, r0
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop

080093e0 <pxCurrentTCBConst>:
 80093e0:	20000430 	.word	0x20000430
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093e4:	bf00      	nop
 80093e6:	bf00      	nop

080093e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
	__asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	b672      	cpsid	i
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	b662      	cpsie	i
 8009402:	607b      	str	r3, [r7, #4]
}
 8009404:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009406:	f7ff fa3d 	bl	8008884 <xTaskIncrementTick>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d003      	beq.n	8009418 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009410:	4b06      	ldr	r3, [pc, #24]	; (800942c <SysTick_Handler+0x44>)
 8009412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	2300      	movs	r3, #0
 800941a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	f383 8811 	msr	BASEPRI, r3
}
 8009422:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009424:	bf00      	nop
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	e000ed04 	.word	0xe000ed04

08009430 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009434:	4b0b      	ldr	r3, [pc, #44]	; (8009464 <vPortSetupTimerInterrupt+0x34>)
 8009436:	2200      	movs	r2, #0
 8009438:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800943a:	4b0b      	ldr	r3, [pc, #44]	; (8009468 <vPortSetupTimerInterrupt+0x38>)
 800943c:	2200      	movs	r2, #0
 800943e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009440:	4b0a      	ldr	r3, [pc, #40]	; (800946c <vPortSetupTimerInterrupt+0x3c>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a0a      	ldr	r2, [pc, #40]	; (8009470 <vPortSetupTimerInterrupt+0x40>)
 8009446:	fba2 2303 	umull	r2, r3, r2, r3
 800944a:	099b      	lsrs	r3, r3, #6
 800944c:	4a09      	ldr	r2, [pc, #36]	; (8009474 <vPortSetupTimerInterrupt+0x44>)
 800944e:	3b01      	subs	r3, #1
 8009450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009452:	4b04      	ldr	r3, [pc, #16]	; (8009464 <vPortSetupTimerInterrupt+0x34>)
 8009454:	2207      	movs	r2, #7
 8009456:	601a      	str	r2, [r3, #0]
}
 8009458:	bf00      	nop
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	e000e010 	.word	0xe000e010
 8009468:	e000e018 	.word	0xe000e018
 800946c:	20000000 	.word	0x20000000
 8009470:	10624dd3 	.word	0x10624dd3
 8009474:	e000e014 	.word	0xe000e014

08009478 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009478:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009488 <vPortEnableVFP+0x10>
 800947c:	6801      	ldr	r1, [r0, #0]
 800947e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009482:	6001      	str	r1, [r0, #0]
 8009484:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009486:	bf00      	nop
 8009488:	e000ed88 	.word	0xe000ed88

0800948c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009492:	f3ef 8305 	mrs	r3, IPSR
 8009496:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2b0f      	cmp	r3, #15
 800949c:	d916      	bls.n	80094cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800949e:	4a19      	ldr	r2, [pc, #100]	; (8009504 <vPortValidateInterruptPriority+0x78>)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4413      	add	r3, r2
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80094a8:	4b17      	ldr	r3, [pc, #92]	; (8009508 <vPortValidateInterruptPriority+0x7c>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	7afa      	ldrb	r2, [r7, #11]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d20c      	bcs.n	80094cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	b672      	cpsid	i
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	b662      	cpsie	i
 80094c6:	607b      	str	r3, [r7, #4]
}
 80094c8:	bf00      	nop
 80094ca:	e7fe      	b.n	80094ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80094cc:	4b0f      	ldr	r3, [pc, #60]	; (800950c <vPortValidateInterruptPriority+0x80>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80094d4:	4b0e      	ldr	r3, [pc, #56]	; (8009510 <vPortValidateInterruptPriority+0x84>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d90c      	bls.n	80094f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	b672      	cpsid	i
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	b662      	cpsie	i
 80094f0:	603b      	str	r3, [r7, #0]
}
 80094f2:	bf00      	nop
 80094f4:	e7fe      	b.n	80094f4 <vPortValidateInterruptPriority+0x68>
	}
 80094f6:	bf00      	nop
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	e000e3f0 	.word	0xe000e3f0
 8009508:	2000055c 	.word	0x2000055c
 800950c:	e000ed0c 	.word	0xe000ed0c
 8009510:	20000560 	.word	0x20000560

08009514 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b08a      	sub	sp, #40	; 0x28
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800951c:	2300      	movs	r3, #0
 800951e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009520:	f7ff f904 	bl	800872c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009524:	4b5b      	ldr	r3, [pc, #364]	; (8009694 <pvPortMalloc+0x180>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800952c:	f000 f91a 	bl	8009764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009530:	4b59      	ldr	r3, [pc, #356]	; (8009698 <pvPortMalloc+0x184>)
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4013      	ands	r3, r2
 8009538:	2b00      	cmp	r3, #0
 800953a:	f040 8092 	bne.w	8009662 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d01f      	beq.n	8009584 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009544:	2208      	movs	r2, #8
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4413      	add	r3, r2
 800954a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f003 0307 	and.w	r3, r3, #7
 8009552:	2b00      	cmp	r3, #0
 8009554:	d016      	beq.n	8009584 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f023 0307 	bic.w	r3, r3, #7
 800955c:	3308      	adds	r3, #8
 800955e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f003 0307 	and.w	r3, r3, #7
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00c      	beq.n	8009584 <pvPortMalloc+0x70>
	__asm volatile
 800956a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956e:	b672      	cpsid	i
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	b662      	cpsie	i
 800957e:	617b      	str	r3, [r7, #20]
}
 8009580:	bf00      	nop
 8009582:	e7fe      	b.n	8009582 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d06b      	beq.n	8009662 <pvPortMalloc+0x14e>
 800958a:	4b44      	ldr	r3, [pc, #272]	; (800969c <pvPortMalloc+0x188>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	429a      	cmp	r2, r3
 8009592:	d866      	bhi.n	8009662 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009594:	4b42      	ldr	r3, [pc, #264]	; (80096a0 <pvPortMalloc+0x18c>)
 8009596:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009598:	4b41      	ldr	r3, [pc, #260]	; (80096a0 <pvPortMalloc+0x18c>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800959e:	e004      	b.n	80095aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d903      	bls.n	80095bc <pvPortMalloc+0xa8>
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1f1      	bne.n	80095a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095bc:	4b35      	ldr	r3, [pc, #212]	; (8009694 <pvPortMalloc+0x180>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d04d      	beq.n	8009662 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2208      	movs	r2, #8
 80095cc:	4413      	add	r3, r2
 80095ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	1ad2      	subs	r2, r2, r3
 80095e0:	2308      	movs	r3, #8
 80095e2:	005b      	lsls	r3, r3, #1
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d921      	bls.n	800962c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4413      	add	r3, r2
 80095ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	f003 0307 	and.w	r3, r3, #7
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00c      	beq.n	8009614 <pvPortMalloc+0x100>
	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	b672      	cpsid	i
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	b662      	cpsie	i
 800960e:	613b      	str	r3, [r7, #16]
}
 8009610:	bf00      	nop
 8009612:	e7fe      	b.n	8009612 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	1ad2      	subs	r2, r2, r3
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009626:	69b8      	ldr	r0, [r7, #24]
 8009628:	f000 f8fe 	bl	8009828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800962c:	4b1b      	ldr	r3, [pc, #108]	; (800969c <pvPortMalloc+0x188>)
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	4a19      	ldr	r2, [pc, #100]	; (800969c <pvPortMalloc+0x188>)
 8009638:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800963a:	4b18      	ldr	r3, [pc, #96]	; (800969c <pvPortMalloc+0x188>)
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	4b19      	ldr	r3, [pc, #100]	; (80096a4 <pvPortMalloc+0x190>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	429a      	cmp	r2, r3
 8009644:	d203      	bcs.n	800964e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009646:	4b15      	ldr	r3, [pc, #84]	; (800969c <pvPortMalloc+0x188>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a16      	ldr	r2, [pc, #88]	; (80096a4 <pvPortMalloc+0x190>)
 800964c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800964e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009650:	685a      	ldr	r2, [r3, #4]
 8009652:	4b11      	ldr	r3, [pc, #68]	; (8009698 <pvPortMalloc+0x184>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	431a      	orrs	r2, r3
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	2200      	movs	r2, #0
 8009660:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009662:	f7ff f871 	bl	8008748 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	f003 0307 	and.w	r3, r3, #7
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00c      	beq.n	800968a <pvPortMalloc+0x176>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	b672      	cpsid	i
 8009676:	f383 8811 	msr	BASEPRI, r3
 800967a:	f3bf 8f6f 	isb	sy
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	b662      	cpsie	i
 8009684:	60fb      	str	r3, [r7, #12]
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <pvPortMalloc+0x174>
	return pvReturn;
 800968a:	69fb      	ldr	r3, [r7, #28]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3728      	adds	r7, #40	; 0x28
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	2000416c 	.word	0x2000416c
 8009698:	20004178 	.word	0x20004178
 800969c:	20004170 	.word	0x20004170
 80096a0:	20004164 	.word	0x20004164
 80096a4:	20004174 	.word	0x20004174

080096a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d04c      	beq.n	8009754 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096ba:	2308      	movs	r3, #8
 80096bc:	425b      	negs	r3, r3
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	4413      	add	r3, r2
 80096c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	4b23      	ldr	r3, [pc, #140]	; (800975c <vPortFree+0xb4>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4013      	ands	r3, r2
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10c      	bne.n	80096f0 <vPortFree+0x48>
	__asm volatile
 80096d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096da:	b672      	cpsid	i
 80096dc:	f383 8811 	msr	BASEPRI, r3
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	b662      	cpsie	i
 80096ea:	60fb      	str	r3, [r7, #12]
}
 80096ec:	bf00      	nop
 80096ee:	e7fe      	b.n	80096ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00c      	beq.n	8009712 <vPortFree+0x6a>
	__asm volatile
 80096f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fc:	b672      	cpsid	i
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	b662      	cpsie	i
 800970c:	60bb      	str	r3, [r7, #8]
}
 800970e:	bf00      	nop
 8009710:	e7fe      	b.n	8009710 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	4b11      	ldr	r3, [pc, #68]	; (800975c <vPortFree+0xb4>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4013      	ands	r3, r2
 800971c:	2b00      	cmp	r3, #0
 800971e:	d019      	beq.n	8009754 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d115      	bne.n	8009754 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	4b0b      	ldr	r3, [pc, #44]	; (800975c <vPortFree+0xb4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	43db      	mvns	r3, r3
 8009732:	401a      	ands	r2, r3
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009738:	f7fe fff8 	bl	800872c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	4b07      	ldr	r3, [pc, #28]	; (8009760 <vPortFree+0xb8>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4413      	add	r3, r2
 8009746:	4a06      	ldr	r2, [pc, #24]	; (8009760 <vPortFree+0xb8>)
 8009748:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800974a:	6938      	ldr	r0, [r7, #16]
 800974c:	f000 f86c 	bl	8009828 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009750:	f7fe fffa 	bl	8008748 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009754:	bf00      	nop
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	20004178 	.word	0x20004178
 8009760:	20004170 	.word	0x20004170

08009764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800976a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800976e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009770:	4b27      	ldr	r3, [pc, #156]	; (8009810 <prvHeapInit+0xac>)
 8009772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00c      	beq.n	8009798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3307      	adds	r3, #7
 8009782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f023 0307 	bic.w	r3, r3, #7
 800978a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	4a1f      	ldr	r2, [pc, #124]	; (8009810 <prvHeapInit+0xac>)
 8009794:	4413      	add	r3, r2
 8009796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800979c:	4a1d      	ldr	r2, [pc, #116]	; (8009814 <prvHeapInit+0xb0>)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097a2:	4b1c      	ldr	r3, [pc, #112]	; (8009814 <prvHeapInit+0xb0>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	4413      	add	r3, r2
 80097ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097b0:	2208      	movs	r2, #8
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f023 0307 	bic.w	r3, r3, #7
 80097be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	4a15      	ldr	r2, [pc, #84]	; (8009818 <prvHeapInit+0xb4>)
 80097c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097c6:	4b14      	ldr	r3, [pc, #80]	; (8009818 <prvHeapInit+0xb4>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2200      	movs	r2, #0
 80097cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097ce:	4b12      	ldr	r3, [pc, #72]	; (8009818 <prvHeapInit+0xb4>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2200      	movs	r2, #0
 80097d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	1ad2      	subs	r2, r2, r3
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097e4:	4b0c      	ldr	r3, [pc, #48]	; (8009818 <prvHeapInit+0xb4>)
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	4a0a      	ldr	r2, [pc, #40]	; (800981c <prvHeapInit+0xb8>)
 80097f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	4a09      	ldr	r2, [pc, #36]	; (8009820 <prvHeapInit+0xbc>)
 80097fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097fc:	4b09      	ldr	r3, [pc, #36]	; (8009824 <prvHeapInit+0xc0>)
 80097fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009802:	601a      	str	r2, [r3, #0]
}
 8009804:	bf00      	nop
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	20000564 	.word	0x20000564
 8009814:	20004164 	.word	0x20004164
 8009818:	2000416c 	.word	0x2000416c
 800981c:	20004174 	.word	0x20004174
 8009820:	20004170 	.word	0x20004170
 8009824:	20004178 	.word	0x20004178

08009828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009830:	4b28      	ldr	r3, [pc, #160]	; (80098d4 <prvInsertBlockIntoFreeList+0xac>)
 8009832:	60fb      	str	r3, [r7, #12]
 8009834:	e002      	b.n	800983c <prvInsertBlockIntoFreeList+0x14>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	60fb      	str	r3, [r7, #12]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	429a      	cmp	r2, r3
 8009844:	d8f7      	bhi.n	8009836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	4413      	add	r3, r2
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	429a      	cmp	r2, r3
 8009856:	d108      	bne.n	800986a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	441a      	add	r2, r3
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	441a      	add	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	429a      	cmp	r2, r3
 800987c:	d118      	bne.n	80098b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	4b15      	ldr	r3, [pc, #84]	; (80098d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	429a      	cmp	r2, r3
 8009888:	d00d      	beq.n	80098a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	441a      	add	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	e008      	b.n	80098b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098a6:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <prvInsertBlockIntoFreeList+0xb0>)
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	e003      	b.n	80098b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d002      	beq.n	80098c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098c6:	bf00      	nop
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	20004164 	.word	0x20004164
 80098d8:	2000416c 	.word	0x2000416c

080098dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80098e0:	2200      	movs	r2, #0
 80098e2:	4912      	ldr	r1, [pc, #72]	; (800992c <MX_USB_DEVICE_Init+0x50>)
 80098e4:	4812      	ldr	r0, [pc, #72]	; (8009930 <MX_USB_DEVICE_Init+0x54>)
 80098e6:	f7fc fca7 	bl	8006238 <USBD_Init>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80098f0:	f7f7 f8b3 	bl	8000a5a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80098f4:	490f      	ldr	r1, [pc, #60]	; (8009934 <MX_USB_DEVICE_Init+0x58>)
 80098f6:	480e      	ldr	r0, [pc, #56]	; (8009930 <MX_USB_DEVICE_Init+0x54>)
 80098f8:	f7fc fcce 	bl	8006298 <USBD_RegisterClass>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009902:	f7f7 f8aa 	bl	8000a5a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009906:	490c      	ldr	r1, [pc, #48]	; (8009938 <MX_USB_DEVICE_Init+0x5c>)
 8009908:	4809      	ldr	r0, [pc, #36]	; (8009930 <MX_USB_DEVICE_Init+0x54>)
 800990a:	f7fc fbc5 	bl	8006098 <USBD_CDC_RegisterInterface>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009914:	f7f7 f8a1 	bl	8000a5a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009918:	4805      	ldr	r0, [pc, #20]	; (8009930 <MX_USB_DEVICE_Init+0x54>)
 800991a:	f7fc fcf3 	bl	8006304 <USBD_Start>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d001      	beq.n	8009928 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009924:	f7f7 f899 	bl	8000a5a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009928:	bf00      	nop
 800992a:	bd80      	pop	{r7, pc}
 800992c:	200000b0 	.word	0x200000b0
 8009930:	2000417c 	.word	0x2000417c
 8009934:	20000018 	.word	0x20000018
 8009938:	2000009c 	.word	0x2000009c

0800993c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009940:	2200      	movs	r2, #0
 8009942:	4905      	ldr	r1, [pc, #20]	; (8009958 <CDC_Init_FS+0x1c>)
 8009944:	4805      	ldr	r0, [pc, #20]	; (800995c <CDC_Init_FS+0x20>)
 8009946:	f7fc fbc1 	bl	80060cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800994a:	4905      	ldr	r1, [pc, #20]	; (8009960 <CDC_Init_FS+0x24>)
 800994c:	4803      	ldr	r0, [pc, #12]	; (800995c <CDC_Init_FS+0x20>)
 800994e:	f7fc fbdf 	bl	8006110 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009952:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009954:	4618      	mov	r0, r3
 8009956:	bd80      	pop	{r7, pc}
 8009958:	20004c58 	.word	0x20004c58
 800995c:	2000417c 	.word	0x2000417c
 8009960:	20004458 	.word	0x20004458

08009964 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009964:	b480      	push	{r7}
 8009966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009968:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800996a:	4618      	mov	r0, r3
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	4603      	mov	r3, r0
 800997c:	6039      	str	r1, [r7, #0]
 800997e:	71fb      	strb	r3, [r7, #7]
 8009980:	4613      	mov	r3, r2
 8009982:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009984:	79fb      	ldrb	r3, [r7, #7]
 8009986:	2b23      	cmp	r3, #35	; 0x23
 8009988:	d84a      	bhi.n	8009a20 <CDC_Control_FS+0xac>
 800998a:	a201      	add	r2, pc, #4	; (adr r2, 8009990 <CDC_Control_FS+0x1c>)
 800998c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009990:	08009a21 	.word	0x08009a21
 8009994:	08009a21 	.word	0x08009a21
 8009998:	08009a21 	.word	0x08009a21
 800999c:	08009a21 	.word	0x08009a21
 80099a0:	08009a21 	.word	0x08009a21
 80099a4:	08009a21 	.word	0x08009a21
 80099a8:	08009a21 	.word	0x08009a21
 80099ac:	08009a21 	.word	0x08009a21
 80099b0:	08009a21 	.word	0x08009a21
 80099b4:	08009a21 	.word	0x08009a21
 80099b8:	08009a21 	.word	0x08009a21
 80099bc:	08009a21 	.word	0x08009a21
 80099c0:	08009a21 	.word	0x08009a21
 80099c4:	08009a21 	.word	0x08009a21
 80099c8:	08009a21 	.word	0x08009a21
 80099cc:	08009a21 	.word	0x08009a21
 80099d0:	08009a21 	.word	0x08009a21
 80099d4:	08009a21 	.word	0x08009a21
 80099d8:	08009a21 	.word	0x08009a21
 80099dc:	08009a21 	.word	0x08009a21
 80099e0:	08009a21 	.word	0x08009a21
 80099e4:	08009a21 	.word	0x08009a21
 80099e8:	08009a21 	.word	0x08009a21
 80099ec:	08009a21 	.word	0x08009a21
 80099f0:	08009a21 	.word	0x08009a21
 80099f4:	08009a21 	.word	0x08009a21
 80099f8:	08009a21 	.word	0x08009a21
 80099fc:	08009a21 	.word	0x08009a21
 8009a00:	08009a21 	.word	0x08009a21
 8009a04:	08009a21 	.word	0x08009a21
 8009a08:	08009a21 	.word	0x08009a21
 8009a0c:	08009a21 	.word	0x08009a21
 8009a10:	08009a21 	.word	0x08009a21
 8009a14:	08009a21 	.word	0x08009a21
 8009a18:	08009a21 	.word	0x08009a21
 8009a1c:	08009a21 	.word	0x08009a21
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a20:	bf00      	nop
  }

  return (USBD_OK);
 8009a22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a3a:	6879      	ldr	r1, [r7, #4]
 8009a3c:	4816      	ldr	r0, [pc, #88]	; (8009a98 <CDC_Receive_FS+0x68>)
 8009a3e:	f7fc fb67 	bl	8006110 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a42:	4815      	ldr	r0, [pc, #84]	; (8009a98 <CDC_Receive_FS+0x68>)
 8009a44:	f7fc fbc2 	bl	80061cc <USBD_CDC_ReceivePacket>

  BaseType_t xSchedulerChanged = pdFALSE;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	60bb      	str	r3, [r7, #8]
  for (uint32_t i=0; i<*Len; i++) {
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	e00c      	b.n	8009a6c <CDC_Receive_FS+0x3c>
    xQueueSendFromISR(vcom_rx_queueHandle, &Buf[i], &xSchedulerChanged);
 8009a52:	4b12      	ldr	r3, [pc, #72]	; (8009a9c <CDC_Receive_FS+0x6c>)
 8009a54:	6818      	ldr	r0, [r3, #0]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	18d1      	adds	r1, r2, r3
 8009a5c:	f107 0208 	add.w	r2, r7, #8
 8009a60:	2300      	movs	r3, #0
 8009a62:	f7fe f9ae 	bl	8007dc2 <xQueueGenericSendFromISR>
  for (uint32_t i=0; i<*Len; i++) {
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	60fb      	str	r3, [r7, #12]
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d3ed      	bcc.n	8009a52 <CDC_Receive_FS+0x22>
  }
  portYIELD_FROM_ISR( xSchedulerChanged );
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d007      	beq.n	8009a8c <CDC_Receive_FS+0x5c>
 8009a7c:	4b08      	ldr	r3, [pc, #32]	; (8009aa0 <CDC_Receive_FS+0x70>)
 8009a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a82:	601a      	str	r2, [r3, #0]
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	f3bf 8f6f 	isb	sy

  return (USBD_OK);
 8009a8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	2000417c 	.word	0x2000417c
 8009a9c:	200003d4 	.word	0x200003d4
 8009aa0:	e000ed04 	.word	0xe000ed04

08009aa4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	460b      	mov	r3, r1
 8009aae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009ab4:	4b0d      	ldr	r3, [pc, #52]	; (8009aec <CDC_Transmit_FS+0x48>)
 8009ab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009aba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e00b      	b.n	8009ae2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009aca:	887b      	ldrh	r3, [r7, #2]
 8009acc:	461a      	mov	r2, r3
 8009ace:	6879      	ldr	r1, [r7, #4]
 8009ad0:	4806      	ldr	r0, [pc, #24]	; (8009aec <CDC_Transmit_FS+0x48>)
 8009ad2:	f7fc fafb 	bl	80060cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009ad6:	4805      	ldr	r0, [pc, #20]	; (8009aec <CDC_Transmit_FS+0x48>)
 8009ad8:	f7fc fb38 	bl	800614c <USBD_CDC_TransmitPacket>
 8009adc:	4603      	mov	r3, r0
 8009ade:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	2000417c 	.word	0x2000417c

08009af0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b087      	sub	sp, #28
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	4613      	mov	r3, r2
 8009afc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	371c      	adds	r7, #28
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
	...

08009b14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	6039      	str	r1, [r7, #0]
 8009b1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2212      	movs	r2, #18
 8009b24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b26:	4b03      	ldr	r3, [pc, #12]	; (8009b34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	200000d0 	.word	0x200000d0

08009b38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	4603      	mov	r3, r0
 8009b40:	6039      	str	r1, [r7, #0]
 8009b42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	2204      	movs	r2, #4
 8009b48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b4a:	4b03      	ldr	r3, [pc, #12]	; (8009b58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr
 8009b58:	200000f0 	.word	0x200000f0

08009b5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	4603      	mov	r3, r0
 8009b64:	6039      	str	r1, [r7, #0]
 8009b66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b68:	79fb      	ldrb	r3, [r7, #7]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d105      	bne.n	8009b7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	4907      	ldr	r1, [pc, #28]	; (8009b90 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b72:	4808      	ldr	r0, [pc, #32]	; (8009b94 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b74:	f7fd fd9c 	bl	80076b0 <USBD_GetString>
 8009b78:	e004      	b.n	8009b84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	4904      	ldr	r1, [pc, #16]	; (8009b90 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b7e:	4805      	ldr	r0, [pc, #20]	; (8009b94 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b80:	f7fd fd96 	bl	80076b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b84:	4b02      	ldr	r3, [pc, #8]	; (8009b90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	20005458 	.word	0x20005458
 8009b94:	0800a77c 	.word	0x0800a77c

08009b98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	6039      	str	r1, [r7, #0]
 8009ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ba4:	683a      	ldr	r2, [r7, #0]
 8009ba6:	4904      	ldr	r1, [pc, #16]	; (8009bb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ba8:	4804      	ldr	r0, [pc, #16]	; (8009bbc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009baa:	f7fd fd81 	bl	80076b0 <USBD_GetString>
  return USBD_StrDesc;
 8009bae:	4b02      	ldr	r3, [pc, #8]	; (8009bb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	20005458 	.word	0x20005458
 8009bbc:	0800a794 	.word	0x0800a794

08009bc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	6039      	str	r1, [r7, #0]
 8009bca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	221a      	movs	r2, #26
 8009bd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009bd2:	f000 f855 	bl	8009c80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009bd6:	4b02      	ldr	r3, [pc, #8]	; (8009be0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	200000f4 	.word	0x200000f4

08009be4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	4603      	mov	r3, r0
 8009bec:	6039      	str	r1, [r7, #0]
 8009bee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009bf0:	79fb      	ldrb	r3, [r7, #7]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d105      	bne.n	8009c02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	4907      	ldr	r1, [pc, #28]	; (8009c18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bfa:	4808      	ldr	r0, [pc, #32]	; (8009c1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bfc:	f7fd fd58 	bl	80076b0 <USBD_GetString>
 8009c00:	e004      	b.n	8009c0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	4904      	ldr	r1, [pc, #16]	; (8009c18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c06:	4805      	ldr	r0, [pc, #20]	; (8009c1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c08:	f7fd fd52 	bl	80076b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c0c:	4b02      	ldr	r3, [pc, #8]	; (8009c18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	20005458 	.word	0x20005458
 8009c1c:	0800a7a8 	.word	0x0800a7a8

08009c20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	4603      	mov	r3, r0
 8009c28:	6039      	str	r1, [r7, #0]
 8009c2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d105      	bne.n	8009c3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	4907      	ldr	r1, [pc, #28]	; (8009c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c36:	4808      	ldr	r0, [pc, #32]	; (8009c58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c38:	f7fd fd3a 	bl	80076b0 <USBD_GetString>
 8009c3c:	e004      	b.n	8009c48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	4904      	ldr	r1, [pc, #16]	; (8009c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c42:	4805      	ldr	r0, [pc, #20]	; (8009c58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c44:	f7fd fd34 	bl	80076b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c48:	4b02      	ldr	r3, [pc, #8]	; (8009c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	20005458 	.word	0x20005458
 8009c58:	0800a7b4 	.word	0x0800a7b4

08009c5c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	4603      	mov	r3, r0
 8009c64:	6039      	str	r1, [r7, #0]
 8009c66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	220c      	movs	r2, #12
 8009c6c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009c6e:	4b03      	ldr	r3, [pc, #12]	; (8009c7c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	200000e4 	.word	0x200000e4

08009c80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c86:	4b0f      	ldr	r3, [pc, #60]	; (8009cc4 <Get_SerialNum+0x44>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c8c:	4b0e      	ldr	r3, [pc, #56]	; (8009cc8 <Get_SerialNum+0x48>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c92:	4b0e      	ldr	r3, [pc, #56]	; (8009ccc <Get_SerialNum+0x4c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d009      	beq.n	8009cba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ca6:	2208      	movs	r2, #8
 8009ca8:	4909      	ldr	r1, [pc, #36]	; (8009cd0 <Get_SerialNum+0x50>)
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f000 f814 	bl	8009cd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009cb0:	2204      	movs	r2, #4
 8009cb2:	4908      	ldr	r1, [pc, #32]	; (8009cd4 <Get_SerialNum+0x54>)
 8009cb4:	68b8      	ldr	r0, [r7, #8]
 8009cb6:	f000 f80f 	bl	8009cd8 <IntToUnicode>
  }
}
 8009cba:	bf00      	nop
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	1ff0f420 	.word	0x1ff0f420
 8009cc8:	1ff0f424 	.word	0x1ff0f424
 8009ccc:	1ff0f428 	.word	0x1ff0f428
 8009cd0:	200000f6 	.word	0x200000f6
 8009cd4:	20000106 	.word	0x20000106

08009cd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009cea:	2300      	movs	r3, #0
 8009cec:	75fb      	strb	r3, [r7, #23]
 8009cee:	e027      	b.n	8009d40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	0f1b      	lsrs	r3, r3, #28
 8009cf4:	2b09      	cmp	r3, #9
 8009cf6:	d80b      	bhi.n	8009d10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	0f1b      	lsrs	r3, r3, #28
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	7dfb      	ldrb	r3, [r7, #23]
 8009d00:	005b      	lsls	r3, r3, #1
 8009d02:	4619      	mov	r1, r3
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	440b      	add	r3, r1
 8009d08:	3230      	adds	r2, #48	; 0x30
 8009d0a:	b2d2      	uxtb	r2, r2
 8009d0c:	701a      	strb	r2, [r3, #0]
 8009d0e:	e00a      	b.n	8009d26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	0f1b      	lsrs	r3, r3, #28
 8009d14:	b2da      	uxtb	r2, r3
 8009d16:	7dfb      	ldrb	r3, [r7, #23]
 8009d18:	005b      	lsls	r3, r3, #1
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	440b      	add	r3, r1
 8009d20:	3237      	adds	r2, #55	; 0x37
 8009d22:	b2d2      	uxtb	r2, r2
 8009d24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	011b      	lsls	r3, r3, #4
 8009d2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d2c:	7dfb      	ldrb	r3, [r7, #23]
 8009d2e:	005b      	lsls	r3, r3, #1
 8009d30:	3301      	adds	r3, #1
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	4413      	add	r3, r2
 8009d36:	2200      	movs	r2, #0
 8009d38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	75fb      	strb	r3, [r7, #23]
 8009d40:	7dfa      	ldrb	r2, [r7, #23]
 8009d42:	79fb      	ldrb	r3, [r7, #7]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d3d3      	bcc.n	8009cf0 <IntToUnicode+0x18>
  }
}
 8009d48:	bf00      	nop
 8009d4a:	bf00      	nop
 8009d4c:	371c      	adds	r7, #28
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
	...

08009d58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b0ac      	sub	sp, #176	; 0xb0
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009d64:	2200      	movs	r2, #0
 8009d66:	601a      	str	r2, [r3, #0]
 8009d68:	605a      	str	r2, [r3, #4]
 8009d6a:	609a      	str	r2, [r3, #8]
 8009d6c:	60da      	str	r2, [r3, #12]
 8009d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009d70:	f107 0318 	add.w	r3, r7, #24
 8009d74:	2284      	movs	r2, #132	; 0x84
 8009d76:	2100      	movs	r1, #0
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 fc27 	bl	800a5cc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d86:	d161      	bne.n	8009e4c <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009d88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009d8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009d94:	f107 0318 	add.w	r3, r7, #24
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7f9 fa61 	bl	8003260 <HAL_RCCEx_PeriphCLKConfig>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8009da4:	f7f6 fe59 	bl	8000a5a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009da8:	4b2a      	ldr	r3, [pc, #168]	; (8009e54 <HAL_PCD_MspInit+0xfc>)
 8009daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dac:	4a29      	ldr	r2, [pc, #164]	; (8009e54 <HAL_PCD_MspInit+0xfc>)
 8009dae:	f043 0301 	orr.w	r3, r3, #1
 8009db2:	6313      	str	r3, [r2, #48]	; 0x30
 8009db4:	4b27      	ldr	r3, [pc, #156]	; (8009e54 <HAL_PCD_MspInit+0xfc>)
 8009db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db8:	f003 0301 	and.w	r3, r3, #1
 8009dbc:	617b      	str	r3, [r7, #20]
 8009dbe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8009dc0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8009dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dc8:	2302      	movs	r3, #2
 8009dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009dda:	230a      	movs	r3, #10
 8009ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009de0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009de4:	4619      	mov	r1, r3
 8009de6:	481c      	ldr	r0, [pc, #112]	; (8009e58 <HAL_PCD_MspInit+0x100>)
 8009de8:	f7f7 f8ac 	bl	8000f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009df4:	2300      	movs	r3, #0
 8009df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009e00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009e04:	4619      	mov	r1, r3
 8009e06:	4814      	ldr	r0, [pc, #80]	; (8009e58 <HAL_PCD_MspInit+0x100>)
 8009e08:	f7f7 f89c 	bl	8000f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e0c:	4b11      	ldr	r3, [pc, #68]	; (8009e54 <HAL_PCD_MspInit+0xfc>)
 8009e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e10:	4a10      	ldr	r2, [pc, #64]	; (8009e54 <HAL_PCD_MspInit+0xfc>)
 8009e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e16:	6353      	str	r3, [r2, #52]	; 0x34
 8009e18:	4b0e      	ldr	r3, [pc, #56]	; (8009e54 <HAL_PCD_MspInit+0xfc>)
 8009e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e20:	613b      	str	r3, [r7, #16]
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	4b0b      	ldr	r3, [pc, #44]	; (8009e54 <HAL_PCD_MspInit+0xfc>)
 8009e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e28:	4a0a      	ldr	r2, [pc, #40]	; (8009e54 <HAL_PCD_MspInit+0xfc>)
 8009e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e2e:	6453      	str	r3, [r2, #68]	; 0x44
 8009e30:	4b08      	ldr	r3, [pc, #32]	; (8009e54 <HAL_PCD_MspInit+0xfc>)
 8009e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e38:	60fb      	str	r3, [r7, #12]
 8009e3a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2105      	movs	r1, #5
 8009e40:	2043      	movs	r0, #67	; 0x43
 8009e42:	f7f7 f855 	bl	8000ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009e46:	2043      	movs	r0, #67	; 0x43
 8009e48:	f7f7 f86e 	bl	8000f28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009e4c:	bf00      	nop
 8009e4e:	37b0      	adds	r7, #176	; 0xb0
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	40023800 	.word	0x40023800
 8009e58:	40020000 	.word	0x40020000

08009e5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009e70:	4619      	mov	r1, r3
 8009e72:	4610      	mov	r0, r2
 8009e74:	f7fc fa93 	bl	800639e <USBD_LL_SetupStage>
}
 8009e78:	bf00      	nop
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	460b      	mov	r3, r1
 8009e8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8009e92:	78fa      	ldrb	r2, [r7, #3]
 8009e94:	6879      	ldr	r1, [r7, #4]
 8009e96:	4613      	mov	r3, r2
 8009e98:	00db      	lsls	r3, r3, #3
 8009e9a:	4413      	add	r3, r2
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	440b      	add	r3, r1
 8009ea0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	78fb      	ldrb	r3, [r7, #3]
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	f7fc facd 	bl	8006448 <USBD_LL_DataOutStage>
}
 8009eae:	bf00      	nop
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b082      	sub	sp, #8
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8009ec8:	78fa      	ldrb	r2, [r7, #3]
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	4413      	add	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	334c      	adds	r3, #76	; 0x4c
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	78fb      	ldrb	r3, [r7, #3]
 8009edc:	4619      	mov	r1, r3
 8009ede:	f7fc fb66 	bl	80065ae <USBD_LL_DataInStage>
}
 8009ee2:	bf00      	nop
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b082      	sub	sp, #8
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fc fc9a 	bl	8006832 <USBD_LL_SOF>
}
 8009efe:	bf00      	nop
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b084      	sub	sp, #16
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d102      	bne.n	8009f20 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	73fb      	strb	r3, [r7, #15]
 8009f1e:	e008      	b.n	8009f32 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d102      	bne.n	8009f2e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	73fb      	strb	r3, [r7, #15]
 8009f2c:	e001      	b.n	8009f32 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009f2e:	f7f6 fd94 	bl	8000a5a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009f38:	7bfa      	ldrb	r2, [r7, #15]
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fc fc3a 	bl	80067b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fc fbe2 	bl	8006712 <USBD_LL_Reset>
}
 8009f4e:	bf00      	nop
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
	...

08009f58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fc fc35 	bl	80067d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	6812      	ldr	r2, [r2, #0]
 8009f7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f7e:	f043 0301 	orr.w	r3, r3, #1
 8009f82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d005      	beq.n	8009f98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f8c:	4b04      	ldr	r3, [pc, #16]	; (8009fa0 <HAL_PCD_SuspendCallback+0x48>)
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	4a03      	ldr	r2, [pc, #12]	; (8009fa0 <HAL_PCD_SuspendCallback+0x48>)
 8009f92:	f043 0306 	orr.w	r3, r3, #6
 8009f96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f98:	bf00      	nop
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	e000ed00 	.word	0xe000ed00

08009fa4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fc fc25 	bl	8006802 <USBD_LL_Resume>
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009fd2:	78fa      	ldrb	r2, [r7, #3]
 8009fd4:	4611      	mov	r1, r2
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fc fc7d 	bl	80068d6 <USBD_LL_IsoOUTIncomplete>
}
 8009fdc:	bf00      	nop
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	460b      	mov	r3, r1
 8009fee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009ff6:	78fa      	ldrb	r2, [r7, #3]
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fc fc39 	bl	8006872 <USBD_LL_IsoINIncomplete>
}
 800a000:	bf00      	nop
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a016:	4618      	mov	r0, r3
 800a018:	f7fc fc8f 	bl	800693a <USBD_LL_DevConnected>
}
 800a01c:	bf00      	nop
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a032:	4618      	mov	r0, r3
 800a034:	f7fc fc8c 	bl	8006950 <USBD_LL_DevDisconnected>
}
 800a038:	bf00      	nop
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d13c      	bne.n	800a0ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a050:	4a20      	ldr	r2, [pc, #128]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a1e      	ldr	r2, [pc, #120]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a05c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a060:	4b1c      	ldr	r3, [pc, #112]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a062:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a066:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a068:	4b1a      	ldr	r3, [pc, #104]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a06a:	2206      	movs	r2, #6
 800a06c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a06e:	4b19      	ldr	r3, [pc, #100]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a070:	2202      	movs	r2, #2
 800a072:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a074:	4b17      	ldr	r3, [pc, #92]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a076:	2200      	movs	r2, #0
 800a078:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a07a:	4b16      	ldr	r3, [pc, #88]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a07c:	2202      	movs	r2, #2
 800a07e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a080:	4b14      	ldr	r3, [pc, #80]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a082:	2201      	movs	r2, #1
 800a084:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a086:	4b13      	ldr	r3, [pc, #76]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a088:	2200      	movs	r2, #0
 800a08a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a08c:	4b11      	ldr	r3, [pc, #68]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a08e:	2200      	movs	r2, #0
 800a090:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a092:	4b10      	ldr	r3, [pc, #64]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a094:	2201      	movs	r2, #1
 800a096:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a098:	4b0e      	ldr	r3, [pc, #56]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a09e:	480d      	ldr	r0, [pc, #52]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a0a0:	f7f7 f92d 	bl	80012fe <HAL_PCD_Init>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a0aa:	f7f6 fcd6 	bl	8000a5a <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a0ae:	2180      	movs	r1, #128	; 0x80
 800a0b0:	4808      	ldr	r0, [pc, #32]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a0b2:	f7f8 fba8 	bl	8002806 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a0b6:	2240      	movs	r2, #64	; 0x40
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	4806      	ldr	r0, [pc, #24]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a0bc:	f7f8 fb5c 	bl	8002778 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a0c0:	2280      	movs	r2, #128	; 0x80
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	4803      	ldr	r0, [pc, #12]	; (800a0d4 <USBD_LL_Init+0x94>)
 800a0c6:	f7f8 fb57 	bl	8002778 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	20005658 	.word	0x20005658

0800a0d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7f7 fa29 	bl	8001546 <HAL_PCD_Start>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 f97e 	bl	800a3fc <USBD_Get_USB_Status>
 800a100:	4603      	mov	r3, r0
 800a102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a104:	7bbb      	ldrb	r3, [r7, #14]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b084      	sub	sp, #16
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	4608      	mov	r0, r1
 800a118:	4611      	mov	r1, r2
 800a11a:	461a      	mov	r2, r3
 800a11c:	4603      	mov	r3, r0
 800a11e:	70fb      	strb	r3, [r7, #3]
 800a120:	460b      	mov	r3, r1
 800a122:	70bb      	strb	r3, [r7, #2]
 800a124:	4613      	mov	r3, r2
 800a126:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a136:	78bb      	ldrb	r3, [r7, #2]
 800a138:	883a      	ldrh	r2, [r7, #0]
 800a13a:	78f9      	ldrb	r1, [r7, #3]
 800a13c:	f7f7 ff16 	bl	8001f6c <HAL_PCD_EP_Open>
 800a140:	4603      	mov	r3, r0
 800a142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	4618      	mov	r0, r3
 800a148:	f000 f958 	bl	800a3fc <USBD_Get_USB_Status>
 800a14c:	4603      	mov	r3, r0
 800a14e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a150:	7bbb      	ldrb	r3, [r7, #14]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b084      	sub	sp, #16
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	460b      	mov	r3, r1
 800a164:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a174:	78fa      	ldrb	r2, [r7, #3]
 800a176:	4611      	mov	r1, r2
 800a178:	4618      	mov	r0, r3
 800a17a:	f7f7 ff5f 	bl	800203c <HAL_PCD_EP_Close>
 800a17e:	4603      	mov	r3, r0
 800a180:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a182:	7bfb      	ldrb	r3, [r7, #15]
 800a184:	4618      	mov	r0, r3
 800a186:	f000 f939 	bl	800a3fc <USBD_Get_USB_Status>
 800a18a:	4603      	mov	r3, r0
 800a18c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a18e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1b2:	78fa      	ldrb	r2, [r7, #3]
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7f8 f837 	bl	800222a <HAL_PCD_EP_SetStall>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f000 f91a 	bl	800a3fc <USBD_Get_USB_Status>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b084      	sub	sp, #16
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
 800a1de:	460b      	mov	r3, r1
 800a1e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1f0:	78fa      	ldrb	r2, [r7, #3]
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7f8 f87c 	bl	80022f2 <HAL_PCD_EP_ClrStall>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1fe:	7bfb      	ldrb	r3, [r7, #15]
 800a200:	4618      	mov	r0, r3
 800a202:	f000 f8fb 	bl	800a3fc <USBD_Get_USB_Status>
 800a206:	4603      	mov	r3, r0
 800a208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a20a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	460b      	mov	r3, r1
 800a21e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a226:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a228:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	da0b      	bge.n	800a248 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a230:	78fb      	ldrb	r3, [r7, #3]
 800a232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a236:	68f9      	ldr	r1, [r7, #12]
 800a238:	4613      	mov	r3, r2
 800a23a:	00db      	lsls	r3, r3, #3
 800a23c:	4413      	add	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	440b      	add	r3, r1
 800a242:	333e      	adds	r3, #62	; 0x3e
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	e00b      	b.n	800a260 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a248:	78fb      	ldrb	r3, [r7, #3]
 800a24a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a24e:	68f9      	ldr	r1, [r7, #12]
 800a250:	4613      	mov	r3, r2
 800a252:	00db      	lsls	r3, r3, #3
 800a254:	4413      	add	r3, r2
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	440b      	add	r3, r1
 800a25a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a25e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a260:	4618      	mov	r0, r3
 800a262:	3714      	adds	r7, #20
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a286:	78fa      	ldrb	r2, [r7, #3]
 800a288:	4611      	mov	r1, r2
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7f7 fe49 	bl	8001f22 <HAL_PCD_SetAddress>
 800a290:	4603      	mov	r3, r0
 800a292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a294:	7bfb      	ldrb	r3, [r7, #15]
 800a296:	4618      	mov	r0, r3
 800a298:	f000 f8b0 	bl	800a3fc <USBD_Get_USB_Status>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b086      	sub	sp, #24
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	60f8      	str	r0, [r7, #12]
 800a2b2:	607a      	str	r2, [r7, #4]
 800a2b4:	603b      	str	r3, [r7, #0]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a2c8:	7af9      	ldrb	r1, [r7, #11]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	f7f7 ff62 	bl	8002196 <HAL_PCD_EP_Transmit>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2d6:	7dfb      	ldrb	r3, [r7, #23]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f000 f88f 	bl	800a3fc <USBD_Get_USB_Status>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3718      	adds	r7, #24
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	607a      	str	r2, [r7, #4]
 800a2f6:	603b      	str	r3, [r7, #0]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a30a:	7af9      	ldrb	r1, [r7, #11]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	f7f7 fede 	bl	80020d0 <HAL_PCD_EP_Receive>
 800a314:	4603      	mov	r3, r0
 800a316:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a318:	7dfb      	ldrb	r3, [r7, #23]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f000 f86e 	bl	800a3fc <USBD_Get_USB_Status>
 800a320:	4603      	mov	r3, r0
 800a322:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a324:	7dbb      	ldrb	r3, [r7, #22]
}
 800a326:	4618      	mov	r0, r3
 800a328:	3718      	adds	r7, #24
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	460b      	mov	r3, r1
 800a338:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a340:	78fa      	ldrb	r2, [r7, #3]
 800a342:	4611      	mov	r1, r2
 800a344:	4618      	mov	r0, r3
 800a346:	f7f7 ff0e 	bl	8002166 <HAL_PCD_EP_GetRxCount>
 800a34a:	4603      	mov	r3, r0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	460b      	mov	r3, r1
 800a35e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a360:	78fb      	ldrb	r3, [r7, #3]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d002      	beq.n	800a36c <HAL_PCDEx_LPM_Callback+0x18>
 800a366:	2b01      	cmp	r3, #1
 800a368:	d01f      	beq.n	800a3aa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a36a:	e03b      	b.n	800a3e4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6a1b      	ldr	r3, [r3, #32]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d007      	beq.n	800a384 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a374:	f000 f83c 	bl	800a3f0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a378:	4b1c      	ldr	r3, [pc, #112]	; (800a3ec <HAL_PCDEx_LPM_Callback+0x98>)
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	4a1b      	ldr	r2, [pc, #108]	; (800a3ec <HAL_PCDEx_LPM_Callback+0x98>)
 800a37e:	f023 0306 	bic.w	r3, r3, #6
 800a382:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	6812      	ldr	r2, [r2, #0]
 800a392:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a396:	f023 0301 	bic.w	r3, r3, #1
 800a39a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fc fa2d 	bl	8006802 <USBD_LL_Resume>
    break;
 800a3a8:	e01c      	b.n	800a3e4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	6812      	ldr	r2, [r2, #0]
 800a3b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3bc:	f043 0301 	orr.w	r3, r3, #1
 800a3c0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fc fa04 	bl	80067d6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d005      	beq.n	800a3e2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3d6:	4b05      	ldr	r3, [pc, #20]	; (800a3ec <HAL_PCDEx_LPM_Callback+0x98>)
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	4a04      	ldr	r2, [pc, #16]	; (800a3ec <HAL_PCDEx_LPM_Callback+0x98>)
 800a3dc:	f043 0306 	orr.w	r3, r3, #6
 800a3e0:	6113      	str	r3, [r2, #16]
    break;
 800a3e2:	bf00      	nop
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	e000ed00 	.word	0xe000ed00

0800a3f0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a3f4:	f7f6 f8e0 	bl	80005b8 <SystemClock_Config>
}
 800a3f8:	bf00      	nop
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a406:	2300      	movs	r3, #0
 800a408:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a40a:	79fb      	ldrb	r3, [r7, #7]
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d817      	bhi.n	800a440 <USBD_Get_USB_Status+0x44>
 800a410:	a201      	add	r2, pc, #4	; (adr r2, 800a418 <USBD_Get_USB_Status+0x1c>)
 800a412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a416:	bf00      	nop
 800a418:	0800a429 	.word	0x0800a429
 800a41c:	0800a42f 	.word	0x0800a42f
 800a420:	0800a435 	.word	0x0800a435
 800a424:	0800a43b 	.word	0x0800a43b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	73fb      	strb	r3, [r7, #15]
    break;
 800a42c:	e00b      	b.n	800a446 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a42e:	2303      	movs	r3, #3
 800a430:	73fb      	strb	r3, [r7, #15]
    break;
 800a432:	e008      	b.n	800a446 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a434:	2301      	movs	r3, #1
 800a436:	73fb      	strb	r3, [r7, #15]
    break;
 800a438:	e005      	b.n	800a446 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a43a:	2303      	movs	r3, #3
 800a43c:	73fb      	strb	r3, [r7, #15]
    break;
 800a43e:	e002      	b.n	800a446 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a440:	2303      	movs	r3, #3
 800a442:	73fb      	strb	r3, [r7, #15]
    break;
 800a444:	bf00      	nop
  }
  return usb_status;
 800a446:	7bfb      	ldrb	r3, [r7, #15]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <malloc>:
 800a454:	4b02      	ldr	r3, [pc, #8]	; (800a460 <malloc+0xc>)
 800a456:	4601      	mov	r1, r0
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	f000 b82b 	b.w	800a4b4 <_malloc_r>
 800a45e:	bf00      	nop
 800a460:	2000015c 	.word	0x2000015c

0800a464 <free>:
 800a464:	4b02      	ldr	r3, [pc, #8]	; (800a470 <free+0xc>)
 800a466:	4601      	mov	r1, r0
 800a468:	6818      	ldr	r0, [r3, #0]
 800a46a:	f000 b901 	b.w	800a670 <_free_r>
 800a46e:	bf00      	nop
 800a470:	2000015c 	.word	0x2000015c

0800a474 <sbrk_aligned>:
 800a474:	b570      	push	{r4, r5, r6, lr}
 800a476:	4e0e      	ldr	r6, [pc, #56]	; (800a4b0 <sbrk_aligned+0x3c>)
 800a478:	460c      	mov	r4, r1
 800a47a:	6831      	ldr	r1, [r6, #0]
 800a47c:	4605      	mov	r5, r0
 800a47e:	b911      	cbnz	r1, 800a486 <sbrk_aligned+0x12>
 800a480:	f000 f8ac 	bl	800a5dc <_sbrk_r>
 800a484:	6030      	str	r0, [r6, #0]
 800a486:	4621      	mov	r1, r4
 800a488:	4628      	mov	r0, r5
 800a48a:	f000 f8a7 	bl	800a5dc <_sbrk_r>
 800a48e:	1c43      	adds	r3, r0, #1
 800a490:	d00a      	beq.n	800a4a8 <sbrk_aligned+0x34>
 800a492:	1cc4      	adds	r4, r0, #3
 800a494:	f024 0403 	bic.w	r4, r4, #3
 800a498:	42a0      	cmp	r0, r4
 800a49a:	d007      	beq.n	800a4ac <sbrk_aligned+0x38>
 800a49c:	1a21      	subs	r1, r4, r0
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f000 f89c 	bl	800a5dc <_sbrk_r>
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	d101      	bne.n	800a4ac <sbrk_aligned+0x38>
 800a4a8:	f04f 34ff 	mov.w	r4, #4294967295
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	bd70      	pop	{r4, r5, r6, pc}
 800a4b0:	20005b64 	.word	0x20005b64

0800a4b4 <_malloc_r>:
 800a4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b8:	1ccd      	adds	r5, r1, #3
 800a4ba:	f025 0503 	bic.w	r5, r5, #3
 800a4be:	3508      	adds	r5, #8
 800a4c0:	2d0c      	cmp	r5, #12
 800a4c2:	bf38      	it	cc
 800a4c4:	250c      	movcc	r5, #12
 800a4c6:	2d00      	cmp	r5, #0
 800a4c8:	4607      	mov	r7, r0
 800a4ca:	db01      	blt.n	800a4d0 <_malloc_r+0x1c>
 800a4cc:	42a9      	cmp	r1, r5
 800a4ce:	d905      	bls.n	800a4dc <_malloc_r+0x28>
 800a4d0:	230c      	movs	r3, #12
 800a4d2:	603b      	str	r3, [r7, #0]
 800a4d4:	2600      	movs	r6, #0
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a5b0 <_malloc_r+0xfc>
 800a4e0:	f000 f868 	bl	800a5b4 <__malloc_lock>
 800a4e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a4e8:	461c      	mov	r4, r3
 800a4ea:	bb5c      	cbnz	r4, 800a544 <_malloc_r+0x90>
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	f7ff ffc0 	bl	800a474 <sbrk_aligned>
 800a4f4:	1c43      	adds	r3, r0, #1
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	d155      	bne.n	800a5a6 <_malloc_r+0xf2>
 800a4fa:	f8d8 4000 	ldr.w	r4, [r8]
 800a4fe:	4626      	mov	r6, r4
 800a500:	2e00      	cmp	r6, #0
 800a502:	d145      	bne.n	800a590 <_malloc_r+0xdc>
 800a504:	2c00      	cmp	r4, #0
 800a506:	d048      	beq.n	800a59a <_malloc_r+0xe6>
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	4631      	mov	r1, r6
 800a50c:	4638      	mov	r0, r7
 800a50e:	eb04 0903 	add.w	r9, r4, r3
 800a512:	f000 f863 	bl	800a5dc <_sbrk_r>
 800a516:	4581      	cmp	r9, r0
 800a518:	d13f      	bne.n	800a59a <_malloc_r+0xe6>
 800a51a:	6821      	ldr	r1, [r4, #0]
 800a51c:	1a6d      	subs	r5, r5, r1
 800a51e:	4629      	mov	r1, r5
 800a520:	4638      	mov	r0, r7
 800a522:	f7ff ffa7 	bl	800a474 <sbrk_aligned>
 800a526:	3001      	adds	r0, #1
 800a528:	d037      	beq.n	800a59a <_malloc_r+0xe6>
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	442b      	add	r3, r5
 800a52e:	6023      	str	r3, [r4, #0]
 800a530:	f8d8 3000 	ldr.w	r3, [r8]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d038      	beq.n	800a5aa <_malloc_r+0xf6>
 800a538:	685a      	ldr	r2, [r3, #4]
 800a53a:	42a2      	cmp	r2, r4
 800a53c:	d12b      	bne.n	800a596 <_malloc_r+0xe2>
 800a53e:	2200      	movs	r2, #0
 800a540:	605a      	str	r2, [r3, #4]
 800a542:	e00f      	b.n	800a564 <_malloc_r+0xb0>
 800a544:	6822      	ldr	r2, [r4, #0]
 800a546:	1b52      	subs	r2, r2, r5
 800a548:	d41f      	bmi.n	800a58a <_malloc_r+0xd6>
 800a54a:	2a0b      	cmp	r2, #11
 800a54c:	d917      	bls.n	800a57e <_malloc_r+0xca>
 800a54e:	1961      	adds	r1, r4, r5
 800a550:	42a3      	cmp	r3, r4
 800a552:	6025      	str	r5, [r4, #0]
 800a554:	bf18      	it	ne
 800a556:	6059      	strne	r1, [r3, #4]
 800a558:	6863      	ldr	r3, [r4, #4]
 800a55a:	bf08      	it	eq
 800a55c:	f8c8 1000 	streq.w	r1, [r8]
 800a560:	5162      	str	r2, [r4, r5]
 800a562:	604b      	str	r3, [r1, #4]
 800a564:	4638      	mov	r0, r7
 800a566:	f104 060b 	add.w	r6, r4, #11
 800a56a:	f000 f829 	bl	800a5c0 <__malloc_unlock>
 800a56e:	f026 0607 	bic.w	r6, r6, #7
 800a572:	1d23      	adds	r3, r4, #4
 800a574:	1af2      	subs	r2, r6, r3
 800a576:	d0ae      	beq.n	800a4d6 <_malloc_r+0x22>
 800a578:	1b9b      	subs	r3, r3, r6
 800a57a:	50a3      	str	r3, [r4, r2]
 800a57c:	e7ab      	b.n	800a4d6 <_malloc_r+0x22>
 800a57e:	42a3      	cmp	r3, r4
 800a580:	6862      	ldr	r2, [r4, #4]
 800a582:	d1dd      	bne.n	800a540 <_malloc_r+0x8c>
 800a584:	f8c8 2000 	str.w	r2, [r8]
 800a588:	e7ec      	b.n	800a564 <_malloc_r+0xb0>
 800a58a:	4623      	mov	r3, r4
 800a58c:	6864      	ldr	r4, [r4, #4]
 800a58e:	e7ac      	b.n	800a4ea <_malloc_r+0x36>
 800a590:	4634      	mov	r4, r6
 800a592:	6876      	ldr	r6, [r6, #4]
 800a594:	e7b4      	b.n	800a500 <_malloc_r+0x4c>
 800a596:	4613      	mov	r3, r2
 800a598:	e7cc      	b.n	800a534 <_malloc_r+0x80>
 800a59a:	230c      	movs	r3, #12
 800a59c:	603b      	str	r3, [r7, #0]
 800a59e:	4638      	mov	r0, r7
 800a5a0:	f000 f80e 	bl	800a5c0 <__malloc_unlock>
 800a5a4:	e797      	b.n	800a4d6 <_malloc_r+0x22>
 800a5a6:	6025      	str	r5, [r4, #0]
 800a5a8:	e7dc      	b.n	800a564 <_malloc_r+0xb0>
 800a5aa:	605b      	str	r3, [r3, #4]
 800a5ac:	deff      	udf	#255	; 0xff
 800a5ae:	bf00      	nop
 800a5b0:	20005b60 	.word	0x20005b60

0800a5b4 <__malloc_lock>:
 800a5b4:	4801      	ldr	r0, [pc, #4]	; (800a5bc <__malloc_lock+0x8>)
 800a5b6:	f000 b84b 	b.w	800a650 <__retarget_lock_acquire_recursive>
 800a5ba:	bf00      	nop
 800a5bc:	20005ca4 	.word	0x20005ca4

0800a5c0 <__malloc_unlock>:
 800a5c0:	4801      	ldr	r0, [pc, #4]	; (800a5c8 <__malloc_unlock+0x8>)
 800a5c2:	f000 b846 	b.w	800a652 <__retarget_lock_release_recursive>
 800a5c6:	bf00      	nop
 800a5c8:	20005ca4 	.word	0x20005ca4

0800a5cc <memset>:
 800a5cc:	4402      	add	r2, r0
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d100      	bne.n	800a5d6 <memset+0xa>
 800a5d4:	4770      	bx	lr
 800a5d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5da:	e7f9      	b.n	800a5d0 <memset+0x4>

0800a5dc <_sbrk_r>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	4d06      	ldr	r5, [pc, #24]	; (800a5f8 <_sbrk_r+0x1c>)
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	4608      	mov	r0, r1
 800a5e6:	602b      	str	r3, [r5, #0]
 800a5e8:	f7f6 fb08 	bl	8000bfc <_sbrk>
 800a5ec:	1c43      	adds	r3, r0, #1
 800a5ee:	d102      	bne.n	800a5f6 <_sbrk_r+0x1a>
 800a5f0:	682b      	ldr	r3, [r5, #0]
 800a5f2:	b103      	cbz	r3, 800a5f6 <_sbrk_r+0x1a>
 800a5f4:	6023      	str	r3, [r4, #0]
 800a5f6:	bd38      	pop	{r3, r4, r5, pc}
 800a5f8:	20005ca0 	.word	0x20005ca0

0800a5fc <__errno>:
 800a5fc:	4b01      	ldr	r3, [pc, #4]	; (800a604 <__errno+0x8>)
 800a5fe:	6818      	ldr	r0, [r3, #0]
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	2000015c 	.word	0x2000015c

0800a608 <__libc_init_array>:
 800a608:	b570      	push	{r4, r5, r6, lr}
 800a60a:	4d0d      	ldr	r5, [pc, #52]	; (800a640 <__libc_init_array+0x38>)
 800a60c:	4c0d      	ldr	r4, [pc, #52]	; (800a644 <__libc_init_array+0x3c>)
 800a60e:	1b64      	subs	r4, r4, r5
 800a610:	10a4      	asrs	r4, r4, #2
 800a612:	2600      	movs	r6, #0
 800a614:	42a6      	cmp	r6, r4
 800a616:	d109      	bne.n	800a62c <__libc_init_array+0x24>
 800a618:	4d0b      	ldr	r5, [pc, #44]	; (800a648 <__libc_init_array+0x40>)
 800a61a:	4c0c      	ldr	r4, [pc, #48]	; (800a64c <__libc_init_array+0x44>)
 800a61c:	f000 f874 	bl	800a708 <_init>
 800a620:	1b64      	subs	r4, r4, r5
 800a622:	10a4      	asrs	r4, r4, #2
 800a624:	2600      	movs	r6, #0
 800a626:	42a6      	cmp	r6, r4
 800a628:	d105      	bne.n	800a636 <__libc_init_array+0x2e>
 800a62a:	bd70      	pop	{r4, r5, r6, pc}
 800a62c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a630:	4798      	blx	r3
 800a632:	3601      	adds	r6, #1
 800a634:	e7ee      	b.n	800a614 <__libc_init_array+0xc>
 800a636:	f855 3b04 	ldr.w	r3, [r5], #4
 800a63a:	4798      	blx	r3
 800a63c:	3601      	adds	r6, #1
 800a63e:	e7f2      	b.n	800a626 <__libc_init_array+0x1e>
 800a640:	0800a8e8 	.word	0x0800a8e8
 800a644:	0800a8e8 	.word	0x0800a8e8
 800a648:	0800a8e8 	.word	0x0800a8e8
 800a64c:	0800a8ec 	.word	0x0800a8ec

0800a650 <__retarget_lock_acquire_recursive>:
 800a650:	4770      	bx	lr

0800a652 <__retarget_lock_release_recursive>:
 800a652:	4770      	bx	lr

0800a654 <memcpy>:
 800a654:	440a      	add	r2, r1
 800a656:	4291      	cmp	r1, r2
 800a658:	f100 33ff 	add.w	r3, r0, #4294967295
 800a65c:	d100      	bne.n	800a660 <memcpy+0xc>
 800a65e:	4770      	bx	lr
 800a660:	b510      	push	{r4, lr}
 800a662:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a66a:	4291      	cmp	r1, r2
 800a66c:	d1f9      	bne.n	800a662 <memcpy+0xe>
 800a66e:	bd10      	pop	{r4, pc}

0800a670 <_free_r>:
 800a670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a672:	2900      	cmp	r1, #0
 800a674:	d044      	beq.n	800a700 <_free_r+0x90>
 800a676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a67a:	9001      	str	r0, [sp, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f1a1 0404 	sub.w	r4, r1, #4
 800a682:	bfb8      	it	lt
 800a684:	18e4      	addlt	r4, r4, r3
 800a686:	f7ff ff95 	bl	800a5b4 <__malloc_lock>
 800a68a:	4a1e      	ldr	r2, [pc, #120]	; (800a704 <_free_r+0x94>)
 800a68c:	9801      	ldr	r0, [sp, #4]
 800a68e:	6813      	ldr	r3, [r2, #0]
 800a690:	b933      	cbnz	r3, 800a6a0 <_free_r+0x30>
 800a692:	6063      	str	r3, [r4, #4]
 800a694:	6014      	str	r4, [r2, #0]
 800a696:	b003      	add	sp, #12
 800a698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a69c:	f7ff bf90 	b.w	800a5c0 <__malloc_unlock>
 800a6a0:	42a3      	cmp	r3, r4
 800a6a2:	d908      	bls.n	800a6b6 <_free_r+0x46>
 800a6a4:	6825      	ldr	r5, [r4, #0]
 800a6a6:	1961      	adds	r1, r4, r5
 800a6a8:	428b      	cmp	r3, r1
 800a6aa:	bf01      	itttt	eq
 800a6ac:	6819      	ldreq	r1, [r3, #0]
 800a6ae:	685b      	ldreq	r3, [r3, #4]
 800a6b0:	1949      	addeq	r1, r1, r5
 800a6b2:	6021      	streq	r1, [r4, #0]
 800a6b4:	e7ed      	b.n	800a692 <_free_r+0x22>
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	b10b      	cbz	r3, 800a6c0 <_free_r+0x50>
 800a6bc:	42a3      	cmp	r3, r4
 800a6be:	d9fa      	bls.n	800a6b6 <_free_r+0x46>
 800a6c0:	6811      	ldr	r1, [r2, #0]
 800a6c2:	1855      	adds	r5, r2, r1
 800a6c4:	42a5      	cmp	r5, r4
 800a6c6:	d10b      	bne.n	800a6e0 <_free_r+0x70>
 800a6c8:	6824      	ldr	r4, [r4, #0]
 800a6ca:	4421      	add	r1, r4
 800a6cc:	1854      	adds	r4, r2, r1
 800a6ce:	42a3      	cmp	r3, r4
 800a6d0:	6011      	str	r1, [r2, #0]
 800a6d2:	d1e0      	bne.n	800a696 <_free_r+0x26>
 800a6d4:	681c      	ldr	r4, [r3, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	6053      	str	r3, [r2, #4]
 800a6da:	440c      	add	r4, r1
 800a6dc:	6014      	str	r4, [r2, #0]
 800a6de:	e7da      	b.n	800a696 <_free_r+0x26>
 800a6e0:	d902      	bls.n	800a6e8 <_free_r+0x78>
 800a6e2:	230c      	movs	r3, #12
 800a6e4:	6003      	str	r3, [r0, #0]
 800a6e6:	e7d6      	b.n	800a696 <_free_r+0x26>
 800a6e8:	6825      	ldr	r5, [r4, #0]
 800a6ea:	1961      	adds	r1, r4, r5
 800a6ec:	428b      	cmp	r3, r1
 800a6ee:	bf04      	itt	eq
 800a6f0:	6819      	ldreq	r1, [r3, #0]
 800a6f2:	685b      	ldreq	r3, [r3, #4]
 800a6f4:	6063      	str	r3, [r4, #4]
 800a6f6:	bf04      	itt	eq
 800a6f8:	1949      	addeq	r1, r1, r5
 800a6fa:	6021      	streq	r1, [r4, #0]
 800a6fc:	6054      	str	r4, [r2, #4]
 800a6fe:	e7ca      	b.n	800a696 <_free_r+0x26>
 800a700:	b003      	add	sp, #12
 800a702:	bd30      	pop	{r4, r5, pc}
 800a704:	20005b60 	.word	0x20005b60

0800a708 <_init>:
 800a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70a:	bf00      	nop
 800a70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a70e:	bc08      	pop	{r3}
 800a710:	469e      	mov	lr, r3
 800a712:	4770      	bx	lr

0800a714 <_fini>:
 800a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a716:	bf00      	nop
 800a718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a71a:	bc08      	pop	{r3}
 800a71c:	469e      	mov	lr, r3
 800a71e:	4770      	bx	lr
