
ECE471_Hw4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009528  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  080096f8  080096f8  000196f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a8c  08009a8c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009a8c  08009a8c  00019a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a94  08009a94  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a94  08009a94  00019a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000950  200001d4  08009c70  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b24  08009c70  00020b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016009  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eac  00000000  00000000  00036250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  00039100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eec  00000000  00000000  0003a428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028560  00000000  00000000  0003b314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c4d  00000000  00000000  00063874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9a8a  00000000  00000000  0007b4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000614c  00000000  00000000  00174f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0017b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080096e0 	.word	0x080096e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080096e0 	.word	0x080096e0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f000 ffca 	bl	8001e82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f87d 	bl	8000fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 fad3 	bl	800149c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef6:	f000 fab3 	bl	8001460 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000efa:	f000 fa83 	bl	8001404 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000efe:	f000 f92f 	bl	8001160 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000f02:	f000 f979 	bl	80011f8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000f06:	f000 f8d9 	bl	80010bc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f0a:	f000 fa1b 	bl	8001344 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f0e:	f000 fa49 	bl	80013a4 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8000f12:	f000 f9e7 	bl	80012e4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f16:	2104      	movs	r1, #4
 8000f18:	482d      	ldr	r0, [pc, #180]	; (8000fd0 <main+0xec>)
 8000f1a:	f003 fe15 	bl	8004b48 <HAL_TIM_PWM_Start>

  uint32_t timeOut = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000f22:	482c      	ldr	r0, [pc, #176]	; (8000fd4 <main+0xf0>)
 8000f24:	f001 f872 	bl	800200c <HAL_ADC_Start>

	  // Wait for the ADC conversion to complete (blocking)
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	4829      	ldr	r0, [pc, #164]	; (8000fd4 <main+0xf0>)
 8000f2e:	f001 f93b 	bl	80021a8 <HAL_ADC_PollForConversion>


	  // Read the raw ADC value
	  uint16_t raw = HAL_ADC_GetValue(&hadc1);
 8000f32:	4828      	ldr	r0, [pc, #160]	; (8000fd4 <main+0xf0>)
 8000f34:	f001 fad3 	bl	80024de <HAL_ADC_GetValue>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	817b      	strh	r3, [r7, #10]
	  // Convert the raw ADC value to voltage (assuming VREF = 3.0V)
	  //float voltage = (float)raw *3/4095; // 12-bit ADC with VREF = 3.0V

	 // TIM4->CCR2 = voltage;
	  // Print the voltage value
	  uint8_t transmit = 255*raw/4095 ;
 8000f3c:	897a      	ldrh	r2, [r7, #10]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	4a24      	ldr	r2, [pc, #144]	; (8000fd8 <main+0xf4>)
 8000f46:	fb82 1203 	smull	r1, r2, r2, r3
 8000f4a:	441a      	add	r2, r3
 8000f4c:	12d2      	asrs	r2, r2, #11
 8000f4e:	17db      	asrs	r3, r3, #31
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	71fb      	strb	r3, [r7, #7]

	//  sprintf(transmit, Voltage: %.2f V\r\n", voltage);

	  HAL_UART_Transmit(&huart2, (uint8_t*)&transmit, 1, 10);
 8000f56:	1df9      	adds	r1, r7, #7
 8000f58:	230a      	movs	r3, #10
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	481f      	ldr	r0, [pc, #124]	; (8000fdc <main+0xf8>)
 8000f5e:	f004 fed5 	bl	8005d0c <HAL_UART_Transmit>

	  HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, (uint8_t*)&transmit, 1, 10); // Non-blocking receive with a 100ms timeout
 8000f62:	1df9      	adds	r1, r7, #7
 8000f64:	230a      	movs	r3, #10
 8000f66:	2201      	movs	r2, #1
 8000f68:	481c      	ldr	r0, [pc, #112]	; (8000fdc <main+0xf8>)
 8000f6a:	f004 ff52 	bl	8005e12 <HAL_UART_Receive>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	727b      	strb	r3, [r7, #9]

	  // Delay for a brief moment (1 ms in this case)
	  HAL_Delay(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f000 ffe2 	bl	8001f3c <HAL_Delay>

	  if (status == HAL_OK) {
 8000f78:	7a7b      	ldrb	r3, [r7, #9]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d11d      	bne.n	8000fba <main+0xd6>

	  	  	        	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2101      	movs	r1, #1
 8000f82:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <main+0xfc>)
 8000f84:	f002 fad8 	bl	8003538 <HAL_GPIO_WritePin>
	  	  	        	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8e:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <main+0xfc>)
 8000f90:	f002 fad2 	bl	8003538 <HAL_GPIO_WritePin>
	  	  	              // Data received successfully
	  	  	              uint8_t receivedValue = (100*transmit)/255; // Assuming you only expect one byte of data
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	461a      	mov	r2, r3
 8000f98:	2364      	movs	r3, #100	; 0x64
 8000f9a:	fb02 f303 	mul.w	r3, r2, r3
 8000f9e:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <main+0x100>)
 8000fa0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa4:	441a      	add	r2, r3
 8000fa6:	11d2      	asrs	r2, r2, #7
 8000fa8:	17db      	asrs	r3, r3, #31
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	723b      	strb	r3, [r7, #8]
	  	  	              TIM4->CCR2 = receivedValue;
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <main+0x104>)
 8000fb0:	7a3b      	ldrb	r3, [r7, #8]
 8000fb2:	6393      	str	r3, [r2, #56]	; 0x38
	  	  	              timeOut=100;
 8000fb4:	2364      	movs	r3, #100	; 0x64
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	e7b3      	b.n	8000f22 <main+0x3e>
	 	  	              // Exit the timeout loop
	 }
	  else{
		  if(timeOut>0){
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <main+0xe4>
			  timeOut--;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	e7ac      	b.n	8000f22 <main+0x3e>

		  }
		  else{
			  TIM4->CCR2 = 0;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <main+0x104>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	639a      	str	r2, [r3, #56]	; 0x38
  {
 8000fce:	e7a8      	b.n	8000f22 <main+0x3e>
 8000fd0:	200002e4 	.word	0x200002e4
 8000fd4:	200001f0 	.word	0x200001f0
 8000fd8:	80080081 	.word	0x80080081
 8000fdc:	200003b8 	.word	0x200003b8
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	80808081 	.word	0x80808081
 8000fe8:	40000800 	.word	0x40000800

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b094      	sub	sp, #80	; 0x50
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0320 	add.w	r3, r7, #32
 8000ff6:	2230      	movs	r2, #48	; 0x30
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f006 fc1f 	bl	800783e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001010:	f002 fc18 	bl	8003844 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <SystemClock_Config+0xc8>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	4a26      	ldr	r2, [pc, #152]	; (80010b4 <SystemClock_Config+0xc8>)
 800101a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101e:	6413      	str	r3, [r2, #64]	; 0x40
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <SystemClock_Config+0xc8>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <SystemClock_Config+0xcc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001034:	4a20      	ldr	r2, [pc, #128]	; (80010b8 <SystemClock_Config+0xcc>)
 8001036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <SystemClock_Config+0xcc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001048:	2301      	movs	r3, #1
 800104a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800104c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001052:	2302      	movs	r3, #2
 8001054:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001056:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800105c:	2304      	movs	r3, #4
 800105e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001060:	2348      	movs	r3, #72	; 0x48
 8001062:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001064:	2302      	movs	r3, #2
 8001066:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001068:	2303      	movs	r3, #3
 800106a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106c:	f107 0320 	add.w	r3, r7, #32
 8001070:	4618      	mov	r0, r3
 8001072:	f002 fbf7 	bl	8003864 <HAL_RCC_OscConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800107c:	f000 fae2 	bl	8001644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001080:	230f      	movs	r3, #15
 8001082:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001084:	2302      	movs	r3, #2
 8001086:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800108c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001090:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2102      	movs	r1, #2
 800109c:	4618      	mov	r0, r3
 800109e:	f002 fe85 	bl	8003dac <HAL_RCC_ClockConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010a8:	f000 facc 	bl	8001644 <Error_Handler>
  }
}
 80010ac:	bf00      	nop
 80010ae:	3750      	adds	r7, #80	; 0x50
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_ADC1_Init+0x98>)
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <MX_ADC1_Init+0x9c>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_ADC1_Init+0x98>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <MX_ADC1_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_ADC1_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_ADC1_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_ADC1_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_ADC1_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_ADC1_Init+0x98>)
 80010fc:	4a17      	ldr	r2, [pc, #92]	; (800115c <MX_ADC1_Init+0xa0>)
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_ADC1_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_ADC1_Init+0x98>)
 8001108:	2201      	movs	r2, #1
 800110a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_ADC1_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_ADC1_Init+0x98>)
 8001116:	2201      	movs	r2, #1
 8001118:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800111a:	480e      	ldr	r0, [pc, #56]	; (8001154 <MX_ADC1_Init+0x98>)
 800111c:	f000 ff32 	bl	8001f84 <HAL_ADC_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001126:	f000 fa8d 	bl	8001644 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800112e:	2301      	movs	r3, #1
 8001130:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001136:	463b      	mov	r3, r7
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_ADC1_Init+0x98>)
 800113c:	f001 f9fa 	bl	8002534 <HAL_ADC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001146:	f000 fa7d 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200001f0 	.word	0x200001f0
 8001158:	40012000 	.word	0x40012000
 800115c:	0f000001 	.word	0x0f000001

08001160 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_TIM2_Init+0x94>)
 8001180:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001184:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_TIM2_Init+0x94>)
 8001188:	2247      	movs	r2, #71	; 0x47
 800118a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_TIM2_Init+0x94>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_TIM2_Init+0x94>)
 8001194:	2263      	movs	r2, #99	; 0x63
 8001196:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <MX_TIM2_Init+0x94>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_TIM2_Init+0x94>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a4:	4813      	ldr	r0, [pc, #76]	; (80011f4 <MX_TIM2_Init+0x94>)
 80011a6:	f003 fc17 	bl	80049d8 <HAL_TIM_Base_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011b0:	f000 fa48 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4619      	mov	r1, r3
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <MX_TIM2_Init+0x94>)
 80011c2:	f003 ffef 	bl	80051a4 <HAL_TIM_ConfigClockSource>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011cc:	f000 fa3a 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_TIM2_Init+0x94>)
 80011de:	f004 fc9b 	bl	8005b18 <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011e8:	f000 fa2c 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000298 	.word	0x20000298

080011f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	; 0x38
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	615a      	str	r2, [r3, #20]
 8001228:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <MX_TIM4_Init+0xe4>)
 800122c:	4a2c      	ldr	r2, [pc, #176]	; (80012e0 <MX_TIM4_Init+0xe8>)
 800122e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001230:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <MX_TIM4_Init+0xe4>)
 8001232:	2247      	movs	r2, #71	; 0x47
 8001234:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <MX_TIM4_Init+0xe4>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <MX_TIM4_Init+0xe4>)
 800123e:	2264      	movs	r2, #100	; 0x64
 8001240:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <MX_TIM4_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <MX_TIM4_Init+0xe4>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800124e:	4823      	ldr	r0, [pc, #140]	; (80012dc <MX_TIM4_Init+0xe4>)
 8001250:	f003 fbc2 	bl	80049d8 <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800125a:	f000 f9f3 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001268:	4619      	mov	r1, r3
 800126a:	481c      	ldr	r0, [pc, #112]	; (80012dc <MX_TIM4_Init+0xe4>)
 800126c:	f003 ff9a 	bl	80051a4 <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001276:	f000 f9e5 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800127a:	4818      	ldr	r0, [pc, #96]	; (80012dc <MX_TIM4_Init+0xe4>)
 800127c:	f003 fc03 	bl	8004a86 <HAL_TIM_PWM_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001286:	f000 f9dd 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4619      	mov	r1, r3
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <MX_TIM4_Init+0xe4>)
 800129a:	f004 fc3d 	bl	8005b18 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80012a4:	f000 f9ce 	bl	8001644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a8:	2360      	movs	r3, #96	; 0x60
 80012aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012b8:	463b      	mov	r3, r7
 80012ba:	2204      	movs	r2, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4807      	ldr	r0, [pc, #28]	; (80012dc <MX_TIM4_Init+0xe4>)
 80012c0:	f003 fe5c 	bl	8004f7c <HAL_TIM_PWM_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80012ca:	f000 f9bb 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012ce:	4803      	ldr	r0, [pc, #12]	; (80012dc <MX_TIM4_Init+0xe4>)
 80012d0:	f000 fa9c 	bl	800180c <HAL_TIM_MspPostInit>

}
 80012d4:	bf00      	nop
 80012d6:	3738      	adds	r7, #56	; 0x38
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200002e4 	.word	0x200002e4
 80012e0:	40000800 	.word	0x40000800

080012e4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_UART4_Init+0x58>)
 80012ea:	4a15      	ldr	r2, [pc, #84]	; (8001340 <MX_UART4_Init+0x5c>)
 80012ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_UART4_Init+0x58>)
 80012f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_UART4_Init+0x58>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_UART4_Init+0x58>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_UART4_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_UART4_Init+0x58>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_UART4_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_UART4_Init+0x58>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_UART4_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_UART4_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_UART4_Init+0x58>)
 8001328:	f004 fca2 	bl	8005c70 <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001332:	f000 f987 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000330 	.word	0x20000330
 8001340:	40004c00 	.word	0x40004c00

08001344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_USART2_UART_Init+0x58>)
 800134a:	4a15      	ldr	r2, [pc, #84]	; (80013a0 <MX_USART2_UART_Init+0x5c>)
 800134c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001350:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_USART2_UART_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_USART2_UART_Init+0x58>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_USART2_UART_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001388:	f004 fc72 	bl	8005c70 <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001392:	f000 f957 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200003b8 	.word	0x200003b8
 80013a0:	40004400 	.word	0x40004400

080013a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_USART3_UART_Init+0x58>)
 80013aa:	4a15      	ldr	r2, [pc, #84]	; (8001400 <MX_USART3_UART_Init+0x5c>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <MX_USART3_UART_Init+0x58>)
 80013b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_USART3_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_USART3_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_USART3_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <MX_USART3_UART_Init+0x58>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <MX_USART3_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <MX_USART3_UART_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <MX_USART3_UART_Init+0x58>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_USART3_UART_Init+0x58>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_USART3_UART_Init+0x58>)
 80013e8:	f004 fc42 	bl	8005c70 <HAL_UART_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80013f2:	f000 f927 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000440 	.word	0x20000440
 8001400:	40004800 	.word	0x40004800

08001404 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800140a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800140e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001412:	2206      	movs	r2, #6
 8001414:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001418:	2202      	movs	r2, #2
 800141a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001424:	2202      	movs	r2, #2
 8001426:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142a:	2201      	movs	r2, #1
 800142c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001436:	2200      	movs	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800143c:	2201      	movs	r2, #1
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001442:	2200      	movs	r2, #0
 8001444:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001448:	f002 f8b3 	bl	80035b2 <HAL_PCD_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001452:	f000 f8f7 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200004c8 	.word	0x200004c8

08001460 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_DMA_Init+0x38>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <MX_DMA_Init+0x38>)
 800146c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_DMA_Init+0x38>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	2038      	movs	r0, #56	; 0x38
 8001484:	f001 fb8b 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001488:	2038      	movs	r0, #56	; 0x38
 800148a:	f001 fba4 	bl	8002bd6 <HAL_NVIC_EnableIRQ>

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08c      	sub	sp, #48	; 0x30
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	4b5f      	ldr	r3, [pc, #380]	; (8001630 <MX_GPIO_Init+0x194>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a5e      	ldr	r2, [pc, #376]	; (8001630 <MX_GPIO_Init+0x194>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b5c      	ldr	r3, [pc, #368]	; (8001630 <MX_GPIO_Init+0x194>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ca:	4b59      	ldr	r3, [pc, #356]	; (8001630 <MX_GPIO_Init+0x194>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a58      	ldr	r2, [pc, #352]	; (8001630 <MX_GPIO_Init+0x194>)
 80014d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b56      	ldr	r3, [pc, #344]	; (8001630 <MX_GPIO_Init+0x194>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b53      	ldr	r3, [pc, #332]	; (8001630 <MX_GPIO_Init+0x194>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a52      	ldr	r2, [pc, #328]	; (8001630 <MX_GPIO_Init+0x194>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b50      	ldr	r3, [pc, #320]	; (8001630 <MX_GPIO_Init+0x194>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	4b4d      	ldr	r3, [pc, #308]	; (8001630 <MX_GPIO_Init+0x194>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a4c      	ldr	r2, [pc, #304]	; (8001630 <MX_GPIO_Init+0x194>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b4a      	ldr	r3, [pc, #296]	; (8001630 <MX_GPIO_Init+0x194>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001512:	4b47      	ldr	r3, [pc, #284]	; (8001630 <MX_GPIO_Init+0x194>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a46      	ldr	r2, [pc, #280]	; (8001630 <MX_GPIO_Init+0x194>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b44      	ldr	r3, [pc, #272]	; (8001630 <MX_GPIO_Init+0x194>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <MX_GPIO_Init+0x194>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a40      	ldr	r2, [pc, #256]	; (8001630 <MX_GPIO_Init+0x194>)
 8001530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b3e      	ldr	r3, [pc, #248]	; (8001630 <MX_GPIO_Init+0x194>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_13|LD3_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f246 0101 	movw	r1, #24577	; 0x6001
 8001548:	483a      	ldr	r0, [pc, #232]	; (8001634 <MX_GPIO_Init+0x198>)
 800154a:	f001 fff5 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2140      	movs	r1, #64	; 0x40
 8001552:	4839      	ldr	r0, [pc, #228]	; (8001638 <MX_GPIO_Init+0x19c>)
 8001554:	f001 fff0 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800155e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4833      	ldr	r0, [pc, #204]	; (800163c <MX_GPIO_Init+0x1a0>)
 8001570:	f001 fe36 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8001574:	2302      	movs	r3, #2
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001584:	230b      	movs	r3, #11
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	482b      	ldr	r0, [pc, #172]	; (800163c <MX_GPIO_Init+0x1a0>)
 8001590:	f001 fe26 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001594:	2330      	movs	r3, #48	; 0x30
 8001596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	4825      	ldr	r0, [pc, #148]	; (800163c <MX_GPIO_Init+0x1a0>)
 80015a8:	f001 fe1a 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|LD3_Pin;
 80015ac:	f246 0301 	movw	r3, #24577	; 0x6001
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	481b      	ldr	r0, [pc, #108]	; (8001634 <MX_GPIO_Init+0x198>)
 80015c6:	f001 fe0b 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015ca:	2340      	movs	r3, #64	; 0x40
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4815      	ldr	r0, [pc, #84]	; (8001638 <MX_GPIO_Init+0x19c>)
 80015e2:	f001 fdfd 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin PG11 PG13 */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|GPIO_PIN_11|GPIO_PIN_13;
 80015e6:	f44f 5322 	mov.w	r3, #10368	; 0x2880
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	480f      	ldr	r0, [pc, #60]	; (8001638 <MX_GPIO_Init+0x19c>)
 80015fc:	f001 fdf0 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001600:	2308      	movs	r3, #8
 8001602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001604:	2303      	movs	r3, #3
 8001606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	480b      	ldr	r0, [pc, #44]	; (8001640 <MX_GPIO_Init+0x1a4>)
 8001614:	f001 fde4 	bl	80031e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2028      	movs	r0, #40	; 0x28
 800161e:	f001 fabe 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001622:	2028      	movs	r0, #40	; 0x28
 8001624:	f001 fad7 	bl	8002bd6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001628:	bf00      	nop
 800162a:	3730      	adds	r7, #48	; 0x30
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800
 8001634:	40020400 	.word	0x40020400
 8001638:	40021800 	.word	0x40021800
 800163c:	40020800 	.word	0x40020800
 8001640:	40020c00 	.word	0x40020c00

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164c:	e7fe      	b.n	800164c <Error_Handler+0x8>
	...

08001650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HAL_MspInit+0x44>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <HAL_MspInit+0x44>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_MspInit+0x44>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_MspInit+0x44>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <HAL_MspInit+0x44>)
 8001674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001678:	6453      	str	r3, [r2, #68]	; 0x44
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_MspInit+0x44>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a30      	ldr	r2, [pc, #192]	; (8001778 <HAL_ADC_MspInit+0xe0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d15a      	bne.n	8001770 <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016ba:	4b30      	ldr	r3, [pc, #192]	; (800177c <HAL_ADC_MspInit+0xe4>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	4a2f      	ldr	r2, [pc, #188]	; (800177c <HAL_ADC_MspInit+0xe4>)
 80016c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c4:	6453      	str	r3, [r2, #68]	; 0x44
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_ADC_MspInit+0xe4>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <HAL_ADC_MspInit+0xe4>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a29      	ldr	r2, [pc, #164]	; (800177c <HAL_ADC_MspInit+0xe4>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b27      	ldr	r3, [pc, #156]	; (800177c <HAL_ADC_MspInit+0xe4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ea:	2301      	movs	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ee:	2303      	movs	r3, #3
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	4820      	ldr	r0, [pc, #128]	; (8001780 <HAL_ADC_MspInit+0xe8>)
 80016fe:	f001 fd6f 	bl	80031e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <HAL_ADC_MspInit+0xec>)
 8001704:	4a20      	ldr	r2, [pc, #128]	; (8001788 <HAL_ADC_MspInit+0xf0>)
 8001706:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <HAL_ADC_MspInit+0xec>)
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_ADC_MspInit+0xec>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HAL_ADC_MspInit+0xec>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_ADC_MspInit+0xec>)
 800171c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001720:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_ADC_MspInit+0xec>)
 8001724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001728:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_ADC_MspInit+0xec>)
 800172c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001730:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_ADC_MspInit+0xec>)
 8001734:	2200      	movs	r2, #0
 8001736:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_ADC_MspInit+0xec>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_ADC_MspInit+0xec>)
 8001740:	2200      	movs	r2, #0
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001744:	480f      	ldr	r0, [pc, #60]	; (8001784 <HAL_ADC_MspInit+0xec>)
 8001746:	f001 fa61 	bl	8002c0c <HAL_DMA_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8001750:	f7ff ff78 	bl	8001644 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <HAL_ADC_MspInit+0xec>)
 8001758:	639a      	str	r2, [r3, #56]	; 0x38
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_ADC_MspInit+0xec>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	2012      	movs	r0, #18
 8001766:	f001 fa1a 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800176a:	2012      	movs	r0, #18
 800176c:	f001 fa33 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40012000 	.word	0x40012000
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000
 8001784:	20000238 	.word	0x20000238
 8001788:	40026410 	.word	0x40026410

0800178c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800179c:	d114      	bne.n	80017c8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800179e:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_TIM_Base_MspInit+0x78>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a18      	ldr	r2, [pc, #96]	; (8001804 <HAL_TIM_Base_MspInit+0x78>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_TIM_Base_MspInit+0x78>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	201c      	movs	r0, #28
 80017bc:	f001 f9ef 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017c0:	201c      	movs	r0, #28
 80017c2:	f001 fa08 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017c6:	e018      	b.n	80017fa <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_TIM_Base_MspInit+0x7c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d113      	bne.n	80017fa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_TIM_Base_MspInit+0x78>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <HAL_TIM_Base_MspInit+0x78>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_TIM_Base_MspInit+0x78>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	201e      	movs	r0, #30
 80017f0:	f001 f9d5 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017f4:	201e      	movs	r0, #30
 80017f6:	f001 f9ee 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40000800 	.word	0x40000800

0800180c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a11      	ldr	r2, [pc, #68]	; (8001870 <HAL_TIM_MspPostInit+0x64>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d11b      	bne.n	8001866 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_TIM_MspPostInit+0x68>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a10      	ldr	r2, [pc, #64]	; (8001874 <HAL_TIM_MspPostInit+0x68>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_TIM_MspPostInit+0x68>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001856:	2302      	movs	r3, #2
 8001858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <HAL_TIM_MspPostInit+0x6c>)
 8001862:	f001 fcbd 	bl	80031e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40000800 	.word	0x40000800
 8001874:	40023800 	.word	0x40023800
 8001878:	40020400 	.word	0x40020400

0800187c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b0b0      	sub	sp, #192	; 0xc0
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001894:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001898:	2284      	movs	r2, #132	; 0x84
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f005 ffce 	bl	800783e <memset>
  if(huart->Instance==UART4)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a85      	ldr	r2, [pc, #532]	; (8001abc <HAL_UART_MspInit+0x240>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d15e      	bne.n	800196a <HAL_UART_MspInit+0xee>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80018ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fc9c 	bl	80041f8 <HAL_RCCEx_PeriphCLKConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018c6:	f7ff febd 	bl	8001644 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018ca:	4b7d      	ldr	r3, [pc, #500]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a7c      	ldr	r2, [pc, #496]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 80018d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b7a      	ldr	r3, [pc, #488]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	4b77      	ldr	r3, [pc, #476]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a76      	ldr	r2, [pc, #472]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b74      	ldr	r3, [pc, #464]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	623b      	str	r3, [r7, #32]
 80018f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	4b71      	ldr	r3, [pc, #452]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a70      	ldr	r2, [pc, #448]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b6e      	ldr	r3, [pc, #440]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001912:	2302      	movs	r3, #2
 8001914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800192a:	2308      	movs	r3, #8
 800192c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001934:	4619      	mov	r1, r3
 8001936:	4863      	ldr	r0, [pc, #396]	; (8001ac4 <HAL_UART_MspInit+0x248>)
 8001938:	f001 fc52 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800193c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001956:	2308      	movs	r3, #8
 8001958:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001960:	4619      	mov	r1, r3
 8001962:	4859      	ldr	r0, [pc, #356]	; (8001ac8 <HAL_UART_MspInit+0x24c>)
 8001964:	f001 fc3c 	bl	80031e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001968:	e0a3      	b.n	8001ab2 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a57      	ldr	r2, [pc, #348]	; (8001acc <HAL_UART_MspInit+0x250>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d15c      	bne.n	8001a2e <HAL_UART_MspInit+0x1b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001978:	2300      	movs	r3, #0
 800197a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800197c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001980:	4618      	mov	r0, r3
 8001982:	f002 fc39 	bl	80041f8 <HAL_RCCEx_PeriphCLKConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_UART_MspInit+0x114>
      Error_Handler();
 800198c:	f7ff fe5a 	bl	8001644 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 8001996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
 800199c:	4b48      	ldr	r3, [pc, #288]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	61bb      	str	r3, [r7, #24]
 80019a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a8:	4b45      	ldr	r3, [pc, #276]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	4a44      	ldr	r2, [pc, #272]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6313      	str	r3, [r2, #48]	; 0x30
 80019b4:	4b42      	ldr	r3, [pc, #264]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c0:	4b3f      	ldr	r3, [pc, #252]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	4a3e      	ldr	r2, [pc, #248]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 80019c6:	f043 0308 	orr.w	r3, r3, #8
 80019ca:	6313      	str	r3, [r2, #48]	; 0x30
 80019cc:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019d8:	2308      	movs	r3, #8
 80019da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f0:	2307      	movs	r3, #7
 80019f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019fa:	4619      	mov	r1, r3
 80019fc:	4831      	ldr	r0, [pc, #196]	; (8001ac4 <HAL_UART_MspInit+0x248>)
 80019fe:	f001 fbef 	bl	80031e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a02:	2320      	movs	r3, #32
 8001a04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a24:	4619      	mov	r1, r3
 8001a26:	482a      	ldr	r0, [pc, #168]	; (8001ad0 <HAL_UART_MspInit+0x254>)
 8001a28:	f001 fbda 	bl	80031e0 <HAL_GPIO_Init>
}
 8001a2c:	e041      	b.n	8001ab2 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a28      	ldr	r2, [pc, #160]	; (8001ad4 <HAL_UART_MspInit+0x258>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d13c      	bne.n	8001ab2 <HAL_UART_MspInit+0x236>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 fbd6 	bl	80041f8 <HAL_RCCEx_PeriphCLKConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8001a52:	f7ff fdf7 	bl	8001644 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 8001a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a13      	ldr	r2, [pc, #76]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 8001a74:	f043 0308 	orr.w	r3, r3, #8
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_UART_MspInit+0x244>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <HAL_UART_MspInit+0x254>)
 8001aae:	f001 fb97 	bl	80031e0 <HAL_GPIO_Init>
}
 8001ab2:	bf00      	nop
 8001ab4:	37c0      	adds	r7, #192	; 0xc0
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40004c00 	.word	0x40004c00
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020800 	.word	0x40020800
 8001acc:	40004400 	.word	0x40004400
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40004800 	.word	0x40004800

08001ad8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0ac      	sub	sp, #176	; 0xb0
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af0:	f107 0318 	add.w	r3, r7, #24
 8001af4:	2284      	movs	r2, #132	; 0x84
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f005 fea0 	bl	800783e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b06:	d159      	bne.n	8001bbc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b14:	f107 0318 	add.w	r3, r7, #24
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f002 fb6d 	bl	80041f8 <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001b24:	f7ff fd8e 	bl	8001644 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	4a25      	ldr	r2, [pc, #148]	; (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6313      	str	r3, [r2, #48]	; 0x30
 8001b34:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b40:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b54:	2303      	movs	r3, #3
 8001b56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b5a:	230a      	movs	r3, #10
 8001b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b64:	4619      	mov	r1, r3
 8001b66:	4818      	ldr	r0, [pc, #96]	; (8001bc8 <HAL_PCD_MspInit+0xf0>)
 8001b68:	f001 fb3a 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b84:	4619      	mov	r1, r3
 8001b86:	4810      	ldr	r0, [pc, #64]	; (8001bc8 <HAL_PCD_MspInit+0xf0>)
 8001b88:	f001 fb2a 	bl	80031e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b90:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b96:	6353      	str	r3, [r2, #52]	; 0x34
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	4a06      	ldr	r2, [pc, #24]	; (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bae:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bbc:	bf00      	nop
 8001bbe:	37b0      	adds	r7, #176	; 0xb0
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020000 	.word	0x40020000

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <NMI_Handler+0x4>

08001bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <HardFault_Handler+0x4>

08001bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <MemManage_Handler+0x4>

08001bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <BusFault_Handler+0x4>

08001be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <UsageFault_Handler+0x4>

08001bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c18:	f000 f970 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <ADC_IRQHandler+0x10>)
 8001c26:	f000 fb4a 	bl	80022be <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200001f0 	.word	0x200001f0

08001c34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <TIM2_IRQHandler+0x10>)
 8001c3a:	f003 f87f 	bl	8004d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000298 	.word	0x20000298

08001c48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <TIM4_IRQHandler+0x10>)
 8001c4e:	f003 f875 	bl	8004d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200002e4 	.word	0x200002e4

08001c5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001c60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c64:	f001 fc82 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <DMA2_Stream0_IRQHandler+0x10>)
 8001c72:	f001 f879 	bl	8002d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000238 	.word	0x20000238

08001c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return 1;
 8001c84:	2301      	movs	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_kill>:

int _kill(int pid, int sig)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c9a:	f005 fe23 	bl	80078e4 <__errno>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2216      	movs	r2, #22
 8001ca2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_exit>:

void _exit (int status)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ffe7 	bl	8001c90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cc2:	e7fe      	b.n	8001cc2 <_exit+0x12>

08001cc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	e00a      	b.n	8001cec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cd6:	f3af 8000 	nop.w
 8001cda:	4601      	mov	r1, r0
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	60ba      	str	r2, [r7, #8]
 8001ce2:	b2ca      	uxtb	r2, r1
 8001ce4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbf0      	blt.n	8001cd6 <_read+0x12>
  }

  return len;
 8001cf4:	687b      	ldr	r3, [r7, #4]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	e009      	b.n	8001d24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	60ba      	str	r2, [r7, #8]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	3301      	adds	r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	dbf1      	blt.n	8001d10 <_write+0x12>
  }
  return len;
 8001d2c:	687b      	ldr	r3, [r7, #4]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <_close>:

int _close(int file)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d5e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_isatty>:

int _isatty(int file)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f005 fd88 	bl	80078e4 <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20050000 	.word	0x20050000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	200009d0 	.word	0x200009d0
 8001e08:	20000b28 	.word	0x20000b28

08001e0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <SystemInit+0x20>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e16:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <SystemInit+0x20>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e34:	480d      	ldr	r0, [pc, #52]	; (8001e6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e36:	490e      	ldr	r1, [pc, #56]	; (8001e70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e38:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e3c:	e002      	b.n	8001e44 <LoopCopyDataInit>

08001e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e42:	3304      	adds	r3, #4

08001e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e48:	d3f9      	bcc.n	8001e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4a:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e4c:	4c0b      	ldr	r4, [pc, #44]	; (8001e7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e50:	e001      	b.n	8001e56 <LoopFillZerobss>

08001e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e54:	3204      	adds	r2, #4

08001e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e58:	d3fb      	bcc.n	8001e52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e5a:	f7ff ffd7 	bl	8001e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f005 fd47 	bl	80078f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e62:	f7ff f83f 	bl	8000ee4 <main>
  bx  lr    
 8001e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e70:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e74:	08009a9c 	.word	0x08009a9c
  ldr r2, =_sbss
 8001e78:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e7c:	20000b24 	.word	0x20000b24

08001e80 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e80:	e7fe      	b.n	8001e80 <CAN1_RX0_IRQHandler>

08001e82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e86:	2003      	movs	r0, #3
 8001e88:	f000 fe7e 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f000 f805 	bl	8001e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e92:	f7ff fbdd 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_InitTick+0x54>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x58>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fe99 	bl	8002bf2 <HAL_SYSTICK_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00e      	b.n	8001ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d80a      	bhi.n	8001ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f000 fe61 	bl	8002b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_InitTick+0x5c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	200009d4 	.word	0x200009d4

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	200009d4 	.word	0x200009d4

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff ffee 	bl	8001f24 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008

08001f84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e031      	b.n	8001ffe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fb78 	bl	8001698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d116      	bne.n	8001ff0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_ADC_Init+0x84>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	f043 0202 	orr.w	r2, r3, #2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fc04 	bl	80027e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f023 0303 	bic.w	r3, r3, #3
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
 8001fee:	e001      	b.n	8001ff4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	ffffeefd 	.word	0xffffeefd

0800200c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_ADC_Start+0x1a>
 8002022:	2302      	movs	r3, #2
 8002024:	e0ad      	b.n	8002182 <HAL_ADC_Start+0x176>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b01      	cmp	r3, #1
 800203a:	d018      	beq.n	800206e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800204c:	4b50      	ldr	r3, [pc, #320]	; (8002190 <HAL_ADC_Start+0x184>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a50      	ldr	r2, [pc, #320]	; (8002194 <HAL_ADC_Start+0x188>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	0c9a      	lsrs	r2, r3, #18
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002060:	e002      	b.n	8002068 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3b01      	subs	r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f9      	bne.n	8002062 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d175      	bne.n	8002168 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002080:	4b45      	ldr	r3, [pc, #276]	; (8002198 <HAL_ADC_Start+0x18c>)
 8002082:	4013      	ands	r3, r2
 8002084:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b6:	d106      	bne.n	80020c6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020bc:	f023 0206 	bic.w	r2, r3, #6
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	645a      	str	r2, [r3, #68]	; 0x44
 80020c4:	e002      	b.n	80020cc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020dc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80020de:	4b2f      	ldr	r3, [pc, #188]	; (800219c <HAL_ADC_Start+0x190>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 031f 	and.w	r3, r3, #31
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10f      	bne.n	800210a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d143      	bne.n	8002180 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	e03a      	b.n	8002180 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a24      	ldr	r2, [pc, #144]	; (80021a0 <HAL_ADC_Start+0x194>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d10e      	bne.n	8002132 <HAL_ADC_Start+0x126>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d107      	bne.n	8002132 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002130:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002132:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_ADC_Start+0x190>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b00      	cmp	r3, #0
 800213c:	d120      	bne.n	8002180 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a18      	ldr	r2, [pc, #96]	; (80021a4 <HAL_ADC_Start+0x198>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d11b      	bne.n	8002180 <HAL_ADC_Start+0x174>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d114      	bne.n	8002180 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	e00b      	b.n	8002180 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	f043 0210 	orr.w	r2, r3, #16
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	f043 0201 	orr.w	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000000 	.word	0x20000000
 8002194:	431bde83 	.word	0x431bde83
 8002198:	fffff8fe 	.word	0xfffff8fe
 800219c:	40012300 	.word	0x40012300
 80021a0:	40012000 	.word	0x40012000
 80021a4:	40012200 	.word	0x40012200

080021a8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c4:	d113      	bne.n	80021ee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d4:	d10b      	bne.n	80021ee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f043 0220 	orr.w	r2, r3, #32
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e063      	b.n	80022b6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80021ee:	f7ff fe99 	bl	8001f24 <HAL_GetTick>
 80021f2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021f4:	e021      	b.n	800223a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d01d      	beq.n	800223a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <HAL_ADC_PollForConversion+0x6c>
 8002204:	f7ff fe8e 	bl	8001f24 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d212      	bcs.n	800223a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b02      	cmp	r3, #2
 8002220:	d00b      	beq.n	800223a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f043 0204 	orr.w	r2, r3, #4
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e03d      	b.n	80022b6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b02      	cmp	r3, #2
 8002246:	d1d6      	bne.n	80021f6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0212 	mvn.w	r2, #18
 8002250:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d123      	bne.n	80022b4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002270:	2b00      	cmp	r3, #0
 8002272:	d11f      	bne.n	80022b4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800227e:	2b00      	cmp	r3, #0
 8002280:	d006      	beq.n	8002290 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800228c:	2b00      	cmp	r3, #0
 800228e:	d111      	bne.n	80022b4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d105      	bne.n	80022b4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f043 0201 	orr.w	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d049      	beq.n	8002388 <HAL_ADC_IRQHandler+0xca>
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d046      	beq.n	8002388 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b00      	cmp	r3, #0
 8002304:	d105      	bne.n	8002312 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d12b      	bne.n	8002378 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002324:	2b00      	cmp	r3, #0
 8002326:	d127      	bne.n	8002378 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002332:	2b00      	cmp	r3, #0
 8002334:	d006      	beq.n	8002344 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002340:	2b00      	cmp	r3, #0
 8002342:	d119      	bne.n	8002378 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0220 	bic.w	r2, r2, #32
 8002352:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d105      	bne.n	8002378 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f043 0201 	orr.w	r2, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f8bd 	bl	80024f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f06f 0212 	mvn.w	r2, #18
 8002386:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d057      	beq.n	800244e <HAL_ADC_IRQHandler+0x190>
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d054      	beq.n	800244e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d105      	bne.n	80023bc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d139      	bne.n	800243e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d12b      	bne.n	800243e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d124      	bne.n	800243e <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11d      	bne.n	800243e <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002406:	2b00      	cmp	r3, #0
 8002408:	d119      	bne.n	800243e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002418:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d105      	bne.n	800243e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fac8 	bl	80029d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 020c 	mvn.w	r2, #12
 800244c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d017      	beq.n	8002494 <HAL_ADC_IRQHandler+0x1d6>
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d014      	beq.n	8002494 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10d      	bne.n	8002494 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f841 	bl	800250c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f06f 0201 	mvn.w	r2, #1
 8002492:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024a2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d015      	beq.n	80024d6 <HAL_ADC_IRQHandler+0x218>
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d012      	beq.n	80024d6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b4:	f043 0202 	orr.w	r2, r3, #2
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0220 	mvn.w	r2, #32
 80024c4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f82a 	bl	8002520 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0220 	mvn.w	r2, #32
 80024d4:	601a      	str	r2, [r3, #0]
  }
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x1c>
 800254c:	2302      	movs	r3, #2
 800254e:	e136      	b.n	80027be <HAL_ADC_ConfigChannel+0x28a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b09      	cmp	r3, #9
 800255e:	d93a      	bls.n	80025d6 <HAL_ADC_ConfigChannel+0xa2>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002568:	d035      	beq.n	80025d6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68d9      	ldr	r1, [r3, #12]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	3b1e      	subs	r3, #30
 8002580:	2207      	movs	r2, #7
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	400a      	ands	r2, r1
 800258e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a8d      	ldr	r2, [pc, #564]	; (80027cc <HAL_ADC_ConfigChannel+0x298>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d10a      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68d9      	ldr	r1, [r3, #12]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	061a      	lsls	r2, r3, #24
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ae:	e035      	b.n	800261c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68d9      	ldr	r1, [r3, #12]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	4618      	mov	r0, r3
 80025c2:	4603      	mov	r3, r0
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4403      	add	r3, r0
 80025c8:	3b1e      	subs	r3, #30
 80025ca:	409a      	lsls	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025d4:	e022      	b.n	800261c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6919      	ldr	r1, [r3, #16]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	2207      	movs	r2, #7
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43da      	mvns	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	400a      	ands	r2, r1
 80025f8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6919      	ldr	r1, [r3, #16]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	b29b      	uxth	r3, r3
 800260a:	4618      	mov	r0, r3
 800260c:	4603      	mov	r3, r0
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4403      	add	r3, r0
 8002612:	409a      	lsls	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b06      	cmp	r3, #6
 8002622:	d824      	bhi.n	800266e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	3b05      	subs	r3, #5
 8002636:	221f      	movs	r2, #31
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43da      	mvns	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	400a      	ands	r2, r1
 8002644:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	4618      	mov	r0, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	3b05      	subs	r3, #5
 8002660:	fa00 f203 	lsl.w	r2, r0, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	635a      	str	r2, [r3, #52]	; 0x34
 800266c:	e04c      	b.n	8002708 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b0c      	cmp	r3, #12
 8002674:	d824      	bhi.n	80026c0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	3b23      	subs	r3, #35	; 0x23
 8002688:	221f      	movs	r2, #31
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	400a      	ands	r2, r1
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	4618      	mov	r0, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	3b23      	subs	r3, #35	; 0x23
 80026b2:	fa00 f203 	lsl.w	r2, r0, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30
 80026be:	e023      	b.n	8002708 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	3b41      	subs	r3, #65	; 0x41
 80026d2:	221f      	movs	r2, #31
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43da      	mvns	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	400a      	ands	r2, r1
 80026e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	4618      	mov	r0, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	3b41      	subs	r3, #65	; 0x41
 80026fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a30      	ldr	r2, [pc, #192]	; (80027d0 <HAL_ADC_ConfigChannel+0x29c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10a      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x1f4>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800271a:	d105      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800271c:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a2c      	ldr	r2, [pc, #176]	; (80027d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002722:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002726:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a28      	ldr	r2, [pc, #160]	; (80027d0 <HAL_ADC_ConfigChannel+0x29c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d10f      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x21e>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b12      	cmp	r3, #18
 8002738:	d10b      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800273a:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002740:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002744:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002746:	4b23      	ldr	r3, [pc, #140]	; (80027d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4a22      	ldr	r2, [pc, #136]	; (80027d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800274c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002750:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1e      	ldr	r2, [pc, #120]	; (80027d0 <HAL_ADC_ConfigChannel+0x29c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d12b      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x280>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1a      	ldr	r2, [pc, #104]	; (80027cc <HAL_ADC_ConfigChannel+0x298>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d003      	beq.n	800276e <HAL_ADC_ConfigChannel+0x23a>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b11      	cmp	r3, #17
 800276c:	d122      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800276e:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002774:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002778:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800277a:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4a15      	ldr	r2, [pc, #84]	; (80027d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002780:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002784:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a10      	ldr	r2, [pc, #64]	; (80027cc <HAL_ADC_ConfigChannel+0x298>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d111      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a11      	ldr	r2, [pc, #68]	; (80027dc <HAL_ADC_ConfigChannel+0x2a8>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	0c9a      	lsrs	r2, r3, #18
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027a6:	e002      	b.n	80027ae <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f9      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	10000012 	.word	0x10000012
 80027d0:	40012000 	.word	0x40012000
 80027d4:	40012300 	.word	0x40012300
 80027d8:	20000000 	.word	0x20000000
 80027dc:	431bde83 	.word	0x431bde83

080027e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80027e8:	4b78      	ldr	r3, [pc, #480]	; (80029cc <ADC_Init+0x1ec>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a77      	ldr	r2, [pc, #476]	; (80029cc <ADC_Init+0x1ec>)
 80027ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80027f2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80027f4:	4b75      	ldr	r3, [pc, #468]	; (80029cc <ADC_Init+0x1ec>)
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4973      	ldr	r1, [pc, #460]	; (80029cc <ADC_Init+0x1ec>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	021a      	lsls	r2, r3, #8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002834:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6859      	ldr	r1, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002856:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6899      	ldr	r1, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	4a58      	ldr	r2, [pc, #352]	; (80029d0 <ADC_Init+0x1f0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d022      	beq.n	80028ba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002882:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6899      	ldr	r1, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6899      	ldr	r1, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	e00f      	b.n	80028da <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0202 	bic.w	r2, r2, #2
 80028e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6899      	ldr	r1, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	005a      	lsls	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01b      	beq.n	8002940 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002916:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002926:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	3b01      	subs	r3, #1
 8002934:	035a      	lsls	r2, r3, #13
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	e007      	b.n	8002950 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800294e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800295e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	3b01      	subs	r3, #1
 800296c:	051a      	lsls	r2, r3, #20
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6899      	ldr	r1, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002992:	025a      	lsls	r2, r3, #9
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6899      	ldr	r1, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	029a      	lsls	r2, r3, #10
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	609a      	str	r2, [r3, #8]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40012300 	.word	0x40012300
 80029d0:	0f000001 	.word	0x0f000001

080029d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <__NVIC_SetPriorityGrouping+0x40>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a16:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <__NVIC_SetPriorityGrouping+0x40>)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	60d3      	str	r3, [r2, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00
 8002a2c:	05fa0000 	.word	0x05fa0000

08002a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <__NVIC_GetPriorityGrouping+0x18>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 0307 	and.w	r3, r3, #7
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	db0b      	blt.n	8002a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4907      	ldr	r1, [pc, #28]	; (8002a84 <__NVIC_EnableIRQ+0x38>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000e100 	.word	0xe000e100

08002a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	db0a      	blt.n	8002ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <__NVIC_SetPriority+0x4c>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab0:	e00a      	b.n	8002ac8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4908      	ldr	r1, [pc, #32]	; (8002ad8 <__NVIC_SetPriority+0x50>)
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3b04      	subs	r3, #4
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	761a      	strb	r2, [r3, #24]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f1c3 0307 	rsb	r3, r3, #7
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	bf28      	it	cs
 8002afa:	2304      	movcs	r3, #4
 8002afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d902      	bls.n	8002b0c <NVIC_EncodePriority+0x30>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3b03      	subs	r3, #3
 8002b0a:	e000      	b.n	8002b0e <NVIC_EncodePriority+0x32>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	401a      	ands	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	4313      	orrs	r3, r2
         );
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3724      	adds	r7, #36	; 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b54:	d301      	bcc.n	8002b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00f      	b.n	8002b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <SysTick_Config+0x40>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b62:	210f      	movs	r1, #15
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f7ff ff8e 	bl	8002a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <SysTick_Config+0x40>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b72:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <SysTick_Config+0x40>)
 8002b74:	2207      	movs	r2, #7
 8002b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	e000e010 	.word	0xe000e010

08002b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ff29 	bl	80029e8 <__NVIC_SetPriorityGrouping>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb0:	f7ff ff3e 	bl	8002a30 <__NVIC_GetPriorityGrouping>
 8002bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	6978      	ldr	r0, [r7, #20]
 8002bbc:	f7ff ff8e 	bl	8002adc <NVIC_EncodePriority>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff5d 	bl	8002a88 <__NVIC_SetPriority>
}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff31 	bl	8002a4c <__NVIC_EnableIRQ>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ffa2 	bl	8002b44 <SysTick_Config>
 8002c00:	4603      	mov	r3, r0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c18:	f7ff f984 	bl	8001f24 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e099      	b.n	8002d5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0201 	bic.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c48:	e00f      	b.n	8002c6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c4a:	f7ff f96b 	bl	8001f24 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	d908      	bls.n	8002c6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2203      	movs	r2, #3
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e078      	b.n	8002d5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e8      	bne.n	8002c4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	4b38      	ldr	r3, [pc, #224]	; (8002d64 <HAL_DMA_Init+0x158>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d107      	bne.n	8002cd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f023 0307 	bic.w	r3, r3, #7
 8002cea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d117      	bne.n	8002d2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00e      	beq.n	8002d2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f9e9 	bl	80030e8 <DMA_CheckFifoParam>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2240      	movs	r2, #64	; 0x40
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e016      	b.n	8002d5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f9a0 	bl	800307c <DMA_CalcBaseAndBitshift>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	223f      	movs	r2, #63	; 0x3f
 8002d46:	409a      	lsls	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	f010803f 	.word	0xf010803f

08002d68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002d74:	4b8e      	ldr	r3, [pc, #568]	; (8002fb0 <HAL_DMA_IRQHandler+0x248>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a8e      	ldr	r2, [pc, #568]	; (8002fb4 <HAL_DMA_IRQHandler+0x24c>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0a9b      	lsrs	r3, r3, #10
 8002d80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	2208      	movs	r2, #8
 8002d94:	409a      	lsls	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01a      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d013      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0204 	bic.w	r2, r2, #4
 8002dba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dcc:	f043 0201 	orr.w	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	2201      	movs	r2, #1
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d012      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	2201      	movs	r2, #1
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	f043 0202 	orr.w	r2, r3, #2
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0e:	2204      	movs	r2, #4
 8002e10:	409a      	lsls	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d012      	beq.n	8002e40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00b      	beq.n	8002e40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e38:	f043 0204 	orr.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	2210      	movs	r2, #16
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d043      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d03c      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	2210      	movs	r2, #16
 8002e64:	409a      	lsls	r2, r3
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d018      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d108      	bne.n	8002e98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d024      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
 8002e96:	e01f      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01b      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4798      	blx	r3
 8002ea8:	e016      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d107      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0208 	bic.w	r2, r2, #8
 8002ec6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	2220      	movs	r2, #32
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 808f 	beq.w	8003008 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 8087 	beq.w	8003008 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efe:	2220      	movs	r2, #32
 8002f00:	409a      	lsls	r2, r3
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	d136      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0216 	bic.w	r2, r2, #22
 8002f20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <HAL_DMA_IRQHandler+0x1da>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0208 	bic.w	r2, r2, #8
 8002f50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	223f      	movs	r2, #63	; 0x3f
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d07e      	beq.n	8003074 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
        }
        return;
 8002f7e:	e079      	b.n	8003074 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01d      	beq.n	8002fca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d031      	beq.n	8003008 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
 8002fac:	e02c      	b.n	8003008 <HAL_DMA_IRQHandler+0x2a0>
 8002fae:	bf00      	nop
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d023      	beq.n	8003008 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
 8002fc8:	e01e      	b.n	8003008 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10f      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0210 	bic.w	r2, r2, #16
 8002fe6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300c:	2b00      	cmp	r3, #0
 800300e:	d032      	beq.n	8003076 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d022      	beq.n	8003062 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2205      	movs	r2, #5
 8003020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	3301      	adds	r3, #1
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	429a      	cmp	r2, r3
 800303e:	d307      	bcc.n	8003050 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f2      	bne.n	8003034 <HAL_DMA_IRQHandler+0x2cc>
 800304e:	e000      	b.n	8003052 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003050:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
 8003072:	e000      	b.n	8003076 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003074:	bf00      	nop
    }
  }
}
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	3b10      	subs	r3, #16
 800308c:	4a13      	ldr	r2, [pc, #76]	; (80030dc <DMA_CalcBaseAndBitshift+0x60>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003096:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <DMA_CalcBaseAndBitshift+0x64>)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d908      	bls.n	80030bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <DMA_CalcBaseAndBitshift+0x68>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	1d1a      	adds	r2, r3, #4
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	659a      	str	r2, [r3, #88]	; 0x58
 80030ba:	e006      	b.n	80030ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <DMA_CalcBaseAndBitshift+0x68>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	aaaaaaab 	.word	0xaaaaaaab
 80030e0:	08009710 	.word	0x08009710
 80030e4:	fffffc00 	.word	0xfffffc00

080030e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d11f      	bne.n	8003142 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b03      	cmp	r3, #3
 8003106:	d856      	bhi.n	80031b6 <DMA_CheckFifoParam+0xce>
 8003108:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <DMA_CheckFifoParam+0x28>)
 800310a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310e:	bf00      	nop
 8003110:	08003121 	.word	0x08003121
 8003114:	08003133 	.word	0x08003133
 8003118:	08003121 	.word	0x08003121
 800311c:	080031b7 	.word	0x080031b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d046      	beq.n	80031ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003130:	e043      	b.n	80031ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800313a:	d140      	bne.n	80031be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003140:	e03d      	b.n	80031be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800314a:	d121      	bne.n	8003190 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b03      	cmp	r3, #3
 8003150:	d837      	bhi.n	80031c2 <DMA_CheckFifoParam+0xda>
 8003152:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <DMA_CheckFifoParam+0x70>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	08003169 	.word	0x08003169
 800315c:	0800316f 	.word	0x0800316f
 8003160:	08003169 	.word	0x08003169
 8003164:	08003181 	.word	0x08003181
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      break;
 800316c:	e030      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d025      	beq.n	80031c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800317e:	e022      	b.n	80031c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003188:	d11f      	bne.n	80031ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800318e:	e01c      	b.n	80031ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d903      	bls.n	800319e <DMA_CheckFifoParam+0xb6>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d003      	beq.n	80031a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800319c:	e018      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
      break;
 80031a2:	e015      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00e      	beq.n	80031ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
      break;
 80031b4:	e00b      	b.n	80031ce <DMA_CheckFifoParam+0xe6>
      break;
 80031b6:	bf00      	nop
 80031b8:	e00a      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
      break;
 80031ba:	bf00      	nop
 80031bc:	e008      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
      break;
 80031be:	bf00      	nop
 80031c0:	e006      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
      break;
 80031c2:	bf00      	nop
 80031c4:	e004      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
      break;
 80031c6:	bf00      	nop
 80031c8:	e002      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80031ca:	bf00      	nop
 80031cc:	e000      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
      break;
 80031ce:	bf00      	nop
    }
  } 
  
  return status; 
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop

080031e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	e175      	b.n	80034ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003200:	2201      	movs	r2, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	429a      	cmp	r2, r3
 800321a:	f040 8164 	bne.w	80034e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b01      	cmp	r3, #1
 8003228:	d005      	beq.n	8003236 <HAL_GPIO_Init+0x56>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d130      	bne.n	8003298 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	2203      	movs	r2, #3
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800326c:	2201      	movs	r2, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 0201 	and.w	r2, r3, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d017      	beq.n	80032d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d123      	bne.n	8003328 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	08da      	lsrs	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3208      	adds	r2, #8
 80032e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	220f      	movs	r2, #15
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	08da      	lsrs	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3208      	adds	r2, #8
 8003322:	69b9      	ldr	r1, [r7, #24]
 8003324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0203 	and.w	r2, r3, #3
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80be 	beq.w	80034e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336a:	4b66      	ldr	r3, [pc, #408]	; (8003504 <HAL_GPIO_Init+0x324>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	4a65      	ldr	r2, [pc, #404]	; (8003504 <HAL_GPIO_Init+0x324>)
 8003370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003374:	6453      	str	r3, [r2, #68]	; 0x44
 8003376:	4b63      	ldr	r3, [pc, #396]	; (8003504 <HAL_GPIO_Init+0x324>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003382:	4a61      	ldr	r2, [pc, #388]	; (8003508 <HAL_GPIO_Init+0x328>)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	089b      	lsrs	r3, r3, #2
 8003388:	3302      	adds	r3, #2
 800338a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	220f      	movs	r2, #15
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a58      	ldr	r2, [pc, #352]	; (800350c <HAL_GPIO_Init+0x32c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d037      	beq.n	800341e <HAL_GPIO_Init+0x23e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a57      	ldr	r2, [pc, #348]	; (8003510 <HAL_GPIO_Init+0x330>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d031      	beq.n	800341a <HAL_GPIO_Init+0x23a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a56      	ldr	r2, [pc, #344]	; (8003514 <HAL_GPIO_Init+0x334>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d02b      	beq.n	8003416 <HAL_GPIO_Init+0x236>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a55      	ldr	r2, [pc, #340]	; (8003518 <HAL_GPIO_Init+0x338>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d025      	beq.n	8003412 <HAL_GPIO_Init+0x232>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a54      	ldr	r2, [pc, #336]	; (800351c <HAL_GPIO_Init+0x33c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <HAL_GPIO_Init+0x22e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a53      	ldr	r2, [pc, #332]	; (8003520 <HAL_GPIO_Init+0x340>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d019      	beq.n	800340a <HAL_GPIO_Init+0x22a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a52      	ldr	r2, [pc, #328]	; (8003524 <HAL_GPIO_Init+0x344>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_GPIO_Init+0x226>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a51      	ldr	r2, [pc, #324]	; (8003528 <HAL_GPIO_Init+0x348>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00d      	beq.n	8003402 <HAL_GPIO_Init+0x222>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a50      	ldr	r2, [pc, #320]	; (800352c <HAL_GPIO_Init+0x34c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <HAL_GPIO_Init+0x21e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4f      	ldr	r2, [pc, #316]	; (8003530 <HAL_GPIO_Init+0x350>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_GPIO_Init+0x21a>
 80033f6:	2309      	movs	r3, #9
 80033f8:	e012      	b.n	8003420 <HAL_GPIO_Init+0x240>
 80033fa:	230a      	movs	r3, #10
 80033fc:	e010      	b.n	8003420 <HAL_GPIO_Init+0x240>
 80033fe:	2308      	movs	r3, #8
 8003400:	e00e      	b.n	8003420 <HAL_GPIO_Init+0x240>
 8003402:	2307      	movs	r3, #7
 8003404:	e00c      	b.n	8003420 <HAL_GPIO_Init+0x240>
 8003406:	2306      	movs	r3, #6
 8003408:	e00a      	b.n	8003420 <HAL_GPIO_Init+0x240>
 800340a:	2305      	movs	r3, #5
 800340c:	e008      	b.n	8003420 <HAL_GPIO_Init+0x240>
 800340e:	2304      	movs	r3, #4
 8003410:	e006      	b.n	8003420 <HAL_GPIO_Init+0x240>
 8003412:	2303      	movs	r3, #3
 8003414:	e004      	b.n	8003420 <HAL_GPIO_Init+0x240>
 8003416:	2302      	movs	r3, #2
 8003418:	e002      	b.n	8003420 <HAL_GPIO_Init+0x240>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_GPIO_Init+0x240>
 800341e:	2300      	movs	r3, #0
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	f002 0203 	and.w	r2, r2, #3
 8003426:	0092      	lsls	r2, r2, #2
 8003428:	4093      	lsls	r3, r2
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003430:	4935      	ldr	r1, [pc, #212]	; (8003508 <HAL_GPIO_Init+0x328>)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800343e:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <HAL_GPIO_Init+0x354>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003462:	4a34      	ldr	r2, [pc, #208]	; (8003534 <HAL_GPIO_Init+0x354>)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003468:	4b32      	ldr	r3, [pc, #200]	; (8003534 <HAL_GPIO_Init+0x354>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800348c:	4a29      	ldr	r2, [pc, #164]	; (8003534 <HAL_GPIO_Init+0x354>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003492:	4b28      	ldr	r3, [pc, #160]	; (8003534 <HAL_GPIO_Init+0x354>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034b6:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <HAL_GPIO_Init+0x354>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034bc:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <HAL_GPIO_Init+0x354>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034e0:	4a14      	ldr	r2, [pc, #80]	; (8003534 <HAL_GPIO_Init+0x354>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3301      	adds	r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	2b0f      	cmp	r3, #15
 80034f0:	f67f ae86 	bls.w	8003200 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	3724      	adds	r7, #36	; 0x24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	40013800 	.word	0x40013800
 800350c:	40020000 	.word	0x40020000
 8003510:	40020400 	.word	0x40020400
 8003514:	40020800 	.word	0x40020800
 8003518:	40020c00 	.word	0x40020c00
 800351c:	40021000 	.word	0x40021000
 8003520:	40021400 	.word	0x40021400
 8003524:	40021800 	.word	0x40021800
 8003528:	40021c00 	.word	0x40021c00
 800352c:	40022000 	.word	0x40022000
 8003530:	40022400 	.word	0x40022400
 8003534:	40013c00 	.word	0x40013c00

08003538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	807b      	strh	r3, [r7, #2]
 8003544:	4613      	mov	r3, r2
 8003546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003548:	787b      	ldrb	r3, [r7, #1]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800354e:	887a      	ldrh	r2, [r7, #2]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003554:	e003      	b.n	800355e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003556:	887b      	ldrh	r3, [r7, #2]
 8003558:	041a      	lsls	r2, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	619a      	str	r2, [r3, #24]
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003576:	4b08      	ldr	r3, [pc, #32]	; (8003598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d006      	beq.n	8003590 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003582:	4a05      	ldr	r2, [pc, #20]	; (8003598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f806 	bl	800359c <HAL_GPIO_EXTI_Callback>
  }
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40013c00 	.word	0x40013c00

0800359c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b4:	b08f      	sub	sp, #60	; 0x3c
 80035b6:	af0a      	add	r7, sp, #40	; 0x28
 80035b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e116      	b.n	80037f2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fe fa7a 	bl	8001ad8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2203      	movs	r2, #3
 80035e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f003 f926 	bl	8006854 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	687e      	ldr	r6, [r7, #4]
 8003610:	466d      	mov	r5, sp
 8003612:	f106 0410 	add.w	r4, r6, #16
 8003616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800361a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800361c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800361e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003622:	e885 0003 	stmia.w	r5, {r0, r1}
 8003626:	1d33      	adds	r3, r6, #4
 8003628:	cb0e      	ldmia	r3, {r1, r2, r3}
 800362a:	6838      	ldr	r0, [r7, #0]
 800362c:	f003 f8ba 	bl	80067a4 <USB_CoreInit>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2202      	movs	r2, #2
 800363a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e0d7      	b.n	80037f2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f003 f914 	bl	8006876 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]
 8003652:	e04a      	b.n	80036ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003654:	7bfa      	ldrb	r2, [r7, #15]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	333d      	adds	r3, #61	; 0x3d
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003668:	7bfa      	ldrb	r2, [r7, #15]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	333c      	adds	r3, #60	; 0x3c
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800367c:	7bfa      	ldrb	r2, [r7, #15]
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	b298      	uxth	r0, r3
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	3344      	adds	r3, #68	; 0x44
 8003690:	4602      	mov	r2, r0
 8003692:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	3340      	adds	r3, #64	; 0x40
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	3348      	adds	r3, #72	; 0x48
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	334c      	adds	r3, #76	; 0x4c
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	3354      	adds	r3, #84	; 0x54
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	3301      	adds	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d3af      	bcc.n	8003654 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f4:	2300      	movs	r3, #0
 80036f6:	73fb      	strb	r3, [r7, #15]
 80036f8:	e044      	b.n	8003784 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036fa:	7bfa      	ldrb	r2, [r7, #15]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003710:	7bfa      	ldrb	r2, [r7, #15]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003722:	7bfa      	ldrb	r2, [r7, #15]
 8003724:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003726:	7bfa      	ldrb	r2, [r7, #15]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003768:	7bfa      	ldrb	r2, [r7, #15]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	3301      	adds	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	7bfa      	ldrb	r2, [r7, #15]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3b5      	bcc.n	80036fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	687e      	ldr	r6, [r7, #4]
 8003796:	466d      	mov	r5, sp
 8003798:	f106 0410 	add.w	r4, r6, #16
 800379c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800379e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80037ac:	1d33      	adds	r3, r6, #4
 80037ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b0:	6838      	ldr	r0, [r7, #0]
 80037b2:	f003 f8ad 	bl	8006910 <USB_DevInit>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e014      	b.n	80037f2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d102      	bne.n	80037e6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f80b 	bl	80037fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f003 fa6b 	bl	8006cc6 <USB_DevDisconnect>

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080037fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800382a:	4b05      	ldr	r3, [pc, #20]	; (8003840 <HAL_PCDEx_ActivateLPM+0x44>)
 800382c:	4313      	orrs	r3, r2
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	10000003 	.word	0x10000003

08003844 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a04      	ldr	r2, [pc, #16]	; (8003860 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800384e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003852:	6013      	str	r3, [r2, #0]
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40007000 	.word	0x40007000

08003864 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800386c:	2300      	movs	r3, #0
 800386e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e291      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8087 	beq.w	8003996 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003888:	4b96      	ldr	r3, [pc, #600]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b04      	cmp	r3, #4
 8003892:	d00c      	beq.n	80038ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003894:	4b93      	ldr	r3, [pc, #588]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b08      	cmp	r3, #8
 800389e:	d112      	bne.n	80038c6 <HAL_RCC_OscConfig+0x62>
 80038a0:	4b90      	ldr	r3, [pc, #576]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ac:	d10b      	bne.n	80038c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ae:	4b8d      	ldr	r3, [pc, #564]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d06c      	beq.n	8003994 <HAL_RCC_OscConfig+0x130>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d168      	bne.n	8003994 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e26b      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ce:	d106      	bne.n	80038de <HAL_RCC_OscConfig+0x7a>
 80038d0:	4b84      	ldr	r3, [pc, #528]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a83      	ldr	r2, [pc, #524]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	e02e      	b.n	800393c <HAL_RCC_OscConfig+0xd8>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x9c>
 80038e6:	4b7f      	ldr	r3, [pc, #508]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a7e      	ldr	r2, [pc, #504]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b7c      	ldr	r3, [pc, #496]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7b      	ldr	r2, [pc, #492]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e01d      	b.n	800393c <HAL_RCC_OscConfig+0xd8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0xc0>
 800390a:	4b76      	ldr	r3, [pc, #472]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a75      	ldr	r2, [pc, #468]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b73      	ldr	r3, [pc, #460]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a72      	ldr	r2, [pc, #456]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e00b      	b.n	800393c <HAL_RCC_OscConfig+0xd8>
 8003924:	4b6f      	ldr	r3, [pc, #444]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a6e      	ldr	r2, [pc, #440]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 800392a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b6c      	ldr	r3, [pc, #432]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6b      	ldr	r2, [pc, #428]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800393a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d013      	beq.n	800396c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe faee 	bl	8001f24 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800394c:	f7fe faea 	bl	8001f24 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e21f      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b61      	ldr	r3, [pc, #388]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0xe8>
 800396a:	e014      	b.n	8003996 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fe fada 	bl	8001f24 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003974:	f7fe fad6 	bl	8001f24 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e20b      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003986:	4b57      	ldr	r3, [pc, #348]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x110>
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d069      	beq.n	8003a76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039a2:	4b50      	ldr	r3, [pc, #320]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ae:	4b4d      	ldr	r3, [pc, #308]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d11c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x190>
 80039ba:	4b4a      	ldr	r3, [pc, #296]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d116      	bne.n	80039f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c6:	4b47      	ldr	r3, [pc, #284]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_RCC_OscConfig+0x17a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e1df      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039de:	4b41      	ldr	r3, [pc, #260]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	493d      	ldr	r1, [pc, #244]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f2:	e040      	b.n	8003a76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d023      	beq.n	8003a44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039fc:	4b39      	ldr	r3, [pc, #228]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a38      	ldr	r2, [pc, #224]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fe fa8c 	bl	8001f24 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a10:	f7fe fa88 	bl	8001f24 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e1bd      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a22:	4b30      	ldr	r3, [pc, #192]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4929      	ldr	r1, [pc, #164]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]
 8003a42:	e018      	b.n	8003a76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a44:	4b27      	ldr	r3, [pc, #156]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a26      	ldr	r2, [pc, #152]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fe fa68 	bl	8001f24 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a58:	f7fe fa64 	bl	8001f24 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e199      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d038      	beq.n	8003af4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d019      	beq.n	8003abe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a8a:	4b16      	ldr	r3, [pc, #88]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8e:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a96:	f7fe fa45 	bl	8001f24 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9e:	f7fe fa41 	bl	8001f24 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e176      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x23a>
 8003abc:	e01a      	b.n	8003af4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac2:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aca:	f7fe fa2b 	bl	8001f24 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad2:	f7fe fa27 	bl	8001f24 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d903      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e15c      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>
 8003ae4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae8:	4b91      	ldr	r3, [pc, #580]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ee      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80a4 	beq.w	8003c4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b02:	4b8b      	ldr	r3, [pc, #556]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10d      	bne.n	8003b2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0e:	4b88      	ldr	r3, [pc, #544]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	4a87      	ldr	r2, [pc, #540]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b18:	6413      	str	r3, [r2, #64]	; 0x40
 8003b1a:	4b85      	ldr	r3, [pc, #532]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b2a:	4b82      	ldr	r3, [pc, #520]	; (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d118      	bne.n	8003b68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b36:	4b7f      	ldr	r3, [pc, #508]	; (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a7e      	ldr	r2, [pc, #504]	; (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b42:	f7fe f9ef 	bl	8001f24 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4a:	f7fe f9eb 	bl	8001f24 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b64      	cmp	r3, #100	; 0x64
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e120      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b5c:	4b75      	ldr	r3, [pc, #468]	; (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d106      	bne.n	8003b7e <HAL_RCC_OscConfig+0x31a>
 8003b70:	4b6f      	ldr	r3, [pc, #444]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	4a6e      	ldr	r2, [pc, #440]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7c:	e02d      	b.n	8003bda <HAL_RCC_OscConfig+0x376>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x33c>
 8003b86:	4b6a      	ldr	r3, [pc, #424]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	4a69      	ldr	r2, [pc, #420]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	6713      	str	r3, [r2, #112]	; 0x70
 8003b92:	4b67      	ldr	r3, [pc, #412]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	4a66      	ldr	r2, [pc, #408]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003b98:	f023 0304 	bic.w	r3, r3, #4
 8003b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9e:	e01c      	b.n	8003bda <HAL_RCC_OscConfig+0x376>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b05      	cmp	r3, #5
 8003ba6:	d10c      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x35e>
 8003ba8:	4b61      	ldr	r3, [pc, #388]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bac:	4a60      	ldr	r2, [pc, #384]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003bae:	f043 0304 	orr.w	r3, r3, #4
 8003bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb4:	4b5e      	ldr	r3, [pc, #376]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb8:	4a5d      	ldr	r2, [pc, #372]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc0:	e00b      	b.n	8003bda <HAL_RCC_OscConfig+0x376>
 8003bc2:	4b5b      	ldr	r3, [pc, #364]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	4a5a      	ldr	r2, [pc, #360]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bce:	4b58      	ldr	r3, [pc, #352]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	4a57      	ldr	r2, [pc, #348]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003bd4:	f023 0304 	bic.w	r3, r3, #4
 8003bd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d015      	beq.n	8003c0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be2:	f7fe f99f 	bl	8001f24 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be8:	e00a      	b.n	8003c00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bea:	f7fe f99b 	bl	8001f24 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e0ce      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c00:	4b4b      	ldr	r3, [pc, #300]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0ee      	beq.n	8003bea <HAL_RCC_OscConfig+0x386>
 8003c0c:	e014      	b.n	8003c38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0e:	f7fe f989 	bl	8001f24 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c14:	e00a      	b.n	8003c2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c16:	f7fe f985 	bl	8001f24 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e0b8      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2c:	4b40      	ldr	r3, [pc, #256]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1ee      	bne.n	8003c16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c38:	7dfb      	ldrb	r3, [r7, #23]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d105      	bne.n	8003c4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3e:	4b3c      	ldr	r3, [pc, #240]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	4a3b      	ldr	r2, [pc, #236]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 80a4 	beq.w	8003d9c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c54:	4b36      	ldr	r3, [pc, #216]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d06b      	beq.n	8003d38 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d149      	bne.n	8003cfc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c68:	4b31      	ldr	r3, [pc, #196]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a30      	ldr	r2, [pc, #192]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe f956 	bl	8001f24 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fe f952 	bl	8001f24 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e087      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8e:	4b28      	ldr	r3, [pc, #160]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	019b      	lsls	r3, r3, #6
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	085b      	lsrs	r3, r3, #1
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	061b      	lsls	r3, r3, #24
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	4a1b      	ldr	r2, [pc, #108]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003cc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cc6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc8:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fe f926 	bl	8001f24 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fe f922 	bl	8001f24 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e057      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cee:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x478>
 8003cfa:	e04f      	b.n	8003d9c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0b      	ldr	r2, [pc, #44]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fe f90c 	bl	8001f24 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fe f908 	bl	8001f24 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e03d      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d22:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <HAL_RCC_OscConfig+0x4cc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4ac>
 8003d2e:	e035      	b.n	8003d9c <HAL_RCC_OscConfig+0x538>
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d38:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <HAL_RCC_OscConfig+0x544>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d028      	beq.n	8003d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d121      	bne.n	8003d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d11a      	bne.n	8003d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d68:	4013      	ands	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d111      	bne.n	8003d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	3b01      	subs	r3, #1
 8003d82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800

08003dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0d0      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b6a      	ldr	r3, [pc, #424]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d910      	bls.n	8003df4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b67      	ldr	r3, [pc, #412]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 020f 	bic.w	r2, r3, #15
 8003dda:	4965      	ldr	r1, [pc, #404]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b63      	ldr	r3, [pc, #396]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0b8      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4a58      	ldr	r2, [pc, #352]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e24:	4b53      	ldr	r3, [pc, #332]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4a52      	ldr	r2, [pc, #328]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e30:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	494d      	ldr	r1, [pc, #308]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d040      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d107      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e56:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d115      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e07f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d107      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6e:	4b41      	ldr	r3, [pc, #260]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e073      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7e:	4b3d      	ldr	r3, [pc, #244]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e06b      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8e:	4b39      	ldr	r3, [pc, #228]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f023 0203 	bic.w	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4936      	ldr	r1, [pc, #216]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea0:	f7fe f840 	bl	8001f24 <HAL_GetTick>
 8003ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea8:	f7fe f83c 	bl	8001f24 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e053      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ebe:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 020c 	and.w	r2, r3, #12
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d1eb      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d210      	bcs.n	8003f00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 020f 	bic.w	r2, r3, #15
 8003ee6:	4922      	ldr	r1, [pc, #136]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e032      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4916      	ldr	r1, [pc, #88]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	490e      	ldr	r1, [pc, #56]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f3e:	f000 f821 	bl	8003f84 <HAL_RCC_GetSysClockFreq>
 8003f42:	4602      	mov	r2, r0
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	490a      	ldr	r1, [pc, #40]	; (8003f78 <HAL_RCC_ClockConfig+0x1cc>)
 8003f50:	5ccb      	ldrb	r3, [r1, r3]
 8003f52:	fa22 f303 	lsr.w	r3, r2, r3
 8003f56:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <HAL_RCC_ClockConfig+0x1d0>)
 8003f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_ClockConfig+0x1d4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fd ff9c 	bl	8001e9c <HAL_InitTick>

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40023c00 	.word	0x40023c00
 8003f74:	40023800 	.word	0x40023800
 8003f78:	080096f8 	.word	0x080096f8
 8003f7c:	20000000 	.word	0x20000000
 8003f80:	20000004 	.word	0x20000004

08003f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f88:	b094      	sub	sp, #80	; 0x50
 8003f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f90:	2300      	movs	r3, #0
 8003f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f94:	2300      	movs	r3, #0
 8003f96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f9c:	4b79      	ldr	r3, [pc, #484]	; (8004184 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 030c 	and.w	r3, r3, #12
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	f200 80e1 	bhi.w	8004170 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8003fb6:	e0db      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fb8:	4b73      	ldr	r3, [pc, #460]	; (8004188 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fbc:	e0db      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fbe:	4b73      	ldr	r3, [pc, #460]	; (800418c <HAL_RCC_GetSysClockFreq+0x208>)
 8003fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fc2:	e0d8      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc4:	4b6f      	ldr	r3, [pc, #444]	; (8004184 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fcc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003fce:	4b6d      	ldr	r3, [pc, #436]	; (8004184 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d063      	beq.n	80040a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fda:	4b6a      	ldr	r3, [pc, #424]	; (8004184 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	099b      	lsrs	r3, r3, #6
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fe4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fec:	633b      	str	r3, [r7, #48]	; 0x30
 8003fee:	2300      	movs	r3, #0
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ff6:	4622      	mov	r2, r4
 8003ff8:	462b      	mov	r3, r5
 8003ffa:	f04f 0000 	mov.w	r0, #0
 8003ffe:	f04f 0100 	mov.w	r1, #0
 8004002:	0159      	lsls	r1, r3, #5
 8004004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004008:	0150      	lsls	r0, r2, #5
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4621      	mov	r1, r4
 8004010:	1a51      	subs	r1, r2, r1
 8004012:	6139      	str	r1, [r7, #16]
 8004014:	4629      	mov	r1, r5
 8004016:	eb63 0301 	sbc.w	r3, r3, r1
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004028:	4659      	mov	r1, fp
 800402a:	018b      	lsls	r3, r1, #6
 800402c:	4651      	mov	r1, sl
 800402e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004032:	4651      	mov	r1, sl
 8004034:	018a      	lsls	r2, r1, #6
 8004036:	4651      	mov	r1, sl
 8004038:	ebb2 0801 	subs.w	r8, r2, r1
 800403c:	4659      	mov	r1, fp
 800403e:	eb63 0901 	sbc.w	r9, r3, r1
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800404e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004056:	4690      	mov	r8, r2
 8004058:	4699      	mov	r9, r3
 800405a:	4623      	mov	r3, r4
 800405c:	eb18 0303 	adds.w	r3, r8, r3
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	462b      	mov	r3, r5
 8004064:	eb49 0303 	adc.w	r3, r9, r3
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004076:	4629      	mov	r1, r5
 8004078:	024b      	lsls	r3, r1, #9
 800407a:	4621      	mov	r1, r4
 800407c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004080:	4621      	mov	r1, r4
 8004082:	024a      	lsls	r2, r1, #9
 8004084:	4610      	mov	r0, r2
 8004086:	4619      	mov	r1, r3
 8004088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800408a:	2200      	movs	r2, #0
 800408c:	62bb      	str	r3, [r7, #40]	; 0x28
 800408e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004090:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004094:	f7fc fda8 	bl	8000be8 <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4613      	mov	r3, r2
 800409e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a0:	e058      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a2:	4b38      	ldr	r3, [pc, #224]	; (8004184 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	099b      	lsrs	r3, r3, #6
 80040a8:	2200      	movs	r2, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	4611      	mov	r1, r2
 80040ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040b2:	623b      	str	r3, [r7, #32]
 80040b4:	2300      	movs	r3, #0
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
 80040b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040bc:	4642      	mov	r2, r8
 80040be:	464b      	mov	r3, r9
 80040c0:	f04f 0000 	mov.w	r0, #0
 80040c4:	f04f 0100 	mov.w	r1, #0
 80040c8:	0159      	lsls	r1, r3, #5
 80040ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ce:	0150      	lsls	r0, r2, #5
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4641      	mov	r1, r8
 80040d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80040da:	4649      	mov	r1, r9
 80040dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040f4:	ebb2 040a 	subs.w	r4, r2, sl
 80040f8:	eb63 050b 	sbc.w	r5, r3, fp
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	00eb      	lsls	r3, r5, #3
 8004106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800410a:	00e2      	lsls	r2, r4, #3
 800410c:	4614      	mov	r4, r2
 800410e:	461d      	mov	r5, r3
 8004110:	4643      	mov	r3, r8
 8004112:	18e3      	adds	r3, r4, r3
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	464b      	mov	r3, r9
 8004118:	eb45 0303 	adc.w	r3, r5, r3
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800412a:	4629      	mov	r1, r5
 800412c:	028b      	lsls	r3, r1, #10
 800412e:	4621      	mov	r1, r4
 8004130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004134:	4621      	mov	r1, r4
 8004136:	028a      	lsls	r2, r1, #10
 8004138:	4610      	mov	r0, r2
 800413a:	4619      	mov	r1, r3
 800413c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413e:	2200      	movs	r2, #0
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	61fa      	str	r2, [r7, #28]
 8004144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004148:	f7fc fd4e 	bl	8000be8 <__aeabi_uldivmod>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4613      	mov	r3, r2
 8004152:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_RCC_GetSysClockFreq+0x200>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	0c1b      	lsrs	r3, r3, #16
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	3301      	adds	r3, #1
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004168:	fbb2 f3f3 	udiv	r3, r2, r3
 800416c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800416e:	e002      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCC_GetSysClockFreq+0x204>)
 8004172:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004178:	4618      	mov	r0, r3
 800417a:	3750      	adds	r7, #80	; 0x50
 800417c:	46bd      	mov	sp, r7
 800417e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004182:	bf00      	nop
 8004184:	40023800 	.word	0x40023800
 8004188:	00f42400 	.word	0x00f42400
 800418c:	007a1200 	.word	0x007a1200

08004190 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004194:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004196:	681b      	ldr	r3, [r3, #0]
}
 8004198:	4618      	mov	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000000 	.word	0x20000000

080041a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041ac:	f7ff fff0 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 80041b0:	4602      	mov	r2, r0
 80041b2:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	0a9b      	lsrs	r3, r3, #10
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	4903      	ldr	r1, [pc, #12]	; (80041cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041be:	5ccb      	ldrb	r3, [r1, r3]
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40023800 	.word	0x40023800
 80041cc:	08009708 	.word	0x08009708

080041d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041d4:	f7ff ffdc 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 80041d8:	4602      	mov	r2, r0
 80041da:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	0b5b      	lsrs	r3, r3, #13
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	4903      	ldr	r1, [pc, #12]	; (80041f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041e6:	5ccb      	ldrb	r3, [r1, r3]
 80041e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40023800 	.word	0x40023800
 80041f4:	08009708 	.word	0x08009708

080041f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d012      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004220:	4b69      	ldr	r3, [pc, #420]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a68      	ldr	r2, [pc, #416]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004226:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800422a:	6093      	str	r3, [r2, #8]
 800422c:	4b66      	ldr	r3, [pc, #408]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004234:	4964      	ldr	r1, [pc, #400]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004236:	4313      	orrs	r3, r2
 8004238:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004242:	2301      	movs	r3, #1
 8004244:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d017      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004252:	4b5d      	ldr	r3, [pc, #372]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004258:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004260:	4959      	ldr	r1, [pc, #356]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004270:	d101      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004272:	2301      	movs	r3, #1
 8004274:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800427e:	2301      	movs	r3, #1
 8004280:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d017      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800428e:	4b4e      	ldr	r3, [pc, #312]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004294:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	494a      	ldr	r1, [pc, #296]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ac:	d101      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80042ae:	2301      	movs	r3, #1
 80042b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80042ba:	2301      	movs	r3, #1
 80042bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80042ca:	2301      	movs	r3, #1
 80042cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 808b 	beq.w	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042dc:	4b3a      	ldr	r3, [pc, #232]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	4a39      	ldr	r2, [pc, #228]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e6:	6413      	str	r3, [r2, #64]	; 0x40
 80042e8:	4b37      	ldr	r3, [pc, #220]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042f4:	4b35      	ldr	r3, [pc, #212]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a34      	ldr	r2, [pc, #208]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004300:	f7fd fe10 	bl	8001f24 <HAL_GetTick>
 8004304:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004308:	f7fd fe0c 	bl	8001f24 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	; 0x64
 8004314:	d901      	bls.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e357      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800431a:	4b2c      	ldr	r3, [pc, #176]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004326:	4b28      	ldr	r3, [pc, #160]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d035      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	429a      	cmp	r2, r3
 8004342:	d02e      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004344:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800434e:	4b1e      	ldr	r3, [pc, #120]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004352:	4a1d      	ldr	r2, [pc, #116]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800435a:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	4a1a      	ldr	r2, [pc, #104]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004364:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004366:	4a18      	ldr	r2, [pc, #96]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800436c:	4b16      	ldr	r3, [pc, #88]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b01      	cmp	r3, #1
 8004376:	d114      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fd fdd4 	bl	8001f24 <HAL_GetTick>
 800437c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437e:	e00a      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004380:	f7fd fdd0 	bl	8001f24 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	; 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e319      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004396:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0ee      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ae:	d111      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043bc:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80043be:	400b      	ands	r3, r1
 80043c0:	4901      	ldr	r1, [pc, #4]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
 80043c6:	e00b      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80043c8:	40023800 	.word	0x40023800
 80043cc:	40007000 	.word	0x40007000
 80043d0:	0ffffcff 	.word	0x0ffffcff
 80043d4:	4baa      	ldr	r3, [pc, #680]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4aa9      	ldr	r2, [pc, #676]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043de:	6093      	str	r3, [r2, #8]
 80043e0:	4ba7      	ldr	r3, [pc, #668]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ec:	49a4      	ldr	r1, [pc, #656]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0310 	and.w	r3, r3, #16
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d010      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043fe:	4ba0      	ldr	r3, [pc, #640]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004404:	4a9e      	ldr	r2, [pc, #632]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800440a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800440e:	4b9c      	ldr	r3, [pc, #624]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004410:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	4999      	ldr	r1, [pc, #612]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800442c:	4b94      	ldr	r3, [pc, #592]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800443a:	4991      	ldr	r1, [pc, #580]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800444e:	4b8c      	ldr	r3, [pc, #560]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004454:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800445c:	4988      	ldr	r1, [pc, #544]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004470:	4b83      	ldr	r3, [pc, #524]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004476:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800447e:	4980      	ldr	r1, [pc, #512]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004492:	4b7b      	ldr	r3, [pc, #492]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004498:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	4977      	ldr	r1, [pc, #476]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044b4:	4b72      	ldr	r3, [pc, #456]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ba:	f023 0203 	bic.w	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	496f      	ldr	r1, [pc, #444]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044d6:	4b6a      	ldr	r3, [pc, #424]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044dc:	f023 020c 	bic.w	r2, r3, #12
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e4:	4966      	ldr	r1, [pc, #408]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044f8:	4b61      	ldr	r3, [pc, #388]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004506:	495e      	ldr	r1, [pc, #376]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800451a:	4b59      	ldr	r3, [pc, #356]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800451c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004520:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004528:	4955      	ldr	r1, [pc, #340]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800453c:	4b50      	ldr	r3, [pc, #320]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	494d      	ldr	r1, [pc, #308]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800455e:	4b48      	ldr	r3, [pc, #288]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004564:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	4944      	ldr	r1, [pc, #272]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004580:	4b3f      	ldr	r3, [pc, #252]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004586:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458e:	493c      	ldr	r1, [pc, #240]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045a2:	4b37      	ldr	r3, [pc, #220]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b0:	4933      	ldr	r1, [pc, #204]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045c4:	4b2e      	ldr	r3, [pc, #184]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d2:	492b      	ldr	r1, [pc, #172]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d011      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80045e6:	4b26      	ldr	r3, [pc, #152]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045f4:	4922      	ldr	r1, [pc, #136]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004604:	d101      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004606:	2301      	movs	r3, #1
 8004608:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004616:	2301      	movs	r3, #1
 8004618:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004626:	4b16      	ldr	r3, [pc, #88]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004634:	4912      	ldr	r1, [pc, #72]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00b      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004658:	4909      	ldr	r1, [pc, #36]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d006      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 80d9 	beq.w	8004826 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004674:	4b02      	ldr	r3, [pc, #8]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a01      	ldr	r2, [pc, #4]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800467a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800467e:	e001      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004680:	40023800 	.word	0x40023800
 8004684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004686:	f7fd fc4d 	bl	8001f24 <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800468e:	f7fd fc49 	bl	8001f24 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b64      	cmp	r3, #100	; 0x64
 800469a:	d901      	bls.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e194      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046a0:	4b6c      	ldr	r3, [pc, #432]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f0      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d021      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x504>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d11d      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046c0:	4b64      	ldr	r3, [pc, #400]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046ce:	4b61      	ldr	r3, [pc, #388]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d4:	0e1b      	lsrs	r3, r3, #24
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	019a      	lsls	r2, r3, #6
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	041b      	lsls	r3, r3, #16
 80046e6:	431a      	orrs	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	061b      	lsls	r3, r3, #24
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	071b      	lsls	r3, r3, #28
 80046f4:	4957      	ldr	r1, [pc, #348]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d004      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800471a:	2b00      	cmp	r3, #0
 800471c:	d02e      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004726:	d129      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004728:	4b4a      	ldr	r3, [pc, #296]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472e:	0c1b      	lsrs	r3, r3, #16
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004736:	4b47      	ldr	r3, [pc, #284]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473c:	0f1b      	lsrs	r3, r3, #28
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	019a      	lsls	r2, r3, #6
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	041b      	lsls	r3, r3, #16
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	061b      	lsls	r3, r3, #24
 8004756:	431a      	orrs	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	071b      	lsls	r3, r3, #28
 800475c:	493d      	ldr	r1, [pc, #244]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004764:	4b3b      	ldr	r3, [pc, #236]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800476a:	f023 021f 	bic.w	r2, r3, #31
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	3b01      	subs	r3, #1
 8004774:	4937      	ldr	r1, [pc, #220]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01d      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004788:	4b32      	ldr	r3, [pc, #200]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800478a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478e:	0e1b      	lsrs	r3, r3, #24
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004796:	4b2f      	ldr	r3, [pc, #188]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479c:	0f1b      	lsrs	r3, r3, #28
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	019a      	lsls	r2, r3, #6
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	431a      	orrs	r2, r3
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	061b      	lsls	r3, r3, #24
 80047b6:	431a      	orrs	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	071b      	lsls	r3, r3, #28
 80047bc:	4925      	ldr	r1, [pc, #148]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d011      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	019a      	lsls	r2, r3, #6
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	041b      	lsls	r3, r3, #16
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	061b      	lsls	r3, r3, #24
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	071b      	lsls	r3, r3, #28
 80047ec:	4919      	ldr	r1, [pc, #100]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047f4:	4b17      	ldr	r3, [pc, #92]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a16      	ldr	r2, [pc, #88]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004800:	f7fd fb90 	bl	8001f24 <HAL_GetTick>
 8004804:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004806:	e008      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004808:	f7fd fb8c 	bl	8001f24 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	; 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e0d7      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800481a:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b01      	cmp	r3, #1
 800482a:	f040 80cd 	bne.w	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800482e:	4b09      	ldr	r3, [pc, #36]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a08      	ldr	r2, [pc, #32]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800483a:	f7fd fb73 	bl	8001f24 <HAL_GetTick>
 800483e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004840:	e00a      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004842:	f7fd fb6f 	bl	8001f24 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b64      	cmp	r3, #100	; 0x64
 800484e:	d903      	bls.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e0ba      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004854:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004858:	4b5e      	ldr	r3, [pc, #376]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004864:	d0ed      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004882:	2b00      	cmp	r3, #0
 8004884:	d02e      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d12a      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800488e:	4b51      	ldr	r3, [pc, #324]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800489c:	4b4d      	ldr	r3, [pc, #308]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a2:	0f1b      	lsrs	r3, r3, #28
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	019a      	lsls	r2, r3, #6
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	431a      	orrs	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	071b      	lsls	r3, r3, #28
 80048c2:	4944      	ldr	r1, [pc, #272]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048ca:	4b42      	ldr	r3, [pc, #264]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	3b01      	subs	r3, #1
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	493d      	ldr	r1, [pc, #244]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d022      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048f8:	d11d      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048fa:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	0e1b      	lsrs	r3, r3, #24
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004908:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	0f1b      	lsrs	r3, r3, #28
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	019a      	lsls	r2, r3, #6
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	041b      	lsls	r3, r3, #16
 8004922:	431a      	orrs	r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	061b      	lsls	r3, r3, #24
 8004928:	431a      	orrs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	071b      	lsls	r3, r3, #28
 800492e:	4929      	ldr	r1, [pc, #164]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d028      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	0e1b      	lsrs	r3, r3, #24
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004950:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	019a      	lsls	r2, r3, #6
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	041b      	lsls	r3, r3, #16
 8004968:	431a      	orrs	r2, r3
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	061b      	lsls	r3, r3, #24
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	071b      	lsls	r3, r3, #28
 8004976:	4917      	ldr	r1, [pc, #92]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800497e:	4b15      	ldr	r3, [pc, #84]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004984:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	4911      	ldr	r1, [pc, #68]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004994:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0e      	ldr	r2, [pc, #56]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800499a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a0:	f7fd fac0 	bl	8001f24 <HAL_GetTick>
 80049a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049a8:	f7fd fabc 	bl	8001f24 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e007      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c6:	d1ef      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800

080049d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e049      	b.n	8004a7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fc fec4 	bl	800178c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	4619      	mov	r1, r3
 8004a16:	4610      	mov	r0, r2
 8004a18:	f000 fcc0 	bl	800539c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e049      	b.n	8004b2c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d106      	bne.n	8004ab2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f841 	bl	8004b34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	f000 fc69 	bl	800539c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <HAL_TIM_PWM_Start+0x24>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	bf14      	ite	ne
 8004b64:	2301      	movne	r3, #1
 8004b66:	2300      	moveq	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	e03c      	b.n	8004be6 <HAL_TIM_PWM_Start+0x9e>
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d109      	bne.n	8004b86 <HAL_TIM_PWM_Start+0x3e>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	bf14      	ite	ne
 8004b7e:	2301      	movne	r3, #1
 8004b80:	2300      	moveq	r3, #0
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	e02f      	b.n	8004be6 <HAL_TIM_PWM_Start+0x9e>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d109      	bne.n	8004ba0 <HAL_TIM_PWM_Start+0x58>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	bf14      	ite	ne
 8004b98:	2301      	movne	r3, #1
 8004b9a:	2300      	moveq	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	e022      	b.n	8004be6 <HAL_TIM_PWM_Start+0x9e>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b0c      	cmp	r3, #12
 8004ba4:	d109      	bne.n	8004bba <HAL_TIM_PWM_Start+0x72>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	bf14      	ite	ne
 8004bb2:	2301      	movne	r3, #1
 8004bb4:	2300      	moveq	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	e015      	b.n	8004be6 <HAL_TIM_PWM_Start+0x9e>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d109      	bne.n	8004bd4 <HAL_TIM_PWM_Start+0x8c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	e008      	b.n	8004be6 <HAL_TIM_PWM_Start+0x9e>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	bf14      	ite	ne
 8004be0:	2301      	movne	r3, #1
 8004be2:	2300      	moveq	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e092      	b.n	8004d14 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d104      	bne.n	8004bfe <HAL_TIM_PWM_Start+0xb6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bfc:	e023      	b.n	8004c46 <HAL_TIM_PWM_Start+0xfe>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_PWM_Start+0xc6>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c0c:	e01b      	b.n	8004c46 <HAL_TIM_PWM_Start+0xfe>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_PWM_Start+0xd6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c1c:	e013      	b.n	8004c46 <HAL_TIM_PWM_Start+0xfe>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b0c      	cmp	r3, #12
 8004c22:	d104      	bne.n	8004c2e <HAL_TIM_PWM_Start+0xe6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c2c:	e00b      	b.n	8004c46 <HAL_TIM_PWM_Start+0xfe>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d104      	bne.n	8004c3e <HAL_TIM_PWM_Start+0xf6>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c3c:	e003      	b.n	8004c46 <HAL_TIM_PWM_Start+0xfe>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2202      	movs	r2, #2
 8004c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	6839      	ldr	r1, [r7, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 ff3c 	bl	8005acc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a30      	ldr	r2, [pc, #192]	; (8004d1c <HAL_TIM_PWM_Start+0x1d4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_TIM_PWM_Start+0x120>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a2f      	ldr	r2, [pc, #188]	; (8004d20 <HAL_TIM_PWM_Start+0x1d8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d101      	bne.n	8004c6c <HAL_TIM_PWM_Start+0x124>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <HAL_TIM_PWM_Start+0x126>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a25      	ldr	r2, [pc, #148]	; (8004d1c <HAL_TIM_PWM_Start+0x1d4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d022      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x18a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c94:	d01d      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x18a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a22      	ldr	r2, [pc, #136]	; (8004d24 <HAL_TIM_PWM_Start+0x1dc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d018      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x18a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a20      	ldr	r2, [pc, #128]	; (8004d28 <HAL_TIM_PWM_Start+0x1e0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x18a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1f      	ldr	r2, [pc, #124]	; (8004d2c <HAL_TIM_PWM_Start+0x1e4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00e      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x18a>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <HAL_TIM_PWM_Start+0x1d8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d009      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x18a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1b      	ldr	r2, [pc, #108]	; (8004d30 <HAL_TIM_PWM_Start+0x1e8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x18a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a19      	ldr	r2, [pc, #100]	; (8004d34 <HAL_TIM_PWM_Start+0x1ec>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d115      	bne.n	8004cfe <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	4b17      	ldr	r3, [pc, #92]	; (8004d38 <HAL_TIM_PWM_Start+0x1f0>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b06      	cmp	r3, #6
 8004ce2:	d015      	beq.n	8004d10 <HAL_TIM_PWM_Start+0x1c8>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cea:	d011      	beq.n	8004d10 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfc:	e008      	b.n	8004d10 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0201 	orr.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	e000      	b.n	8004d12 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40010400 	.word	0x40010400
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40001800 	.word	0x40001800
 8004d38:	00010007 	.word	0x00010007

08004d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d122      	bne.n	8004d98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d11b      	bne.n	8004d98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0202 	mvn.w	r2, #2
 8004d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 faee 	bl	8005360 <HAL_TIM_IC_CaptureCallback>
 8004d84:	e005      	b.n	8004d92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fae0 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 faf1 	bl	8005374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d122      	bne.n	8004dec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d11b      	bne.n	8004dec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0204 	mvn.w	r2, #4
 8004dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fac4 	bl	8005360 <HAL_TIM_IC_CaptureCallback>
 8004dd8:	e005      	b.n	8004de6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fab6 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fac7 	bl	8005374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d122      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d11b      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0208 	mvn.w	r2, #8
 8004e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2204      	movs	r2, #4
 8004e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fa9a 	bl	8005360 <HAL_TIM_IC_CaptureCallback>
 8004e2c:	e005      	b.n	8004e3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fa8c 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fa9d 	bl	8005374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	2b10      	cmp	r3, #16
 8004e4c:	d122      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d11b      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0210 	mvn.w	r2, #16
 8004e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2208      	movs	r2, #8
 8004e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fa70 	bl	8005360 <HAL_TIM_IC_CaptureCallback>
 8004e80:	e005      	b.n	8004e8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fa62 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fa73 	bl	8005374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d10e      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d107      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0201 	mvn.w	r2, #1
 8004eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fa3c 	bl	8005338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eca:	2b80      	cmp	r3, #128	; 0x80
 8004ecc:	d10e      	bne.n	8004eec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed8:	2b80      	cmp	r3, #128	; 0x80
 8004eda:	d107      	bne.n	8004eec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 feae 	bl	8005c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efa:	d10e      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f06:	2b80      	cmp	r3, #128	; 0x80
 8004f08:	d107      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fea1 	bl	8005c5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f24:	2b40      	cmp	r3, #64	; 0x40
 8004f26:	d10e      	bne.n	8004f46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d107      	bne.n	8004f46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fa21 	bl	8005388 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d10e      	bne.n	8004f72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b20      	cmp	r3, #32
 8004f60:	d107      	bne.n	8004f72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f06f 0220 	mvn.w	r2, #32
 8004f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fe61 	bl	8005c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e0ff      	b.n	800519a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b14      	cmp	r3, #20
 8004fa6:	f200 80f0 	bhi.w	800518a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004faa:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08005005 	.word	0x08005005
 8004fb4:	0800518b 	.word	0x0800518b
 8004fb8:	0800518b 	.word	0x0800518b
 8004fbc:	0800518b 	.word	0x0800518b
 8004fc0:	08005045 	.word	0x08005045
 8004fc4:	0800518b 	.word	0x0800518b
 8004fc8:	0800518b 	.word	0x0800518b
 8004fcc:	0800518b 	.word	0x0800518b
 8004fd0:	08005087 	.word	0x08005087
 8004fd4:	0800518b 	.word	0x0800518b
 8004fd8:	0800518b 	.word	0x0800518b
 8004fdc:	0800518b 	.word	0x0800518b
 8004fe0:	080050c7 	.word	0x080050c7
 8004fe4:	0800518b 	.word	0x0800518b
 8004fe8:	0800518b 	.word	0x0800518b
 8004fec:	0800518b 	.word	0x0800518b
 8004ff0:	08005109 	.word	0x08005109
 8004ff4:	0800518b 	.word	0x0800518b
 8004ff8:	0800518b 	.word	0x0800518b
 8004ffc:	0800518b 	.word	0x0800518b
 8005000:	08005149 	.word	0x08005149
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fa66 	bl	80054dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0208 	orr.w	r2, r2, #8
 800501e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0204 	bic.w	r2, r2, #4
 800502e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6999      	ldr	r1, [r3, #24]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	619a      	str	r2, [r3, #24]
      break;
 8005042:	e0a5      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fab8 	bl	80055c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800505e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6999      	ldr	r1, [r3, #24]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	021a      	lsls	r2, r3, #8
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	619a      	str	r2, [r3, #24]
      break;
 8005084:	e084      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fb0f 	bl	80056b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0208 	orr.w	r2, r2, #8
 80050a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0204 	bic.w	r2, r2, #4
 80050b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69d9      	ldr	r1, [r3, #28]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	61da      	str	r2, [r3, #28]
      break;
 80050c4:	e064      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fb65 	bl	800579c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69d9      	ldr	r1, [r3, #28]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	021a      	lsls	r2, r3, #8
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	61da      	str	r2, [r3, #28]
      break;
 8005106:	e043      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fb9c 	bl	800584c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0208 	orr.w	r2, r2, #8
 8005122:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0204 	bic.w	r2, r2, #4
 8005132:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005146:	e023      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fbce 	bl	80058f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005162:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005172:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	021a      	lsls	r2, r3, #8
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005188:	e002      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	75fb      	strb	r3, [r7, #23]
      break;
 800518e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005198:	7dfb      	ldrb	r3, [r7, #23]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop

080051a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_TIM_ConfigClockSource+0x1c>
 80051bc:	2302      	movs	r3, #2
 80051be:	e0b4      	b.n	800532a <HAL_TIM_ConfigClockSource+0x186>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	4b56      	ldr	r3, [pc, #344]	; (8005334 <HAL_TIM_ConfigClockSource+0x190>)
 80051dc:	4013      	ands	r3, r2
 80051de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f8:	d03e      	beq.n	8005278 <HAL_TIM_ConfigClockSource+0xd4>
 80051fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051fe:	f200 8087 	bhi.w	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005206:	f000 8086 	beq.w	8005316 <HAL_TIM_ConfigClockSource+0x172>
 800520a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520e:	d87f      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005210:	2b70      	cmp	r3, #112	; 0x70
 8005212:	d01a      	beq.n	800524a <HAL_TIM_ConfigClockSource+0xa6>
 8005214:	2b70      	cmp	r3, #112	; 0x70
 8005216:	d87b      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005218:	2b60      	cmp	r3, #96	; 0x60
 800521a:	d050      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x11a>
 800521c:	2b60      	cmp	r3, #96	; 0x60
 800521e:	d877      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005220:	2b50      	cmp	r3, #80	; 0x50
 8005222:	d03c      	beq.n	800529e <HAL_TIM_ConfigClockSource+0xfa>
 8005224:	2b50      	cmp	r3, #80	; 0x50
 8005226:	d873      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d058      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x13a>
 800522c:	2b40      	cmp	r3, #64	; 0x40
 800522e:	d86f      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005230:	2b30      	cmp	r3, #48	; 0x30
 8005232:	d064      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x15a>
 8005234:	2b30      	cmp	r3, #48	; 0x30
 8005236:	d86b      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005238:	2b20      	cmp	r3, #32
 800523a:	d060      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x15a>
 800523c:	2b20      	cmp	r3, #32
 800523e:	d867      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005240:	2b00      	cmp	r3, #0
 8005242:	d05c      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x15a>
 8005244:	2b10      	cmp	r3, #16
 8005246:	d05a      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x15a>
 8005248:	e062      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800525a:	f000 fc17 	bl	8005a8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800526c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	609a      	str	r2, [r3, #8]
      break;
 8005276:	e04f      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005288:	f000 fc00 	bl	8005a8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800529a:	609a      	str	r2, [r3, #8]
      break;
 800529c:	e03c      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052aa:	461a      	mov	r2, r3
 80052ac:	f000 fb74 	bl	8005998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2150      	movs	r1, #80	; 0x50
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fbcd 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 80052bc:	e02c      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ca:	461a      	mov	r2, r3
 80052cc:	f000 fb93 	bl	80059f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2160      	movs	r1, #96	; 0x60
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fbbd 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 80052dc:	e01c      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ea:	461a      	mov	r2, r3
 80052ec:	f000 fb54 	bl	8005998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2140      	movs	r1, #64	; 0x40
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fbad 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 80052fc:	e00c      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4619      	mov	r1, r3
 8005308:	4610      	mov	r0, r2
 800530a:	f000 fba4 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 800530e:	e003      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
      break;
 8005314:	e000      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005316:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005328:	7bfb      	ldrb	r3, [r7, #15]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	fffeff88 	.word	0xfffeff88

08005338 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a40      	ldr	r2, [pc, #256]	; (80054b0 <TIM_Base_SetConfig+0x114>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d013      	beq.n	80053dc <TIM_Base_SetConfig+0x40>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ba:	d00f      	beq.n	80053dc <TIM_Base_SetConfig+0x40>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a3d      	ldr	r2, [pc, #244]	; (80054b4 <TIM_Base_SetConfig+0x118>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00b      	beq.n	80053dc <TIM_Base_SetConfig+0x40>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a3c      	ldr	r2, [pc, #240]	; (80054b8 <TIM_Base_SetConfig+0x11c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d007      	beq.n	80053dc <TIM_Base_SetConfig+0x40>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a3b      	ldr	r2, [pc, #236]	; (80054bc <TIM_Base_SetConfig+0x120>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d003      	beq.n	80053dc <TIM_Base_SetConfig+0x40>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a3a      	ldr	r2, [pc, #232]	; (80054c0 <TIM_Base_SetConfig+0x124>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d108      	bne.n	80053ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a2f      	ldr	r2, [pc, #188]	; (80054b0 <TIM_Base_SetConfig+0x114>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d02b      	beq.n	800544e <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fc:	d027      	beq.n	800544e <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a2c      	ldr	r2, [pc, #176]	; (80054b4 <TIM_Base_SetConfig+0x118>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d023      	beq.n	800544e <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a2b      	ldr	r2, [pc, #172]	; (80054b8 <TIM_Base_SetConfig+0x11c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01f      	beq.n	800544e <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a2a      	ldr	r2, [pc, #168]	; (80054bc <TIM_Base_SetConfig+0x120>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d01b      	beq.n	800544e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a29      	ldr	r2, [pc, #164]	; (80054c0 <TIM_Base_SetConfig+0x124>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d017      	beq.n	800544e <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a28      	ldr	r2, [pc, #160]	; (80054c4 <TIM_Base_SetConfig+0x128>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d013      	beq.n	800544e <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a27      	ldr	r2, [pc, #156]	; (80054c8 <TIM_Base_SetConfig+0x12c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00f      	beq.n	800544e <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a26      	ldr	r2, [pc, #152]	; (80054cc <TIM_Base_SetConfig+0x130>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00b      	beq.n	800544e <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a25      	ldr	r2, [pc, #148]	; (80054d0 <TIM_Base_SetConfig+0x134>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d007      	beq.n	800544e <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a24      	ldr	r2, [pc, #144]	; (80054d4 <TIM_Base_SetConfig+0x138>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d003      	beq.n	800544e <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a23      	ldr	r2, [pc, #140]	; (80054d8 <TIM_Base_SetConfig+0x13c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d108      	bne.n	8005460 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a0a      	ldr	r2, [pc, #40]	; (80054b0 <TIM_Base_SetConfig+0x114>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_Base_SetConfig+0xf8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a0c      	ldr	r2, [pc, #48]	; (80054c0 <TIM_Base_SetConfig+0x124>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d103      	bne.n	800549c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	615a      	str	r2, [r3, #20]
}
 80054a2:	bf00      	nop
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40010000 	.word	0x40010000
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800
 80054bc:	40000c00 	.word	0x40000c00
 80054c0:	40010400 	.word	0x40010400
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40014400 	.word	0x40014400
 80054cc:	40014800 	.word	0x40014800
 80054d0:	40001800 	.word	0x40001800
 80054d4:	40001c00 	.word	0x40001c00
 80054d8:	40002000 	.word	0x40002000

080054dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f023 0201 	bic.w	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4b2b      	ldr	r3, [pc, #172]	; (80055b4 <TIM_OC1_SetConfig+0xd8>)
 8005508:	4013      	ands	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f023 0302 	bic.w	r3, r3, #2
 8005524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a21      	ldr	r2, [pc, #132]	; (80055b8 <TIM_OC1_SetConfig+0xdc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC1_SetConfig+0x64>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a20      	ldr	r2, [pc, #128]	; (80055bc <TIM_OC1_SetConfig+0xe0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d10c      	bne.n	800555a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 0308 	bic.w	r3, r3, #8
 8005546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f023 0304 	bic.w	r3, r3, #4
 8005558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a16      	ldr	r2, [pc, #88]	; (80055b8 <TIM_OC1_SetConfig+0xdc>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d003      	beq.n	800556a <TIM_OC1_SetConfig+0x8e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a15      	ldr	r2, [pc, #84]	; (80055bc <TIM_OC1_SetConfig+0xe0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d111      	bne.n	800558e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	621a      	str	r2, [r3, #32]
}
 80055a8:	bf00      	nop
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	fffeff8f 	.word	0xfffeff8f
 80055b8:	40010000 	.word	0x40010000
 80055bc:	40010400 	.word	0x40010400

080055c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	f023 0210 	bic.w	r2, r3, #16
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4b2e      	ldr	r3, [pc, #184]	; (80056a4 <TIM_OC2_SetConfig+0xe4>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	021b      	lsls	r3, r3, #8
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f023 0320 	bic.w	r3, r3, #32
 800560a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a23      	ldr	r2, [pc, #140]	; (80056a8 <TIM_OC2_SetConfig+0xe8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d003      	beq.n	8005628 <TIM_OC2_SetConfig+0x68>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a22      	ldr	r2, [pc, #136]	; (80056ac <TIM_OC2_SetConfig+0xec>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d10d      	bne.n	8005644 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800562e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005642:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <TIM_OC2_SetConfig+0xe8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_OC2_SetConfig+0x94>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a17      	ldr	r2, [pc, #92]	; (80056ac <TIM_OC2_SetConfig+0xec>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d113      	bne.n	800567c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800565a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	feff8fff 	.word	0xfeff8fff
 80056a8:	40010000 	.word	0x40010000
 80056ac:	40010400 	.word	0x40010400

080056b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4b2d      	ldr	r3, [pc, #180]	; (8005790 <TIM_OC3_SetConfig+0xe0>)
 80056dc:	4013      	ands	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0303 	bic.w	r3, r3, #3
 80056e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a22      	ldr	r2, [pc, #136]	; (8005794 <TIM_OC3_SetConfig+0xe4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_OC3_SetConfig+0x66>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a21      	ldr	r2, [pc, #132]	; (8005798 <TIM_OC3_SetConfig+0xe8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d10d      	bne.n	8005732 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800571c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a17      	ldr	r2, [pc, #92]	; (8005794 <TIM_OC3_SetConfig+0xe4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d003      	beq.n	8005742 <TIM_OC3_SetConfig+0x92>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a16      	ldr	r2, [pc, #88]	; (8005798 <TIM_OC3_SetConfig+0xe8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d113      	bne.n	800576a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	621a      	str	r2, [r3, #32]
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	fffeff8f 	.word	0xfffeff8f
 8005794:	40010000 	.word	0x40010000
 8005798:	40010400 	.word	0x40010400

0800579c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4b1e      	ldr	r3, [pc, #120]	; (8005840 <TIM_OC4_SetConfig+0xa4>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	031b      	lsls	r3, r3, #12
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a13      	ldr	r2, [pc, #76]	; (8005844 <TIM_OC4_SetConfig+0xa8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_OC4_SetConfig+0x68>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a12      	ldr	r2, [pc, #72]	; (8005848 <TIM_OC4_SetConfig+0xac>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d109      	bne.n	8005818 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800580a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	019b      	lsls	r3, r3, #6
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	feff8fff 	.word	0xfeff8fff
 8005844:	40010000 	.word	0x40010000
 8005848:	40010400 	.word	0x40010400

0800584c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4b1b      	ldr	r3, [pc, #108]	; (80058e4 <TIM_OC5_SetConfig+0x98>)
 8005878:	4013      	ands	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800588c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	041b      	lsls	r3, r3, #16
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a12      	ldr	r2, [pc, #72]	; (80058e8 <TIM_OC5_SetConfig+0x9c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d003      	beq.n	80058aa <TIM_OC5_SetConfig+0x5e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a11      	ldr	r2, [pc, #68]	; (80058ec <TIM_OC5_SetConfig+0xa0>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d109      	bne.n	80058be <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	621a      	str	r2, [r3, #32]
}
 80058d8:	bf00      	nop
 80058da:	371c      	adds	r7, #28
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	fffeff8f 	.word	0xfffeff8f
 80058e8:	40010000 	.word	0x40010000
 80058ec:	40010400 	.word	0x40010400

080058f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4b1c      	ldr	r3, [pc, #112]	; (800598c <TIM_OC6_SetConfig+0x9c>)
 800591c:	4013      	ands	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	051b      	lsls	r3, r3, #20
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a13      	ldr	r2, [pc, #76]	; (8005990 <TIM_OC6_SetConfig+0xa0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_OC6_SetConfig+0x60>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a12      	ldr	r2, [pc, #72]	; (8005994 <TIM_OC6_SetConfig+0xa4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d109      	bne.n	8005964 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005956:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	029b      	lsls	r3, r3, #10
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	621a      	str	r2, [r3, #32]
}
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	feff8fff 	.word	0xfeff8fff
 8005990:	40010000 	.word	0x40010000
 8005994:	40010400 	.word	0x40010400

08005998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f023 0201 	bic.w	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f023 030a 	bic.w	r3, r3, #10
 80059d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b087      	sub	sp, #28
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f023 0210 	bic.w	r2, r3, #16
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	031b      	lsls	r3, r3, #12
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	621a      	str	r2, [r3, #32]
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f043 0307 	orr.w	r3, r3, #7
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	609a      	str	r2, [r3, #8]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	021a      	lsls	r2, r3, #8
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	609a      	str	r2, [r3, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f003 031f 	and.w	r3, r3, #31
 8005ade:	2201      	movs	r2, #1
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a1a      	ldr	r2, [r3, #32]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	43db      	mvns	r3, r3
 8005aee:	401a      	ands	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a1a      	ldr	r2, [r3, #32]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f003 031f 	and.w	r3, r3, #31
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	fa01 f303 	lsl.w	r3, r1, r3
 8005b04:	431a      	orrs	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	621a      	str	r2, [r3, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e06d      	b.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a30      	ldr	r2, [pc, #192]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d004      	beq.n	8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a2f      	ldr	r2, [pc, #188]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d108      	bne.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a20      	ldr	r2, [pc, #128]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d022      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba2:	d01d      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a1d      	ldr	r2, [pc, #116]	; (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d018      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1c      	ldr	r2, [pc, #112]	; (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d013      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1a      	ldr	r2, [pc, #104]	; (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00e      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a15      	ldr	r2, [pc, #84]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d009      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a16      	ldr	r2, [pc, #88]	; (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d004      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a15      	ldr	r2, [pc, #84]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d10c      	bne.n	8005bfa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40010400 	.word	0x40010400
 8005c20:	40000400 	.word	0x40000400
 8005c24:	40000800 	.word	0x40000800
 8005c28:	40000c00 	.word	0x40000c00
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40001800 	.word	0x40001800

08005c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e040      	b.n	8005d04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fb fdf2 	bl	800187c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2224      	movs	r2, #36	; 0x24
 8005c9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0201 	bic.w	r2, r2, #1
 8005cac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f974 	bl	8005f9c <UART_SetConfig>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e022      	b.n	8005d04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fbcc 	bl	8006464 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fc53 	bl	80065a8 <UART_CheckIdleState>
 8005d02:	4603      	mov	r3, r0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08a      	sub	sp, #40	; 0x28
 8005d10:	af02      	add	r7, sp, #8
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d171      	bne.n	8005e08 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <HAL_UART_Transmit+0x24>
 8005d2a:	88fb      	ldrh	r3, [r7, #6]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e06a      	b.n	8005e0a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2221      	movs	r2, #33	; 0x21
 8005d40:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d42:	f7fc f8ef 	bl	8001f24 <HAL_GetTick>
 8005d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	88fa      	ldrh	r2, [r7, #6]
 8005d4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	88fa      	ldrh	r2, [r7, #6]
 8005d54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d60:	d108      	bne.n	8005d74 <HAL_UART_Transmit+0x68>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d104      	bne.n	8005d74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	61bb      	str	r3, [r7, #24]
 8005d72:	e003      	b.n	8005d7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d7c:	e02c      	b.n	8005dd8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2200      	movs	r2, #0
 8005d86:	2180      	movs	r1, #128	; 0x80
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 fc44 	bl	8006616 <UART_WaitOnFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e038      	b.n	8005e0a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10b      	bne.n	8005db6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	3302      	adds	r3, #2
 8005db2:	61bb      	str	r3, [r7, #24]
 8005db4:	e007      	b.n	8005dc6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1cc      	bne.n	8005d7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2200      	movs	r2, #0
 8005dec:	2140      	movs	r1, #64	; 0x40
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 fc11 	bl	8006616 <UART_WaitOnFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e005      	b.n	8005e0a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2220      	movs	r2, #32
 8005e02:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	e000      	b.n	8005e0a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005e08:	2302      	movs	r3, #2
  }
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b08a      	sub	sp, #40	; 0x28
 8005e16:	af02      	add	r7, sp, #8
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	603b      	str	r3, [r7, #0]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	f040 80b1 	bne.w	8005f90 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <HAL_UART_Receive+0x28>
 8005e34:	88fb      	ldrh	r3, [r7, #6]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e0a9      	b.n	8005f92 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2222      	movs	r2, #34	; 0x22
 8005e4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e54:	f7fc f866 	bl	8001f24 <HAL_GetTick>
 8005e58:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	88fa      	ldrh	r2, [r7, #6]
 8005e5e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	88fa      	ldrh	r2, [r7, #6]
 8005e66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e72:	d10e      	bne.n	8005e92 <HAL_UART_Receive+0x80>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d105      	bne.n	8005e88 <HAL_UART_Receive+0x76>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e86:	e02d      	b.n	8005ee4 <HAL_UART_Receive+0xd2>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	22ff      	movs	r2, #255	; 0xff
 8005e8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e90:	e028      	b.n	8005ee4 <HAL_UART_Receive+0xd2>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10d      	bne.n	8005eb6 <HAL_UART_Receive+0xa4>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <HAL_UART_Receive+0x9a>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	22ff      	movs	r2, #255	; 0xff
 8005ea6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eaa:	e01b      	b.n	8005ee4 <HAL_UART_Receive+0xd2>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	227f      	movs	r2, #127	; 0x7f
 8005eb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eb4:	e016      	b.n	8005ee4 <HAL_UART_Receive+0xd2>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ebe:	d10d      	bne.n	8005edc <HAL_UART_Receive+0xca>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d104      	bne.n	8005ed2 <HAL_UART_Receive+0xc0>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	227f      	movs	r2, #127	; 0x7f
 8005ecc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ed0:	e008      	b.n	8005ee4 <HAL_UART_Receive+0xd2>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	223f      	movs	r2, #63	; 0x3f
 8005ed6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eda:	e003      	b.n	8005ee4 <HAL_UART_Receive+0xd2>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005eea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef4:	d108      	bne.n	8005f08 <HAL_UART_Receive+0xf6>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d104      	bne.n	8005f08 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	e003      	b.n	8005f10 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005f10:	e032      	b.n	8005f78 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2120      	movs	r1, #32
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fb7a 	bl	8006616 <UART_WaitOnFlagUntilTimeout>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e032      	b.n	8005f92 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10c      	bne.n	8005f4c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	8a7b      	ldrh	r3, [r7, #18]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	3302      	adds	r3, #2
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	e00c      	b.n	8005f66 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	8a7b      	ldrh	r3, [r7, #18]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	4013      	ands	r3, r2
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	3301      	adds	r3, #1
 8005f64:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1c6      	bne.n	8005f12 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e000      	b.n	8005f92 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005f90:	2302      	movs	r3, #2
  }
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3720      	adds	r7, #32
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4ba6      	ldr	r3, [pc, #664]	; (8006260 <UART_SetConfig+0x2c4>)
 8005fc8:	4013      	ands	r3, r2
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6812      	ldr	r2, [r2, #0]
 8005fce:	6979      	ldr	r1, [r7, #20]
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	430a      	orrs	r2, r1
 800600c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a94      	ldr	r2, [pc, #592]	; (8006264 <UART_SetConfig+0x2c8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d120      	bne.n	800605a <UART_SetConfig+0xbe>
 8006018:	4b93      	ldr	r3, [pc, #588]	; (8006268 <UART_SetConfig+0x2cc>)
 800601a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	2b03      	cmp	r3, #3
 8006024:	d816      	bhi.n	8006054 <UART_SetConfig+0xb8>
 8006026:	a201      	add	r2, pc, #4	; (adr r2, 800602c <UART_SetConfig+0x90>)
 8006028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602c:	0800603d 	.word	0x0800603d
 8006030:	08006049 	.word	0x08006049
 8006034:	08006043 	.word	0x08006043
 8006038:	0800604f 	.word	0x0800604f
 800603c:	2301      	movs	r3, #1
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e150      	b.n	80062e4 <UART_SetConfig+0x348>
 8006042:	2302      	movs	r3, #2
 8006044:	77fb      	strb	r3, [r7, #31]
 8006046:	e14d      	b.n	80062e4 <UART_SetConfig+0x348>
 8006048:	2304      	movs	r3, #4
 800604a:	77fb      	strb	r3, [r7, #31]
 800604c:	e14a      	b.n	80062e4 <UART_SetConfig+0x348>
 800604e:	2308      	movs	r3, #8
 8006050:	77fb      	strb	r3, [r7, #31]
 8006052:	e147      	b.n	80062e4 <UART_SetConfig+0x348>
 8006054:	2310      	movs	r3, #16
 8006056:	77fb      	strb	r3, [r7, #31]
 8006058:	e144      	b.n	80062e4 <UART_SetConfig+0x348>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a83      	ldr	r2, [pc, #524]	; (800626c <UART_SetConfig+0x2d0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d132      	bne.n	80060ca <UART_SetConfig+0x12e>
 8006064:	4b80      	ldr	r3, [pc, #512]	; (8006268 <UART_SetConfig+0x2cc>)
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606a:	f003 030c 	and.w	r3, r3, #12
 800606e:	2b0c      	cmp	r3, #12
 8006070:	d828      	bhi.n	80060c4 <UART_SetConfig+0x128>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <UART_SetConfig+0xdc>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	080060ad 	.word	0x080060ad
 800607c:	080060c5 	.word	0x080060c5
 8006080:	080060c5 	.word	0x080060c5
 8006084:	080060c5 	.word	0x080060c5
 8006088:	080060b9 	.word	0x080060b9
 800608c:	080060c5 	.word	0x080060c5
 8006090:	080060c5 	.word	0x080060c5
 8006094:	080060c5 	.word	0x080060c5
 8006098:	080060b3 	.word	0x080060b3
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060c5 	.word	0x080060c5
 80060a4:	080060c5 	.word	0x080060c5
 80060a8:	080060bf 	.word	0x080060bf
 80060ac:	2300      	movs	r3, #0
 80060ae:	77fb      	strb	r3, [r7, #31]
 80060b0:	e118      	b.n	80062e4 <UART_SetConfig+0x348>
 80060b2:	2302      	movs	r3, #2
 80060b4:	77fb      	strb	r3, [r7, #31]
 80060b6:	e115      	b.n	80062e4 <UART_SetConfig+0x348>
 80060b8:	2304      	movs	r3, #4
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e112      	b.n	80062e4 <UART_SetConfig+0x348>
 80060be:	2308      	movs	r3, #8
 80060c0:	77fb      	strb	r3, [r7, #31]
 80060c2:	e10f      	b.n	80062e4 <UART_SetConfig+0x348>
 80060c4:	2310      	movs	r3, #16
 80060c6:	77fb      	strb	r3, [r7, #31]
 80060c8:	e10c      	b.n	80062e4 <UART_SetConfig+0x348>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a68      	ldr	r2, [pc, #416]	; (8006270 <UART_SetConfig+0x2d4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d120      	bne.n	8006116 <UART_SetConfig+0x17a>
 80060d4:	4b64      	ldr	r3, [pc, #400]	; (8006268 <UART_SetConfig+0x2cc>)
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060de:	2b30      	cmp	r3, #48	; 0x30
 80060e0:	d013      	beq.n	800610a <UART_SetConfig+0x16e>
 80060e2:	2b30      	cmp	r3, #48	; 0x30
 80060e4:	d814      	bhi.n	8006110 <UART_SetConfig+0x174>
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d009      	beq.n	80060fe <UART_SetConfig+0x162>
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d810      	bhi.n	8006110 <UART_SetConfig+0x174>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <UART_SetConfig+0x15c>
 80060f2:	2b10      	cmp	r3, #16
 80060f4:	d006      	beq.n	8006104 <UART_SetConfig+0x168>
 80060f6:	e00b      	b.n	8006110 <UART_SetConfig+0x174>
 80060f8:	2300      	movs	r3, #0
 80060fa:	77fb      	strb	r3, [r7, #31]
 80060fc:	e0f2      	b.n	80062e4 <UART_SetConfig+0x348>
 80060fe:	2302      	movs	r3, #2
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e0ef      	b.n	80062e4 <UART_SetConfig+0x348>
 8006104:	2304      	movs	r3, #4
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e0ec      	b.n	80062e4 <UART_SetConfig+0x348>
 800610a:	2308      	movs	r3, #8
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e0e9      	b.n	80062e4 <UART_SetConfig+0x348>
 8006110:	2310      	movs	r3, #16
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e0e6      	b.n	80062e4 <UART_SetConfig+0x348>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a56      	ldr	r2, [pc, #344]	; (8006274 <UART_SetConfig+0x2d8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d120      	bne.n	8006162 <UART_SetConfig+0x1c6>
 8006120:	4b51      	ldr	r3, [pc, #324]	; (8006268 <UART_SetConfig+0x2cc>)
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006126:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800612a:	2bc0      	cmp	r3, #192	; 0xc0
 800612c:	d013      	beq.n	8006156 <UART_SetConfig+0x1ba>
 800612e:	2bc0      	cmp	r3, #192	; 0xc0
 8006130:	d814      	bhi.n	800615c <UART_SetConfig+0x1c0>
 8006132:	2b80      	cmp	r3, #128	; 0x80
 8006134:	d009      	beq.n	800614a <UART_SetConfig+0x1ae>
 8006136:	2b80      	cmp	r3, #128	; 0x80
 8006138:	d810      	bhi.n	800615c <UART_SetConfig+0x1c0>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <UART_SetConfig+0x1a8>
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	d006      	beq.n	8006150 <UART_SetConfig+0x1b4>
 8006142:	e00b      	b.n	800615c <UART_SetConfig+0x1c0>
 8006144:	2300      	movs	r3, #0
 8006146:	77fb      	strb	r3, [r7, #31]
 8006148:	e0cc      	b.n	80062e4 <UART_SetConfig+0x348>
 800614a:	2302      	movs	r3, #2
 800614c:	77fb      	strb	r3, [r7, #31]
 800614e:	e0c9      	b.n	80062e4 <UART_SetConfig+0x348>
 8006150:	2304      	movs	r3, #4
 8006152:	77fb      	strb	r3, [r7, #31]
 8006154:	e0c6      	b.n	80062e4 <UART_SetConfig+0x348>
 8006156:	2308      	movs	r3, #8
 8006158:	77fb      	strb	r3, [r7, #31]
 800615a:	e0c3      	b.n	80062e4 <UART_SetConfig+0x348>
 800615c:	2310      	movs	r3, #16
 800615e:	77fb      	strb	r3, [r7, #31]
 8006160:	e0c0      	b.n	80062e4 <UART_SetConfig+0x348>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a44      	ldr	r2, [pc, #272]	; (8006278 <UART_SetConfig+0x2dc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d125      	bne.n	80061b8 <UART_SetConfig+0x21c>
 800616c:	4b3e      	ldr	r3, [pc, #248]	; (8006268 <UART_SetConfig+0x2cc>)
 800616e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800617a:	d017      	beq.n	80061ac <UART_SetConfig+0x210>
 800617c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006180:	d817      	bhi.n	80061b2 <UART_SetConfig+0x216>
 8006182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006186:	d00b      	beq.n	80061a0 <UART_SetConfig+0x204>
 8006188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800618c:	d811      	bhi.n	80061b2 <UART_SetConfig+0x216>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <UART_SetConfig+0x1fe>
 8006192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006196:	d006      	beq.n	80061a6 <UART_SetConfig+0x20a>
 8006198:	e00b      	b.n	80061b2 <UART_SetConfig+0x216>
 800619a:	2300      	movs	r3, #0
 800619c:	77fb      	strb	r3, [r7, #31]
 800619e:	e0a1      	b.n	80062e4 <UART_SetConfig+0x348>
 80061a0:	2302      	movs	r3, #2
 80061a2:	77fb      	strb	r3, [r7, #31]
 80061a4:	e09e      	b.n	80062e4 <UART_SetConfig+0x348>
 80061a6:	2304      	movs	r3, #4
 80061a8:	77fb      	strb	r3, [r7, #31]
 80061aa:	e09b      	b.n	80062e4 <UART_SetConfig+0x348>
 80061ac:	2308      	movs	r3, #8
 80061ae:	77fb      	strb	r3, [r7, #31]
 80061b0:	e098      	b.n	80062e4 <UART_SetConfig+0x348>
 80061b2:	2310      	movs	r3, #16
 80061b4:	77fb      	strb	r3, [r7, #31]
 80061b6:	e095      	b.n	80062e4 <UART_SetConfig+0x348>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a2f      	ldr	r2, [pc, #188]	; (800627c <UART_SetConfig+0x2e0>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d125      	bne.n	800620e <UART_SetConfig+0x272>
 80061c2:	4b29      	ldr	r3, [pc, #164]	; (8006268 <UART_SetConfig+0x2cc>)
 80061c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061d0:	d017      	beq.n	8006202 <UART_SetConfig+0x266>
 80061d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061d6:	d817      	bhi.n	8006208 <UART_SetConfig+0x26c>
 80061d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061dc:	d00b      	beq.n	80061f6 <UART_SetConfig+0x25a>
 80061de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e2:	d811      	bhi.n	8006208 <UART_SetConfig+0x26c>
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <UART_SetConfig+0x254>
 80061e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ec:	d006      	beq.n	80061fc <UART_SetConfig+0x260>
 80061ee:	e00b      	b.n	8006208 <UART_SetConfig+0x26c>
 80061f0:	2301      	movs	r3, #1
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e076      	b.n	80062e4 <UART_SetConfig+0x348>
 80061f6:	2302      	movs	r3, #2
 80061f8:	77fb      	strb	r3, [r7, #31]
 80061fa:	e073      	b.n	80062e4 <UART_SetConfig+0x348>
 80061fc:	2304      	movs	r3, #4
 80061fe:	77fb      	strb	r3, [r7, #31]
 8006200:	e070      	b.n	80062e4 <UART_SetConfig+0x348>
 8006202:	2308      	movs	r3, #8
 8006204:	77fb      	strb	r3, [r7, #31]
 8006206:	e06d      	b.n	80062e4 <UART_SetConfig+0x348>
 8006208:	2310      	movs	r3, #16
 800620a:	77fb      	strb	r3, [r7, #31]
 800620c:	e06a      	b.n	80062e4 <UART_SetConfig+0x348>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a1b      	ldr	r2, [pc, #108]	; (8006280 <UART_SetConfig+0x2e4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d138      	bne.n	800628a <UART_SetConfig+0x2ee>
 8006218:	4b13      	ldr	r3, [pc, #76]	; (8006268 <UART_SetConfig+0x2cc>)
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006222:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006226:	d017      	beq.n	8006258 <UART_SetConfig+0x2bc>
 8006228:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800622c:	d82a      	bhi.n	8006284 <UART_SetConfig+0x2e8>
 800622e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006232:	d00b      	beq.n	800624c <UART_SetConfig+0x2b0>
 8006234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006238:	d824      	bhi.n	8006284 <UART_SetConfig+0x2e8>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <UART_SetConfig+0x2aa>
 800623e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006242:	d006      	beq.n	8006252 <UART_SetConfig+0x2b6>
 8006244:	e01e      	b.n	8006284 <UART_SetConfig+0x2e8>
 8006246:	2300      	movs	r3, #0
 8006248:	77fb      	strb	r3, [r7, #31]
 800624a:	e04b      	b.n	80062e4 <UART_SetConfig+0x348>
 800624c:	2302      	movs	r3, #2
 800624e:	77fb      	strb	r3, [r7, #31]
 8006250:	e048      	b.n	80062e4 <UART_SetConfig+0x348>
 8006252:	2304      	movs	r3, #4
 8006254:	77fb      	strb	r3, [r7, #31]
 8006256:	e045      	b.n	80062e4 <UART_SetConfig+0x348>
 8006258:	2308      	movs	r3, #8
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	e042      	b.n	80062e4 <UART_SetConfig+0x348>
 800625e:	bf00      	nop
 8006260:	efff69f3 	.word	0xefff69f3
 8006264:	40011000 	.word	0x40011000
 8006268:	40023800 	.word	0x40023800
 800626c:	40004400 	.word	0x40004400
 8006270:	40004800 	.word	0x40004800
 8006274:	40004c00 	.word	0x40004c00
 8006278:	40005000 	.word	0x40005000
 800627c:	40011400 	.word	0x40011400
 8006280:	40007800 	.word	0x40007800
 8006284:	2310      	movs	r3, #16
 8006286:	77fb      	strb	r3, [r7, #31]
 8006288:	e02c      	b.n	80062e4 <UART_SetConfig+0x348>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a72      	ldr	r2, [pc, #456]	; (8006458 <UART_SetConfig+0x4bc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d125      	bne.n	80062e0 <UART_SetConfig+0x344>
 8006294:	4b71      	ldr	r3, [pc, #452]	; (800645c <UART_SetConfig+0x4c0>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800629e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80062a2:	d017      	beq.n	80062d4 <UART_SetConfig+0x338>
 80062a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80062a8:	d817      	bhi.n	80062da <UART_SetConfig+0x33e>
 80062aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ae:	d00b      	beq.n	80062c8 <UART_SetConfig+0x32c>
 80062b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b4:	d811      	bhi.n	80062da <UART_SetConfig+0x33e>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <UART_SetConfig+0x326>
 80062ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062be:	d006      	beq.n	80062ce <UART_SetConfig+0x332>
 80062c0:	e00b      	b.n	80062da <UART_SetConfig+0x33e>
 80062c2:	2300      	movs	r3, #0
 80062c4:	77fb      	strb	r3, [r7, #31]
 80062c6:	e00d      	b.n	80062e4 <UART_SetConfig+0x348>
 80062c8:	2302      	movs	r3, #2
 80062ca:	77fb      	strb	r3, [r7, #31]
 80062cc:	e00a      	b.n	80062e4 <UART_SetConfig+0x348>
 80062ce:	2304      	movs	r3, #4
 80062d0:	77fb      	strb	r3, [r7, #31]
 80062d2:	e007      	b.n	80062e4 <UART_SetConfig+0x348>
 80062d4:	2308      	movs	r3, #8
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e004      	b.n	80062e4 <UART_SetConfig+0x348>
 80062da:	2310      	movs	r3, #16
 80062dc:	77fb      	strb	r3, [r7, #31]
 80062de:	e001      	b.n	80062e4 <UART_SetConfig+0x348>
 80062e0:	2310      	movs	r3, #16
 80062e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ec:	d15b      	bne.n	80063a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80062ee:	7ffb      	ldrb	r3, [r7, #31]
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d828      	bhi.n	8006346 <UART_SetConfig+0x3aa>
 80062f4:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <UART_SetConfig+0x360>)
 80062f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fa:	bf00      	nop
 80062fc:	08006321 	.word	0x08006321
 8006300:	08006329 	.word	0x08006329
 8006304:	08006331 	.word	0x08006331
 8006308:	08006347 	.word	0x08006347
 800630c:	08006337 	.word	0x08006337
 8006310:	08006347 	.word	0x08006347
 8006314:	08006347 	.word	0x08006347
 8006318:	08006347 	.word	0x08006347
 800631c:	0800633f 	.word	0x0800633f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006320:	f7fd ff42 	bl	80041a8 <HAL_RCC_GetPCLK1Freq>
 8006324:	61b8      	str	r0, [r7, #24]
        break;
 8006326:	e013      	b.n	8006350 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006328:	f7fd ff52 	bl	80041d0 <HAL_RCC_GetPCLK2Freq>
 800632c:	61b8      	str	r0, [r7, #24]
        break;
 800632e:	e00f      	b.n	8006350 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006330:	4b4b      	ldr	r3, [pc, #300]	; (8006460 <UART_SetConfig+0x4c4>)
 8006332:	61bb      	str	r3, [r7, #24]
        break;
 8006334:	e00c      	b.n	8006350 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006336:	f7fd fe25 	bl	8003f84 <HAL_RCC_GetSysClockFreq>
 800633a:	61b8      	str	r0, [r7, #24]
        break;
 800633c:	e008      	b.n	8006350 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800633e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006342:	61bb      	str	r3, [r7, #24]
        break;
 8006344:	e004      	b.n	8006350 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	77bb      	strb	r3, [r7, #30]
        break;
 800634e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d074      	beq.n	8006440 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	005a      	lsls	r2, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	085b      	lsrs	r3, r3, #1
 8006360:	441a      	add	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	fbb2 f3f3 	udiv	r3, r2, r3
 800636a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	2b0f      	cmp	r3, #15
 8006370:	d916      	bls.n	80063a0 <UART_SetConfig+0x404>
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006378:	d212      	bcs.n	80063a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	b29b      	uxth	r3, r3
 800637e:	f023 030f 	bic.w	r3, r3, #15
 8006382:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	b29b      	uxth	r3, r3
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	b29a      	uxth	r2, r3
 8006390:	89fb      	ldrh	r3, [r7, #14]
 8006392:	4313      	orrs	r3, r2
 8006394:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	89fa      	ldrh	r2, [r7, #14]
 800639c:	60da      	str	r2, [r3, #12]
 800639e:	e04f      	b.n	8006440 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	77bb      	strb	r3, [r7, #30]
 80063a4:	e04c      	b.n	8006440 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063a6:	7ffb      	ldrb	r3, [r7, #31]
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d828      	bhi.n	80063fe <UART_SetConfig+0x462>
 80063ac:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <UART_SetConfig+0x418>)
 80063ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b2:	bf00      	nop
 80063b4:	080063d9 	.word	0x080063d9
 80063b8:	080063e1 	.word	0x080063e1
 80063bc:	080063e9 	.word	0x080063e9
 80063c0:	080063ff 	.word	0x080063ff
 80063c4:	080063ef 	.word	0x080063ef
 80063c8:	080063ff 	.word	0x080063ff
 80063cc:	080063ff 	.word	0x080063ff
 80063d0:	080063ff 	.word	0x080063ff
 80063d4:	080063f7 	.word	0x080063f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d8:	f7fd fee6 	bl	80041a8 <HAL_RCC_GetPCLK1Freq>
 80063dc:	61b8      	str	r0, [r7, #24]
        break;
 80063de:	e013      	b.n	8006408 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063e0:	f7fd fef6 	bl	80041d0 <HAL_RCC_GetPCLK2Freq>
 80063e4:	61b8      	str	r0, [r7, #24]
        break;
 80063e6:	e00f      	b.n	8006408 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063e8:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <UART_SetConfig+0x4c4>)
 80063ea:	61bb      	str	r3, [r7, #24]
        break;
 80063ec:	e00c      	b.n	8006408 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ee:	f7fd fdc9 	bl	8003f84 <HAL_RCC_GetSysClockFreq>
 80063f2:	61b8      	str	r0, [r7, #24]
        break;
 80063f4:	e008      	b.n	8006408 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063fa:	61bb      	str	r3, [r7, #24]
        break;
 80063fc:	e004      	b.n	8006408 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	77bb      	strb	r3, [r7, #30]
        break;
 8006406:	bf00      	nop
    }

    if (pclk != 0U)
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d018      	beq.n	8006440 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	085a      	lsrs	r2, r3, #1
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	441a      	add	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006420:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b0f      	cmp	r3, #15
 8006426:	d909      	bls.n	800643c <UART_SetConfig+0x4a0>
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642e:	d205      	bcs.n	800643c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	b29a      	uxth	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	60da      	str	r2, [r3, #12]
 800643a:	e001      	b.n	8006440 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800644c:	7fbb      	ldrb	r3, [r7, #30]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3720      	adds	r7, #32
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	40007c00 	.word	0x40007c00
 800645c:	40023800 	.word	0x40023800
 8006460:	00f42400 	.word	0x00f42400

08006464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00a      	beq.n	800648e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	f003 0310 	and.w	r3, r3, #16
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00a      	beq.n	8006516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	f003 0320 	and.w	r3, r3, #32
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006540:	2b00      	cmp	r3, #0
 8006542:	d01a      	beq.n	800657a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006562:	d10a      	bne.n	800657a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	605a      	str	r2, [r3, #4]
  }
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065b8:	f7fb fcb4 	bl	8001f24 <HAL_GetTick>
 80065bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d10e      	bne.n	80065ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f81b 	bl	8006616 <UART_WaitOnFlagUntilTimeout>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e011      	b.n	800660e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b09c      	sub	sp, #112	; 0x70
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	603b      	str	r3, [r7, #0]
 8006622:	4613      	mov	r3, r2
 8006624:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006626:	e0a7      	b.n	8006778 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800662a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662e:	f000 80a3 	beq.w	8006778 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006632:	f7fb fc77 	bl	8001f24 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800663e:	429a      	cmp	r2, r3
 8006640:	d302      	bcc.n	8006648 <UART_WaitOnFlagUntilTimeout+0x32>
 8006642:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006644:	2b00      	cmp	r3, #0
 8006646:	d13f      	bne.n	80066c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006658:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800665c:	667b      	str	r3, [r7, #100]	; 0x64
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006666:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006668:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800666c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e6      	bne.n	8006648 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3308      	adds	r3, #8
 8006680:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668c:	f023 0301 	bic.w	r3, r3, #1
 8006690:	663b      	str	r3, [r7, #96]	; 0x60
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3308      	adds	r3, #8
 8006698:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800669a:	64ba      	str	r2, [r7, #72]	; 0x48
 800669c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e5      	bne.n	800667a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2220      	movs	r2, #32
 80066b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e068      	b.n	800679a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d050      	beq.n	8006778 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e4:	d148      	bne.n	8006778 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006704:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670e:	637b      	str	r3, [r7, #52]	; 0x34
 8006710:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e6      	bne.n	80066f0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3308      	adds	r3, #8
 8006728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	613b      	str	r3, [r7, #16]
   return(result);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f023 0301 	bic.w	r3, r3, #1
 8006738:	66bb      	str	r3, [r7, #104]	; 0x68
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3308      	adds	r3, #8
 8006740:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006742:	623a      	str	r2, [r7, #32]
 8006744:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	69f9      	ldr	r1, [r7, #28]
 8006748:	6a3a      	ldr	r2, [r7, #32]
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e5      	bne.n	8006722 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2220      	movs	r2, #32
 800675a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e010      	b.n	800679a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69da      	ldr	r2, [r3, #28]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4013      	ands	r3, r2
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	429a      	cmp	r2, r3
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	429a      	cmp	r2, r3
 8006794:	f43f af48 	beq.w	8006628 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3770      	adds	r7, #112	; 0x70
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067a4:	b084      	sub	sp, #16
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	f107 001c 	add.w	r0, r7, #28
 80067b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d120      	bne.n	80067fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	4b20      	ldr	r3, [pc, #128]	; (8006850 <USB_CoreInit+0xac>)
 80067ce:	4013      	ands	r3, r2
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d105      	bne.n	80067f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fa96 	bl	8006d24 <USB_CoreReset>
 80067f8:	4603      	mov	r3, r0
 80067fa:	73fb      	strb	r3, [r7, #15]
 80067fc:	e010      	b.n	8006820 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fa8a 	bl	8006d24 <USB_CoreReset>
 8006810:	4603      	mov	r3, r0
 8006812:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	2b01      	cmp	r3, #1
 8006824:	d10b      	bne.n	800683e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f043 0206 	orr.w	r2, r3, #6
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f043 0220 	orr.w	r2, r3, #32
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800683e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800684a:	b004      	add	sp, #16
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	ffbdffbf 	.word	0xffbdffbf

08006854 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f023 0201 	bic.w	r2, r3, #1
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	460b      	mov	r3, r1
 8006880:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006892:	78fb      	ldrb	r3, [r7, #3]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d115      	bne.n	80068c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068a4:	2001      	movs	r0, #1
 80068a6:	f7fb fb49 	bl	8001f3c <HAL_Delay>
      ms++;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3301      	adds	r3, #1
 80068ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fa29 	bl	8006d08 <USB_GetMode>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d01e      	beq.n	80068fa <USB_SetCurrentMode+0x84>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b31      	cmp	r3, #49	; 0x31
 80068c0:	d9f0      	bls.n	80068a4 <USB_SetCurrentMode+0x2e>
 80068c2:	e01a      	b.n	80068fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d115      	bne.n	80068f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068d6:	2001      	movs	r0, #1
 80068d8:	f7fb fb30 	bl	8001f3c <HAL_Delay>
      ms++;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3301      	adds	r3, #1
 80068e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa10 	bl	8006d08 <USB_GetMode>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d005      	beq.n	80068fa <USB_SetCurrentMode+0x84>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b31      	cmp	r3, #49	; 0x31
 80068f2:	d9f0      	bls.n	80068d6 <USB_SetCurrentMode+0x60>
 80068f4:	e001      	b.n	80068fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e005      	b.n	8006906 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b32      	cmp	r3, #50	; 0x32
 80068fe:	d101      	bne.n	8006904 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e000      	b.n	8006906 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006910:	b084      	sub	sp, #16
 8006912:	b580      	push	{r7, lr}
 8006914:	b086      	sub	sp, #24
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800691e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800692a:	2300      	movs	r3, #0
 800692c:	613b      	str	r3, [r7, #16]
 800692e:	e009      	b.n	8006944 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	3340      	adds	r3, #64	; 0x40
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	2200      	movs	r2, #0
 800693c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	3301      	adds	r3, #1
 8006942:	613b      	str	r3, [r7, #16]
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	2b0e      	cmp	r3, #14
 8006948:	d9f2      	bls.n	8006930 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800694a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694c:	2b00      	cmp	r3, #0
 800694e:	d11c      	bne.n	800698a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800695e:	f043 0302 	orr.w	r3, r3, #2
 8006962:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006968:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	e005      	b.n	8006996 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800699c:	461a      	mov	r2, r3
 800699e:	2300      	movs	r3, #0
 80069a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a8:	4619      	mov	r1, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b0:	461a      	mov	r2, r3
 80069b2:	680b      	ldr	r3, [r1, #0]
 80069b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d10c      	bne.n	80069d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80069bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d104      	bne.n	80069cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80069c2:	2100      	movs	r1, #0
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f965 	bl	8006c94 <USB_SetDevSpeed>
 80069ca:	e008      	b.n	80069de <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069cc:	2101      	movs	r1, #1
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f960 	bl	8006c94 <USB_SetDevSpeed>
 80069d4:	e003      	b.n	80069de <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069d6:	2103      	movs	r1, #3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f95b 	bl	8006c94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069de:	2110      	movs	r1, #16
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f8f3 	bl	8006bcc <USB_FlushTxFifo>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f91f 	bl	8006c34 <USB_FlushRxFifo>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a06:	461a      	mov	r2, r3
 8006a08:	2300      	movs	r3, #0
 8006a0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a12:	461a      	mov	r2, r3
 8006a14:	2300      	movs	r3, #0
 8006a16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1e:	461a      	mov	r2, r3
 8006a20:	2300      	movs	r3, #0
 8006a22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a24:	2300      	movs	r3, #0
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	e043      	b.n	8006ab2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a40:	d118      	bne.n	8006a74 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10a      	bne.n	8006a5e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a54:	461a      	mov	r2, r3
 8006a56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	e013      	b.n	8006a86 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	e008      	b.n	8006a86 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a80:	461a      	mov	r2, r3
 8006a82:	2300      	movs	r3, #0
 8006a84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a92:	461a      	mov	r2, r3
 8006a94:	2300      	movs	r3, #0
 8006a96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006aaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	613b      	str	r3, [r7, #16]
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d3b7      	bcc.n	8006a2a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006aba:	2300      	movs	r3, #0
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	e043      	b.n	8006b48 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ad6:	d118      	bne.n	8006b0a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10a      	bne.n	8006af4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aea:	461a      	mov	r2, r3
 8006aec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	e013      	b.n	8006b1c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b00:	461a      	mov	r2, r3
 8006b02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	e008      	b.n	8006b1c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b16:	461a      	mov	r2, r3
 8006b18:	2300      	movs	r3, #0
 8006b1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b28:	461a      	mov	r2, r3
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	3301      	adds	r3, #1
 8006b46:	613b      	str	r3, [r7, #16]
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d3b7      	bcc.n	8006ac0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d105      	bne.n	8006b84 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	f043 0210 	orr.w	r2, r3, #16
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699a      	ldr	r2, [r3, #24]
 8006b88:	4b0e      	ldr	r3, [pc, #56]	; (8006bc4 <USB_DevInit+0x2b4>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	f043 0208 	orr.w	r2, r3, #8
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d105      	bne.n	8006bb4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	699a      	ldr	r2, [r3, #24]
 8006bac:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <USB_DevInit+0x2b8>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bc0:	b004      	add	sp, #16
 8006bc2:	4770      	bx	lr
 8006bc4:	803c3800 	.word	0x803c3800
 8006bc8:	40000004 	.word	0x40000004

08006bcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4a13      	ldr	r2, [pc, #76]	; (8006c30 <USB_FlushTxFifo+0x64>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d901      	bls.n	8006bec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e01b      	b.n	8006c24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	daf2      	bge.n	8006bda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	019b      	lsls	r3, r3, #6
 8006bfc:	f043 0220 	orr.w	r2, r3, #32
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3301      	adds	r3, #1
 8006c08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4a08      	ldr	r2, [pc, #32]	; (8006c30 <USB_FlushTxFifo+0x64>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d901      	bls.n	8006c16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e006      	b.n	8006c24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d0f0      	beq.n	8006c04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	00030d40 	.word	0x00030d40

08006c34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3301      	adds	r3, #1
 8006c44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4a11      	ldr	r2, [pc, #68]	; (8006c90 <USB_FlushRxFifo+0x5c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d901      	bls.n	8006c52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e018      	b.n	8006c84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	daf2      	bge.n	8006c40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2210      	movs	r2, #16
 8006c62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3301      	adds	r3, #1
 8006c68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4a08      	ldr	r2, [pc, #32]	; (8006c90 <USB_FlushRxFifo+0x5c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d901      	bls.n	8006c76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e006      	b.n	8006c84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f003 0310 	and.w	r3, r3, #16
 8006c7e:	2b10      	cmp	r3, #16
 8006c80:	d0f0      	beq.n	8006c64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	00030d40 	.word	0x00030d40

08006c94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	78fb      	ldrb	r3, [r7, #3]
 8006cae:	68f9      	ldr	r1, [r7, #12]
 8006cb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b085      	sub	sp, #20
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ce0:	f023 0303 	bic.w	r3, r3, #3
 8006ce4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cf4:	f043 0302 	orr.w	r3, r3, #2
 8006cf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	f003 0301 	and.w	r3, r3, #1
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	3301      	adds	r3, #1
 8006d34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <USB_CoreReset+0x64>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d901      	bls.n	8006d42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e01b      	b.n	8006d7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	daf2      	bge.n	8006d30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	f043 0201 	orr.w	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4a09      	ldr	r2, [pc, #36]	; (8006d88 <USB_CoreReset+0x64>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d901      	bls.n	8006d6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e006      	b.n	8006d7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d0f0      	beq.n	8006d5a <USB_CoreReset+0x36>

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	00030d40 	.word	0x00030d40

08006d8c <__cvt>:
 8006d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d90:	ec55 4b10 	vmov	r4, r5, d0
 8006d94:	2d00      	cmp	r5, #0
 8006d96:	460e      	mov	r6, r1
 8006d98:	4619      	mov	r1, r3
 8006d9a:	462b      	mov	r3, r5
 8006d9c:	bfbb      	ittet	lt
 8006d9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006da2:	461d      	movlt	r5, r3
 8006da4:	2300      	movge	r3, #0
 8006da6:	232d      	movlt	r3, #45	; 0x2d
 8006da8:	700b      	strb	r3, [r1, #0]
 8006daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006db0:	4691      	mov	r9, r2
 8006db2:	f023 0820 	bic.w	r8, r3, #32
 8006db6:	bfbc      	itt	lt
 8006db8:	4622      	movlt	r2, r4
 8006dba:	4614      	movlt	r4, r2
 8006dbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dc0:	d005      	beq.n	8006dce <__cvt+0x42>
 8006dc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006dc6:	d100      	bne.n	8006dca <__cvt+0x3e>
 8006dc8:	3601      	adds	r6, #1
 8006dca:	2102      	movs	r1, #2
 8006dcc:	e000      	b.n	8006dd0 <__cvt+0x44>
 8006dce:	2103      	movs	r1, #3
 8006dd0:	ab03      	add	r3, sp, #12
 8006dd2:	9301      	str	r3, [sp, #4]
 8006dd4:	ab02      	add	r3, sp, #8
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	ec45 4b10 	vmov	d0, r4, r5
 8006ddc:	4653      	mov	r3, sl
 8006dde:	4632      	mov	r2, r6
 8006de0:	f000 fe36 	bl	8007a50 <_dtoa_r>
 8006de4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006de8:	4607      	mov	r7, r0
 8006dea:	d102      	bne.n	8006df2 <__cvt+0x66>
 8006dec:	f019 0f01 	tst.w	r9, #1
 8006df0:	d022      	beq.n	8006e38 <__cvt+0xac>
 8006df2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006df6:	eb07 0906 	add.w	r9, r7, r6
 8006dfa:	d110      	bne.n	8006e1e <__cvt+0x92>
 8006dfc:	783b      	ldrb	r3, [r7, #0]
 8006dfe:	2b30      	cmp	r3, #48	; 0x30
 8006e00:	d10a      	bne.n	8006e18 <__cvt+0x8c>
 8006e02:	2200      	movs	r2, #0
 8006e04:	2300      	movs	r3, #0
 8006e06:	4620      	mov	r0, r4
 8006e08:	4629      	mov	r1, r5
 8006e0a:	f7f9 fe7d 	bl	8000b08 <__aeabi_dcmpeq>
 8006e0e:	b918      	cbnz	r0, 8006e18 <__cvt+0x8c>
 8006e10:	f1c6 0601 	rsb	r6, r6, #1
 8006e14:	f8ca 6000 	str.w	r6, [sl]
 8006e18:	f8da 3000 	ldr.w	r3, [sl]
 8006e1c:	4499      	add	r9, r3
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2300      	movs	r3, #0
 8006e22:	4620      	mov	r0, r4
 8006e24:	4629      	mov	r1, r5
 8006e26:	f7f9 fe6f 	bl	8000b08 <__aeabi_dcmpeq>
 8006e2a:	b108      	cbz	r0, 8006e30 <__cvt+0xa4>
 8006e2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e30:	2230      	movs	r2, #48	; 0x30
 8006e32:	9b03      	ldr	r3, [sp, #12]
 8006e34:	454b      	cmp	r3, r9
 8006e36:	d307      	bcc.n	8006e48 <__cvt+0xbc>
 8006e38:	9b03      	ldr	r3, [sp, #12]
 8006e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e3c:	1bdb      	subs	r3, r3, r7
 8006e3e:	4638      	mov	r0, r7
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	b004      	add	sp, #16
 8006e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e48:	1c59      	adds	r1, r3, #1
 8006e4a:	9103      	str	r1, [sp, #12]
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	e7f0      	b.n	8006e32 <__cvt+0xa6>

08006e50 <__exponent>:
 8006e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e52:	4603      	mov	r3, r0
 8006e54:	2900      	cmp	r1, #0
 8006e56:	bfb8      	it	lt
 8006e58:	4249      	neglt	r1, r1
 8006e5a:	f803 2b02 	strb.w	r2, [r3], #2
 8006e5e:	bfb4      	ite	lt
 8006e60:	222d      	movlt	r2, #45	; 0x2d
 8006e62:	222b      	movge	r2, #43	; 0x2b
 8006e64:	2909      	cmp	r1, #9
 8006e66:	7042      	strb	r2, [r0, #1]
 8006e68:	dd2a      	ble.n	8006ec0 <__exponent+0x70>
 8006e6a:	f10d 0207 	add.w	r2, sp, #7
 8006e6e:	4617      	mov	r7, r2
 8006e70:	260a      	movs	r6, #10
 8006e72:	4694      	mov	ip, r2
 8006e74:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e78:	fb06 1415 	mls	r4, r6, r5, r1
 8006e7c:	3430      	adds	r4, #48	; 0x30
 8006e7e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006e82:	460c      	mov	r4, r1
 8006e84:	2c63      	cmp	r4, #99	; 0x63
 8006e86:	f102 32ff 	add.w	r2, r2, #4294967295
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	dcf1      	bgt.n	8006e72 <__exponent+0x22>
 8006e8e:	3130      	adds	r1, #48	; 0x30
 8006e90:	f1ac 0402 	sub.w	r4, ip, #2
 8006e94:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e98:	1c41      	adds	r1, r0, #1
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	42ba      	cmp	r2, r7
 8006e9e:	d30a      	bcc.n	8006eb6 <__exponent+0x66>
 8006ea0:	f10d 0209 	add.w	r2, sp, #9
 8006ea4:	eba2 020c 	sub.w	r2, r2, ip
 8006ea8:	42bc      	cmp	r4, r7
 8006eaa:	bf88      	it	hi
 8006eac:	2200      	movhi	r2, #0
 8006eae:	4413      	add	r3, r2
 8006eb0:	1a18      	subs	r0, r3, r0
 8006eb2:	b003      	add	sp, #12
 8006eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006eba:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006ebe:	e7ed      	b.n	8006e9c <__exponent+0x4c>
 8006ec0:	2330      	movs	r3, #48	; 0x30
 8006ec2:	3130      	adds	r1, #48	; 0x30
 8006ec4:	7083      	strb	r3, [r0, #2]
 8006ec6:	70c1      	strb	r1, [r0, #3]
 8006ec8:	1d03      	adds	r3, r0, #4
 8006eca:	e7f1      	b.n	8006eb0 <__exponent+0x60>

08006ecc <_printf_float>:
 8006ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed0:	ed2d 8b02 	vpush	{d8}
 8006ed4:	b08d      	sub	sp, #52	; 0x34
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006edc:	4616      	mov	r6, r2
 8006ede:	461f      	mov	r7, r3
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	f000 fcb5 	bl	8007850 <_localeconv_r>
 8006ee6:	f8d0 a000 	ldr.w	sl, [r0]
 8006eea:	4650      	mov	r0, sl
 8006eec:	f7f9 f9e0 	bl	80002b0 <strlen>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	9305      	str	r3, [sp, #20]
 8006ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8006efc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f00:	3307      	adds	r3, #7
 8006f02:	f023 0307 	bic.w	r3, r3, #7
 8006f06:	f103 0208 	add.w	r2, r3, #8
 8006f0a:	f8c8 2000 	str.w	r2, [r8]
 8006f0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f16:	9307      	str	r3, [sp, #28]
 8006f18:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f1c:	ee08 0a10 	vmov	s16, r0
 8006f20:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006f24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f28:	4b9e      	ldr	r3, [pc, #632]	; (80071a4 <_printf_float+0x2d8>)
 8006f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2e:	f7f9 fe1d 	bl	8000b6c <__aeabi_dcmpun>
 8006f32:	bb88      	cbnz	r0, 8006f98 <_printf_float+0xcc>
 8006f34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f38:	4b9a      	ldr	r3, [pc, #616]	; (80071a4 <_printf_float+0x2d8>)
 8006f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3e:	f7f9 fdf7 	bl	8000b30 <__aeabi_dcmple>
 8006f42:	bb48      	cbnz	r0, 8006f98 <_printf_float+0xcc>
 8006f44:	2200      	movs	r2, #0
 8006f46:	2300      	movs	r3, #0
 8006f48:	4640      	mov	r0, r8
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	f7f9 fde6 	bl	8000b1c <__aeabi_dcmplt>
 8006f50:	b110      	cbz	r0, 8006f58 <_printf_float+0x8c>
 8006f52:	232d      	movs	r3, #45	; 0x2d
 8006f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f58:	4a93      	ldr	r2, [pc, #588]	; (80071a8 <_printf_float+0x2dc>)
 8006f5a:	4b94      	ldr	r3, [pc, #592]	; (80071ac <_printf_float+0x2e0>)
 8006f5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f60:	bf94      	ite	ls
 8006f62:	4690      	movls	r8, r2
 8006f64:	4698      	movhi	r8, r3
 8006f66:	2303      	movs	r3, #3
 8006f68:	6123      	str	r3, [r4, #16]
 8006f6a:	9b05      	ldr	r3, [sp, #20]
 8006f6c:	f023 0304 	bic.w	r3, r3, #4
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	f04f 0900 	mov.w	r9, #0
 8006f76:	9700      	str	r7, [sp, #0]
 8006f78:	4633      	mov	r3, r6
 8006f7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f000 f9da 	bl	8007338 <_printf_common>
 8006f84:	3001      	adds	r0, #1
 8006f86:	f040 8090 	bne.w	80070aa <_printf_float+0x1de>
 8006f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8e:	b00d      	add	sp, #52	; 0x34
 8006f90:	ecbd 8b02 	vpop	{d8}
 8006f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f98:	4642      	mov	r2, r8
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	f7f9 fde4 	bl	8000b6c <__aeabi_dcmpun>
 8006fa4:	b140      	cbz	r0, 8006fb8 <_printf_float+0xec>
 8006fa6:	464b      	mov	r3, r9
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bfbc      	itt	lt
 8006fac:	232d      	movlt	r3, #45	; 0x2d
 8006fae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006fb2:	4a7f      	ldr	r2, [pc, #508]	; (80071b0 <_printf_float+0x2e4>)
 8006fb4:	4b7f      	ldr	r3, [pc, #508]	; (80071b4 <_printf_float+0x2e8>)
 8006fb6:	e7d1      	b.n	8006f5c <_printf_float+0x90>
 8006fb8:	6863      	ldr	r3, [r4, #4]
 8006fba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006fbe:	9206      	str	r2, [sp, #24]
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	d13f      	bne.n	8007044 <_printf_float+0x178>
 8006fc4:	2306      	movs	r3, #6
 8006fc6:	6063      	str	r3, [r4, #4]
 8006fc8:	9b05      	ldr	r3, [sp, #20]
 8006fca:	6861      	ldr	r1, [r4, #4]
 8006fcc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9303      	str	r3, [sp, #12]
 8006fd4:	ab0a      	add	r3, sp, #40	; 0x28
 8006fd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006fda:	ab09      	add	r3, sp, #36	; 0x24
 8006fdc:	ec49 8b10 	vmov	d0, r8, r9
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	6022      	str	r2, [r4, #0]
 8006fe4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f7ff fecf 	bl	8006d8c <__cvt>
 8006fee:	9b06      	ldr	r3, [sp, #24]
 8006ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ff2:	2b47      	cmp	r3, #71	; 0x47
 8006ff4:	4680      	mov	r8, r0
 8006ff6:	d108      	bne.n	800700a <_printf_float+0x13e>
 8006ff8:	1cc8      	adds	r0, r1, #3
 8006ffa:	db02      	blt.n	8007002 <_printf_float+0x136>
 8006ffc:	6863      	ldr	r3, [r4, #4]
 8006ffe:	4299      	cmp	r1, r3
 8007000:	dd41      	ble.n	8007086 <_printf_float+0x1ba>
 8007002:	f1ab 0302 	sub.w	r3, fp, #2
 8007006:	fa5f fb83 	uxtb.w	fp, r3
 800700a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800700e:	d820      	bhi.n	8007052 <_printf_float+0x186>
 8007010:	3901      	subs	r1, #1
 8007012:	465a      	mov	r2, fp
 8007014:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007018:	9109      	str	r1, [sp, #36]	; 0x24
 800701a:	f7ff ff19 	bl	8006e50 <__exponent>
 800701e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007020:	1813      	adds	r3, r2, r0
 8007022:	2a01      	cmp	r2, #1
 8007024:	4681      	mov	r9, r0
 8007026:	6123      	str	r3, [r4, #16]
 8007028:	dc02      	bgt.n	8007030 <_printf_float+0x164>
 800702a:	6822      	ldr	r2, [r4, #0]
 800702c:	07d2      	lsls	r2, r2, #31
 800702e:	d501      	bpl.n	8007034 <_printf_float+0x168>
 8007030:	3301      	adds	r3, #1
 8007032:	6123      	str	r3, [r4, #16]
 8007034:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007038:	2b00      	cmp	r3, #0
 800703a:	d09c      	beq.n	8006f76 <_printf_float+0xaa>
 800703c:	232d      	movs	r3, #45	; 0x2d
 800703e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007042:	e798      	b.n	8006f76 <_printf_float+0xaa>
 8007044:	9a06      	ldr	r2, [sp, #24]
 8007046:	2a47      	cmp	r2, #71	; 0x47
 8007048:	d1be      	bne.n	8006fc8 <_printf_float+0xfc>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1bc      	bne.n	8006fc8 <_printf_float+0xfc>
 800704e:	2301      	movs	r3, #1
 8007050:	e7b9      	b.n	8006fc6 <_printf_float+0xfa>
 8007052:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007056:	d118      	bne.n	800708a <_printf_float+0x1be>
 8007058:	2900      	cmp	r1, #0
 800705a:	6863      	ldr	r3, [r4, #4]
 800705c:	dd0b      	ble.n	8007076 <_printf_float+0x1aa>
 800705e:	6121      	str	r1, [r4, #16]
 8007060:	b913      	cbnz	r3, 8007068 <_printf_float+0x19c>
 8007062:	6822      	ldr	r2, [r4, #0]
 8007064:	07d0      	lsls	r0, r2, #31
 8007066:	d502      	bpl.n	800706e <_printf_float+0x1a2>
 8007068:	3301      	adds	r3, #1
 800706a:	440b      	add	r3, r1
 800706c:	6123      	str	r3, [r4, #16]
 800706e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007070:	f04f 0900 	mov.w	r9, #0
 8007074:	e7de      	b.n	8007034 <_printf_float+0x168>
 8007076:	b913      	cbnz	r3, 800707e <_printf_float+0x1b2>
 8007078:	6822      	ldr	r2, [r4, #0]
 800707a:	07d2      	lsls	r2, r2, #31
 800707c:	d501      	bpl.n	8007082 <_printf_float+0x1b6>
 800707e:	3302      	adds	r3, #2
 8007080:	e7f4      	b.n	800706c <_printf_float+0x1a0>
 8007082:	2301      	movs	r3, #1
 8007084:	e7f2      	b.n	800706c <_printf_float+0x1a0>
 8007086:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800708a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708c:	4299      	cmp	r1, r3
 800708e:	db05      	blt.n	800709c <_printf_float+0x1d0>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	6121      	str	r1, [r4, #16]
 8007094:	07d8      	lsls	r0, r3, #31
 8007096:	d5ea      	bpl.n	800706e <_printf_float+0x1a2>
 8007098:	1c4b      	adds	r3, r1, #1
 800709a:	e7e7      	b.n	800706c <_printf_float+0x1a0>
 800709c:	2900      	cmp	r1, #0
 800709e:	bfd4      	ite	le
 80070a0:	f1c1 0202 	rsble	r2, r1, #2
 80070a4:	2201      	movgt	r2, #1
 80070a6:	4413      	add	r3, r2
 80070a8:	e7e0      	b.n	800706c <_printf_float+0x1a0>
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	055a      	lsls	r2, r3, #21
 80070ae:	d407      	bmi.n	80070c0 <_printf_float+0x1f4>
 80070b0:	6923      	ldr	r3, [r4, #16]
 80070b2:	4642      	mov	r2, r8
 80070b4:	4631      	mov	r1, r6
 80070b6:	4628      	mov	r0, r5
 80070b8:	47b8      	blx	r7
 80070ba:	3001      	adds	r0, #1
 80070bc:	d12c      	bne.n	8007118 <_printf_float+0x24c>
 80070be:	e764      	b.n	8006f8a <_printf_float+0xbe>
 80070c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070c4:	f240 80e0 	bls.w	8007288 <_printf_float+0x3bc>
 80070c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070cc:	2200      	movs	r2, #0
 80070ce:	2300      	movs	r3, #0
 80070d0:	f7f9 fd1a 	bl	8000b08 <__aeabi_dcmpeq>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d034      	beq.n	8007142 <_printf_float+0x276>
 80070d8:	4a37      	ldr	r2, [pc, #220]	; (80071b8 <_printf_float+0x2ec>)
 80070da:	2301      	movs	r3, #1
 80070dc:	4631      	mov	r1, r6
 80070de:	4628      	mov	r0, r5
 80070e0:	47b8      	blx	r7
 80070e2:	3001      	adds	r0, #1
 80070e4:	f43f af51 	beq.w	8006f8a <_printf_float+0xbe>
 80070e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070ec:	429a      	cmp	r2, r3
 80070ee:	db02      	blt.n	80070f6 <_printf_float+0x22a>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	07d8      	lsls	r0, r3, #31
 80070f4:	d510      	bpl.n	8007118 <_printf_float+0x24c>
 80070f6:	ee18 3a10 	vmov	r3, s16
 80070fa:	4652      	mov	r2, sl
 80070fc:	4631      	mov	r1, r6
 80070fe:	4628      	mov	r0, r5
 8007100:	47b8      	blx	r7
 8007102:	3001      	adds	r0, #1
 8007104:	f43f af41 	beq.w	8006f8a <_printf_float+0xbe>
 8007108:	f04f 0800 	mov.w	r8, #0
 800710c:	f104 091a 	add.w	r9, r4, #26
 8007110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007112:	3b01      	subs	r3, #1
 8007114:	4543      	cmp	r3, r8
 8007116:	dc09      	bgt.n	800712c <_printf_float+0x260>
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	079b      	lsls	r3, r3, #30
 800711c:	f100 8107 	bmi.w	800732e <_printf_float+0x462>
 8007120:	68e0      	ldr	r0, [r4, #12]
 8007122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007124:	4298      	cmp	r0, r3
 8007126:	bfb8      	it	lt
 8007128:	4618      	movlt	r0, r3
 800712a:	e730      	b.n	8006f8e <_printf_float+0xc2>
 800712c:	2301      	movs	r3, #1
 800712e:	464a      	mov	r2, r9
 8007130:	4631      	mov	r1, r6
 8007132:	4628      	mov	r0, r5
 8007134:	47b8      	blx	r7
 8007136:	3001      	adds	r0, #1
 8007138:	f43f af27 	beq.w	8006f8a <_printf_float+0xbe>
 800713c:	f108 0801 	add.w	r8, r8, #1
 8007140:	e7e6      	b.n	8007110 <_printf_float+0x244>
 8007142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007144:	2b00      	cmp	r3, #0
 8007146:	dc39      	bgt.n	80071bc <_printf_float+0x2f0>
 8007148:	4a1b      	ldr	r2, [pc, #108]	; (80071b8 <_printf_float+0x2ec>)
 800714a:	2301      	movs	r3, #1
 800714c:	4631      	mov	r1, r6
 800714e:	4628      	mov	r0, r5
 8007150:	47b8      	blx	r7
 8007152:	3001      	adds	r0, #1
 8007154:	f43f af19 	beq.w	8006f8a <_printf_float+0xbe>
 8007158:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800715c:	4313      	orrs	r3, r2
 800715e:	d102      	bne.n	8007166 <_printf_float+0x29a>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	07d9      	lsls	r1, r3, #31
 8007164:	d5d8      	bpl.n	8007118 <_printf_float+0x24c>
 8007166:	ee18 3a10 	vmov	r3, s16
 800716a:	4652      	mov	r2, sl
 800716c:	4631      	mov	r1, r6
 800716e:	4628      	mov	r0, r5
 8007170:	47b8      	blx	r7
 8007172:	3001      	adds	r0, #1
 8007174:	f43f af09 	beq.w	8006f8a <_printf_float+0xbe>
 8007178:	f04f 0900 	mov.w	r9, #0
 800717c:	f104 0a1a 	add.w	sl, r4, #26
 8007180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007182:	425b      	negs	r3, r3
 8007184:	454b      	cmp	r3, r9
 8007186:	dc01      	bgt.n	800718c <_printf_float+0x2c0>
 8007188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800718a:	e792      	b.n	80070b2 <_printf_float+0x1e6>
 800718c:	2301      	movs	r3, #1
 800718e:	4652      	mov	r2, sl
 8007190:	4631      	mov	r1, r6
 8007192:	4628      	mov	r0, r5
 8007194:	47b8      	blx	r7
 8007196:	3001      	adds	r0, #1
 8007198:	f43f aef7 	beq.w	8006f8a <_printf_float+0xbe>
 800719c:	f109 0901 	add.w	r9, r9, #1
 80071a0:	e7ee      	b.n	8007180 <_printf_float+0x2b4>
 80071a2:	bf00      	nop
 80071a4:	7fefffff 	.word	0x7fefffff
 80071a8:	08009718 	.word	0x08009718
 80071ac:	0800971c 	.word	0x0800971c
 80071b0:	08009720 	.word	0x08009720
 80071b4:	08009724 	.word	0x08009724
 80071b8:	08009728 	.word	0x08009728
 80071bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071c0:	429a      	cmp	r2, r3
 80071c2:	bfa8      	it	ge
 80071c4:	461a      	movge	r2, r3
 80071c6:	2a00      	cmp	r2, #0
 80071c8:	4691      	mov	r9, r2
 80071ca:	dc37      	bgt.n	800723c <_printf_float+0x370>
 80071cc:	f04f 0b00 	mov.w	fp, #0
 80071d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071d4:	f104 021a 	add.w	r2, r4, #26
 80071d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071da:	9305      	str	r3, [sp, #20]
 80071dc:	eba3 0309 	sub.w	r3, r3, r9
 80071e0:	455b      	cmp	r3, fp
 80071e2:	dc33      	bgt.n	800724c <_printf_float+0x380>
 80071e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071e8:	429a      	cmp	r2, r3
 80071ea:	db3b      	blt.n	8007264 <_printf_float+0x398>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	07da      	lsls	r2, r3, #31
 80071f0:	d438      	bmi.n	8007264 <_printf_float+0x398>
 80071f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80071f6:	eba2 0903 	sub.w	r9, r2, r3
 80071fa:	9b05      	ldr	r3, [sp, #20]
 80071fc:	1ad2      	subs	r2, r2, r3
 80071fe:	4591      	cmp	r9, r2
 8007200:	bfa8      	it	ge
 8007202:	4691      	movge	r9, r2
 8007204:	f1b9 0f00 	cmp.w	r9, #0
 8007208:	dc35      	bgt.n	8007276 <_printf_float+0x3aa>
 800720a:	f04f 0800 	mov.w	r8, #0
 800720e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007212:	f104 0a1a 	add.w	sl, r4, #26
 8007216:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800721a:	1a9b      	subs	r3, r3, r2
 800721c:	eba3 0309 	sub.w	r3, r3, r9
 8007220:	4543      	cmp	r3, r8
 8007222:	f77f af79 	ble.w	8007118 <_printf_float+0x24c>
 8007226:	2301      	movs	r3, #1
 8007228:	4652      	mov	r2, sl
 800722a:	4631      	mov	r1, r6
 800722c:	4628      	mov	r0, r5
 800722e:	47b8      	blx	r7
 8007230:	3001      	adds	r0, #1
 8007232:	f43f aeaa 	beq.w	8006f8a <_printf_float+0xbe>
 8007236:	f108 0801 	add.w	r8, r8, #1
 800723a:	e7ec      	b.n	8007216 <_printf_float+0x34a>
 800723c:	4613      	mov	r3, r2
 800723e:	4631      	mov	r1, r6
 8007240:	4642      	mov	r2, r8
 8007242:	4628      	mov	r0, r5
 8007244:	47b8      	blx	r7
 8007246:	3001      	adds	r0, #1
 8007248:	d1c0      	bne.n	80071cc <_printf_float+0x300>
 800724a:	e69e      	b.n	8006f8a <_printf_float+0xbe>
 800724c:	2301      	movs	r3, #1
 800724e:	4631      	mov	r1, r6
 8007250:	4628      	mov	r0, r5
 8007252:	9205      	str	r2, [sp, #20]
 8007254:	47b8      	blx	r7
 8007256:	3001      	adds	r0, #1
 8007258:	f43f ae97 	beq.w	8006f8a <_printf_float+0xbe>
 800725c:	9a05      	ldr	r2, [sp, #20]
 800725e:	f10b 0b01 	add.w	fp, fp, #1
 8007262:	e7b9      	b.n	80071d8 <_printf_float+0x30c>
 8007264:	ee18 3a10 	vmov	r3, s16
 8007268:	4652      	mov	r2, sl
 800726a:	4631      	mov	r1, r6
 800726c:	4628      	mov	r0, r5
 800726e:	47b8      	blx	r7
 8007270:	3001      	adds	r0, #1
 8007272:	d1be      	bne.n	80071f2 <_printf_float+0x326>
 8007274:	e689      	b.n	8006f8a <_printf_float+0xbe>
 8007276:	9a05      	ldr	r2, [sp, #20]
 8007278:	464b      	mov	r3, r9
 800727a:	4442      	add	r2, r8
 800727c:	4631      	mov	r1, r6
 800727e:	4628      	mov	r0, r5
 8007280:	47b8      	blx	r7
 8007282:	3001      	adds	r0, #1
 8007284:	d1c1      	bne.n	800720a <_printf_float+0x33e>
 8007286:	e680      	b.n	8006f8a <_printf_float+0xbe>
 8007288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800728a:	2a01      	cmp	r2, #1
 800728c:	dc01      	bgt.n	8007292 <_printf_float+0x3c6>
 800728e:	07db      	lsls	r3, r3, #31
 8007290:	d53a      	bpl.n	8007308 <_printf_float+0x43c>
 8007292:	2301      	movs	r3, #1
 8007294:	4642      	mov	r2, r8
 8007296:	4631      	mov	r1, r6
 8007298:	4628      	mov	r0, r5
 800729a:	47b8      	blx	r7
 800729c:	3001      	adds	r0, #1
 800729e:	f43f ae74 	beq.w	8006f8a <_printf_float+0xbe>
 80072a2:	ee18 3a10 	vmov	r3, s16
 80072a6:	4652      	mov	r2, sl
 80072a8:	4631      	mov	r1, r6
 80072aa:	4628      	mov	r0, r5
 80072ac:	47b8      	blx	r7
 80072ae:	3001      	adds	r0, #1
 80072b0:	f43f ae6b 	beq.w	8006f8a <_printf_float+0xbe>
 80072b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072b8:	2200      	movs	r2, #0
 80072ba:	2300      	movs	r3, #0
 80072bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80072c0:	f7f9 fc22 	bl	8000b08 <__aeabi_dcmpeq>
 80072c4:	b9d8      	cbnz	r0, 80072fe <_printf_float+0x432>
 80072c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80072ca:	f108 0201 	add.w	r2, r8, #1
 80072ce:	4631      	mov	r1, r6
 80072d0:	4628      	mov	r0, r5
 80072d2:	47b8      	blx	r7
 80072d4:	3001      	adds	r0, #1
 80072d6:	d10e      	bne.n	80072f6 <_printf_float+0x42a>
 80072d8:	e657      	b.n	8006f8a <_printf_float+0xbe>
 80072da:	2301      	movs	r3, #1
 80072dc:	4652      	mov	r2, sl
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b8      	blx	r7
 80072e4:	3001      	adds	r0, #1
 80072e6:	f43f ae50 	beq.w	8006f8a <_printf_float+0xbe>
 80072ea:	f108 0801 	add.w	r8, r8, #1
 80072ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f0:	3b01      	subs	r3, #1
 80072f2:	4543      	cmp	r3, r8
 80072f4:	dcf1      	bgt.n	80072da <_printf_float+0x40e>
 80072f6:	464b      	mov	r3, r9
 80072f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072fc:	e6da      	b.n	80070b4 <_printf_float+0x1e8>
 80072fe:	f04f 0800 	mov.w	r8, #0
 8007302:	f104 0a1a 	add.w	sl, r4, #26
 8007306:	e7f2      	b.n	80072ee <_printf_float+0x422>
 8007308:	2301      	movs	r3, #1
 800730a:	4642      	mov	r2, r8
 800730c:	e7df      	b.n	80072ce <_printf_float+0x402>
 800730e:	2301      	movs	r3, #1
 8007310:	464a      	mov	r2, r9
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	47b8      	blx	r7
 8007318:	3001      	adds	r0, #1
 800731a:	f43f ae36 	beq.w	8006f8a <_printf_float+0xbe>
 800731e:	f108 0801 	add.w	r8, r8, #1
 8007322:	68e3      	ldr	r3, [r4, #12]
 8007324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007326:	1a5b      	subs	r3, r3, r1
 8007328:	4543      	cmp	r3, r8
 800732a:	dcf0      	bgt.n	800730e <_printf_float+0x442>
 800732c:	e6f8      	b.n	8007120 <_printf_float+0x254>
 800732e:	f04f 0800 	mov.w	r8, #0
 8007332:	f104 0919 	add.w	r9, r4, #25
 8007336:	e7f4      	b.n	8007322 <_printf_float+0x456>

08007338 <_printf_common>:
 8007338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800733c:	4616      	mov	r6, r2
 800733e:	4699      	mov	r9, r3
 8007340:	688a      	ldr	r2, [r1, #8]
 8007342:	690b      	ldr	r3, [r1, #16]
 8007344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007348:	4293      	cmp	r3, r2
 800734a:	bfb8      	it	lt
 800734c:	4613      	movlt	r3, r2
 800734e:	6033      	str	r3, [r6, #0]
 8007350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007354:	4607      	mov	r7, r0
 8007356:	460c      	mov	r4, r1
 8007358:	b10a      	cbz	r2, 800735e <_printf_common+0x26>
 800735a:	3301      	adds	r3, #1
 800735c:	6033      	str	r3, [r6, #0]
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	0699      	lsls	r1, r3, #26
 8007362:	bf42      	ittt	mi
 8007364:	6833      	ldrmi	r3, [r6, #0]
 8007366:	3302      	addmi	r3, #2
 8007368:	6033      	strmi	r3, [r6, #0]
 800736a:	6825      	ldr	r5, [r4, #0]
 800736c:	f015 0506 	ands.w	r5, r5, #6
 8007370:	d106      	bne.n	8007380 <_printf_common+0x48>
 8007372:	f104 0a19 	add.w	sl, r4, #25
 8007376:	68e3      	ldr	r3, [r4, #12]
 8007378:	6832      	ldr	r2, [r6, #0]
 800737a:	1a9b      	subs	r3, r3, r2
 800737c:	42ab      	cmp	r3, r5
 800737e:	dc26      	bgt.n	80073ce <_printf_common+0x96>
 8007380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007384:	1e13      	subs	r3, r2, #0
 8007386:	6822      	ldr	r2, [r4, #0]
 8007388:	bf18      	it	ne
 800738a:	2301      	movne	r3, #1
 800738c:	0692      	lsls	r2, r2, #26
 800738e:	d42b      	bmi.n	80073e8 <_printf_common+0xb0>
 8007390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007394:	4649      	mov	r1, r9
 8007396:	4638      	mov	r0, r7
 8007398:	47c0      	blx	r8
 800739a:	3001      	adds	r0, #1
 800739c:	d01e      	beq.n	80073dc <_printf_common+0xa4>
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	6922      	ldr	r2, [r4, #16]
 80073a2:	f003 0306 	and.w	r3, r3, #6
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	bf02      	ittt	eq
 80073aa:	68e5      	ldreq	r5, [r4, #12]
 80073ac:	6833      	ldreq	r3, [r6, #0]
 80073ae:	1aed      	subeq	r5, r5, r3
 80073b0:	68a3      	ldr	r3, [r4, #8]
 80073b2:	bf0c      	ite	eq
 80073b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073b8:	2500      	movne	r5, #0
 80073ba:	4293      	cmp	r3, r2
 80073bc:	bfc4      	itt	gt
 80073be:	1a9b      	subgt	r3, r3, r2
 80073c0:	18ed      	addgt	r5, r5, r3
 80073c2:	2600      	movs	r6, #0
 80073c4:	341a      	adds	r4, #26
 80073c6:	42b5      	cmp	r5, r6
 80073c8:	d11a      	bne.n	8007400 <_printf_common+0xc8>
 80073ca:	2000      	movs	r0, #0
 80073cc:	e008      	b.n	80073e0 <_printf_common+0xa8>
 80073ce:	2301      	movs	r3, #1
 80073d0:	4652      	mov	r2, sl
 80073d2:	4649      	mov	r1, r9
 80073d4:	4638      	mov	r0, r7
 80073d6:	47c0      	blx	r8
 80073d8:	3001      	adds	r0, #1
 80073da:	d103      	bne.n	80073e4 <_printf_common+0xac>
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e4:	3501      	adds	r5, #1
 80073e6:	e7c6      	b.n	8007376 <_printf_common+0x3e>
 80073e8:	18e1      	adds	r1, r4, r3
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	2030      	movs	r0, #48	; 0x30
 80073ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073f2:	4422      	add	r2, r4
 80073f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073fc:	3302      	adds	r3, #2
 80073fe:	e7c7      	b.n	8007390 <_printf_common+0x58>
 8007400:	2301      	movs	r3, #1
 8007402:	4622      	mov	r2, r4
 8007404:	4649      	mov	r1, r9
 8007406:	4638      	mov	r0, r7
 8007408:	47c0      	blx	r8
 800740a:	3001      	adds	r0, #1
 800740c:	d0e6      	beq.n	80073dc <_printf_common+0xa4>
 800740e:	3601      	adds	r6, #1
 8007410:	e7d9      	b.n	80073c6 <_printf_common+0x8e>
	...

08007414 <_printf_i>:
 8007414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007418:	7e0f      	ldrb	r7, [r1, #24]
 800741a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800741c:	2f78      	cmp	r7, #120	; 0x78
 800741e:	4691      	mov	r9, r2
 8007420:	4680      	mov	r8, r0
 8007422:	460c      	mov	r4, r1
 8007424:	469a      	mov	sl, r3
 8007426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800742a:	d807      	bhi.n	800743c <_printf_i+0x28>
 800742c:	2f62      	cmp	r7, #98	; 0x62
 800742e:	d80a      	bhi.n	8007446 <_printf_i+0x32>
 8007430:	2f00      	cmp	r7, #0
 8007432:	f000 80d4 	beq.w	80075de <_printf_i+0x1ca>
 8007436:	2f58      	cmp	r7, #88	; 0x58
 8007438:	f000 80c0 	beq.w	80075bc <_printf_i+0x1a8>
 800743c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007444:	e03a      	b.n	80074bc <_printf_i+0xa8>
 8007446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800744a:	2b15      	cmp	r3, #21
 800744c:	d8f6      	bhi.n	800743c <_printf_i+0x28>
 800744e:	a101      	add	r1, pc, #4	; (adr r1, 8007454 <_printf_i+0x40>)
 8007450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007454:	080074ad 	.word	0x080074ad
 8007458:	080074c1 	.word	0x080074c1
 800745c:	0800743d 	.word	0x0800743d
 8007460:	0800743d 	.word	0x0800743d
 8007464:	0800743d 	.word	0x0800743d
 8007468:	0800743d 	.word	0x0800743d
 800746c:	080074c1 	.word	0x080074c1
 8007470:	0800743d 	.word	0x0800743d
 8007474:	0800743d 	.word	0x0800743d
 8007478:	0800743d 	.word	0x0800743d
 800747c:	0800743d 	.word	0x0800743d
 8007480:	080075c5 	.word	0x080075c5
 8007484:	080074ed 	.word	0x080074ed
 8007488:	0800757f 	.word	0x0800757f
 800748c:	0800743d 	.word	0x0800743d
 8007490:	0800743d 	.word	0x0800743d
 8007494:	080075e7 	.word	0x080075e7
 8007498:	0800743d 	.word	0x0800743d
 800749c:	080074ed 	.word	0x080074ed
 80074a0:	0800743d 	.word	0x0800743d
 80074a4:	0800743d 	.word	0x0800743d
 80074a8:	08007587 	.word	0x08007587
 80074ac:	682b      	ldr	r3, [r5, #0]
 80074ae:	1d1a      	adds	r2, r3, #4
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	602a      	str	r2, [r5, #0]
 80074b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074bc:	2301      	movs	r3, #1
 80074be:	e09f      	b.n	8007600 <_printf_i+0x1ec>
 80074c0:	6820      	ldr	r0, [r4, #0]
 80074c2:	682b      	ldr	r3, [r5, #0]
 80074c4:	0607      	lsls	r7, r0, #24
 80074c6:	f103 0104 	add.w	r1, r3, #4
 80074ca:	6029      	str	r1, [r5, #0]
 80074cc:	d501      	bpl.n	80074d2 <_printf_i+0xbe>
 80074ce:	681e      	ldr	r6, [r3, #0]
 80074d0:	e003      	b.n	80074da <_printf_i+0xc6>
 80074d2:	0646      	lsls	r6, r0, #25
 80074d4:	d5fb      	bpl.n	80074ce <_printf_i+0xba>
 80074d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80074da:	2e00      	cmp	r6, #0
 80074dc:	da03      	bge.n	80074e6 <_printf_i+0xd2>
 80074de:	232d      	movs	r3, #45	; 0x2d
 80074e0:	4276      	negs	r6, r6
 80074e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e6:	485a      	ldr	r0, [pc, #360]	; (8007650 <_printf_i+0x23c>)
 80074e8:	230a      	movs	r3, #10
 80074ea:	e012      	b.n	8007512 <_printf_i+0xfe>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	6820      	ldr	r0, [r4, #0]
 80074f0:	1d19      	adds	r1, r3, #4
 80074f2:	6029      	str	r1, [r5, #0]
 80074f4:	0605      	lsls	r5, r0, #24
 80074f6:	d501      	bpl.n	80074fc <_printf_i+0xe8>
 80074f8:	681e      	ldr	r6, [r3, #0]
 80074fa:	e002      	b.n	8007502 <_printf_i+0xee>
 80074fc:	0641      	lsls	r1, r0, #25
 80074fe:	d5fb      	bpl.n	80074f8 <_printf_i+0xe4>
 8007500:	881e      	ldrh	r6, [r3, #0]
 8007502:	4853      	ldr	r0, [pc, #332]	; (8007650 <_printf_i+0x23c>)
 8007504:	2f6f      	cmp	r7, #111	; 0x6f
 8007506:	bf0c      	ite	eq
 8007508:	2308      	moveq	r3, #8
 800750a:	230a      	movne	r3, #10
 800750c:	2100      	movs	r1, #0
 800750e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007512:	6865      	ldr	r5, [r4, #4]
 8007514:	60a5      	str	r5, [r4, #8]
 8007516:	2d00      	cmp	r5, #0
 8007518:	bfa2      	ittt	ge
 800751a:	6821      	ldrge	r1, [r4, #0]
 800751c:	f021 0104 	bicge.w	r1, r1, #4
 8007520:	6021      	strge	r1, [r4, #0]
 8007522:	b90e      	cbnz	r6, 8007528 <_printf_i+0x114>
 8007524:	2d00      	cmp	r5, #0
 8007526:	d04b      	beq.n	80075c0 <_printf_i+0x1ac>
 8007528:	4615      	mov	r5, r2
 800752a:	fbb6 f1f3 	udiv	r1, r6, r3
 800752e:	fb03 6711 	mls	r7, r3, r1, r6
 8007532:	5dc7      	ldrb	r7, [r0, r7]
 8007534:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007538:	4637      	mov	r7, r6
 800753a:	42bb      	cmp	r3, r7
 800753c:	460e      	mov	r6, r1
 800753e:	d9f4      	bls.n	800752a <_printf_i+0x116>
 8007540:	2b08      	cmp	r3, #8
 8007542:	d10b      	bne.n	800755c <_printf_i+0x148>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	07de      	lsls	r6, r3, #31
 8007548:	d508      	bpl.n	800755c <_printf_i+0x148>
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	6861      	ldr	r1, [r4, #4]
 800754e:	4299      	cmp	r1, r3
 8007550:	bfde      	ittt	le
 8007552:	2330      	movle	r3, #48	; 0x30
 8007554:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007558:	f105 35ff 	addle.w	r5, r5, #4294967295
 800755c:	1b52      	subs	r2, r2, r5
 800755e:	6122      	str	r2, [r4, #16]
 8007560:	f8cd a000 	str.w	sl, [sp]
 8007564:	464b      	mov	r3, r9
 8007566:	aa03      	add	r2, sp, #12
 8007568:	4621      	mov	r1, r4
 800756a:	4640      	mov	r0, r8
 800756c:	f7ff fee4 	bl	8007338 <_printf_common>
 8007570:	3001      	adds	r0, #1
 8007572:	d14a      	bne.n	800760a <_printf_i+0x1f6>
 8007574:	f04f 30ff 	mov.w	r0, #4294967295
 8007578:	b004      	add	sp, #16
 800757a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	f043 0320 	orr.w	r3, r3, #32
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	4833      	ldr	r0, [pc, #204]	; (8007654 <_printf_i+0x240>)
 8007588:	2778      	movs	r7, #120	; 0x78
 800758a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	6829      	ldr	r1, [r5, #0]
 8007592:	061f      	lsls	r7, r3, #24
 8007594:	f851 6b04 	ldr.w	r6, [r1], #4
 8007598:	d402      	bmi.n	80075a0 <_printf_i+0x18c>
 800759a:	065f      	lsls	r7, r3, #25
 800759c:	bf48      	it	mi
 800759e:	b2b6      	uxthmi	r6, r6
 80075a0:	07df      	lsls	r7, r3, #31
 80075a2:	bf48      	it	mi
 80075a4:	f043 0320 	orrmi.w	r3, r3, #32
 80075a8:	6029      	str	r1, [r5, #0]
 80075aa:	bf48      	it	mi
 80075ac:	6023      	strmi	r3, [r4, #0]
 80075ae:	b91e      	cbnz	r6, 80075b8 <_printf_i+0x1a4>
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	f023 0320 	bic.w	r3, r3, #32
 80075b6:	6023      	str	r3, [r4, #0]
 80075b8:	2310      	movs	r3, #16
 80075ba:	e7a7      	b.n	800750c <_printf_i+0xf8>
 80075bc:	4824      	ldr	r0, [pc, #144]	; (8007650 <_printf_i+0x23c>)
 80075be:	e7e4      	b.n	800758a <_printf_i+0x176>
 80075c0:	4615      	mov	r5, r2
 80075c2:	e7bd      	b.n	8007540 <_printf_i+0x12c>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	6826      	ldr	r6, [r4, #0]
 80075c8:	6961      	ldr	r1, [r4, #20]
 80075ca:	1d18      	adds	r0, r3, #4
 80075cc:	6028      	str	r0, [r5, #0]
 80075ce:	0635      	lsls	r5, r6, #24
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	d501      	bpl.n	80075d8 <_printf_i+0x1c4>
 80075d4:	6019      	str	r1, [r3, #0]
 80075d6:	e002      	b.n	80075de <_printf_i+0x1ca>
 80075d8:	0670      	lsls	r0, r6, #25
 80075da:	d5fb      	bpl.n	80075d4 <_printf_i+0x1c0>
 80075dc:	8019      	strh	r1, [r3, #0]
 80075de:	2300      	movs	r3, #0
 80075e0:	6123      	str	r3, [r4, #16]
 80075e2:	4615      	mov	r5, r2
 80075e4:	e7bc      	b.n	8007560 <_printf_i+0x14c>
 80075e6:	682b      	ldr	r3, [r5, #0]
 80075e8:	1d1a      	adds	r2, r3, #4
 80075ea:	602a      	str	r2, [r5, #0]
 80075ec:	681d      	ldr	r5, [r3, #0]
 80075ee:	6862      	ldr	r2, [r4, #4]
 80075f0:	2100      	movs	r1, #0
 80075f2:	4628      	mov	r0, r5
 80075f4:	f7f8 fe0c 	bl	8000210 <memchr>
 80075f8:	b108      	cbz	r0, 80075fe <_printf_i+0x1ea>
 80075fa:	1b40      	subs	r0, r0, r5
 80075fc:	6060      	str	r0, [r4, #4]
 80075fe:	6863      	ldr	r3, [r4, #4]
 8007600:	6123      	str	r3, [r4, #16]
 8007602:	2300      	movs	r3, #0
 8007604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007608:	e7aa      	b.n	8007560 <_printf_i+0x14c>
 800760a:	6923      	ldr	r3, [r4, #16]
 800760c:	462a      	mov	r2, r5
 800760e:	4649      	mov	r1, r9
 8007610:	4640      	mov	r0, r8
 8007612:	47d0      	blx	sl
 8007614:	3001      	adds	r0, #1
 8007616:	d0ad      	beq.n	8007574 <_printf_i+0x160>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	079b      	lsls	r3, r3, #30
 800761c:	d413      	bmi.n	8007646 <_printf_i+0x232>
 800761e:	68e0      	ldr	r0, [r4, #12]
 8007620:	9b03      	ldr	r3, [sp, #12]
 8007622:	4298      	cmp	r0, r3
 8007624:	bfb8      	it	lt
 8007626:	4618      	movlt	r0, r3
 8007628:	e7a6      	b.n	8007578 <_printf_i+0x164>
 800762a:	2301      	movs	r3, #1
 800762c:	4632      	mov	r2, r6
 800762e:	4649      	mov	r1, r9
 8007630:	4640      	mov	r0, r8
 8007632:	47d0      	blx	sl
 8007634:	3001      	adds	r0, #1
 8007636:	d09d      	beq.n	8007574 <_printf_i+0x160>
 8007638:	3501      	adds	r5, #1
 800763a:	68e3      	ldr	r3, [r4, #12]
 800763c:	9903      	ldr	r1, [sp, #12]
 800763e:	1a5b      	subs	r3, r3, r1
 8007640:	42ab      	cmp	r3, r5
 8007642:	dcf2      	bgt.n	800762a <_printf_i+0x216>
 8007644:	e7eb      	b.n	800761e <_printf_i+0x20a>
 8007646:	2500      	movs	r5, #0
 8007648:	f104 0619 	add.w	r6, r4, #25
 800764c:	e7f5      	b.n	800763a <_printf_i+0x226>
 800764e:	bf00      	nop
 8007650:	0800972a 	.word	0x0800972a
 8007654:	0800973b 	.word	0x0800973b

08007658 <std>:
 8007658:	2300      	movs	r3, #0
 800765a:	b510      	push	{r4, lr}
 800765c:	4604      	mov	r4, r0
 800765e:	e9c0 3300 	strd	r3, r3, [r0]
 8007662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007666:	6083      	str	r3, [r0, #8]
 8007668:	8181      	strh	r1, [r0, #12]
 800766a:	6643      	str	r3, [r0, #100]	; 0x64
 800766c:	81c2      	strh	r2, [r0, #14]
 800766e:	6183      	str	r3, [r0, #24]
 8007670:	4619      	mov	r1, r3
 8007672:	2208      	movs	r2, #8
 8007674:	305c      	adds	r0, #92	; 0x5c
 8007676:	f000 f8e2 	bl	800783e <memset>
 800767a:	4b05      	ldr	r3, [pc, #20]	; (8007690 <std+0x38>)
 800767c:	6263      	str	r3, [r4, #36]	; 0x24
 800767e:	4b05      	ldr	r3, [pc, #20]	; (8007694 <std+0x3c>)
 8007680:	62a3      	str	r3, [r4, #40]	; 0x28
 8007682:	4b05      	ldr	r3, [pc, #20]	; (8007698 <std+0x40>)
 8007684:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007686:	4b05      	ldr	r3, [pc, #20]	; (800769c <std+0x44>)
 8007688:	6224      	str	r4, [r4, #32]
 800768a:	6323      	str	r3, [r4, #48]	; 0x30
 800768c:	bd10      	pop	{r4, pc}
 800768e:	bf00      	nop
 8007690:	080077b9 	.word	0x080077b9
 8007694:	080077db 	.word	0x080077db
 8007698:	08007813 	.word	0x08007813
 800769c:	08007837 	.word	0x08007837

080076a0 <stdio_exit_handler>:
 80076a0:	4a02      	ldr	r2, [pc, #8]	; (80076ac <stdio_exit_handler+0xc>)
 80076a2:	4903      	ldr	r1, [pc, #12]	; (80076b0 <stdio_exit_handler+0x10>)
 80076a4:	4803      	ldr	r0, [pc, #12]	; (80076b4 <stdio_exit_handler+0x14>)
 80076a6:	f000 b869 	b.w	800777c <_fwalk_sglue>
 80076aa:	bf00      	nop
 80076ac:	2000000c 	.word	0x2000000c
 80076b0:	08009039 	.word	0x08009039
 80076b4:	20000018 	.word	0x20000018

080076b8 <cleanup_stdio>:
 80076b8:	6841      	ldr	r1, [r0, #4]
 80076ba:	4b0c      	ldr	r3, [pc, #48]	; (80076ec <cleanup_stdio+0x34>)
 80076bc:	4299      	cmp	r1, r3
 80076be:	b510      	push	{r4, lr}
 80076c0:	4604      	mov	r4, r0
 80076c2:	d001      	beq.n	80076c8 <cleanup_stdio+0x10>
 80076c4:	f001 fcb8 	bl	8009038 <_fflush_r>
 80076c8:	68a1      	ldr	r1, [r4, #8]
 80076ca:	4b09      	ldr	r3, [pc, #36]	; (80076f0 <cleanup_stdio+0x38>)
 80076cc:	4299      	cmp	r1, r3
 80076ce:	d002      	beq.n	80076d6 <cleanup_stdio+0x1e>
 80076d0:	4620      	mov	r0, r4
 80076d2:	f001 fcb1 	bl	8009038 <_fflush_r>
 80076d6:	68e1      	ldr	r1, [r4, #12]
 80076d8:	4b06      	ldr	r3, [pc, #24]	; (80076f4 <cleanup_stdio+0x3c>)
 80076da:	4299      	cmp	r1, r3
 80076dc:	d004      	beq.n	80076e8 <cleanup_stdio+0x30>
 80076de:	4620      	mov	r0, r4
 80076e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e4:	f001 bca8 	b.w	8009038 <_fflush_r>
 80076e8:	bd10      	pop	{r4, pc}
 80076ea:	bf00      	nop
 80076ec:	200009d8 	.word	0x200009d8
 80076f0:	20000a40 	.word	0x20000a40
 80076f4:	20000aa8 	.word	0x20000aa8

080076f8 <global_stdio_init.part.0>:
 80076f8:	b510      	push	{r4, lr}
 80076fa:	4b0b      	ldr	r3, [pc, #44]	; (8007728 <global_stdio_init.part.0+0x30>)
 80076fc:	4c0b      	ldr	r4, [pc, #44]	; (800772c <global_stdio_init.part.0+0x34>)
 80076fe:	4a0c      	ldr	r2, [pc, #48]	; (8007730 <global_stdio_init.part.0+0x38>)
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	4620      	mov	r0, r4
 8007704:	2200      	movs	r2, #0
 8007706:	2104      	movs	r1, #4
 8007708:	f7ff ffa6 	bl	8007658 <std>
 800770c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007710:	2201      	movs	r2, #1
 8007712:	2109      	movs	r1, #9
 8007714:	f7ff ffa0 	bl	8007658 <std>
 8007718:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800771c:	2202      	movs	r2, #2
 800771e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007722:	2112      	movs	r1, #18
 8007724:	f7ff bf98 	b.w	8007658 <std>
 8007728:	20000b10 	.word	0x20000b10
 800772c:	200009d8 	.word	0x200009d8
 8007730:	080076a1 	.word	0x080076a1

08007734 <__sfp_lock_acquire>:
 8007734:	4801      	ldr	r0, [pc, #4]	; (800773c <__sfp_lock_acquire+0x8>)
 8007736:	f000 b8ff 	b.w	8007938 <__retarget_lock_acquire_recursive>
 800773a:	bf00      	nop
 800773c:	20000b19 	.word	0x20000b19

08007740 <__sfp_lock_release>:
 8007740:	4801      	ldr	r0, [pc, #4]	; (8007748 <__sfp_lock_release+0x8>)
 8007742:	f000 b8fa 	b.w	800793a <__retarget_lock_release_recursive>
 8007746:	bf00      	nop
 8007748:	20000b19 	.word	0x20000b19

0800774c <__sinit>:
 800774c:	b510      	push	{r4, lr}
 800774e:	4604      	mov	r4, r0
 8007750:	f7ff fff0 	bl	8007734 <__sfp_lock_acquire>
 8007754:	6a23      	ldr	r3, [r4, #32]
 8007756:	b11b      	cbz	r3, 8007760 <__sinit+0x14>
 8007758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800775c:	f7ff bff0 	b.w	8007740 <__sfp_lock_release>
 8007760:	4b04      	ldr	r3, [pc, #16]	; (8007774 <__sinit+0x28>)
 8007762:	6223      	str	r3, [r4, #32]
 8007764:	4b04      	ldr	r3, [pc, #16]	; (8007778 <__sinit+0x2c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1f5      	bne.n	8007758 <__sinit+0xc>
 800776c:	f7ff ffc4 	bl	80076f8 <global_stdio_init.part.0>
 8007770:	e7f2      	b.n	8007758 <__sinit+0xc>
 8007772:	bf00      	nop
 8007774:	080076b9 	.word	0x080076b9
 8007778:	20000b10 	.word	0x20000b10

0800777c <_fwalk_sglue>:
 800777c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007780:	4607      	mov	r7, r0
 8007782:	4688      	mov	r8, r1
 8007784:	4614      	mov	r4, r2
 8007786:	2600      	movs	r6, #0
 8007788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800778c:	f1b9 0901 	subs.w	r9, r9, #1
 8007790:	d505      	bpl.n	800779e <_fwalk_sglue+0x22>
 8007792:	6824      	ldr	r4, [r4, #0]
 8007794:	2c00      	cmp	r4, #0
 8007796:	d1f7      	bne.n	8007788 <_fwalk_sglue+0xc>
 8007798:	4630      	mov	r0, r6
 800779a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800779e:	89ab      	ldrh	r3, [r5, #12]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d907      	bls.n	80077b4 <_fwalk_sglue+0x38>
 80077a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077a8:	3301      	adds	r3, #1
 80077aa:	d003      	beq.n	80077b4 <_fwalk_sglue+0x38>
 80077ac:	4629      	mov	r1, r5
 80077ae:	4638      	mov	r0, r7
 80077b0:	47c0      	blx	r8
 80077b2:	4306      	orrs	r6, r0
 80077b4:	3568      	adds	r5, #104	; 0x68
 80077b6:	e7e9      	b.n	800778c <_fwalk_sglue+0x10>

080077b8 <__sread>:
 80077b8:	b510      	push	{r4, lr}
 80077ba:	460c      	mov	r4, r1
 80077bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c0:	f000 f86c 	bl	800789c <_read_r>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	bfab      	itete	ge
 80077c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077ca:	89a3      	ldrhlt	r3, [r4, #12]
 80077cc:	181b      	addge	r3, r3, r0
 80077ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077d2:	bfac      	ite	ge
 80077d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80077d6:	81a3      	strhlt	r3, [r4, #12]
 80077d8:	bd10      	pop	{r4, pc}

080077da <__swrite>:
 80077da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077de:	461f      	mov	r7, r3
 80077e0:	898b      	ldrh	r3, [r1, #12]
 80077e2:	05db      	lsls	r3, r3, #23
 80077e4:	4605      	mov	r5, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	4616      	mov	r6, r2
 80077ea:	d505      	bpl.n	80077f8 <__swrite+0x1e>
 80077ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f0:	2302      	movs	r3, #2
 80077f2:	2200      	movs	r2, #0
 80077f4:	f000 f840 	bl	8007878 <_lseek_r>
 80077f8:	89a3      	ldrh	r3, [r4, #12]
 80077fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007802:	81a3      	strh	r3, [r4, #12]
 8007804:	4632      	mov	r2, r6
 8007806:	463b      	mov	r3, r7
 8007808:	4628      	mov	r0, r5
 800780a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800780e:	f000 b857 	b.w	80078c0 <_write_r>

08007812 <__sseek>:
 8007812:	b510      	push	{r4, lr}
 8007814:	460c      	mov	r4, r1
 8007816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781a:	f000 f82d 	bl	8007878 <_lseek_r>
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	bf15      	itete	ne
 8007824:	6560      	strne	r0, [r4, #84]	; 0x54
 8007826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800782a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800782e:	81a3      	strheq	r3, [r4, #12]
 8007830:	bf18      	it	ne
 8007832:	81a3      	strhne	r3, [r4, #12]
 8007834:	bd10      	pop	{r4, pc}

08007836 <__sclose>:
 8007836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783a:	f000 b80d 	b.w	8007858 <_close_r>

0800783e <memset>:
 800783e:	4402      	add	r2, r0
 8007840:	4603      	mov	r3, r0
 8007842:	4293      	cmp	r3, r2
 8007844:	d100      	bne.n	8007848 <memset+0xa>
 8007846:	4770      	bx	lr
 8007848:	f803 1b01 	strb.w	r1, [r3], #1
 800784c:	e7f9      	b.n	8007842 <memset+0x4>
	...

08007850 <_localeconv_r>:
 8007850:	4800      	ldr	r0, [pc, #0]	; (8007854 <_localeconv_r+0x4>)
 8007852:	4770      	bx	lr
 8007854:	20000158 	.word	0x20000158

08007858 <_close_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d06      	ldr	r5, [pc, #24]	; (8007874 <_close_r+0x1c>)
 800785c:	2300      	movs	r3, #0
 800785e:	4604      	mov	r4, r0
 8007860:	4608      	mov	r0, r1
 8007862:	602b      	str	r3, [r5, #0]
 8007864:	f7fa fa67 	bl	8001d36 <_close>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d102      	bne.n	8007872 <_close_r+0x1a>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	b103      	cbz	r3, 8007872 <_close_r+0x1a>
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	20000b14 	.word	0x20000b14

08007878 <_lseek_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4d07      	ldr	r5, [pc, #28]	; (8007898 <_lseek_r+0x20>)
 800787c:	4604      	mov	r4, r0
 800787e:	4608      	mov	r0, r1
 8007880:	4611      	mov	r1, r2
 8007882:	2200      	movs	r2, #0
 8007884:	602a      	str	r2, [r5, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	f7fa fa7c 	bl	8001d84 <_lseek>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d102      	bne.n	8007896 <_lseek_r+0x1e>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	b103      	cbz	r3, 8007896 <_lseek_r+0x1e>
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	bd38      	pop	{r3, r4, r5, pc}
 8007898:	20000b14 	.word	0x20000b14

0800789c <_read_r>:
 800789c:	b538      	push	{r3, r4, r5, lr}
 800789e:	4d07      	ldr	r5, [pc, #28]	; (80078bc <_read_r+0x20>)
 80078a0:	4604      	mov	r4, r0
 80078a2:	4608      	mov	r0, r1
 80078a4:	4611      	mov	r1, r2
 80078a6:	2200      	movs	r2, #0
 80078a8:	602a      	str	r2, [r5, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	f7fa fa0a 	bl	8001cc4 <_read>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d102      	bne.n	80078ba <_read_r+0x1e>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	b103      	cbz	r3, 80078ba <_read_r+0x1e>
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	bd38      	pop	{r3, r4, r5, pc}
 80078bc:	20000b14 	.word	0x20000b14

080078c0 <_write_r>:
 80078c0:	b538      	push	{r3, r4, r5, lr}
 80078c2:	4d07      	ldr	r5, [pc, #28]	; (80078e0 <_write_r+0x20>)
 80078c4:	4604      	mov	r4, r0
 80078c6:	4608      	mov	r0, r1
 80078c8:	4611      	mov	r1, r2
 80078ca:	2200      	movs	r2, #0
 80078cc:	602a      	str	r2, [r5, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f7fa fa15 	bl	8001cfe <_write>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_write_r+0x1e>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	b103      	cbz	r3, 80078de <_write_r+0x1e>
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	20000b14 	.word	0x20000b14

080078e4 <__errno>:
 80078e4:	4b01      	ldr	r3, [pc, #4]	; (80078ec <__errno+0x8>)
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	20000064 	.word	0x20000064

080078f0 <__libc_init_array>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	4d0d      	ldr	r5, [pc, #52]	; (8007928 <__libc_init_array+0x38>)
 80078f4:	4c0d      	ldr	r4, [pc, #52]	; (800792c <__libc_init_array+0x3c>)
 80078f6:	1b64      	subs	r4, r4, r5
 80078f8:	10a4      	asrs	r4, r4, #2
 80078fa:	2600      	movs	r6, #0
 80078fc:	42a6      	cmp	r6, r4
 80078fe:	d109      	bne.n	8007914 <__libc_init_array+0x24>
 8007900:	4d0b      	ldr	r5, [pc, #44]	; (8007930 <__libc_init_array+0x40>)
 8007902:	4c0c      	ldr	r4, [pc, #48]	; (8007934 <__libc_init_array+0x44>)
 8007904:	f001 feec 	bl	80096e0 <_init>
 8007908:	1b64      	subs	r4, r4, r5
 800790a:	10a4      	asrs	r4, r4, #2
 800790c:	2600      	movs	r6, #0
 800790e:	42a6      	cmp	r6, r4
 8007910:	d105      	bne.n	800791e <__libc_init_array+0x2e>
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	f855 3b04 	ldr.w	r3, [r5], #4
 8007918:	4798      	blx	r3
 800791a:	3601      	adds	r6, #1
 800791c:	e7ee      	b.n	80078fc <__libc_init_array+0xc>
 800791e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007922:	4798      	blx	r3
 8007924:	3601      	adds	r6, #1
 8007926:	e7f2      	b.n	800790e <__libc_init_array+0x1e>
 8007928:	08009a94 	.word	0x08009a94
 800792c:	08009a94 	.word	0x08009a94
 8007930:	08009a94 	.word	0x08009a94
 8007934:	08009a98 	.word	0x08009a98

08007938 <__retarget_lock_acquire_recursive>:
 8007938:	4770      	bx	lr

0800793a <__retarget_lock_release_recursive>:
 800793a:	4770      	bx	lr

0800793c <quorem>:
 800793c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007940:	6903      	ldr	r3, [r0, #16]
 8007942:	690c      	ldr	r4, [r1, #16]
 8007944:	42a3      	cmp	r3, r4
 8007946:	4607      	mov	r7, r0
 8007948:	db7e      	blt.n	8007a48 <quorem+0x10c>
 800794a:	3c01      	subs	r4, #1
 800794c:	f101 0814 	add.w	r8, r1, #20
 8007950:	f100 0514 	add.w	r5, r0, #20
 8007954:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800795e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007962:	3301      	adds	r3, #1
 8007964:	429a      	cmp	r2, r3
 8007966:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800796a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800796e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007972:	d331      	bcc.n	80079d8 <quorem+0x9c>
 8007974:	f04f 0e00 	mov.w	lr, #0
 8007978:	4640      	mov	r0, r8
 800797a:	46ac      	mov	ip, r5
 800797c:	46f2      	mov	sl, lr
 800797e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007982:	b293      	uxth	r3, r2
 8007984:	fb06 e303 	mla	r3, r6, r3, lr
 8007988:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800798c:	0c1a      	lsrs	r2, r3, #16
 800798e:	b29b      	uxth	r3, r3
 8007990:	ebaa 0303 	sub.w	r3, sl, r3
 8007994:	f8dc a000 	ldr.w	sl, [ip]
 8007998:	fa13 f38a 	uxtah	r3, r3, sl
 800799c:	fb06 220e 	mla	r2, r6, lr, r2
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	9b00      	ldr	r3, [sp, #0]
 80079a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079a8:	b292      	uxth	r2, r2
 80079aa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079b2:	f8bd 3000 	ldrh.w	r3, [sp]
 80079b6:	4581      	cmp	r9, r0
 80079b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079bc:	f84c 3b04 	str.w	r3, [ip], #4
 80079c0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079c4:	d2db      	bcs.n	800797e <quorem+0x42>
 80079c6:	f855 300b 	ldr.w	r3, [r5, fp]
 80079ca:	b92b      	cbnz	r3, 80079d8 <quorem+0x9c>
 80079cc:	9b01      	ldr	r3, [sp, #4]
 80079ce:	3b04      	subs	r3, #4
 80079d0:	429d      	cmp	r5, r3
 80079d2:	461a      	mov	r2, r3
 80079d4:	d32c      	bcc.n	8007a30 <quorem+0xf4>
 80079d6:	613c      	str	r4, [r7, #16]
 80079d8:	4638      	mov	r0, r7
 80079da:	f001 f9a7 	bl	8008d2c <__mcmp>
 80079de:	2800      	cmp	r0, #0
 80079e0:	db22      	blt.n	8007a28 <quorem+0xec>
 80079e2:	3601      	adds	r6, #1
 80079e4:	4629      	mov	r1, r5
 80079e6:	2000      	movs	r0, #0
 80079e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80079ec:	f8d1 c000 	ldr.w	ip, [r1]
 80079f0:	b293      	uxth	r3, r2
 80079f2:	1ac3      	subs	r3, r0, r3
 80079f4:	0c12      	lsrs	r2, r2, #16
 80079f6:	fa13 f38c 	uxtah	r3, r3, ip
 80079fa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80079fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a08:	45c1      	cmp	r9, r8
 8007a0a:	f841 3b04 	str.w	r3, [r1], #4
 8007a0e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a12:	d2e9      	bcs.n	80079e8 <quorem+0xac>
 8007a14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a1c:	b922      	cbnz	r2, 8007a28 <quorem+0xec>
 8007a1e:	3b04      	subs	r3, #4
 8007a20:	429d      	cmp	r5, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	d30a      	bcc.n	8007a3c <quorem+0x100>
 8007a26:	613c      	str	r4, [r7, #16]
 8007a28:	4630      	mov	r0, r6
 8007a2a:	b003      	add	sp, #12
 8007a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a30:	6812      	ldr	r2, [r2, #0]
 8007a32:	3b04      	subs	r3, #4
 8007a34:	2a00      	cmp	r2, #0
 8007a36:	d1ce      	bne.n	80079d6 <quorem+0x9a>
 8007a38:	3c01      	subs	r4, #1
 8007a3a:	e7c9      	b.n	80079d0 <quorem+0x94>
 8007a3c:	6812      	ldr	r2, [r2, #0]
 8007a3e:	3b04      	subs	r3, #4
 8007a40:	2a00      	cmp	r2, #0
 8007a42:	d1f0      	bne.n	8007a26 <quorem+0xea>
 8007a44:	3c01      	subs	r4, #1
 8007a46:	e7eb      	b.n	8007a20 <quorem+0xe4>
 8007a48:	2000      	movs	r0, #0
 8007a4a:	e7ee      	b.n	8007a2a <quorem+0xee>
 8007a4c:	0000      	movs	r0, r0
	...

08007a50 <_dtoa_r>:
 8007a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	ed2d 8b04 	vpush	{d8-d9}
 8007a58:	69c5      	ldr	r5, [r0, #28]
 8007a5a:	b093      	sub	sp, #76	; 0x4c
 8007a5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a60:	ec57 6b10 	vmov	r6, r7, d0
 8007a64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a68:	9107      	str	r1, [sp, #28]
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	920a      	str	r2, [sp, #40]	; 0x28
 8007a6e:	930d      	str	r3, [sp, #52]	; 0x34
 8007a70:	b975      	cbnz	r5, 8007a90 <_dtoa_r+0x40>
 8007a72:	2010      	movs	r0, #16
 8007a74:	f000 fe2a 	bl	80086cc <malloc>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	61e0      	str	r0, [r4, #28]
 8007a7c:	b920      	cbnz	r0, 8007a88 <_dtoa_r+0x38>
 8007a7e:	4bae      	ldr	r3, [pc, #696]	; (8007d38 <_dtoa_r+0x2e8>)
 8007a80:	21ef      	movs	r1, #239	; 0xef
 8007a82:	48ae      	ldr	r0, [pc, #696]	; (8007d3c <_dtoa_r+0x2ec>)
 8007a84:	f001 fb1e 	bl	80090c4 <__assert_func>
 8007a88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a8c:	6005      	str	r5, [r0, #0]
 8007a8e:	60c5      	str	r5, [r0, #12]
 8007a90:	69e3      	ldr	r3, [r4, #28]
 8007a92:	6819      	ldr	r1, [r3, #0]
 8007a94:	b151      	cbz	r1, 8007aac <_dtoa_r+0x5c>
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	604a      	str	r2, [r1, #4]
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	4093      	lsls	r3, r2
 8007a9e:	608b      	str	r3, [r1, #8]
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f000 ff07 	bl	80088b4 <_Bfree>
 8007aa6:	69e3      	ldr	r3, [r4, #28]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	1e3b      	subs	r3, r7, #0
 8007aae:	bfbb      	ittet	lt
 8007ab0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ab4:	9303      	strlt	r3, [sp, #12]
 8007ab6:	2300      	movge	r3, #0
 8007ab8:	2201      	movlt	r2, #1
 8007aba:	bfac      	ite	ge
 8007abc:	f8c8 3000 	strge.w	r3, [r8]
 8007ac0:	f8c8 2000 	strlt.w	r2, [r8]
 8007ac4:	4b9e      	ldr	r3, [pc, #632]	; (8007d40 <_dtoa_r+0x2f0>)
 8007ac6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007aca:	ea33 0308 	bics.w	r3, r3, r8
 8007ace:	d11b      	bne.n	8007b08 <_dtoa_r+0xb8>
 8007ad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ad2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007adc:	4333      	orrs	r3, r6
 8007ade:	f000 8593 	beq.w	8008608 <_dtoa_r+0xbb8>
 8007ae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ae4:	b963      	cbnz	r3, 8007b00 <_dtoa_r+0xb0>
 8007ae6:	4b97      	ldr	r3, [pc, #604]	; (8007d44 <_dtoa_r+0x2f4>)
 8007ae8:	e027      	b.n	8007b3a <_dtoa_r+0xea>
 8007aea:	4b97      	ldr	r3, [pc, #604]	; (8007d48 <_dtoa_r+0x2f8>)
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	3308      	adds	r3, #8
 8007af0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	9800      	ldr	r0, [sp, #0]
 8007af6:	b013      	add	sp, #76	; 0x4c
 8007af8:	ecbd 8b04 	vpop	{d8-d9}
 8007afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b00:	4b90      	ldr	r3, [pc, #576]	; (8007d44 <_dtoa_r+0x2f4>)
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	3303      	adds	r3, #3
 8007b06:	e7f3      	b.n	8007af0 <_dtoa_r+0xa0>
 8007b08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	ec51 0b17 	vmov	r0, r1, d7
 8007b12:	eeb0 8a47 	vmov.f32	s16, s14
 8007b16:	eef0 8a67 	vmov.f32	s17, s15
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f7f8 fff4 	bl	8000b08 <__aeabi_dcmpeq>
 8007b20:	4681      	mov	r9, r0
 8007b22:	b160      	cbz	r0, 8007b3e <_dtoa_r+0xee>
 8007b24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b26:	2301      	movs	r3, #1
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 8568 	beq.w	8008602 <_dtoa_r+0xbb2>
 8007b32:	4b86      	ldr	r3, [pc, #536]	; (8007d4c <_dtoa_r+0x2fc>)
 8007b34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	e7da      	b.n	8007af4 <_dtoa_r+0xa4>
 8007b3e:	aa10      	add	r2, sp, #64	; 0x40
 8007b40:	a911      	add	r1, sp, #68	; 0x44
 8007b42:	4620      	mov	r0, r4
 8007b44:	eeb0 0a48 	vmov.f32	s0, s16
 8007b48:	eef0 0a68 	vmov.f32	s1, s17
 8007b4c:	f001 f994 	bl	8008e78 <__d2b>
 8007b50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007b54:	4682      	mov	sl, r0
 8007b56:	2d00      	cmp	r5, #0
 8007b58:	d07f      	beq.n	8007c5a <_dtoa_r+0x20a>
 8007b5a:	ee18 3a90 	vmov	r3, s17
 8007b5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007b66:	ec51 0b18 	vmov	r0, r1, d8
 8007b6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007b6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007b76:	4619      	mov	r1, r3
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4b75      	ldr	r3, [pc, #468]	; (8007d50 <_dtoa_r+0x300>)
 8007b7c:	f7f8 fba4 	bl	80002c8 <__aeabi_dsub>
 8007b80:	a367      	add	r3, pc, #412	; (adr r3, 8007d20 <_dtoa_r+0x2d0>)
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	f7f8 fd57 	bl	8000638 <__aeabi_dmul>
 8007b8a:	a367      	add	r3, pc, #412	; (adr r3, 8007d28 <_dtoa_r+0x2d8>)
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	f7f8 fb9c 	bl	80002cc <__adddf3>
 8007b94:	4606      	mov	r6, r0
 8007b96:	4628      	mov	r0, r5
 8007b98:	460f      	mov	r7, r1
 8007b9a:	f7f8 fce3 	bl	8000564 <__aeabi_i2d>
 8007b9e:	a364      	add	r3, pc, #400	; (adr r3, 8007d30 <_dtoa_r+0x2e0>)
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f7f8 fd48 	bl	8000638 <__aeabi_dmul>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4630      	mov	r0, r6
 8007bae:	4639      	mov	r1, r7
 8007bb0:	f7f8 fb8c 	bl	80002cc <__adddf3>
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	460f      	mov	r7, r1
 8007bb8:	f7f8 ffee 	bl	8000b98 <__aeabi_d2iz>
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	4683      	mov	fp, r0
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	4639      	mov	r1, r7
 8007bc6:	f7f8 ffa9 	bl	8000b1c <__aeabi_dcmplt>
 8007bca:	b148      	cbz	r0, 8007be0 <_dtoa_r+0x190>
 8007bcc:	4658      	mov	r0, fp
 8007bce:	f7f8 fcc9 	bl	8000564 <__aeabi_i2d>
 8007bd2:	4632      	mov	r2, r6
 8007bd4:	463b      	mov	r3, r7
 8007bd6:	f7f8 ff97 	bl	8000b08 <__aeabi_dcmpeq>
 8007bda:	b908      	cbnz	r0, 8007be0 <_dtoa_r+0x190>
 8007bdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007be0:	f1bb 0f16 	cmp.w	fp, #22
 8007be4:	d857      	bhi.n	8007c96 <_dtoa_r+0x246>
 8007be6:	4b5b      	ldr	r3, [pc, #364]	; (8007d54 <_dtoa_r+0x304>)
 8007be8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	ec51 0b18 	vmov	r0, r1, d8
 8007bf4:	f7f8 ff92 	bl	8000b1c <__aeabi_dcmplt>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d04e      	beq.n	8007c9a <_dtoa_r+0x24a>
 8007bfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c00:	2300      	movs	r3, #0
 8007c02:	930c      	str	r3, [sp, #48]	; 0x30
 8007c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c06:	1b5b      	subs	r3, r3, r5
 8007c08:	1e5a      	subs	r2, r3, #1
 8007c0a:	bf45      	ittet	mi
 8007c0c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c10:	9305      	strmi	r3, [sp, #20]
 8007c12:	2300      	movpl	r3, #0
 8007c14:	2300      	movmi	r3, #0
 8007c16:	9206      	str	r2, [sp, #24]
 8007c18:	bf54      	ite	pl
 8007c1a:	9305      	strpl	r3, [sp, #20]
 8007c1c:	9306      	strmi	r3, [sp, #24]
 8007c1e:	f1bb 0f00 	cmp.w	fp, #0
 8007c22:	db3c      	blt.n	8007c9e <_dtoa_r+0x24e>
 8007c24:	9b06      	ldr	r3, [sp, #24]
 8007c26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007c2a:	445b      	add	r3, fp
 8007c2c:	9306      	str	r3, [sp, #24]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9308      	str	r3, [sp, #32]
 8007c32:	9b07      	ldr	r3, [sp, #28]
 8007c34:	2b09      	cmp	r3, #9
 8007c36:	d868      	bhi.n	8007d0a <_dtoa_r+0x2ba>
 8007c38:	2b05      	cmp	r3, #5
 8007c3a:	bfc4      	itt	gt
 8007c3c:	3b04      	subgt	r3, #4
 8007c3e:	9307      	strgt	r3, [sp, #28]
 8007c40:	9b07      	ldr	r3, [sp, #28]
 8007c42:	f1a3 0302 	sub.w	r3, r3, #2
 8007c46:	bfcc      	ite	gt
 8007c48:	2500      	movgt	r5, #0
 8007c4a:	2501      	movle	r5, #1
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	f200 8085 	bhi.w	8007d5c <_dtoa_r+0x30c>
 8007c52:	e8df f003 	tbb	[pc, r3]
 8007c56:	3b2e      	.short	0x3b2e
 8007c58:	5839      	.short	0x5839
 8007c5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c5e:	441d      	add	r5, r3
 8007c60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	bfc1      	itttt	gt
 8007c68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c6c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007c74:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007c78:	bfd6      	itet	le
 8007c7a:	f1c3 0320 	rsble	r3, r3, #32
 8007c7e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c82:	fa06 f003 	lslle.w	r0, r6, r3
 8007c86:	f7f8 fc5d 	bl	8000544 <__aeabi_ui2d>
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007c90:	3d01      	subs	r5, #1
 8007c92:	920e      	str	r2, [sp, #56]	; 0x38
 8007c94:	e76f      	b.n	8007b76 <_dtoa_r+0x126>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e7b3      	b.n	8007c02 <_dtoa_r+0x1b2>
 8007c9a:	900c      	str	r0, [sp, #48]	; 0x30
 8007c9c:	e7b2      	b.n	8007c04 <_dtoa_r+0x1b4>
 8007c9e:	9b05      	ldr	r3, [sp, #20]
 8007ca0:	eba3 030b 	sub.w	r3, r3, fp
 8007ca4:	9305      	str	r3, [sp, #20]
 8007ca6:	f1cb 0300 	rsb	r3, fp, #0
 8007caa:	9308      	str	r3, [sp, #32]
 8007cac:	2300      	movs	r3, #0
 8007cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cb0:	e7bf      	b.n	8007c32 <_dtoa_r+0x1e2>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dc52      	bgt.n	8007d62 <_dtoa_r+0x312>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	9301      	str	r3, [sp, #4]
 8007cc0:	9304      	str	r3, [sp, #16]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	920a      	str	r2, [sp, #40]	; 0x28
 8007cc6:	e00b      	b.n	8007ce0 <_dtoa_r+0x290>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e7f3      	b.n	8007cb4 <_dtoa_r+0x264>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd2:	445b      	add	r3, fp
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	9304      	str	r3, [sp, #16]
 8007cdc:	bfb8      	it	lt
 8007cde:	2301      	movlt	r3, #1
 8007ce0:	69e0      	ldr	r0, [r4, #28]
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	2204      	movs	r2, #4
 8007ce6:	f102 0614 	add.w	r6, r2, #20
 8007cea:	429e      	cmp	r6, r3
 8007cec:	d93d      	bls.n	8007d6a <_dtoa_r+0x31a>
 8007cee:	6041      	str	r1, [r0, #4]
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f000 fd9f 	bl	8008834 <_Balloc>
 8007cf6:	9000      	str	r0, [sp, #0]
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d139      	bne.n	8007d70 <_dtoa_r+0x320>
 8007cfc:	4b16      	ldr	r3, [pc, #88]	; (8007d58 <_dtoa_r+0x308>)
 8007cfe:	4602      	mov	r2, r0
 8007d00:	f240 11af 	movw	r1, #431	; 0x1af
 8007d04:	e6bd      	b.n	8007a82 <_dtoa_r+0x32>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e7e1      	b.n	8007cce <_dtoa_r+0x27e>
 8007d0a:	2501      	movs	r5, #1
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9307      	str	r3, [sp, #28]
 8007d10:	9509      	str	r5, [sp, #36]	; 0x24
 8007d12:	f04f 33ff 	mov.w	r3, #4294967295
 8007d16:	9301      	str	r3, [sp, #4]
 8007d18:	9304      	str	r3, [sp, #16]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2312      	movs	r3, #18
 8007d1e:	e7d1      	b.n	8007cc4 <_dtoa_r+0x274>
 8007d20:	636f4361 	.word	0x636f4361
 8007d24:	3fd287a7 	.word	0x3fd287a7
 8007d28:	8b60c8b3 	.word	0x8b60c8b3
 8007d2c:	3fc68a28 	.word	0x3fc68a28
 8007d30:	509f79fb 	.word	0x509f79fb
 8007d34:	3fd34413 	.word	0x3fd34413
 8007d38:	08009759 	.word	0x08009759
 8007d3c:	08009770 	.word	0x08009770
 8007d40:	7ff00000 	.word	0x7ff00000
 8007d44:	08009755 	.word	0x08009755
 8007d48:	0800974c 	.word	0x0800974c
 8007d4c:	08009729 	.word	0x08009729
 8007d50:	3ff80000 	.word	0x3ff80000
 8007d54:	08009860 	.word	0x08009860
 8007d58:	080097c8 	.word	0x080097c8
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d60:	e7d7      	b.n	8007d12 <_dtoa_r+0x2c2>
 8007d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d64:	9301      	str	r3, [sp, #4]
 8007d66:	9304      	str	r3, [sp, #16]
 8007d68:	e7ba      	b.n	8007ce0 <_dtoa_r+0x290>
 8007d6a:	3101      	adds	r1, #1
 8007d6c:	0052      	lsls	r2, r2, #1
 8007d6e:	e7ba      	b.n	8007ce6 <_dtoa_r+0x296>
 8007d70:	69e3      	ldr	r3, [r4, #28]
 8007d72:	9a00      	ldr	r2, [sp, #0]
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	9b04      	ldr	r3, [sp, #16]
 8007d78:	2b0e      	cmp	r3, #14
 8007d7a:	f200 80a8 	bhi.w	8007ece <_dtoa_r+0x47e>
 8007d7e:	2d00      	cmp	r5, #0
 8007d80:	f000 80a5 	beq.w	8007ece <_dtoa_r+0x47e>
 8007d84:	f1bb 0f00 	cmp.w	fp, #0
 8007d88:	dd38      	ble.n	8007dfc <_dtoa_r+0x3ac>
 8007d8a:	4bc0      	ldr	r3, [pc, #768]	; (800808c <_dtoa_r+0x63c>)
 8007d8c:	f00b 020f 	and.w	r2, fp, #15
 8007d90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007d98:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007d9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007da0:	d019      	beq.n	8007dd6 <_dtoa_r+0x386>
 8007da2:	4bbb      	ldr	r3, [pc, #748]	; (8008090 <_dtoa_r+0x640>)
 8007da4:	ec51 0b18 	vmov	r0, r1, d8
 8007da8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dac:	f7f8 fd6e 	bl	800088c <__aeabi_ddiv>
 8007db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db4:	f008 080f 	and.w	r8, r8, #15
 8007db8:	2503      	movs	r5, #3
 8007dba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008090 <_dtoa_r+0x640>
 8007dbe:	f1b8 0f00 	cmp.w	r8, #0
 8007dc2:	d10a      	bne.n	8007dda <_dtoa_r+0x38a>
 8007dc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc8:	4632      	mov	r2, r6
 8007dca:	463b      	mov	r3, r7
 8007dcc:	f7f8 fd5e 	bl	800088c <__aeabi_ddiv>
 8007dd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dd4:	e02b      	b.n	8007e2e <_dtoa_r+0x3de>
 8007dd6:	2502      	movs	r5, #2
 8007dd8:	e7ef      	b.n	8007dba <_dtoa_r+0x36a>
 8007dda:	f018 0f01 	tst.w	r8, #1
 8007dde:	d008      	beq.n	8007df2 <_dtoa_r+0x3a2>
 8007de0:	4630      	mov	r0, r6
 8007de2:	4639      	mov	r1, r7
 8007de4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007de8:	f7f8 fc26 	bl	8000638 <__aeabi_dmul>
 8007dec:	3501      	adds	r5, #1
 8007dee:	4606      	mov	r6, r0
 8007df0:	460f      	mov	r7, r1
 8007df2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007df6:	f109 0908 	add.w	r9, r9, #8
 8007dfa:	e7e0      	b.n	8007dbe <_dtoa_r+0x36e>
 8007dfc:	f000 809f 	beq.w	8007f3e <_dtoa_r+0x4ee>
 8007e00:	f1cb 0600 	rsb	r6, fp, #0
 8007e04:	4ba1      	ldr	r3, [pc, #644]	; (800808c <_dtoa_r+0x63c>)
 8007e06:	4fa2      	ldr	r7, [pc, #648]	; (8008090 <_dtoa_r+0x640>)
 8007e08:	f006 020f 	and.w	r2, r6, #15
 8007e0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	ec51 0b18 	vmov	r0, r1, d8
 8007e18:	f7f8 fc0e 	bl	8000638 <__aeabi_dmul>
 8007e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e20:	1136      	asrs	r6, r6, #4
 8007e22:	2300      	movs	r3, #0
 8007e24:	2502      	movs	r5, #2
 8007e26:	2e00      	cmp	r6, #0
 8007e28:	d17e      	bne.n	8007f28 <_dtoa_r+0x4d8>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1d0      	bne.n	8007dd0 <_dtoa_r+0x380>
 8007e2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 8084 	beq.w	8007f42 <_dtoa_r+0x4f2>
 8007e3a:	4b96      	ldr	r3, [pc, #600]	; (8008094 <_dtoa_r+0x644>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4640      	mov	r0, r8
 8007e40:	4649      	mov	r1, r9
 8007e42:	f7f8 fe6b 	bl	8000b1c <__aeabi_dcmplt>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d07b      	beq.n	8007f42 <_dtoa_r+0x4f2>
 8007e4a:	9b04      	ldr	r3, [sp, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d078      	beq.n	8007f42 <_dtoa_r+0x4f2>
 8007e50:	9b01      	ldr	r3, [sp, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	dd39      	ble.n	8007eca <_dtoa_r+0x47a>
 8007e56:	4b90      	ldr	r3, [pc, #576]	; (8008098 <_dtoa_r+0x648>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	f7f8 fbeb 	bl	8000638 <__aeabi_dmul>
 8007e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e66:	9e01      	ldr	r6, [sp, #4]
 8007e68:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007e6c:	3501      	adds	r5, #1
 8007e6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e72:	4628      	mov	r0, r5
 8007e74:	f7f8 fb76 	bl	8000564 <__aeabi_i2d>
 8007e78:	4642      	mov	r2, r8
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	f7f8 fbdc 	bl	8000638 <__aeabi_dmul>
 8007e80:	4b86      	ldr	r3, [pc, #536]	; (800809c <_dtoa_r+0x64c>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	f7f8 fa22 	bl	80002cc <__adddf3>
 8007e88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e90:	9303      	str	r3, [sp, #12]
 8007e92:	2e00      	cmp	r6, #0
 8007e94:	d158      	bne.n	8007f48 <_dtoa_r+0x4f8>
 8007e96:	4b82      	ldr	r3, [pc, #520]	; (80080a0 <_dtoa_r+0x650>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	4649      	mov	r1, r9
 8007e9e:	f7f8 fa13 	bl	80002c8 <__aeabi_dsub>
 8007ea2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ea6:	4680      	mov	r8, r0
 8007ea8:	4689      	mov	r9, r1
 8007eaa:	f7f8 fe55 	bl	8000b58 <__aeabi_dcmpgt>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	f040 8296 	bne.w	80083e0 <_dtoa_r+0x990>
 8007eb4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007eb8:	4640      	mov	r0, r8
 8007eba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	f7f8 fe2c 	bl	8000b1c <__aeabi_dcmplt>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f040 8289 	bne.w	80083dc <_dtoa_r+0x98c>
 8007eca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007ece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f2c0 814e 	blt.w	8008172 <_dtoa_r+0x722>
 8007ed6:	f1bb 0f0e 	cmp.w	fp, #14
 8007eda:	f300 814a 	bgt.w	8008172 <_dtoa_r+0x722>
 8007ede:	4b6b      	ldr	r3, [pc, #428]	; (800808c <_dtoa_r+0x63c>)
 8007ee0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ee4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f280 80dc 	bge.w	80080a8 <_dtoa_r+0x658>
 8007ef0:	9b04      	ldr	r3, [sp, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f300 80d8 	bgt.w	80080a8 <_dtoa_r+0x658>
 8007ef8:	f040 826f 	bne.w	80083da <_dtoa_r+0x98a>
 8007efc:	4b68      	ldr	r3, [pc, #416]	; (80080a0 <_dtoa_r+0x650>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	4640      	mov	r0, r8
 8007f02:	4649      	mov	r1, r9
 8007f04:	f7f8 fb98 	bl	8000638 <__aeabi_dmul>
 8007f08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f0c:	f7f8 fe1a 	bl	8000b44 <__aeabi_dcmpge>
 8007f10:	9e04      	ldr	r6, [sp, #16]
 8007f12:	4637      	mov	r7, r6
 8007f14:	2800      	cmp	r0, #0
 8007f16:	f040 8245 	bne.w	80083a4 <_dtoa_r+0x954>
 8007f1a:	9d00      	ldr	r5, [sp, #0]
 8007f1c:	2331      	movs	r3, #49	; 0x31
 8007f1e:	f805 3b01 	strb.w	r3, [r5], #1
 8007f22:	f10b 0b01 	add.w	fp, fp, #1
 8007f26:	e241      	b.n	80083ac <_dtoa_r+0x95c>
 8007f28:	07f2      	lsls	r2, r6, #31
 8007f2a:	d505      	bpl.n	8007f38 <_dtoa_r+0x4e8>
 8007f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f30:	f7f8 fb82 	bl	8000638 <__aeabi_dmul>
 8007f34:	3501      	adds	r5, #1
 8007f36:	2301      	movs	r3, #1
 8007f38:	1076      	asrs	r6, r6, #1
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	e773      	b.n	8007e26 <_dtoa_r+0x3d6>
 8007f3e:	2502      	movs	r5, #2
 8007f40:	e775      	b.n	8007e2e <_dtoa_r+0x3de>
 8007f42:	9e04      	ldr	r6, [sp, #16]
 8007f44:	465f      	mov	r7, fp
 8007f46:	e792      	b.n	8007e6e <_dtoa_r+0x41e>
 8007f48:	9900      	ldr	r1, [sp, #0]
 8007f4a:	4b50      	ldr	r3, [pc, #320]	; (800808c <_dtoa_r+0x63c>)
 8007f4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f50:	4431      	add	r1, r6
 8007f52:	9102      	str	r1, [sp, #8]
 8007f54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f56:	eeb0 9a47 	vmov.f32	s18, s14
 8007f5a:	eef0 9a67 	vmov.f32	s19, s15
 8007f5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f66:	2900      	cmp	r1, #0
 8007f68:	d044      	beq.n	8007ff4 <_dtoa_r+0x5a4>
 8007f6a:	494e      	ldr	r1, [pc, #312]	; (80080a4 <_dtoa_r+0x654>)
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	f7f8 fc8d 	bl	800088c <__aeabi_ddiv>
 8007f72:	ec53 2b19 	vmov	r2, r3, d9
 8007f76:	f7f8 f9a7 	bl	80002c8 <__aeabi_dsub>
 8007f7a:	9d00      	ldr	r5, [sp, #0]
 8007f7c:	ec41 0b19 	vmov	d9, r0, r1
 8007f80:	4649      	mov	r1, r9
 8007f82:	4640      	mov	r0, r8
 8007f84:	f7f8 fe08 	bl	8000b98 <__aeabi_d2iz>
 8007f88:	4606      	mov	r6, r0
 8007f8a:	f7f8 faeb 	bl	8000564 <__aeabi_i2d>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4640      	mov	r0, r8
 8007f94:	4649      	mov	r1, r9
 8007f96:	f7f8 f997 	bl	80002c8 <__aeabi_dsub>
 8007f9a:	3630      	adds	r6, #48	; 0x30
 8007f9c:	f805 6b01 	strb.w	r6, [r5], #1
 8007fa0:	ec53 2b19 	vmov	r2, r3, d9
 8007fa4:	4680      	mov	r8, r0
 8007fa6:	4689      	mov	r9, r1
 8007fa8:	f7f8 fdb8 	bl	8000b1c <__aeabi_dcmplt>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d164      	bne.n	800807a <_dtoa_r+0x62a>
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	4937      	ldr	r1, [pc, #220]	; (8008094 <_dtoa_r+0x644>)
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	f7f8 f986 	bl	80002c8 <__aeabi_dsub>
 8007fbc:	ec53 2b19 	vmov	r2, r3, d9
 8007fc0:	f7f8 fdac 	bl	8000b1c <__aeabi_dcmplt>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	f040 80b6 	bne.w	8008136 <_dtoa_r+0x6e6>
 8007fca:	9b02      	ldr	r3, [sp, #8]
 8007fcc:	429d      	cmp	r5, r3
 8007fce:	f43f af7c 	beq.w	8007eca <_dtoa_r+0x47a>
 8007fd2:	4b31      	ldr	r3, [pc, #196]	; (8008098 <_dtoa_r+0x648>)
 8007fd4:	ec51 0b19 	vmov	r0, r1, d9
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f7f8 fb2d 	bl	8000638 <__aeabi_dmul>
 8007fde:	4b2e      	ldr	r3, [pc, #184]	; (8008098 <_dtoa_r+0x648>)
 8007fe0:	ec41 0b19 	vmov	d9, r0, r1
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	4640      	mov	r0, r8
 8007fe8:	4649      	mov	r1, r9
 8007fea:	f7f8 fb25 	bl	8000638 <__aeabi_dmul>
 8007fee:	4680      	mov	r8, r0
 8007ff0:	4689      	mov	r9, r1
 8007ff2:	e7c5      	b.n	8007f80 <_dtoa_r+0x530>
 8007ff4:	ec51 0b17 	vmov	r0, r1, d7
 8007ff8:	f7f8 fb1e 	bl	8000638 <__aeabi_dmul>
 8007ffc:	9b02      	ldr	r3, [sp, #8]
 8007ffe:	9d00      	ldr	r5, [sp, #0]
 8008000:	930f      	str	r3, [sp, #60]	; 0x3c
 8008002:	ec41 0b19 	vmov	d9, r0, r1
 8008006:	4649      	mov	r1, r9
 8008008:	4640      	mov	r0, r8
 800800a:	f7f8 fdc5 	bl	8000b98 <__aeabi_d2iz>
 800800e:	4606      	mov	r6, r0
 8008010:	f7f8 faa8 	bl	8000564 <__aeabi_i2d>
 8008014:	3630      	adds	r6, #48	; 0x30
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4640      	mov	r0, r8
 800801c:	4649      	mov	r1, r9
 800801e:	f7f8 f953 	bl	80002c8 <__aeabi_dsub>
 8008022:	f805 6b01 	strb.w	r6, [r5], #1
 8008026:	9b02      	ldr	r3, [sp, #8]
 8008028:	429d      	cmp	r5, r3
 800802a:	4680      	mov	r8, r0
 800802c:	4689      	mov	r9, r1
 800802e:	f04f 0200 	mov.w	r2, #0
 8008032:	d124      	bne.n	800807e <_dtoa_r+0x62e>
 8008034:	4b1b      	ldr	r3, [pc, #108]	; (80080a4 <_dtoa_r+0x654>)
 8008036:	ec51 0b19 	vmov	r0, r1, d9
 800803a:	f7f8 f947 	bl	80002cc <__adddf3>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	4640      	mov	r0, r8
 8008044:	4649      	mov	r1, r9
 8008046:	f7f8 fd87 	bl	8000b58 <__aeabi_dcmpgt>
 800804a:	2800      	cmp	r0, #0
 800804c:	d173      	bne.n	8008136 <_dtoa_r+0x6e6>
 800804e:	ec53 2b19 	vmov	r2, r3, d9
 8008052:	4914      	ldr	r1, [pc, #80]	; (80080a4 <_dtoa_r+0x654>)
 8008054:	2000      	movs	r0, #0
 8008056:	f7f8 f937 	bl	80002c8 <__aeabi_dsub>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4640      	mov	r0, r8
 8008060:	4649      	mov	r1, r9
 8008062:	f7f8 fd5b 	bl	8000b1c <__aeabi_dcmplt>
 8008066:	2800      	cmp	r0, #0
 8008068:	f43f af2f 	beq.w	8007eca <_dtoa_r+0x47a>
 800806c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800806e:	1e6b      	subs	r3, r5, #1
 8008070:	930f      	str	r3, [sp, #60]	; 0x3c
 8008072:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008076:	2b30      	cmp	r3, #48	; 0x30
 8008078:	d0f8      	beq.n	800806c <_dtoa_r+0x61c>
 800807a:	46bb      	mov	fp, r7
 800807c:	e04a      	b.n	8008114 <_dtoa_r+0x6c4>
 800807e:	4b06      	ldr	r3, [pc, #24]	; (8008098 <_dtoa_r+0x648>)
 8008080:	f7f8 fada 	bl	8000638 <__aeabi_dmul>
 8008084:	4680      	mov	r8, r0
 8008086:	4689      	mov	r9, r1
 8008088:	e7bd      	b.n	8008006 <_dtoa_r+0x5b6>
 800808a:	bf00      	nop
 800808c:	08009860 	.word	0x08009860
 8008090:	08009838 	.word	0x08009838
 8008094:	3ff00000 	.word	0x3ff00000
 8008098:	40240000 	.word	0x40240000
 800809c:	401c0000 	.word	0x401c0000
 80080a0:	40140000 	.word	0x40140000
 80080a4:	3fe00000 	.word	0x3fe00000
 80080a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080ac:	9d00      	ldr	r5, [sp, #0]
 80080ae:	4642      	mov	r2, r8
 80080b0:	464b      	mov	r3, r9
 80080b2:	4630      	mov	r0, r6
 80080b4:	4639      	mov	r1, r7
 80080b6:	f7f8 fbe9 	bl	800088c <__aeabi_ddiv>
 80080ba:	f7f8 fd6d 	bl	8000b98 <__aeabi_d2iz>
 80080be:	9001      	str	r0, [sp, #4]
 80080c0:	f7f8 fa50 	bl	8000564 <__aeabi_i2d>
 80080c4:	4642      	mov	r2, r8
 80080c6:	464b      	mov	r3, r9
 80080c8:	f7f8 fab6 	bl	8000638 <__aeabi_dmul>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4630      	mov	r0, r6
 80080d2:	4639      	mov	r1, r7
 80080d4:	f7f8 f8f8 	bl	80002c8 <__aeabi_dsub>
 80080d8:	9e01      	ldr	r6, [sp, #4]
 80080da:	9f04      	ldr	r7, [sp, #16]
 80080dc:	3630      	adds	r6, #48	; 0x30
 80080de:	f805 6b01 	strb.w	r6, [r5], #1
 80080e2:	9e00      	ldr	r6, [sp, #0]
 80080e4:	1bae      	subs	r6, r5, r6
 80080e6:	42b7      	cmp	r7, r6
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	d134      	bne.n	8008158 <_dtoa_r+0x708>
 80080ee:	f7f8 f8ed 	bl	80002cc <__adddf3>
 80080f2:	4642      	mov	r2, r8
 80080f4:	464b      	mov	r3, r9
 80080f6:	4606      	mov	r6, r0
 80080f8:	460f      	mov	r7, r1
 80080fa:	f7f8 fd2d 	bl	8000b58 <__aeabi_dcmpgt>
 80080fe:	b9c8      	cbnz	r0, 8008134 <_dtoa_r+0x6e4>
 8008100:	4642      	mov	r2, r8
 8008102:	464b      	mov	r3, r9
 8008104:	4630      	mov	r0, r6
 8008106:	4639      	mov	r1, r7
 8008108:	f7f8 fcfe 	bl	8000b08 <__aeabi_dcmpeq>
 800810c:	b110      	cbz	r0, 8008114 <_dtoa_r+0x6c4>
 800810e:	9b01      	ldr	r3, [sp, #4]
 8008110:	07db      	lsls	r3, r3, #31
 8008112:	d40f      	bmi.n	8008134 <_dtoa_r+0x6e4>
 8008114:	4651      	mov	r1, sl
 8008116:	4620      	mov	r0, r4
 8008118:	f000 fbcc 	bl	80088b4 <_Bfree>
 800811c:	2300      	movs	r3, #0
 800811e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008120:	702b      	strb	r3, [r5, #0]
 8008122:	f10b 0301 	add.w	r3, fp, #1
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800812a:	2b00      	cmp	r3, #0
 800812c:	f43f ace2 	beq.w	8007af4 <_dtoa_r+0xa4>
 8008130:	601d      	str	r5, [r3, #0]
 8008132:	e4df      	b.n	8007af4 <_dtoa_r+0xa4>
 8008134:	465f      	mov	r7, fp
 8008136:	462b      	mov	r3, r5
 8008138:	461d      	mov	r5, r3
 800813a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800813e:	2a39      	cmp	r2, #57	; 0x39
 8008140:	d106      	bne.n	8008150 <_dtoa_r+0x700>
 8008142:	9a00      	ldr	r2, [sp, #0]
 8008144:	429a      	cmp	r2, r3
 8008146:	d1f7      	bne.n	8008138 <_dtoa_r+0x6e8>
 8008148:	9900      	ldr	r1, [sp, #0]
 800814a:	2230      	movs	r2, #48	; 0x30
 800814c:	3701      	adds	r7, #1
 800814e:	700a      	strb	r2, [r1, #0]
 8008150:	781a      	ldrb	r2, [r3, #0]
 8008152:	3201      	adds	r2, #1
 8008154:	701a      	strb	r2, [r3, #0]
 8008156:	e790      	b.n	800807a <_dtoa_r+0x62a>
 8008158:	4ba3      	ldr	r3, [pc, #652]	; (80083e8 <_dtoa_r+0x998>)
 800815a:	2200      	movs	r2, #0
 800815c:	f7f8 fa6c 	bl	8000638 <__aeabi_dmul>
 8008160:	2200      	movs	r2, #0
 8008162:	2300      	movs	r3, #0
 8008164:	4606      	mov	r6, r0
 8008166:	460f      	mov	r7, r1
 8008168:	f7f8 fcce 	bl	8000b08 <__aeabi_dcmpeq>
 800816c:	2800      	cmp	r0, #0
 800816e:	d09e      	beq.n	80080ae <_dtoa_r+0x65e>
 8008170:	e7d0      	b.n	8008114 <_dtoa_r+0x6c4>
 8008172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008174:	2a00      	cmp	r2, #0
 8008176:	f000 80ca 	beq.w	800830e <_dtoa_r+0x8be>
 800817a:	9a07      	ldr	r2, [sp, #28]
 800817c:	2a01      	cmp	r2, #1
 800817e:	f300 80ad 	bgt.w	80082dc <_dtoa_r+0x88c>
 8008182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008184:	2a00      	cmp	r2, #0
 8008186:	f000 80a5 	beq.w	80082d4 <_dtoa_r+0x884>
 800818a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800818e:	9e08      	ldr	r6, [sp, #32]
 8008190:	9d05      	ldr	r5, [sp, #20]
 8008192:	9a05      	ldr	r2, [sp, #20]
 8008194:	441a      	add	r2, r3
 8008196:	9205      	str	r2, [sp, #20]
 8008198:	9a06      	ldr	r2, [sp, #24]
 800819a:	2101      	movs	r1, #1
 800819c:	441a      	add	r2, r3
 800819e:	4620      	mov	r0, r4
 80081a0:	9206      	str	r2, [sp, #24]
 80081a2:	f000 fc3d 	bl	8008a20 <__i2b>
 80081a6:	4607      	mov	r7, r0
 80081a8:	b165      	cbz	r5, 80081c4 <_dtoa_r+0x774>
 80081aa:	9b06      	ldr	r3, [sp, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dd09      	ble.n	80081c4 <_dtoa_r+0x774>
 80081b0:	42ab      	cmp	r3, r5
 80081b2:	9a05      	ldr	r2, [sp, #20]
 80081b4:	bfa8      	it	ge
 80081b6:	462b      	movge	r3, r5
 80081b8:	1ad2      	subs	r2, r2, r3
 80081ba:	9205      	str	r2, [sp, #20]
 80081bc:	9a06      	ldr	r2, [sp, #24]
 80081be:	1aed      	subs	r5, r5, r3
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	9306      	str	r3, [sp, #24]
 80081c4:	9b08      	ldr	r3, [sp, #32]
 80081c6:	b1f3      	cbz	r3, 8008206 <_dtoa_r+0x7b6>
 80081c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 80a3 	beq.w	8008316 <_dtoa_r+0x8c6>
 80081d0:	2e00      	cmp	r6, #0
 80081d2:	dd10      	ble.n	80081f6 <_dtoa_r+0x7a6>
 80081d4:	4639      	mov	r1, r7
 80081d6:	4632      	mov	r2, r6
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 fce1 	bl	8008ba0 <__pow5mult>
 80081de:	4652      	mov	r2, sl
 80081e0:	4601      	mov	r1, r0
 80081e2:	4607      	mov	r7, r0
 80081e4:	4620      	mov	r0, r4
 80081e6:	f000 fc31 	bl	8008a4c <__multiply>
 80081ea:	4651      	mov	r1, sl
 80081ec:	4680      	mov	r8, r0
 80081ee:	4620      	mov	r0, r4
 80081f0:	f000 fb60 	bl	80088b4 <_Bfree>
 80081f4:	46c2      	mov	sl, r8
 80081f6:	9b08      	ldr	r3, [sp, #32]
 80081f8:	1b9a      	subs	r2, r3, r6
 80081fa:	d004      	beq.n	8008206 <_dtoa_r+0x7b6>
 80081fc:	4651      	mov	r1, sl
 80081fe:	4620      	mov	r0, r4
 8008200:	f000 fcce 	bl	8008ba0 <__pow5mult>
 8008204:	4682      	mov	sl, r0
 8008206:	2101      	movs	r1, #1
 8008208:	4620      	mov	r0, r4
 800820a:	f000 fc09 	bl	8008a20 <__i2b>
 800820e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008210:	2b00      	cmp	r3, #0
 8008212:	4606      	mov	r6, r0
 8008214:	f340 8081 	ble.w	800831a <_dtoa_r+0x8ca>
 8008218:	461a      	mov	r2, r3
 800821a:	4601      	mov	r1, r0
 800821c:	4620      	mov	r0, r4
 800821e:	f000 fcbf 	bl	8008ba0 <__pow5mult>
 8008222:	9b07      	ldr	r3, [sp, #28]
 8008224:	2b01      	cmp	r3, #1
 8008226:	4606      	mov	r6, r0
 8008228:	dd7a      	ble.n	8008320 <_dtoa_r+0x8d0>
 800822a:	f04f 0800 	mov.w	r8, #0
 800822e:	6933      	ldr	r3, [r6, #16]
 8008230:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008234:	6918      	ldr	r0, [r3, #16]
 8008236:	f000 fba5 	bl	8008984 <__hi0bits>
 800823a:	f1c0 0020 	rsb	r0, r0, #32
 800823e:	9b06      	ldr	r3, [sp, #24]
 8008240:	4418      	add	r0, r3
 8008242:	f010 001f 	ands.w	r0, r0, #31
 8008246:	f000 8094 	beq.w	8008372 <_dtoa_r+0x922>
 800824a:	f1c0 0320 	rsb	r3, r0, #32
 800824e:	2b04      	cmp	r3, #4
 8008250:	f340 8085 	ble.w	800835e <_dtoa_r+0x90e>
 8008254:	9b05      	ldr	r3, [sp, #20]
 8008256:	f1c0 001c 	rsb	r0, r0, #28
 800825a:	4403      	add	r3, r0
 800825c:	9305      	str	r3, [sp, #20]
 800825e:	9b06      	ldr	r3, [sp, #24]
 8008260:	4403      	add	r3, r0
 8008262:	4405      	add	r5, r0
 8008264:	9306      	str	r3, [sp, #24]
 8008266:	9b05      	ldr	r3, [sp, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	dd05      	ble.n	8008278 <_dtoa_r+0x828>
 800826c:	4651      	mov	r1, sl
 800826e:	461a      	mov	r2, r3
 8008270:	4620      	mov	r0, r4
 8008272:	f000 fcef 	bl	8008c54 <__lshift>
 8008276:	4682      	mov	sl, r0
 8008278:	9b06      	ldr	r3, [sp, #24]
 800827a:	2b00      	cmp	r3, #0
 800827c:	dd05      	ble.n	800828a <_dtoa_r+0x83a>
 800827e:	4631      	mov	r1, r6
 8008280:	461a      	mov	r2, r3
 8008282:	4620      	mov	r0, r4
 8008284:	f000 fce6 	bl	8008c54 <__lshift>
 8008288:	4606      	mov	r6, r0
 800828a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800828c:	2b00      	cmp	r3, #0
 800828e:	d072      	beq.n	8008376 <_dtoa_r+0x926>
 8008290:	4631      	mov	r1, r6
 8008292:	4650      	mov	r0, sl
 8008294:	f000 fd4a 	bl	8008d2c <__mcmp>
 8008298:	2800      	cmp	r0, #0
 800829a:	da6c      	bge.n	8008376 <_dtoa_r+0x926>
 800829c:	2300      	movs	r3, #0
 800829e:	4651      	mov	r1, sl
 80082a0:	220a      	movs	r2, #10
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 fb28 	bl	80088f8 <__multadd>
 80082a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082ae:	4682      	mov	sl, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 81b0 	beq.w	8008616 <_dtoa_r+0xbc6>
 80082b6:	2300      	movs	r3, #0
 80082b8:	4639      	mov	r1, r7
 80082ba:	220a      	movs	r2, #10
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 fb1b 	bl	80088f8 <__multadd>
 80082c2:	9b01      	ldr	r3, [sp, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	4607      	mov	r7, r0
 80082c8:	f300 8096 	bgt.w	80083f8 <_dtoa_r+0x9a8>
 80082cc:	9b07      	ldr	r3, [sp, #28]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	dc59      	bgt.n	8008386 <_dtoa_r+0x936>
 80082d2:	e091      	b.n	80083f8 <_dtoa_r+0x9a8>
 80082d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082da:	e758      	b.n	800818e <_dtoa_r+0x73e>
 80082dc:	9b04      	ldr	r3, [sp, #16]
 80082de:	1e5e      	subs	r6, r3, #1
 80082e0:	9b08      	ldr	r3, [sp, #32]
 80082e2:	42b3      	cmp	r3, r6
 80082e4:	bfbf      	itttt	lt
 80082e6:	9b08      	ldrlt	r3, [sp, #32]
 80082e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80082ea:	9608      	strlt	r6, [sp, #32]
 80082ec:	1af3      	sublt	r3, r6, r3
 80082ee:	bfb4      	ite	lt
 80082f0:	18d2      	addlt	r2, r2, r3
 80082f2:	1b9e      	subge	r6, r3, r6
 80082f4:	9b04      	ldr	r3, [sp, #16]
 80082f6:	bfbc      	itt	lt
 80082f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80082fa:	2600      	movlt	r6, #0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	bfb7      	itett	lt
 8008300:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008304:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008308:	1a9d      	sublt	r5, r3, r2
 800830a:	2300      	movlt	r3, #0
 800830c:	e741      	b.n	8008192 <_dtoa_r+0x742>
 800830e:	9e08      	ldr	r6, [sp, #32]
 8008310:	9d05      	ldr	r5, [sp, #20]
 8008312:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008314:	e748      	b.n	80081a8 <_dtoa_r+0x758>
 8008316:	9a08      	ldr	r2, [sp, #32]
 8008318:	e770      	b.n	80081fc <_dtoa_r+0x7ac>
 800831a:	9b07      	ldr	r3, [sp, #28]
 800831c:	2b01      	cmp	r3, #1
 800831e:	dc19      	bgt.n	8008354 <_dtoa_r+0x904>
 8008320:	9b02      	ldr	r3, [sp, #8]
 8008322:	b9bb      	cbnz	r3, 8008354 <_dtoa_r+0x904>
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800832a:	b99b      	cbnz	r3, 8008354 <_dtoa_r+0x904>
 800832c:	9b03      	ldr	r3, [sp, #12]
 800832e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008332:	0d1b      	lsrs	r3, r3, #20
 8008334:	051b      	lsls	r3, r3, #20
 8008336:	b183      	cbz	r3, 800835a <_dtoa_r+0x90a>
 8008338:	9b05      	ldr	r3, [sp, #20]
 800833a:	3301      	adds	r3, #1
 800833c:	9305      	str	r3, [sp, #20]
 800833e:	9b06      	ldr	r3, [sp, #24]
 8008340:	3301      	adds	r3, #1
 8008342:	9306      	str	r3, [sp, #24]
 8008344:	f04f 0801 	mov.w	r8, #1
 8008348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800834a:	2b00      	cmp	r3, #0
 800834c:	f47f af6f 	bne.w	800822e <_dtoa_r+0x7de>
 8008350:	2001      	movs	r0, #1
 8008352:	e774      	b.n	800823e <_dtoa_r+0x7ee>
 8008354:	f04f 0800 	mov.w	r8, #0
 8008358:	e7f6      	b.n	8008348 <_dtoa_r+0x8f8>
 800835a:	4698      	mov	r8, r3
 800835c:	e7f4      	b.n	8008348 <_dtoa_r+0x8f8>
 800835e:	d082      	beq.n	8008266 <_dtoa_r+0x816>
 8008360:	9a05      	ldr	r2, [sp, #20]
 8008362:	331c      	adds	r3, #28
 8008364:	441a      	add	r2, r3
 8008366:	9205      	str	r2, [sp, #20]
 8008368:	9a06      	ldr	r2, [sp, #24]
 800836a:	441a      	add	r2, r3
 800836c:	441d      	add	r5, r3
 800836e:	9206      	str	r2, [sp, #24]
 8008370:	e779      	b.n	8008266 <_dtoa_r+0x816>
 8008372:	4603      	mov	r3, r0
 8008374:	e7f4      	b.n	8008360 <_dtoa_r+0x910>
 8008376:	9b04      	ldr	r3, [sp, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	dc37      	bgt.n	80083ec <_dtoa_r+0x99c>
 800837c:	9b07      	ldr	r3, [sp, #28]
 800837e:	2b02      	cmp	r3, #2
 8008380:	dd34      	ble.n	80083ec <_dtoa_r+0x99c>
 8008382:	9b04      	ldr	r3, [sp, #16]
 8008384:	9301      	str	r3, [sp, #4]
 8008386:	9b01      	ldr	r3, [sp, #4]
 8008388:	b963      	cbnz	r3, 80083a4 <_dtoa_r+0x954>
 800838a:	4631      	mov	r1, r6
 800838c:	2205      	movs	r2, #5
 800838e:	4620      	mov	r0, r4
 8008390:	f000 fab2 	bl	80088f8 <__multadd>
 8008394:	4601      	mov	r1, r0
 8008396:	4606      	mov	r6, r0
 8008398:	4650      	mov	r0, sl
 800839a:	f000 fcc7 	bl	8008d2c <__mcmp>
 800839e:	2800      	cmp	r0, #0
 80083a0:	f73f adbb 	bgt.w	8007f1a <_dtoa_r+0x4ca>
 80083a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a6:	9d00      	ldr	r5, [sp, #0]
 80083a8:	ea6f 0b03 	mvn.w	fp, r3
 80083ac:	f04f 0800 	mov.w	r8, #0
 80083b0:	4631      	mov	r1, r6
 80083b2:	4620      	mov	r0, r4
 80083b4:	f000 fa7e 	bl	80088b4 <_Bfree>
 80083b8:	2f00      	cmp	r7, #0
 80083ba:	f43f aeab 	beq.w	8008114 <_dtoa_r+0x6c4>
 80083be:	f1b8 0f00 	cmp.w	r8, #0
 80083c2:	d005      	beq.n	80083d0 <_dtoa_r+0x980>
 80083c4:	45b8      	cmp	r8, r7
 80083c6:	d003      	beq.n	80083d0 <_dtoa_r+0x980>
 80083c8:	4641      	mov	r1, r8
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 fa72 	bl	80088b4 <_Bfree>
 80083d0:	4639      	mov	r1, r7
 80083d2:	4620      	mov	r0, r4
 80083d4:	f000 fa6e 	bl	80088b4 <_Bfree>
 80083d8:	e69c      	b.n	8008114 <_dtoa_r+0x6c4>
 80083da:	2600      	movs	r6, #0
 80083dc:	4637      	mov	r7, r6
 80083de:	e7e1      	b.n	80083a4 <_dtoa_r+0x954>
 80083e0:	46bb      	mov	fp, r7
 80083e2:	4637      	mov	r7, r6
 80083e4:	e599      	b.n	8007f1a <_dtoa_r+0x4ca>
 80083e6:	bf00      	nop
 80083e8:	40240000 	.word	0x40240000
 80083ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 80c8 	beq.w	8008584 <_dtoa_r+0xb34>
 80083f4:	9b04      	ldr	r3, [sp, #16]
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	2d00      	cmp	r5, #0
 80083fa:	dd05      	ble.n	8008408 <_dtoa_r+0x9b8>
 80083fc:	4639      	mov	r1, r7
 80083fe:	462a      	mov	r2, r5
 8008400:	4620      	mov	r0, r4
 8008402:	f000 fc27 	bl	8008c54 <__lshift>
 8008406:	4607      	mov	r7, r0
 8008408:	f1b8 0f00 	cmp.w	r8, #0
 800840c:	d05b      	beq.n	80084c6 <_dtoa_r+0xa76>
 800840e:	6879      	ldr	r1, [r7, #4]
 8008410:	4620      	mov	r0, r4
 8008412:	f000 fa0f 	bl	8008834 <_Balloc>
 8008416:	4605      	mov	r5, r0
 8008418:	b928      	cbnz	r0, 8008426 <_dtoa_r+0x9d6>
 800841a:	4b83      	ldr	r3, [pc, #524]	; (8008628 <_dtoa_r+0xbd8>)
 800841c:	4602      	mov	r2, r0
 800841e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008422:	f7ff bb2e 	b.w	8007a82 <_dtoa_r+0x32>
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	3202      	adds	r2, #2
 800842a:	0092      	lsls	r2, r2, #2
 800842c:	f107 010c 	add.w	r1, r7, #12
 8008430:	300c      	adds	r0, #12
 8008432:	f000 fe39 	bl	80090a8 <memcpy>
 8008436:	2201      	movs	r2, #1
 8008438:	4629      	mov	r1, r5
 800843a:	4620      	mov	r0, r4
 800843c:	f000 fc0a 	bl	8008c54 <__lshift>
 8008440:	9b00      	ldr	r3, [sp, #0]
 8008442:	3301      	adds	r3, #1
 8008444:	9304      	str	r3, [sp, #16]
 8008446:	e9dd 2300 	ldrd	r2, r3, [sp]
 800844a:	4413      	add	r3, r2
 800844c:	9308      	str	r3, [sp, #32]
 800844e:	9b02      	ldr	r3, [sp, #8]
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	46b8      	mov	r8, r7
 8008456:	9306      	str	r3, [sp, #24]
 8008458:	4607      	mov	r7, r0
 800845a:	9b04      	ldr	r3, [sp, #16]
 800845c:	4631      	mov	r1, r6
 800845e:	3b01      	subs	r3, #1
 8008460:	4650      	mov	r0, sl
 8008462:	9301      	str	r3, [sp, #4]
 8008464:	f7ff fa6a 	bl	800793c <quorem>
 8008468:	4641      	mov	r1, r8
 800846a:	9002      	str	r0, [sp, #8]
 800846c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008470:	4650      	mov	r0, sl
 8008472:	f000 fc5b 	bl	8008d2c <__mcmp>
 8008476:	463a      	mov	r2, r7
 8008478:	9005      	str	r0, [sp, #20]
 800847a:	4631      	mov	r1, r6
 800847c:	4620      	mov	r0, r4
 800847e:	f000 fc71 	bl	8008d64 <__mdiff>
 8008482:	68c2      	ldr	r2, [r0, #12]
 8008484:	4605      	mov	r5, r0
 8008486:	bb02      	cbnz	r2, 80084ca <_dtoa_r+0xa7a>
 8008488:	4601      	mov	r1, r0
 800848a:	4650      	mov	r0, sl
 800848c:	f000 fc4e 	bl	8008d2c <__mcmp>
 8008490:	4602      	mov	r2, r0
 8008492:	4629      	mov	r1, r5
 8008494:	4620      	mov	r0, r4
 8008496:	9209      	str	r2, [sp, #36]	; 0x24
 8008498:	f000 fa0c 	bl	80088b4 <_Bfree>
 800849c:	9b07      	ldr	r3, [sp, #28]
 800849e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084a0:	9d04      	ldr	r5, [sp, #16]
 80084a2:	ea43 0102 	orr.w	r1, r3, r2
 80084a6:	9b06      	ldr	r3, [sp, #24]
 80084a8:	4319      	orrs	r1, r3
 80084aa:	d110      	bne.n	80084ce <_dtoa_r+0xa7e>
 80084ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084b0:	d029      	beq.n	8008506 <_dtoa_r+0xab6>
 80084b2:	9b05      	ldr	r3, [sp, #20]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dd02      	ble.n	80084be <_dtoa_r+0xa6e>
 80084b8:	9b02      	ldr	r3, [sp, #8]
 80084ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80084be:	9b01      	ldr	r3, [sp, #4]
 80084c0:	f883 9000 	strb.w	r9, [r3]
 80084c4:	e774      	b.n	80083b0 <_dtoa_r+0x960>
 80084c6:	4638      	mov	r0, r7
 80084c8:	e7ba      	b.n	8008440 <_dtoa_r+0x9f0>
 80084ca:	2201      	movs	r2, #1
 80084cc:	e7e1      	b.n	8008492 <_dtoa_r+0xa42>
 80084ce:	9b05      	ldr	r3, [sp, #20]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	db04      	blt.n	80084de <_dtoa_r+0xa8e>
 80084d4:	9907      	ldr	r1, [sp, #28]
 80084d6:	430b      	orrs	r3, r1
 80084d8:	9906      	ldr	r1, [sp, #24]
 80084da:	430b      	orrs	r3, r1
 80084dc:	d120      	bne.n	8008520 <_dtoa_r+0xad0>
 80084de:	2a00      	cmp	r2, #0
 80084e0:	dded      	ble.n	80084be <_dtoa_r+0xa6e>
 80084e2:	4651      	mov	r1, sl
 80084e4:	2201      	movs	r2, #1
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 fbb4 	bl	8008c54 <__lshift>
 80084ec:	4631      	mov	r1, r6
 80084ee:	4682      	mov	sl, r0
 80084f0:	f000 fc1c 	bl	8008d2c <__mcmp>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	dc03      	bgt.n	8008500 <_dtoa_r+0xab0>
 80084f8:	d1e1      	bne.n	80084be <_dtoa_r+0xa6e>
 80084fa:	f019 0f01 	tst.w	r9, #1
 80084fe:	d0de      	beq.n	80084be <_dtoa_r+0xa6e>
 8008500:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008504:	d1d8      	bne.n	80084b8 <_dtoa_r+0xa68>
 8008506:	9a01      	ldr	r2, [sp, #4]
 8008508:	2339      	movs	r3, #57	; 0x39
 800850a:	7013      	strb	r3, [r2, #0]
 800850c:	462b      	mov	r3, r5
 800850e:	461d      	mov	r5, r3
 8008510:	3b01      	subs	r3, #1
 8008512:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008516:	2a39      	cmp	r2, #57	; 0x39
 8008518:	d06c      	beq.n	80085f4 <_dtoa_r+0xba4>
 800851a:	3201      	adds	r2, #1
 800851c:	701a      	strb	r2, [r3, #0]
 800851e:	e747      	b.n	80083b0 <_dtoa_r+0x960>
 8008520:	2a00      	cmp	r2, #0
 8008522:	dd07      	ble.n	8008534 <_dtoa_r+0xae4>
 8008524:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008528:	d0ed      	beq.n	8008506 <_dtoa_r+0xab6>
 800852a:	9a01      	ldr	r2, [sp, #4]
 800852c:	f109 0301 	add.w	r3, r9, #1
 8008530:	7013      	strb	r3, [r2, #0]
 8008532:	e73d      	b.n	80083b0 <_dtoa_r+0x960>
 8008534:	9b04      	ldr	r3, [sp, #16]
 8008536:	9a08      	ldr	r2, [sp, #32]
 8008538:	f803 9c01 	strb.w	r9, [r3, #-1]
 800853c:	4293      	cmp	r3, r2
 800853e:	d043      	beq.n	80085c8 <_dtoa_r+0xb78>
 8008540:	4651      	mov	r1, sl
 8008542:	2300      	movs	r3, #0
 8008544:	220a      	movs	r2, #10
 8008546:	4620      	mov	r0, r4
 8008548:	f000 f9d6 	bl	80088f8 <__multadd>
 800854c:	45b8      	cmp	r8, r7
 800854e:	4682      	mov	sl, r0
 8008550:	f04f 0300 	mov.w	r3, #0
 8008554:	f04f 020a 	mov.w	r2, #10
 8008558:	4641      	mov	r1, r8
 800855a:	4620      	mov	r0, r4
 800855c:	d107      	bne.n	800856e <_dtoa_r+0xb1e>
 800855e:	f000 f9cb 	bl	80088f8 <__multadd>
 8008562:	4680      	mov	r8, r0
 8008564:	4607      	mov	r7, r0
 8008566:	9b04      	ldr	r3, [sp, #16]
 8008568:	3301      	adds	r3, #1
 800856a:	9304      	str	r3, [sp, #16]
 800856c:	e775      	b.n	800845a <_dtoa_r+0xa0a>
 800856e:	f000 f9c3 	bl	80088f8 <__multadd>
 8008572:	4639      	mov	r1, r7
 8008574:	4680      	mov	r8, r0
 8008576:	2300      	movs	r3, #0
 8008578:	220a      	movs	r2, #10
 800857a:	4620      	mov	r0, r4
 800857c:	f000 f9bc 	bl	80088f8 <__multadd>
 8008580:	4607      	mov	r7, r0
 8008582:	e7f0      	b.n	8008566 <_dtoa_r+0xb16>
 8008584:	9b04      	ldr	r3, [sp, #16]
 8008586:	9301      	str	r3, [sp, #4]
 8008588:	9d00      	ldr	r5, [sp, #0]
 800858a:	4631      	mov	r1, r6
 800858c:	4650      	mov	r0, sl
 800858e:	f7ff f9d5 	bl	800793c <quorem>
 8008592:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008596:	9b00      	ldr	r3, [sp, #0]
 8008598:	f805 9b01 	strb.w	r9, [r5], #1
 800859c:	1aea      	subs	r2, r5, r3
 800859e:	9b01      	ldr	r3, [sp, #4]
 80085a0:	4293      	cmp	r3, r2
 80085a2:	dd07      	ble.n	80085b4 <_dtoa_r+0xb64>
 80085a4:	4651      	mov	r1, sl
 80085a6:	2300      	movs	r3, #0
 80085a8:	220a      	movs	r2, #10
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 f9a4 	bl	80088f8 <__multadd>
 80085b0:	4682      	mov	sl, r0
 80085b2:	e7ea      	b.n	800858a <_dtoa_r+0xb3a>
 80085b4:	9b01      	ldr	r3, [sp, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	bfc8      	it	gt
 80085ba:	461d      	movgt	r5, r3
 80085bc:	9b00      	ldr	r3, [sp, #0]
 80085be:	bfd8      	it	le
 80085c0:	2501      	movle	r5, #1
 80085c2:	441d      	add	r5, r3
 80085c4:	f04f 0800 	mov.w	r8, #0
 80085c8:	4651      	mov	r1, sl
 80085ca:	2201      	movs	r2, #1
 80085cc:	4620      	mov	r0, r4
 80085ce:	f000 fb41 	bl	8008c54 <__lshift>
 80085d2:	4631      	mov	r1, r6
 80085d4:	4682      	mov	sl, r0
 80085d6:	f000 fba9 	bl	8008d2c <__mcmp>
 80085da:	2800      	cmp	r0, #0
 80085dc:	dc96      	bgt.n	800850c <_dtoa_r+0xabc>
 80085de:	d102      	bne.n	80085e6 <_dtoa_r+0xb96>
 80085e0:	f019 0f01 	tst.w	r9, #1
 80085e4:	d192      	bne.n	800850c <_dtoa_r+0xabc>
 80085e6:	462b      	mov	r3, r5
 80085e8:	461d      	mov	r5, r3
 80085ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ee:	2a30      	cmp	r2, #48	; 0x30
 80085f0:	d0fa      	beq.n	80085e8 <_dtoa_r+0xb98>
 80085f2:	e6dd      	b.n	80083b0 <_dtoa_r+0x960>
 80085f4:	9a00      	ldr	r2, [sp, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d189      	bne.n	800850e <_dtoa_r+0xabe>
 80085fa:	f10b 0b01 	add.w	fp, fp, #1
 80085fe:	2331      	movs	r3, #49	; 0x31
 8008600:	e796      	b.n	8008530 <_dtoa_r+0xae0>
 8008602:	4b0a      	ldr	r3, [pc, #40]	; (800862c <_dtoa_r+0xbdc>)
 8008604:	f7ff ba99 	b.w	8007b3a <_dtoa_r+0xea>
 8008608:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800860a:	2b00      	cmp	r3, #0
 800860c:	f47f aa6d 	bne.w	8007aea <_dtoa_r+0x9a>
 8008610:	4b07      	ldr	r3, [pc, #28]	; (8008630 <_dtoa_r+0xbe0>)
 8008612:	f7ff ba92 	b.w	8007b3a <_dtoa_r+0xea>
 8008616:	9b01      	ldr	r3, [sp, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	dcb5      	bgt.n	8008588 <_dtoa_r+0xb38>
 800861c:	9b07      	ldr	r3, [sp, #28]
 800861e:	2b02      	cmp	r3, #2
 8008620:	f73f aeb1 	bgt.w	8008386 <_dtoa_r+0x936>
 8008624:	e7b0      	b.n	8008588 <_dtoa_r+0xb38>
 8008626:	bf00      	nop
 8008628:	080097c8 	.word	0x080097c8
 800862c:	08009728 	.word	0x08009728
 8008630:	0800974c 	.word	0x0800974c

08008634 <_free_r>:
 8008634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008636:	2900      	cmp	r1, #0
 8008638:	d044      	beq.n	80086c4 <_free_r+0x90>
 800863a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800863e:	9001      	str	r0, [sp, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f1a1 0404 	sub.w	r4, r1, #4
 8008646:	bfb8      	it	lt
 8008648:	18e4      	addlt	r4, r4, r3
 800864a:	f000 f8e7 	bl	800881c <__malloc_lock>
 800864e:	4a1e      	ldr	r2, [pc, #120]	; (80086c8 <_free_r+0x94>)
 8008650:	9801      	ldr	r0, [sp, #4]
 8008652:	6813      	ldr	r3, [r2, #0]
 8008654:	b933      	cbnz	r3, 8008664 <_free_r+0x30>
 8008656:	6063      	str	r3, [r4, #4]
 8008658:	6014      	str	r4, [r2, #0]
 800865a:	b003      	add	sp, #12
 800865c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008660:	f000 b8e2 	b.w	8008828 <__malloc_unlock>
 8008664:	42a3      	cmp	r3, r4
 8008666:	d908      	bls.n	800867a <_free_r+0x46>
 8008668:	6825      	ldr	r5, [r4, #0]
 800866a:	1961      	adds	r1, r4, r5
 800866c:	428b      	cmp	r3, r1
 800866e:	bf01      	itttt	eq
 8008670:	6819      	ldreq	r1, [r3, #0]
 8008672:	685b      	ldreq	r3, [r3, #4]
 8008674:	1949      	addeq	r1, r1, r5
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	e7ed      	b.n	8008656 <_free_r+0x22>
 800867a:	461a      	mov	r2, r3
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	b10b      	cbz	r3, 8008684 <_free_r+0x50>
 8008680:	42a3      	cmp	r3, r4
 8008682:	d9fa      	bls.n	800867a <_free_r+0x46>
 8008684:	6811      	ldr	r1, [r2, #0]
 8008686:	1855      	adds	r5, r2, r1
 8008688:	42a5      	cmp	r5, r4
 800868a:	d10b      	bne.n	80086a4 <_free_r+0x70>
 800868c:	6824      	ldr	r4, [r4, #0]
 800868e:	4421      	add	r1, r4
 8008690:	1854      	adds	r4, r2, r1
 8008692:	42a3      	cmp	r3, r4
 8008694:	6011      	str	r1, [r2, #0]
 8008696:	d1e0      	bne.n	800865a <_free_r+0x26>
 8008698:	681c      	ldr	r4, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	6053      	str	r3, [r2, #4]
 800869e:	440c      	add	r4, r1
 80086a0:	6014      	str	r4, [r2, #0]
 80086a2:	e7da      	b.n	800865a <_free_r+0x26>
 80086a4:	d902      	bls.n	80086ac <_free_r+0x78>
 80086a6:	230c      	movs	r3, #12
 80086a8:	6003      	str	r3, [r0, #0]
 80086aa:	e7d6      	b.n	800865a <_free_r+0x26>
 80086ac:	6825      	ldr	r5, [r4, #0]
 80086ae:	1961      	adds	r1, r4, r5
 80086b0:	428b      	cmp	r3, r1
 80086b2:	bf04      	itt	eq
 80086b4:	6819      	ldreq	r1, [r3, #0]
 80086b6:	685b      	ldreq	r3, [r3, #4]
 80086b8:	6063      	str	r3, [r4, #4]
 80086ba:	bf04      	itt	eq
 80086bc:	1949      	addeq	r1, r1, r5
 80086be:	6021      	streq	r1, [r4, #0]
 80086c0:	6054      	str	r4, [r2, #4]
 80086c2:	e7ca      	b.n	800865a <_free_r+0x26>
 80086c4:	b003      	add	sp, #12
 80086c6:	bd30      	pop	{r4, r5, pc}
 80086c8:	20000b1c 	.word	0x20000b1c

080086cc <malloc>:
 80086cc:	4b02      	ldr	r3, [pc, #8]	; (80086d8 <malloc+0xc>)
 80086ce:	4601      	mov	r1, r0
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	f000 b823 	b.w	800871c <_malloc_r>
 80086d6:	bf00      	nop
 80086d8:	20000064 	.word	0x20000064

080086dc <sbrk_aligned>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	4e0e      	ldr	r6, [pc, #56]	; (8008718 <sbrk_aligned+0x3c>)
 80086e0:	460c      	mov	r4, r1
 80086e2:	6831      	ldr	r1, [r6, #0]
 80086e4:	4605      	mov	r5, r0
 80086e6:	b911      	cbnz	r1, 80086ee <sbrk_aligned+0x12>
 80086e8:	f000 fcce 	bl	8009088 <_sbrk_r>
 80086ec:	6030      	str	r0, [r6, #0]
 80086ee:	4621      	mov	r1, r4
 80086f0:	4628      	mov	r0, r5
 80086f2:	f000 fcc9 	bl	8009088 <_sbrk_r>
 80086f6:	1c43      	adds	r3, r0, #1
 80086f8:	d00a      	beq.n	8008710 <sbrk_aligned+0x34>
 80086fa:	1cc4      	adds	r4, r0, #3
 80086fc:	f024 0403 	bic.w	r4, r4, #3
 8008700:	42a0      	cmp	r0, r4
 8008702:	d007      	beq.n	8008714 <sbrk_aligned+0x38>
 8008704:	1a21      	subs	r1, r4, r0
 8008706:	4628      	mov	r0, r5
 8008708:	f000 fcbe 	bl	8009088 <_sbrk_r>
 800870c:	3001      	adds	r0, #1
 800870e:	d101      	bne.n	8008714 <sbrk_aligned+0x38>
 8008710:	f04f 34ff 	mov.w	r4, #4294967295
 8008714:	4620      	mov	r0, r4
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	20000b20 	.word	0x20000b20

0800871c <_malloc_r>:
 800871c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008720:	1ccd      	adds	r5, r1, #3
 8008722:	f025 0503 	bic.w	r5, r5, #3
 8008726:	3508      	adds	r5, #8
 8008728:	2d0c      	cmp	r5, #12
 800872a:	bf38      	it	cc
 800872c:	250c      	movcc	r5, #12
 800872e:	2d00      	cmp	r5, #0
 8008730:	4607      	mov	r7, r0
 8008732:	db01      	blt.n	8008738 <_malloc_r+0x1c>
 8008734:	42a9      	cmp	r1, r5
 8008736:	d905      	bls.n	8008744 <_malloc_r+0x28>
 8008738:	230c      	movs	r3, #12
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	2600      	movs	r6, #0
 800873e:	4630      	mov	r0, r6
 8008740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008744:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008818 <_malloc_r+0xfc>
 8008748:	f000 f868 	bl	800881c <__malloc_lock>
 800874c:	f8d8 3000 	ldr.w	r3, [r8]
 8008750:	461c      	mov	r4, r3
 8008752:	bb5c      	cbnz	r4, 80087ac <_malloc_r+0x90>
 8008754:	4629      	mov	r1, r5
 8008756:	4638      	mov	r0, r7
 8008758:	f7ff ffc0 	bl	80086dc <sbrk_aligned>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	4604      	mov	r4, r0
 8008760:	d155      	bne.n	800880e <_malloc_r+0xf2>
 8008762:	f8d8 4000 	ldr.w	r4, [r8]
 8008766:	4626      	mov	r6, r4
 8008768:	2e00      	cmp	r6, #0
 800876a:	d145      	bne.n	80087f8 <_malloc_r+0xdc>
 800876c:	2c00      	cmp	r4, #0
 800876e:	d048      	beq.n	8008802 <_malloc_r+0xe6>
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	4631      	mov	r1, r6
 8008774:	4638      	mov	r0, r7
 8008776:	eb04 0903 	add.w	r9, r4, r3
 800877a:	f000 fc85 	bl	8009088 <_sbrk_r>
 800877e:	4581      	cmp	r9, r0
 8008780:	d13f      	bne.n	8008802 <_malloc_r+0xe6>
 8008782:	6821      	ldr	r1, [r4, #0]
 8008784:	1a6d      	subs	r5, r5, r1
 8008786:	4629      	mov	r1, r5
 8008788:	4638      	mov	r0, r7
 800878a:	f7ff ffa7 	bl	80086dc <sbrk_aligned>
 800878e:	3001      	adds	r0, #1
 8008790:	d037      	beq.n	8008802 <_malloc_r+0xe6>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	442b      	add	r3, r5
 8008796:	6023      	str	r3, [r4, #0]
 8008798:	f8d8 3000 	ldr.w	r3, [r8]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d038      	beq.n	8008812 <_malloc_r+0xf6>
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	42a2      	cmp	r2, r4
 80087a4:	d12b      	bne.n	80087fe <_malloc_r+0xe2>
 80087a6:	2200      	movs	r2, #0
 80087a8:	605a      	str	r2, [r3, #4]
 80087aa:	e00f      	b.n	80087cc <_malloc_r+0xb0>
 80087ac:	6822      	ldr	r2, [r4, #0]
 80087ae:	1b52      	subs	r2, r2, r5
 80087b0:	d41f      	bmi.n	80087f2 <_malloc_r+0xd6>
 80087b2:	2a0b      	cmp	r2, #11
 80087b4:	d917      	bls.n	80087e6 <_malloc_r+0xca>
 80087b6:	1961      	adds	r1, r4, r5
 80087b8:	42a3      	cmp	r3, r4
 80087ba:	6025      	str	r5, [r4, #0]
 80087bc:	bf18      	it	ne
 80087be:	6059      	strne	r1, [r3, #4]
 80087c0:	6863      	ldr	r3, [r4, #4]
 80087c2:	bf08      	it	eq
 80087c4:	f8c8 1000 	streq.w	r1, [r8]
 80087c8:	5162      	str	r2, [r4, r5]
 80087ca:	604b      	str	r3, [r1, #4]
 80087cc:	4638      	mov	r0, r7
 80087ce:	f104 060b 	add.w	r6, r4, #11
 80087d2:	f000 f829 	bl	8008828 <__malloc_unlock>
 80087d6:	f026 0607 	bic.w	r6, r6, #7
 80087da:	1d23      	adds	r3, r4, #4
 80087dc:	1af2      	subs	r2, r6, r3
 80087de:	d0ae      	beq.n	800873e <_malloc_r+0x22>
 80087e0:	1b9b      	subs	r3, r3, r6
 80087e2:	50a3      	str	r3, [r4, r2]
 80087e4:	e7ab      	b.n	800873e <_malloc_r+0x22>
 80087e6:	42a3      	cmp	r3, r4
 80087e8:	6862      	ldr	r2, [r4, #4]
 80087ea:	d1dd      	bne.n	80087a8 <_malloc_r+0x8c>
 80087ec:	f8c8 2000 	str.w	r2, [r8]
 80087f0:	e7ec      	b.n	80087cc <_malloc_r+0xb0>
 80087f2:	4623      	mov	r3, r4
 80087f4:	6864      	ldr	r4, [r4, #4]
 80087f6:	e7ac      	b.n	8008752 <_malloc_r+0x36>
 80087f8:	4634      	mov	r4, r6
 80087fa:	6876      	ldr	r6, [r6, #4]
 80087fc:	e7b4      	b.n	8008768 <_malloc_r+0x4c>
 80087fe:	4613      	mov	r3, r2
 8008800:	e7cc      	b.n	800879c <_malloc_r+0x80>
 8008802:	230c      	movs	r3, #12
 8008804:	603b      	str	r3, [r7, #0]
 8008806:	4638      	mov	r0, r7
 8008808:	f000 f80e 	bl	8008828 <__malloc_unlock>
 800880c:	e797      	b.n	800873e <_malloc_r+0x22>
 800880e:	6025      	str	r5, [r4, #0]
 8008810:	e7dc      	b.n	80087cc <_malloc_r+0xb0>
 8008812:	605b      	str	r3, [r3, #4]
 8008814:	deff      	udf	#255	; 0xff
 8008816:	bf00      	nop
 8008818:	20000b1c 	.word	0x20000b1c

0800881c <__malloc_lock>:
 800881c:	4801      	ldr	r0, [pc, #4]	; (8008824 <__malloc_lock+0x8>)
 800881e:	f7ff b88b 	b.w	8007938 <__retarget_lock_acquire_recursive>
 8008822:	bf00      	nop
 8008824:	20000b18 	.word	0x20000b18

08008828 <__malloc_unlock>:
 8008828:	4801      	ldr	r0, [pc, #4]	; (8008830 <__malloc_unlock+0x8>)
 800882a:	f7ff b886 	b.w	800793a <__retarget_lock_release_recursive>
 800882e:	bf00      	nop
 8008830:	20000b18 	.word	0x20000b18

08008834 <_Balloc>:
 8008834:	b570      	push	{r4, r5, r6, lr}
 8008836:	69c6      	ldr	r6, [r0, #28]
 8008838:	4604      	mov	r4, r0
 800883a:	460d      	mov	r5, r1
 800883c:	b976      	cbnz	r6, 800885c <_Balloc+0x28>
 800883e:	2010      	movs	r0, #16
 8008840:	f7ff ff44 	bl	80086cc <malloc>
 8008844:	4602      	mov	r2, r0
 8008846:	61e0      	str	r0, [r4, #28]
 8008848:	b920      	cbnz	r0, 8008854 <_Balloc+0x20>
 800884a:	4b18      	ldr	r3, [pc, #96]	; (80088ac <_Balloc+0x78>)
 800884c:	4818      	ldr	r0, [pc, #96]	; (80088b0 <_Balloc+0x7c>)
 800884e:	216b      	movs	r1, #107	; 0x6b
 8008850:	f000 fc38 	bl	80090c4 <__assert_func>
 8008854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008858:	6006      	str	r6, [r0, #0]
 800885a:	60c6      	str	r6, [r0, #12]
 800885c:	69e6      	ldr	r6, [r4, #28]
 800885e:	68f3      	ldr	r3, [r6, #12]
 8008860:	b183      	cbz	r3, 8008884 <_Balloc+0x50>
 8008862:	69e3      	ldr	r3, [r4, #28]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800886a:	b9b8      	cbnz	r0, 800889c <_Balloc+0x68>
 800886c:	2101      	movs	r1, #1
 800886e:	fa01 f605 	lsl.w	r6, r1, r5
 8008872:	1d72      	adds	r2, r6, #5
 8008874:	0092      	lsls	r2, r2, #2
 8008876:	4620      	mov	r0, r4
 8008878:	f000 fc42 	bl	8009100 <_calloc_r>
 800887c:	b160      	cbz	r0, 8008898 <_Balloc+0x64>
 800887e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008882:	e00e      	b.n	80088a2 <_Balloc+0x6e>
 8008884:	2221      	movs	r2, #33	; 0x21
 8008886:	2104      	movs	r1, #4
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fc39 	bl	8009100 <_calloc_r>
 800888e:	69e3      	ldr	r3, [r4, #28]
 8008890:	60f0      	str	r0, [r6, #12]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1e4      	bne.n	8008862 <_Balloc+0x2e>
 8008898:	2000      	movs	r0, #0
 800889a:	bd70      	pop	{r4, r5, r6, pc}
 800889c:	6802      	ldr	r2, [r0, #0]
 800889e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088a2:	2300      	movs	r3, #0
 80088a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088a8:	e7f7      	b.n	800889a <_Balloc+0x66>
 80088aa:	bf00      	nop
 80088ac:	08009759 	.word	0x08009759
 80088b0:	080097d9 	.word	0x080097d9

080088b4 <_Bfree>:
 80088b4:	b570      	push	{r4, r5, r6, lr}
 80088b6:	69c6      	ldr	r6, [r0, #28]
 80088b8:	4605      	mov	r5, r0
 80088ba:	460c      	mov	r4, r1
 80088bc:	b976      	cbnz	r6, 80088dc <_Bfree+0x28>
 80088be:	2010      	movs	r0, #16
 80088c0:	f7ff ff04 	bl	80086cc <malloc>
 80088c4:	4602      	mov	r2, r0
 80088c6:	61e8      	str	r0, [r5, #28]
 80088c8:	b920      	cbnz	r0, 80088d4 <_Bfree+0x20>
 80088ca:	4b09      	ldr	r3, [pc, #36]	; (80088f0 <_Bfree+0x3c>)
 80088cc:	4809      	ldr	r0, [pc, #36]	; (80088f4 <_Bfree+0x40>)
 80088ce:	218f      	movs	r1, #143	; 0x8f
 80088d0:	f000 fbf8 	bl	80090c4 <__assert_func>
 80088d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088d8:	6006      	str	r6, [r0, #0]
 80088da:	60c6      	str	r6, [r0, #12]
 80088dc:	b13c      	cbz	r4, 80088ee <_Bfree+0x3a>
 80088de:	69eb      	ldr	r3, [r5, #28]
 80088e0:	6862      	ldr	r2, [r4, #4]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088e8:	6021      	str	r1, [r4, #0]
 80088ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088ee:	bd70      	pop	{r4, r5, r6, pc}
 80088f0:	08009759 	.word	0x08009759
 80088f4:	080097d9 	.word	0x080097d9

080088f8 <__multadd>:
 80088f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fc:	690d      	ldr	r5, [r1, #16]
 80088fe:	4607      	mov	r7, r0
 8008900:	460c      	mov	r4, r1
 8008902:	461e      	mov	r6, r3
 8008904:	f101 0c14 	add.w	ip, r1, #20
 8008908:	2000      	movs	r0, #0
 800890a:	f8dc 3000 	ldr.w	r3, [ip]
 800890e:	b299      	uxth	r1, r3
 8008910:	fb02 6101 	mla	r1, r2, r1, r6
 8008914:	0c1e      	lsrs	r6, r3, #16
 8008916:	0c0b      	lsrs	r3, r1, #16
 8008918:	fb02 3306 	mla	r3, r2, r6, r3
 800891c:	b289      	uxth	r1, r1
 800891e:	3001      	adds	r0, #1
 8008920:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008924:	4285      	cmp	r5, r0
 8008926:	f84c 1b04 	str.w	r1, [ip], #4
 800892a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800892e:	dcec      	bgt.n	800890a <__multadd+0x12>
 8008930:	b30e      	cbz	r6, 8008976 <__multadd+0x7e>
 8008932:	68a3      	ldr	r3, [r4, #8]
 8008934:	42ab      	cmp	r3, r5
 8008936:	dc19      	bgt.n	800896c <__multadd+0x74>
 8008938:	6861      	ldr	r1, [r4, #4]
 800893a:	4638      	mov	r0, r7
 800893c:	3101      	adds	r1, #1
 800893e:	f7ff ff79 	bl	8008834 <_Balloc>
 8008942:	4680      	mov	r8, r0
 8008944:	b928      	cbnz	r0, 8008952 <__multadd+0x5a>
 8008946:	4602      	mov	r2, r0
 8008948:	4b0c      	ldr	r3, [pc, #48]	; (800897c <__multadd+0x84>)
 800894a:	480d      	ldr	r0, [pc, #52]	; (8008980 <__multadd+0x88>)
 800894c:	21ba      	movs	r1, #186	; 0xba
 800894e:	f000 fbb9 	bl	80090c4 <__assert_func>
 8008952:	6922      	ldr	r2, [r4, #16]
 8008954:	3202      	adds	r2, #2
 8008956:	f104 010c 	add.w	r1, r4, #12
 800895a:	0092      	lsls	r2, r2, #2
 800895c:	300c      	adds	r0, #12
 800895e:	f000 fba3 	bl	80090a8 <memcpy>
 8008962:	4621      	mov	r1, r4
 8008964:	4638      	mov	r0, r7
 8008966:	f7ff ffa5 	bl	80088b4 <_Bfree>
 800896a:	4644      	mov	r4, r8
 800896c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008970:	3501      	adds	r5, #1
 8008972:	615e      	str	r6, [r3, #20]
 8008974:	6125      	str	r5, [r4, #16]
 8008976:	4620      	mov	r0, r4
 8008978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800897c:	080097c8 	.word	0x080097c8
 8008980:	080097d9 	.word	0x080097d9

08008984 <__hi0bits>:
 8008984:	0c03      	lsrs	r3, r0, #16
 8008986:	041b      	lsls	r3, r3, #16
 8008988:	b9d3      	cbnz	r3, 80089c0 <__hi0bits+0x3c>
 800898a:	0400      	lsls	r0, r0, #16
 800898c:	2310      	movs	r3, #16
 800898e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008992:	bf04      	itt	eq
 8008994:	0200      	lsleq	r0, r0, #8
 8008996:	3308      	addeq	r3, #8
 8008998:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800899c:	bf04      	itt	eq
 800899e:	0100      	lsleq	r0, r0, #4
 80089a0:	3304      	addeq	r3, #4
 80089a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089a6:	bf04      	itt	eq
 80089a8:	0080      	lsleq	r0, r0, #2
 80089aa:	3302      	addeq	r3, #2
 80089ac:	2800      	cmp	r0, #0
 80089ae:	db05      	blt.n	80089bc <__hi0bits+0x38>
 80089b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089b4:	f103 0301 	add.w	r3, r3, #1
 80089b8:	bf08      	it	eq
 80089ba:	2320      	moveq	r3, #32
 80089bc:	4618      	mov	r0, r3
 80089be:	4770      	bx	lr
 80089c0:	2300      	movs	r3, #0
 80089c2:	e7e4      	b.n	800898e <__hi0bits+0xa>

080089c4 <__lo0bits>:
 80089c4:	6803      	ldr	r3, [r0, #0]
 80089c6:	f013 0207 	ands.w	r2, r3, #7
 80089ca:	d00c      	beq.n	80089e6 <__lo0bits+0x22>
 80089cc:	07d9      	lsls	r1, r3, #31
 80089ce:	d422      	bmi.n	8008a16 <__lo0bits+0x52>
 80089d0:	079a      	lsls	r2, r3, #30
 80089d2:	bf49      	itett	mi
 80089d4:	085b      	lsrmi	r3, r3, #1
 80089d6:	089b      	lsrpl	r3, r3, #2
 80089d8:	6003      	strmi	r3, [r0, #0]
 80089da:	2201      	movmi	r2, #1
 80089dc:	bf5c      	itt	pl
 80089de:	6003      	strpl	r3, [r0, #0]
 80089e0:	2202      	movpl	r2, #2
 80089e2:	4610      	mov	r0, r2
 80089e4:	4770      	bx	lr
 80089e6:	b299      	uxth	r1, r3
 80089e8:	b909      	cbnz	r1, 80089ee <__lo0bits+0x2a>
 80089ea:	0c1b      	lsrs	r3, r3, #16
 80089ec:	2210      	movs	r2, #16
 80089ee:	b2d9      	uxtb	r1, r3
 80089f0:	b909      	cbnz	r1, 80089f6 <__lo0bits+0x32>
 80089f2:	3208      	adds	r2, #8
 80089f4:	0a1b      	lsrs	r3, r3, #8
 80089f6:	0719      	lsls	r1, r3, #28
 80089f8:	bf04      	itt	eq
 80089fa:	091b      	lsreq	r3, r3, #4
 80089fc:	3204      	addeq	r2, #4
 80089fe:	0799      	lsls	r1, r3, #30
 8008a00:	bf04      	itt	eq
 8008a02:	089b      	lsreq	r3, r3, #2
 8008a04:	3202      	addeq	r2, #2
 8008a06:	07d9      	lsls	r1, r3, #31
 8008a08:	d403      	bmi.n	8008a12 <__lo0bits+0x4e>
 8008a0a:	085b      	lsrs	r3, r3, #1
 8008a0c:	f102 0201 	add.w	r2, r2, #1
 8008a10:	d003      	beq.n	8008a1a <__lo0bits+0x56>
 8008a12:	6003      	str	r3, [r0, #0]
 8008a14:	e7e5      	b.n	80089e2 <__lo0bits+0x1e>
 8008a16:	2200      	movs	r2, #0
 8008a18:	e7e3      	b.n	80089e2 <__lo0bits+0x1e>
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	e7e1      	b.n	80089e2 <__lo0bits+0x1e>
	...

08008a20 <__i2b>:
 8008a20:	b510      	push	{r4, lr}
 8008a22:	460c      	mov	r4, r1
 8008a24:	2101      	movs	r1, #1
 8008a26:	f7ff ff05 	bl	8008834 <_Balloc>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	b928      	cbnz	r0, 8008a3a <__i2b+0x1a>
 8008a2e:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <__i2b+0x24>)
 8008a30:	4805      	ldr	r0, [pc, #20]	; (8008a48 <__i2b+0x28>)
 8008a32:	f240 1145 	movw	r1, #325	; 0x145
 8008a36:	f000 fb45 	bl	80090c4 <__assert_func>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	6144      	str	r4, [r0, #20]
 8008a3e:	6103      	str	r3, [r0, #16]
 8008a40:	bd10      	pop	{r4, pc}
 8008a42:	bf00      	nop
 8008a44:	080097c8 	.word	0x080097c8
 8008a48:	080097d9 	.word	0x080097d9

08008a4c <__multiply>:
 8008a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a50:	4691      	mov	r9, r2
 8008a52:	690a      	ldr	r2, [r1, #16]
 8008a54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	bfb8      	it	lt
 8008a5c:	460b      	movlt	r3, r1
 8008a5e:	460c      	mov	r4, r1
 8008a60:	bfbc      	itt	lt
 8008a62:	464c      	movlt	r4, r9
 8008a64:	4699      	movlt	r9, r3
 8008a66:	6927      	ldr	r7, [r4, #16]
 8008a68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a6c:	68a3      	ldr	r3, [r4, #8]
 8008a6e:	6861      	ldr	r1, [r4, #4]
 8008a70:	eb07 060a 	add.w	r6, r7, sl
 8008a74:	42b3      	cmp	r3, r6
 8008a76:	b085      	sub	sp, #20
 8008a78:	bfb8      	it	lt
 8008a7a:	3101      	addlt	r1, #1
 8008a7c:	f7ff feda 	bl	8008834 <_Balloc>
 8008a80:	b930      	cbnz	r0, 8008a90 <__multiply+0x44>
 8008a82:	4602      	mov	r2, r0
 8008a84:	4b44      	ldr	r3, [pc, #272]	; (8008b98 <__multiply+0x14c>)
 8008a86:	4845      	ldr	r0, [pc, #276]	; (8008b9c <__multiply+0x150>)
 8008a88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008a8c:	f000 fb1a 	bl	80090c4 <__assert_func>
 8008a90:	f100 0514 	add.w	r5, r0, #20
 8008a94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a98:	462b      	mov	r3, r5
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	4543      	cmp	r3, r8
 8008a9e:	d321      	bcc.n	8008ae4 <__multiply+0x98>
 8008aa0:	f104 0314 	add.w	r3, r4, #20
 8008aa4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008aa8:	f109 0314 	add.w	r3, r9, #20
 8008aac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ab0:	9202      	str	r2, [sp, #8]
 8008ab2:	1b3a      	subs	r2, r7, r4
 8008ab4:	3a15      	subs	r2, #21
 8008ab6:	f022 0203 	bic.w	r2, r2, #3
 8008aba:	3204      	adds	r2, #4
 8008abc:	f104 0115 	add.w	r1, r4, #21
 8008ac0:	428f      	cmp	r7, r1
 8008ac2:	bf38      	it	cc
 8008ac4:	2204      	movcc	r2, #4
 8008ac6:	9201      	str	r2, [sp, #4]
 8008ac8:	9a02      	ldr	r2, [sp, #8]
 8008aca:	9303      	str	r3, [sp, #12]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d80c      	bhi.n	8008aea <__multiply+0x9e>
 8008ad0:	2e00      	cmp	r6, #0
 8008ad2:	dd03      	ble.n	8008adc <__multiply+0x90>
 8008ad4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d05b      	beq.n	8008b94 <__multiply+0x148>
 8008adc:	6106      	str	r6, [r0, #16]
 8008ade:	b005      	add	sp, #20
 8008ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae4:	f843 2b04 	str.w	r2, [r3], #4
 8008ae8:	e7d8      	b.n	8008a9c <__multiply+0x50>
 8008aea:	f8b3 a000 	ldrh.w	sl, [r3]
 8008aee:	f1ba 0f00 	cmp.w	sl, #0
 8008af2:	d024      	beq.n	8008b3e <__multiply+0xf2>
 8008af4:	f104 0e14 	add.w	lr, r4, #20
 8008af8:	46a9      	mov	r9, r5
 8008afa:	f04f 0c00 	mov.w	ip, #0
 8008afe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b02:	f8d9 1000 	ldr.w	r1, [r9]
 8008b06:	fa1f fb82 	uxth.w	fp, r2
 8008b0a:	b289      	uxth	r1, r1
 8008b0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b14:	f8d9 2000 	ldr.w	r2, [r9]
 8008b18:	4461      	add	r1, ip
 8008b1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b26:	b289      	uxth	r1, r1
 8008b28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b2c:	4577      	cmp	r7, lr
 8008b2e:	f849 1b04 	str.w	r1, [r9], #4
 8008b32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b36:	d8e2      	bhi.n	8008afe <__multiply+0xb2>
 8008b38:	9a01      	ldr	r2, [sp, #4]
 8008b3a:	f845 c002 	str.w	ip, [r5, r2]
 8008b3e:	9a03      	ldr	r2, [sp, #12]
 8008b40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b44:	3304      	adds	r3, #4
 8008b46:	f1b9 0f00 	cmp.w	r9, #0
 8008b4a:	d021      	beq.n	8008b90 <__multiply+0x144>
 8008b4c:	6829      	ldr	r1, [r5, #0]
 8008b4e:	f104 0c14 	add.w	ip, r4, #20
 8008b52:	46ae      	mov	lr, r5
 8008b54:	f04f 0a00 	mov.w	sl, #0
 8008b58:	f8bc b000 	ldrh.w	fp, [ip]
 8008b5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b60:	fb09 220b 	mla	r2, r9, fp, r2
 8008b64:	4452      	add	r2, sl
 8008b66:	b289      	uxth	r1, r1
 8008b68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b6c:	f84e 1b04 	str.w	r1, [lr], #4
 8008b70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008b74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b78:	f8be 1000 	ldrh.w	r1, [lr]
 8008b7c:	fb09 110a 	mla	r1, r9, sl, r1
 8008b80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008b84:	4567      	cmp	r7, ip
 8008b86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b8a:	d8e5      	bhi.n	8008b58 <__multiply+0x10c>
 8008b8c:	9a01      	ldr	r2, [sp, #4]
 8008b8e:	50a9      	str	r1, [r5, r2]
 8008b90:	3504      	adds	r5, #4
 8008b92:	e799      	b.n	8008ac8 <__multiply+0x7c>
 8008b94:	3e01      	subs	r6, #1
 8008b96:	e79b      	b.n	8008ad0 <__multiply+0x84>
 8008b98:	080097c8 	.word	0x080097c8
 8008b9c:	080097d9 	.word	0x080097d9

08008ba0 <__pow5mult>:
 8008ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba4:	4615      	mov	r5, r2
 8008ba6:	f012 0203 	ands.w	r2, r2, #3
 8008baa:	4606      	mov	r6, r0
 8008bac:	460f      	mov	r7, r1
 8008bae:	d007      	beq.n	8008bc0 <__pow5mult+0x20>
 8008bb0:	4c25      	ldr	r4, [pc, #148]	; (8008c48 <__pow5mult+0xa8>)
 8008bb2:	3a01      	subs	r2, #1
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bba:	f7ff fe9d 	bl	80088f8 <__multadd>
 8008bbe:	4607      	mov	r7, r0
 8008bc0:	10ad      	asrs	r5, r5, #2
 8008bc2:	d03d      	beq.n	8008c40 <__pow5mult+0xa0>
 8008bc4:	69f4      	ldr	r4, [r6, #28]
 8008bc6:	b97c      	cbnz	r4, 8008be8 <__pow5mult+0x48>
 8008bc8:	2010      	movs	r0, #16
 8008bca:	f7ff fd7f 	bl	80086cc <malloc>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	61f0      	str	r0, [r6, #28]
 8008bd2:	b928      	cbnz	r0, 8008be0 <__pow5mult+0x40>
 8008bd4:	4b1d      	ldr	r3, [pc, #116]	; (8008c4c <__pow5mult+0xac>)
 8008bd6:	481e      	ldr	r0, [pc, #120]	; (8008c50 <__pow5mult+0xb0>)
 8008bd8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008bdc:	f000 fa72 	bl	80090c4 <__assert_func>
 8008be0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008be4:	6004      	str	r4, [r0, #0]
 8008be6:	60c4      	str	r4, [r0, #12]
 8008be8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008bec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bf0:	b94c      	cbnz	r4, 8008c06 <__pow5mult+0x66>
 8008bf2:	f240 2171 	movw	r1, #625	; 0x271
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f7ff ff12 	bl	8008a20 <__i2b>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c02:	4604      	mov	r4, r0
 8008c04:	6003      	str	r3, [r0, #0]
 8008c06:	f04f 0900 	mov.w	r9, #0
 8008c0a:	07eb      	lsls	r3, r5, #31
 8008c0c:	d50a      	bpl.n	8008c24 <__pow5mult+0x84>
 8008c0e:	4639      	mov	r1, r7
 8008c10:	4622      	mov	r2, r4
 8008c12:	4630      	mov	r0, r6
 8008c14:	f7ff ff1a 	bl	8008a4c <__multiply>
 8008c18:	4639      	mov	r1, r7
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	f7ff fe49 	bl	80088b4 <_Bfree>
 8008c22:	4647      	mov	r7, r8
 8008c24:	106d      	asrs	r5, r5, #1
 8008c26:	d00b      	beq.n	8008c40 <__pow5mult+0xa0>
 8008c28:	6820      	ldr	r0, [r4, #0]
 8008c2a:	b938      	cbnz	r0, 8008c3c <__pow5mult+0x9c>
 8008c2c:	4622      	mov	r2, r4
 8008c2e:	4621      	mov	r1, r4
 8008c30:	4630      	mov	r0, r6
 8008c32:	f7ff ff0b 	bl	8008a4c <__multiply>
 8008c36:	6020      	str	r0, [r4, #0]
 8008c38:	f8c0 9000 	str.w	r9, [r0]
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	e7e4      	b.n	8008c0a <__pow5mult+0x6a>
 8008c40:	4638      	mov	r0, r7
 8008c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c46:	bf00      	nop
 8008c48:	08009928 	.word	0x08009928
 8008c4c:	08009759 	.word	0x08009759
 8008c50:	080097d9 	.word	0x080097d9

08008c54 <__lshift>:
 8008c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	460c      	mov	r4, r1
 8008c5a:	6849      	ldr	r1, [r1, #4]
 8008c5c:	6923      	ldr	r3, [r4, #16]
 8008c5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c62:	68a3      	ldr	r3, [r4, #8]
 8008c64:	4607      	mov	r7, r0
 8008c66:	4691      	mov	r9, r2
 8008c68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c6c:	f108 0601 	add.w	r6, r8, #1
 8008c70:	42b3      	cmp	r3, r6
 8008c72:	db0b      	blt.n	8008c8c <__lshift+0x38>
 8008c74:	4638      	mov	r0, r7
 8008c76:	f7ff fddd 	bl	8008834 <_Balloc>
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	b948      	cbnz	r0, 8008c92 <__lshift+0x3e>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	4b28      	ldr	r3, [pc, #160]	; (8008d24 <__lshift+0xd0>)
 8008c82:	4829      	ldr	r0, [pc, #164]	; (8008d28 <__lshift+0xd4>)
 8008c84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008c88:	f000 fa1c 	bl	80090c4 <__assert_func>
 8008c8c:	3101      	adds	r1, #1
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	e7ee      	b.n	8008c70 <__lshift+0x1c>
 8008c92:	2300      	movs	r3, #0
 8008c94:	f100 0114 	add.w	r1, r0, #20
 8008c98:	f100 0210 	add.w	r2, r0, #16
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	4553      	cmp	r3, sl
 8008ca0:	db33      	blt.n	8008d0a <__lshift+0xb6>
 8008ca2:	6920      	ldr	r0, [r4, #16]
 8008ca4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ca8:	f104 0314 	add.w	r3, r4, #20
 8008cac:	f019 091f 	ands.w	r9, r9, #31
 8008cb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cb8:	d02b      	beq.n	8008d12 <__lshift+0xbe>
 8008cba:	f1c9 0e20 	rsb	lr, r9, #32
 8008cbe:	468a      	mov	sl, r1
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	6818      	ldr	r0, [r3, #0]
 8008cc4:	fa00 f009 	lsl.w	r0, r0, r9
 8008cc8:	4310      	orrs	r0, r2
 8008cca:	f84a 0b04 	str.w	r0, [sl], #4
 8008cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd2:	459c      	cmp	ip, r3
 8008cd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cd8:	d8f3      	bhi.n	8008cc2 <__lshift+0x6e>
 8008cda:	ebac 0304 	sub.w	r3, ip, r4
 8008cde:	3b15      	subs	r3, #21
 8008ce0:	f023 0303 	bic.w	r3, r3, #3
 8008ce4:	3304      	adds	r3, #4
 8008ce6:	f104 0015 	add.w	r0, r4, #21
 8008cea:	4584      	cmp	ip, r0
 8008cec:	bf38      	it	cc
 8008cee:	2304      	movcc	r3, #4
 8008cf0:	50ca      	str	r2, [r1, r3]
 8008cf2:	b10a      	cbz	r2, 8008cf8 <__lshift+0xa4>
 8008cf4:	f108 0602 	add.w	r6, r8, #2
 8008cf8:	3e01      	subs	r6, #1
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	612e      	str	r6, [r5, #16]
 8008cfe:	4621      	mov	r1, r4
 8008d00:	f7ff fdd8 	bl	80088b4 <_Bfree>
 8008d04:	4628      	mov	r0, r5
 8008d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d0e:	3301      	adds	r3, #1
 8008d10:	e7c5      	b.n	8008c9e <__lshift+0x4a>
 8008d12:	3904      	subs	r1, #4
 8008d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d18:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d1c:	459c      	cmp	ip, r3
 8008d1e:	d8f9      	bhi.n	8008d14 <__lshift+0xc0>
 8008d20:	e7ea      	b.n	8008cf8 <__lshift+0xa4>
 8008d22:	bf00      	nop
 8008d24:	080097c8 	.word	0x080097c8
 8008d28:	080097d9 	.word	0x080097d9

08008d2c <__mcmp>:
 8008d2c:	b530      	push	{r4, r5, lr}
 8008d2e:	6902      	ldr	r2, [r0, #16]
 8008d30:	690c      	ldr	r4, [r1, #16]
 8008d32:	1b12      	subs	r2, r2, r4
 8008d34:	d10e      	bne.n	8008d54 <__mcmp+0x28>
 8008d36:	f100 0314 	add.w	r3, r0, #20
 8008d3a:	3114      	adds	r1, #20
 8008d3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d4c:	42a5      	cmp	r5, r4
 8008d4e:	d003      	beq.n	8008d58 <__mcmp+0x2c>
 8008d50:	d305      	bcc.n	8008d5e <__mcmp+0x32>
 8008d52:	2201      	movs	r2, #1
 8008d54:	4610      	mov	r0, r2
 8008d56:	bd30      	pop	{r4, r5, pc}
 8008d58:	4283      	cmp	r3, r0
 8008d5a:	d3f3      	bcc.n	8008d44 <__mcmp+0x18>
 8008d5c:	e7fa      	b.n	8008d54 <__mcmp+0x28>
 8008d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d62:	e7f7      	b.n	8008d54 <__mcmp+0x28>

08008d64 <__mdiff>:
 8008d64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d68:	460c      	mov	r4, r1
 8008d6a:	4606      	mov	r6, r0
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4620      	mov	r0, r4
 8008d70:	4690      	mov	r8, r2
 8008d72:	f7ff ffdb 	bl	8008d2c <__mcmp>
 8008d76:	1e05      	subs	r5, r0, #0
 8008d78:	d110      	bne.n	8008d9c <__mdiff+0x38>
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f7ff fd59 	bl	8008834 <_Balloc>
 8008d82:	b930      	cbnz	r0, 8008d92 <__mdiff+0x2e>
 8008d84:	4b3a      	ldr	r3, [pc, #232]	; (8008e70 <__mdiff+0x10c>)
 8008d86:	4602      	mov	r2, r0
 8008d88:	f240 2137 	movw	r1, #567	; 0x237
 8008d8c:	4839      	ldr	r0, [pc, #228]	; (8008e74 <__mdiff+0x110>)
 8008d8e:	f000 f999 	bl	80090c4 <__assert_func>
 8008d92:	2301      	movs	r3, #1
 8008d94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9c:	bfa4      	itt	ge
 8008d9e:	4643      	movge	r3, r8
 8008da0:	46a0      	movge	r8, r4
 8008da2:	4630      	mov	r0, r6
 8008da4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008da8:	bfa6      	itte	ge
 8008daa:	461c      	movge	r4, r3
 8008dac:	2500      	movge	r5, #0
 8008dae:	2501      	movlt	r5, #1
 8008db0:	f7ff fd40 	bl	8008834 <_Balloc>
 8008db4:	b920      	cbnz	r0, 8008dc0 <__mdiff+0x5c>
 8008db6:	4b2e      	ldr	r3, [pc, #184]	; (8008e70 <__mdiff+0x10c>)
 8008db8:	4602      	mov	r2, r0
 8008dba:	f240 2145 	movw	r1, #581	; 0x245
 8008dbe:	e7e5      	b.n	8008d8c <__mdiff+0x28>
 8008dc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008dc4:	6926      	ldr	r6, [r4, #16]
 8008dc6:	60c5      	str	r5, [r0, #12]
 8008dc8:	f104 0914 	add.w	r9, r4, #20
 8008dcc:	f108 0514 	add.w	r5, r8, #20
 8008dd0:	f100 0e14 	add.w	lr, r0, #20
 8008dd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008dd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ddc:	f108 0210 	add.w	r2, r8, #16
 8008de0:	46f2      	mov	sl, lr
 8008de2:	2100      	movs	r1, #0
 8008de4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008de8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008dec:	fa11 f88b 	uxtah	r8, r1, fp
 8008df0:	b299      	uxth	r1, r3
 8008df2:	0c1b      	lsrs	r3, r3, #16
 8008df4:	eba8 0801 	sub.w	r8, r8, r1
 8008df8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008dfc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e00:	fa1f f888 	uxth.w	r8, r8
 8008e04:	1419      	asrs	r1, r3, #16
 8008e06:	454e      	cmp	r6, r9
 8008e08:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e0c:	f84a 3b04 	str.w	r3, [sl], #4
 8008e10:	d8e8      	bhi.n	8008de4 <__mdiff+0x80>
 8008e12:	1b33      	subs	r3, r6, r4
 8008e14:	3b15      	subs	r3, #21
 8008e16:	f023 0303 	bic.w	r3, r3, #3
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	3415      	adds	r4, #21
 8008e1e:	42a6      	cmp	r6, r4
 8008e20:	bf38      	it	cc
 8008e22:	2304      	movcc	r3, #4
 8008e24:	441d      	add	r5, r3
 8008e26:	4473      	add	r3, lr
 8008e28:	469e      	mov	lr, r3
 8008e2a:	462e      	mov	r6, r5
 8008e2c:	4566      	cmp	r6, ip
 8008e2e:	d30e      	bcc.n	8008e4e <__mdiff+0xea>
 8008e30:	f10c 0203 	add.w	r2, ip, #3
 8008e34:	1b52      	subs	r2, r2, r5
 8008e36:	f022 0203 	bic.w	r2, r2, #3
 8008e3a:	3d03      	subs	r5, #3
 8008e3c:	45ac      	cmp	ip, r5
 8008e3e:	bf38      	it	cc
 8008e40:	2200      	movcc	r2, #0
 8008e42:	4413      	add	r3, r2
 8008e44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008e48:	b17a      	cbz	r2, 8008e6a <__mdiff+0x106>
 8008e4a:	6107      	str	r7, [r0, #16]
 8008e4c:	e7a4      	b.n	8008d98 <__mdiff+0x34>
 8008e4e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e52:	fa11 f288 	uxtah	r2, r1, r8
 8008e56:	1414      	asrs	r4, r2, #16
 8008e58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e5c:	b292      	uxth	r2, r2
 8008e5e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e62:	f84e 2b04 	str.w	r2, [lr], #4
 8008e66:	1421      	asrs	r1, r4, #16
 8008e68:	e7e0      	b.n	8008e2c <__mdiff+0xc8>
 8008e6a:	3f01      	subs	r7, #1
 8008e6c:	e7ea      	b.n	8008e44 <__mdiff+0xe0>
 8008e6e:	bf00      	nop
 8008e70:	080097c8 	.word	0x080097c8
 8008e74:	080097d9 	.word	0x080097d9

08008e78 <__d2b>:
 8008e78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e7c:	460f      	mov	r7, r1
 8008e7e:	2101      	movs	r1, #1
 8008e80:	ec59 8b10 	vmov	r8, r9, d0
 8008e84:	4616      	mov	r6, r2
 8008e86:	f7ff fcd5 	bl	8008834 <_Balloc>
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	b930      	cbnz	r0, 8008e9c <__d2b+0x24>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	4b24      	ldr	r3, [pc, #144]	; (8008f24 <__d2b+0xac>)
 8008e92:	4825      	ldr	r0, [pc, #148]	; (8008f28 <__d2b+0xb0>)
 8008e94:	f240 310f 	movw	r1, #783	; 0x30f
 8008e98:	f000 f914 	bl	80090c4 <__assert_func>
 8008e9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ea0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ea4:	bb2d      	cbnz	r5, 8008ef2 <__d2b+0x7a>
 8008ea6:	9301      	str	r3, [sp, #4]
 8008ea8:	f1b8 0300 	subs.w	r3, r8, #0
 8008eac:	d026      	beq.n	8008efc <__d2b+0x84>
 8008eae:	4668      	mov	r0, sp
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	f7ff fd87 	bl	80089c4 <__lo0bits>
 8008eb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008eba:	b1e8      	cbz	r0, 8008ef8 <__d2b+0x80>
 8008ebc:	f1c0 0320 	rsb	r3, r0, #32
 8008ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec4:	430b      	orrs	r3, r1
 8008ec6:	40c2      	lsrs	r2, r0
 8008ec8:	6163      	str	r3, [r4, #20]
 8008eca:	9201      	str	r2, [sp, #4]
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	61a3      	str	r3, [r4, #24]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	bf14      	ite	ne
 8008ed4:	2202      	movne	r2, #2
 8008ed6:	2201      	moveq	r2, #1
 8008ed8:	6122      	str	r2, [r4, #16]
 8008eda:	b1bd      	cbz	r5, 8008f0c <__d2b+0x94>
 8008edc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ee0:	4405      	add	r5, r0
 8008ee2:	603d      	str	r5, [r7, #0]
 8008ee4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ee8:	6030      	str	r0, [r6, #0]
 8008eea:	4620      	mov	r0, r4
 8008eec:	b003      	add	sp, #12
 8008eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ef6:	e7d6      	b.n	8008ea6 <__d2b+0x2e>
 8008ef8:	6161      	str	r1, [r4, #20]
 8008efa:	e7e7      	b.n	8008ecc <__d2b+0x54>
 8008efc:	a801      	add	r0, sp, #4
 8008efe:	f7ff fd61 	bl	80089c4 <__lo0bits>
 8008f02:	9b01      	ldr	r3, [sp, #4]
 8008f04:	6163      	str	r3, [r4, #20]
 8008f06:	3020      	adds	r0, #32
 8008f08:	2201      	movs	r2, #1
 8008f0a:	e7e5      	b.n	8008ed8 <__d2b+0x60>
 8008f0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f14:	6038      	str	r0, [r7, #0]
 8008f16:	6918      	ldr	r0, [r3, #16]
 8008f18:	f7ff fd34 	bl	8008984 <__hi0bits>
 8008f1c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f20:	e7e2      	b.n	8008ee8 <__d2b+0x70>
 8008f22:	bf00      	nop
 8008f24:	080097c8 	.word	0x080097c8
 8008f28:	080097d9 	.word	0x080097d9

08008f2c <__sflush_r>:
 8008f2c:	898a      	ldrh	r2, [r1, #12]
 8008f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f32:	4605      	mov	r5, r0
 8008f34:	0710      	lsls	r0, r2, #28
 8008f36:	460c      	mov	r4, r1
 8008f38:	d458      	bmi.n	8008fec <__sflush_r+0xc0>
 8008f3a:	684b      	ldr	r3, [r1, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	dc05      	bgt.n	8008f4c <__sflush_r+0x20>
 8008f40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	dc02      	bgt.n	8008f4c <__sflush_r+0x20>
 8008f46:	2000      	movs	r0, #0
 8008f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f4e:	2e00      	cmp	r6, #0
 8008f50:	d0f9      	beq.n	8008f46 <__sflush_r+0x1a>
 8008f52:	2300      	movs	r3, #0
 8008f54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f58:	682f      	ldr	r7, [r5, #0]
 8008f5a:	6a21      	ldr	r1, [r4, #32]
 8008f5c:	602b      	str	r3, [r5, #0]
 8008f5e:	d032      	beq.n	8008fc6 <__sflush_r+0x9a>
 8008f60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	075a      	lsls	r2, r3, #29
 8008f66:	d505      	bpl.n	8008f74 <__sflush_r+0x48>
 8008f68:	6863      	ldr	r3, [r4, #4]
 8008f6a:	1ac0      	subs	r0, r0, r3
 8008f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f6e:	b10b      	cbz	r3, 8008f74 <__sflush_r+0x48>
 8008f70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f72:	1ac0      	subs	r0, r0, r3
 8008f74:	2300      	movs	r3, #0
 8008f76:	4602      	mov	r2, r0
 8008f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f7a:	6a21      	ldr	r1, [r4, #32]
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	47b0      	blx	r6
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	89a3      	ldrh	r3, [r4, #12]
 8008f84:	d106      	bne.n	8008f94 <__sflush_r+0x68>
 8008f86:	6829      	ldr	r1, [r5, #0]
 8008f88:	291d      	cmp	r1, #29
 8008f8a:	d82b      	bhi.n	8008fe4 <__sflush_r+0xb8>
 8008f8c:	4a29      	ldr	r2, [pc, #164]	; (8009034 <__sflush_r+0x108>)
 8008f8e:	410a      	asrs	r2, r1
 8008f90:	07d6      	lsls	r6, r2, #31
 8008f92:	d427      	bmi.n	8008fe4 <__sflush_r+0xb8>
 8008f94:	2200      	movs	r2, #0
 8008f96:	6062      	str	r2, [r4, #4]
 8008f98:	04d9      	lsls	r1, r3, #19
 8008f9a:	6922      	ldr	r2, [r4, #16]
 8008f9c:	6022      	str	r2, [r4, #0]
 8008f9e:	d504      	bpl.n	8008faa <__sflush_r+0x7e>
 8008fa0:	1c42      	adds	r2, r0, #1
 8008fa2:	d101      	bne.n	8008fa8 <__sflush_r+0x7c>
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	b903      	cbnz	r3, 8008faa <__sflush_r+0x7e>
 8008fa8:	6560      	str	r0, [r4, #84]	; 0x54
 8008faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fac:	602f      	str	r7, [r5, #0]
 8008fae:	2900      	cmp	r1, #0
 8008fb0:	d0c9      	beq.n	8008f46 <__sflush_r+0x1a>
 8008fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fb6:	4299      	cmp	r1, r3
 8008fb8:	d002      	beq.n	8008fc0 <__sflush_r+0x94>
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f7ff fb3a 	bl	8008634 <_free_r>
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	6360      	str	r0, [r4, #52]	; 0x34
 8008fc4:	e7c0      	b.n	8008f48 <__sflush_r+0x1c>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	4628      	mov	r0, r5
 8008fca:	47b0      	blx	r6
 8008fcc:	1c41      	adds	r1, r0, #1
 8008fce:	d1c8      	bne.n	8008f62 <__sflush_r+0x36>
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0c5      	beq.n	8008f62 <__sflush_r+0x36>
 8008fd6:	2b1d      	cmp	r3, #29
 8008fd8:	d001      	beq.n	8008fde <__sflush_r+0xb2>
 8008fda:	2b16      	cmp	r3, #22
 8008fdc:	d101      	bne.n	8008fe2 <__sflush_r+0xb6>
 8008fde:	602f      	str	r7, [r5, #0]
 8008fe0:	e7b1      	b.n	8008f46 <__sflush_r+0x1a>
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fe8:	81a3      	strh	r3, [r4, #12]
 8008fea:	e7ad      	b.n	8008f48 <__sflush_r+0x1c>
 8008fec:	690f      	ldr	r7, [r1, #16]
 8008fee:	2f00      	cmp	r7, #0
 8008ff0:	d0a9      	beq.n	8008f46 <__sflush_r+0x1a>
 8008ff2:	0793      	lsls	r3, r2, #30
 8008ff4:	680e      	ldr	r6, [r1, #0]
 8008ff6:	bf08      	it	eq
 8008ff8:	694b      	ldreq	r3, [r1, #20]
 8008ffa:	600f      	str	r7, [r1, #0]
 8008ffc:	bf18      	it	ne
 8008ffe:	2300      	movne	r3, #0
 8009000:	eba6 0807 	sub.w	r8, r6, r7
 8009004:	608b      	str	r3, [r1, #8]
 8009006:	f1b8 0f00 	cmp.w	r8, #0
 800900a:	dd9c      	ble.n	8008f46 <__sflush_r+0x1a>
 800900c:	6a21      	ldr	r1, [r4, #32]
 800900e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009010:	4643      	mov	r3, r8
 8009012:	463a      	mov	r2, r7
 8009014:	4628      	mov	r0, r5
 8009016:	47b0      	blx	r6
 8009018:	2800      	cmp	r0, #0
 800901a:	dc06      	bgt.n	800902a <__sflush_r+0xfe>
 800901c:	89a3      	ldrh	r3, [r4, #12]
 800901e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009022:	81a3      	strh	r3, [r4, #12]
 8009024:	f04f 30ff 	mov.w	r0, #4294967295
 8009028:	e78e      	b.n	8008f48 <__sflush_r+0x1c>
 800902a:	4407      	add	r7, r0
 800902c:	eba8 0800 	sub.w	r8, r8, r0
 8009030:	e7e9      	b.n	8009006 <__sflush_r+0xda>
 8009032:	bf00      	nop
 8009034:	dfbffffe 	.word	0xdfbffffe

08009038 <_fflush_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	690b      	ldr	r3, [r1, #16]
 800903c:	4605      	mov	r5, r0
 800903e:	460c      	mov	r4, r1
 8009040:	b913      	cbnz	r3, 8009048 <_fflush_r+0x10>
 8009042:	2500      	movs	r5, #0
 8009044:	4628      	mov	r0, r5
 8009046:	bd38      	pop	{r3, r4, r5, pc}
 8009048:	b118      	cbz	r0, 8009052 <_fflush_r+0x1a>
 800904a:	6a03      	ldr	r3, [r0, #32]
 800904c:	b90b      	cbnz	r3, 8009052 <_fflush_r+0x1a>
 800904e:	f7fe fb7d 	bl	800774c <__sinit>
 8009052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d0f3      	beq.n	8009042 <_fflush_r+0xa>
 800905a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800905c:	07d0      	lsls	r0, r2, #31
 800905e:	d404      	bmi.n	800906a <_fflush_r+0x32>
 8009060:	0599      	lsls	r1, r3, #22
 8009062:	d402      	bmi.n	800906a <_fflush_r+0x32>
 8009064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009066:	f7fe fc67 	bl	8007938 <__retarget_lock_acquire_recursive>
 800906a:	4628      	mov	r0, r5
 800906c:	4621      	mov	r1, r4
 800906e:	f7ff ff5d 	bl	8008f2c <__sflush_r>
 8009072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009074:	07da      	lsls	r2, r3, #31
 8009076:	4605      	mov	r5, r0
 8009078:	d4e4      	bmi.n	8009044 <_fflush_r+0xc>
 800907a:	89a3      	ldrh	r3, [r4, #12]
 800907c:	059b      	lsls	r3, r3, #22
 800907e:	d4e1      	bmi.n	8009044 <_fflush_r+0xc>
 8009080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009082:	f7fe fc5a 	bl	800793a <__retarget_lock_release_recursive>
 8009086:	e7dd      	b.n	8009044 <_fflush_r+0xc>

08009088 <_sbrk_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4d06      	ldr	r5, [pc, #24]	; (80090a4 <_sbrk_r+0x1c>)
 800908c:	2300      	movs	r3, #0
 800908e:	4604      	mov	r4, r0
 8009090:	4608      	mov	r0, r1
 8009092:	602b      	str	r3, [r5, #0]
 8009094:	f7f8 fe84 	bl	8001da0 <_sbrk>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_sbrk_r+0x1a>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_sbrk_r+0x1a>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	20000b14 	.word	0x20000b14

080090a8 <memcpy>:
 80090a8:	440a      	add	r2, r1
 80090aa:	4291      	cmp	r1, r2
 80090ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80090b0:	d100      	bne.n	80090b4 <memcpy+0xc>
 80090b2:	4770      	bx	lr
 80090b4:	b510      	push	{r4, lr}
 80090b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090be:	4291      	cmp	r1, r2
 80090c0:	d1f9      	bne.n	80090b6 <memcpy+0xe>
 80090c2:	bd10      	pop	{r4, pc}

080090c4 <__assert_func>:
 80090c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090c6:	4614      	mov	r4, r2
 80090c8:	461a      	mov	r2, r3
 80090ca:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <__assert_func+0x2c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4605      	mov	r5, r0
 80090d0:	68d8      	ldr	r0, [r3, #12]
 80090d2:	b14c      	cbz	r4, 80090e8 <__assert_func+0x24>
 80090d4:	4b07      	ldr	r3, [pc, #28]	; (80090f4 <__assert_func+0x30>)
 80090d6:	9100      	str	r1, [sp, #0]
 80090d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090dc:	4906      	ldr	r1, [pc, #24]	; (80090f8 <__assert_func+0x34>)
 80090de:	462b      	mov	r3, r5
 80090e0:	f000 f844 	bl	800916c <fiprintf>
 80090e4:	f000 f854 	bl	8009190 <abort>
 80090e8:	4b04      	ldr	r3, [pc, #16]	; (80090fc <__assert_func+0x38>)
 80090ea:	461c      	mov	r4, r3
 80090ec:	e7f3      	b.n	80090d6 <__assert_func+0x12>
 80090ee:	bf00      	nop
 80090f0:	20000064 	.word	0x20000064
 80090f4:	0800993e 	.word	0x0800993e
 80090f8:	0800994b 	.word	0x0800994b
 80090fc:	08009979 	.word	0x08009979

08009100 <_calloc_r>:
 8009100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009102:	fba1 2402 	umull	r2, r4, r1, r2
 8009106:	b94c      	cbnz	r4, 800911c <_calloc_r+0x1c>
 8009108:	4611      	mov	r1, r2
 800910a:	9201      	str	r2, [sp, #4]
 800910c:	f7ff fb06 	bl	800871c <_malloc_r>
 8009110:	9a01      	ldr	r2, [sp, #4]
 8009112:	4605      	mov	r5, r0
 8009114:	b930      	cbnz	r0, 8009124 <_calloc_r+0x24>
 8009116:	4628      	mov	r0, r5
 8009118:	b003      	add	sp, #12
 800911a:	bd30      	pop	{r4, r5, pc}
 800911c:	220c      	movs	r2, #12
 800911e:	6002      	str	r2, [r0, #0]
 8009120:	2500      	movs	r5, #0
 8009122:	e7f8      	b.n	8009116 <_calloc_r+0x16>
 8009124:	4621      	mov	r1, r4
 8009126:	f7fe fb8a 	bl	800783e <memset>
 800912a:	e7f4      	b.n	8009116 <_calloc_r+0x16>

0800912c <__ascii_mbtowc>:
 800912c:	b082      	sub	sp, #8
 800912e:	b901      	cbnz	r1, 8009132 <__ascii_mbtowc+0x6>
 8009130:	a901      	add	r1, sp, #4
 8009132:	b142      	cbz	r2, 8009146 <__ascii_mbtowc+0x1a>
 8009134:	b14b      	cbz	r3, 800914a <__ascii_mbtowc+0x1e>
 8009136:	7813      	ldrb	r3, [r2, #0]
 8009138:	600b      	str	r3, [r1, #0]
 800913a:	7812      	ldrb	r2, [r2, #0]
 800913c:	1e10      	subs	r0, r2, #0
 800913e:	bf18      	it	ne
 8009140:	2001      	movne	r0, #1
 8009142:	b002      	add	sp, #8
 8009144:	4770      	bx	lr
 8009146:	4610      	mov	r0, r2
 8009148:	e7fb      	b.n	8009142 <__ascii_mbtowc+0x16>
 800914a:	f06f 0001 	mvn.w	r0, #1
 800914e:	e7f8      	b.n	8009142 <__ascii_mbtowc+0x16>

08009150 <__ascii_wctomb>:
 8009150:	b149      	cbz	r1, 8009166 <__ascii_wctomb+0x16>
 8009152:	2aff      	cmp	r2, #255	; 0xff
 8009154:	bf85      	ittet	hi
 8009156:	238a      	movhi	r3, #138	; 0x8a
 8009158:	6003      	strhi	r3, [r0, #0]
 800915a:	700a      	strbls	r2, [r1, #0]
 800915c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009160:	bf98      	it	ls
 8009162:	2001      	movls	r0, #1
 8009164:	4770      	bx	lr
 8009166:	4608      	mov	r0, r1
 8009168:	4770      	bx	lr
	...

0800916c <fiprintf>:
 800916c:	b40e      	push	{r1, r2, r3}
 800916e:	b503      	push	{r0, r1, lr}
 8009170:	4601      	mov	r1, r0
 8009172:	ab03      	add	r3, sp, #12
 8009174:	4805      	ldr	r0, [pc, #20]	; (800918c <fiprintf+0x20>)
 8009176:	f853 2b04 	ldr.w	r2, [r3], #4
 800917a:	6800      	ldr	r0, [r0, #0]
 800917c:	9301      	str	r3, [sp, #4]
 800917e:	f000 f837 	bl	80091f0 <_vfiprintf_r>
 8009182:	b002      	add	sp, #8
 8009184:	f85d eb04 	ldr.w	lr, [sp], #4
 8009188:	b003      	add	sp, #12
 800918a:	4770      	bx	lr
 800918c:	20000064 	.word	0x20000064

08009190 <abort>:
 8009190:	b508      	push	{r3, lr}
 8009192:	2006      	movs	r0, #6
 8009194:	f000 fa04 	bl	80095a0 <raise>
 8009198:	2001      	movs	r0, #1
 800919a:	f7f8 fd89 	bl	8001cb0 <_exit>

0800919e <__sfputc_r>:
 800919e:	6893      	ldr	r3, [r2, #8]
 80091a0:	3b01      	subs	r3, #1
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	b410      	push	{r4}
 80091a6:	6093      	str	r3, [r2, #8]
 80091a8:	da08      	bge.n	80091bc <__sfputc_r+0x1e>
 80091aa:	6994      	ldr	r4, [r2, #24]
 80091ac:	42a3      	cmp	r3, r4
 80091ae:	db01      	blt.n	80091b4 <__sfputc_r+0x16>
 80091b0:	290a      	cmp	r1, #10
 80091b2:	d103      	bne.n	80091bc <__sfputc_r+0x1e>
 80091b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091b8:	f000 b934 	b.w	8009424 <__swbuf_r>
 80091bc:	6813      	ldr	r3, [r2, #0]
 80091be:	1c58      	adds	r0, r3, #1
 80091c0:	6010      	str	r0, [r2, #0]
 80091c2:	7019      	strb	r1, [r3, #0]
 80091c4:	4608      	mov	r0, r1
 80091c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <__sfputs_r>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	4606      	mov	r6, r0
 80091d0:	460f      	mov	r7, r1
 80091d2:	4614      	mov	r4, r2
 80091d4:	18d5      	adds	r5, r2, r3
 80091d6:	42ac      	cmp	r4, r5
 80091d8:	d101      	bne.n	80091de <__sfputs_r+0x12>
 80091da:	2000      	movs	r0, #0
 80091dc:	e007      	b.n	80091ee <__sfputs_r+0x22>
 80091de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e2:	463a      	mov	r2, r7
 80091e4:	4630      	mov	r0, r6
 80091e6:	f7ff ffda 	bl	800919e <__sfputc_r>
 80091ea:	1c43      	adds	r3, r0, #1
 80091ec:	d1f3      	bne.n	80091d6 <__sfputs_r+0xa>
 80091ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091f0 <_vfiprintf_r>:
 80091f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	460d      	mov	r5, r1
 80091f6:	b09d      	sub	sp, #116	; 0x74
 80091f8:	4614      	mov	r4, r2
 80091fa:	4698      	mov	r8, r3
 80091fc:	4606      	mov	r6, r0
 80091fe:	b118      	cbz	r0, 8009208 <_vfiprintf_r+0x18>
 8009200:	6a03      	ldr	r3, [r0, #32]
 8009202:	b90b      	cbnz	r3, 8009208 <_vfiprintf_r+0x18>
 8009204:	f7fe faa2 	bl	800774c <__sinit>
 8009208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800920a:	07d9      	lsls	r1, r3, #31
 800920c:	d405      	bmi.n	800921a <_vfiprintf_r+0x2a>
 800920e:	89ab      	ldrh	r3, [r5, #12]
 8009210:	059a      	lsls	r2, r3, #22
 8009212:	d402      	bmi.n	800921a <_vfiprintf_r+0x2a>
 8009214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009216:	f7fe fb8f 	bl	8007938 <__retarget_lock_acquire_recursive>
 800921a:	89ab      	ldrh	r3, [r5, #12]
 800921c:	071b      	lsls	r3, r3, #28
 800921e:	d501      	bpl.n	8009224 <_vfiprintf_r+0x34>
 8009220:	692b      	ldr	r3, [r5, #16]
 8009222:	b99b      	cbnz	r3, 800924c <_vfiprintf_r+0x5c>
 8009224:	4629      	mov	r1, r5
 8009226:	4630      	mov	r0, r6
 8009228:	f000 f93a 	bl	80094a0 <__swsetup_r>
 800922c:	b170      	cbz	r0, 800924c <_vfiprintf_r+0x5c>
 800922e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009230:	07dc      	lsls	r4, r3, #31
 8009232:	d504      	bpl.n	800923e <_vfiprintf_r+0x4e>
 8009234:	f04f 30ff 	mov.w	r0, #4294967295
 8009238:	b01d      	add	sp, #116	; 0x74
 800923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923e:	89ab      	ldrh	r3, [r5, #12]
 8009240:	0598      	lsls	r0, r3, #22
 8009242:	d4f7      	bmi.n	8009234 <_vfiprintf_r+0x44>
 8009244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009246:	f7fe fb78 	bl	800793a <__retarget_lock_release_recursive>
 800924a:	e7f3      	b.n	8009234 <_vfiprintf_r+0x44>
 800924c:	2300      	movs	r3, #0
 800924e:	9309      	str	r3, [sp, #36]	; 0x24
 8009250:	2320      	movs	r3, #32
 8009252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009256:	f8cd 800c 	str.w	r8, [sp, #12]
 800925a:	2330      	movs	r3, #48	; 0x30
 800925c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009410 <_vfiprintf_r+0x220>
 8009260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009264:	f04f 0901 	mov.w	r9, #1
 8009268:	4623      	mov	r3, r4
 800926a:	469a      	mov	sl, r3
 800926c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009270:	b10a      	cbz	r2, 8009276 <_vfiprintf_r+0x86>
 8009272:	2a25      	cmp	r2, #37	; 0x25
 8009274:	d1f9      	bne.n	800926a <_vfiprintf_r+0x7a>
 8009276:	ebba 0b04 	subs.w	fp, sl, r4
 800927a:	d00b      	beq.n	8009294 <_vfiprintf_r+0xa4>
 800927c:	465b      	mov	r3, fp
 800927e:	4622      	mov	r2, r4
 8009280:	4629      	mov	r1, r5
 8009282:	4630      	mov	r0, r6
 8009284:	f7ff ffa2 	bl	80091cc <__sfputs_r>
 8009288:	3001      	adds	r0, #1
 800928a:	f000 80a9 	beq.w	80093e0 <_vfiprintf_r+0x1f0>
 800928e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009290:	445a      	add	r2, fp
 8009292:	9209      	str	r2, [sp, #36]	; 0x24
 8009294:	f89a 3000 	ldrb.w	r3, [sl]
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 80a1 	beq.w	80093e0 <_vfiprintf_r+0x1f0>
 800929e:	2300      	movs	r3, #0
 80092a0:	f04f 32ff 	mov.w	r2, #4294967295
 80092a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092a8:	f10a 0a01 	add.w	sl, sl, #1
 80092ac:	9304      	str	r3, [sp, #16]
 80092ae:	9307      	str	r3, [sp, #28]
 80092b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092b4:	931a      	str	r3, [sp, #104]	; 0x68
 80092b6:	4654      	mov	r4, sl
 80092b8:	2205      	movs	r2, #5
 80092ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092be:	4854      	ldr	r0, [pc, #336]	; (8009410 <_vfiprintf_r+0x220>)
 80092c0:	f7f6 ffa6 	bl	8000210 <memchr>
 80092c4:	9a04      	ldr	r2, [sp, #16]
 80092c6:	b9d8      	cbnz	r0, 8009300 <_vfiprintf_r+0x110>
 80092c8:	06d1      	lsls	r1, r2, #27
 80092ca:	bf44      	itt	mi
 80092cc:	2320      	movmi	r3, #32
 80092ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092d2:	0713      	lsls	r3, r2, #28
 80092d4:	bf44      	itt	mi
 80092d6:	232b      	movmi	r3, #43	; 0x2b
 80092d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092dc:	f89a 3000 	ldrb.w	r3, [sl]
 80092e0:	2b2a      	cmp	r3, #42	; 0x2a
 80092e2:	d015      	beq.n	8009310 <_vfiprintf_r+0x120>
 80092e4:	9a07      	ldr	r2, [sp, #28]
 80092e6:	4654      	mov	r4, sl
 80092e8:	2000      	movs	r0, #0
 80092ea:	f04f 0c0a 	mov.w	ip, #10
 80092ee:	4621      	mov	r1, r4
 80092f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092f4:	3b30      	subs	r3, #48	; 0x30
 80092f6:	2b09      	cmp	r3, #9
 80092f8:	d94d      	bls.n	8009396 <_vfiprintf_r+0x1a6>
 80092fa:	b1b0      	cbz	r0, 800932a <_vfiprintf_r+0x13a>
 80092fc:	9207      	str	r2, [sp, #28]
 80092fe:	e014      	b.n	800932a <_vfiprintf_r+0x13a>
 8009300:	eba0 0308 	sub.w	r3, r0, r8
 8009304:	fa09 f303 	lsl.w	r3, r9, r3
 8009308:	4313      	orrs	r3, r2
 800930a:	9304      	str	r3, [sp, #16]
 800930c:	46a2      	mov	sl, r4
 800930e:	e7d2      	b.n	80092b6 <_vfiprintf_r+0xc6>
 8009310:	9b03      	ldr	r3, [sp, #12]
 8009312:	1d19      	adds	r1, r3, #4
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	9103      	str	r1, [sp, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	bfbb      	ittet	lt
 800931c:	425b      	neglt	r3, r3
 800931e:	f042 0202 	orrlt.w	r2, r2, #2
 8009322:	9307      	strge	r3, [sp, #28]
 8009324:	9307      	strlt	r3, [sp, #28]
 8009326:	bfb8      	it	lt
 8009328:	9204      	strlt	r2, [sp, #16]
 800932a:	7823      	ldrb	r3, [r4, #0]
 800932c:	2b2e      	cmp	r3, #46	; 0x2e
 800932e:	d10c      	bne.n	800934a <_vfiprintf_r+0x15a>
 8009330:	7863      	ldrb	r3, [r4, #1]
 8009332:	2b2a      	cmp	r3, #42	; 0x2a
 8009334:	d134      	bne.n	80093a0 <_vfiprintf_r+0x1b0>
 8009336:	9b03      	ldr	r3, [sp, #12]
 8009338:	1d1a      	adds	r2, r3, #4
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	9203      	str	r2, [sp, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	bfb8      	it	lt
 8009342:	f04f 33ff 	movlt.w	r3, #4294967295
 8009346:	3402      	adds	r4, #2
 8009348:	9305      	str	r3, [sp, #20]
 800934a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009420 <_vfiprintf_r+0x230>
 800934e:	7821      	ldrb	r1, [r4, #0]
 8009350:	2203      	movs	r2, #3
 8009352:	4650      	mov	r0, sl
 8009354:	f7f6 ff5c 	bl	8000210 <memchr>
 8009358:	b138      	cbz	r0, 800936a <_vfiprintf_r+0x17a>
 800935a:	9b04      	ldr	r3, [sp, #16]
 800935c:	eba0 000a 	sub.w	r0, r0, sl
 8009360:	2240      	movs	r2, #64	; 0x40
 8009362:	4082      	lsls	r2, r0
 8009364:	4313      	orrs	r3, r2
 8009366:	3401      	adds	r4, #1
 8009368:	9304      	str	r3, [sp, #16]
 800936a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800936e:	4829      	ldr	r0, [pc, #164]	; (8009414 <_vfiprintf_r+0x224>)
 8009370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009374:	2206      	movs	r2, #6
 8009376:	f7f6 ff4b 	bl	8000210 <memchr>
 800937a:	2800      	cmp	r0, #0
 800937c:	d03f      	beq.n	80093fe <_vfiprintf_r+0x20e>
 800937e:	4b26      	ldr	r3, [pc, #152]	; (8009418 <_vfiprintf_r+0x228>)
 8009380:	bb1b      	cbnz	r3, 80093ca <_vfiprintf_r+0x1da>
 8009382:	9b03      	ldr	r3, [sp, #12]
 8009384:	3307      	adds	r3, #7
 8009386:	f023 0307 	bic.w	r3, r3, #7
 800938a:	3308      	adds	r3, #8
 800938c:	9303      	str	r3, [sp, #12]
 800938e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009390:	443b      	add	r3, r7
 8009392:	9309      	str	r3, [sp, #36]	; 0x24
 8009394:	e768      	b.n	8009268 <_vfiprintf_r+0x78>
 8009396:	fb0c 3202 	mla	r2, ip, r2, r3
 800939a:	460c      	mov	r4, r1
 800939c:	2001      	movs	r0, #1
 800939e:	e7a6      	b.n	80092ee <_vfiprintf_r+0xfe>
 80093a0:	2300      	movs	r3, #0
 80093a2:	3401      	adds	r4, #1
 80093a4:	9305      	str	r3, [sp, #20]
 80093a6:	4619      	mov	r1, r3
 80093a8:	f04f 0c0a 	mov.w	ip, #10
 80093ac:	4620      	mov	r0, r4
 80093ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093b2:	3a30      	subs	r2, #48	; 0x30
 80093b4:	2a09      	cmp	r2, #9
 80093b6:	d903      	bls.n	80093c0 <_vfiprintf_r+0x1d0>
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d0c6      	beq.n	800934a <_vfiprintf_r+0x15a>
 80093bc:	9105      	str	r1, [sp, #20]
 80093be:	e7c4      	b.n	800934a <_vfiprintf_r+0x15a>
 80093c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093c4:	4604      	mov	r4, r0
 80093c6:	2301      	movs	r3, #1
 80093c8:	e7f0      	b.n	80093ac <_vfiprintf_r+0x1bc>
 80093ca:	ab03      	add	r3, sp, #12
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	462a      	mov	r2, r5
 80093d0:	4b12      	ldr	r3, [pc, #72]	; (800941c <_vfiprintf_r+0x22c>)
 80093d2:	a904      	add	r1, sp, #16
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7fd fd79 	bl	8006ecc <_printf_float>
 80093da:	4607      	mov	r7, r0
 80093dc:	1c78      	adds	r0, r7, #1
 80093de:	d1d6      	bne.n	800938e <_vfiprintf_r+0x19e>
 80093e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093e2:	07d9      	lsls	r1, r3, #31
 80093e4:	d405      	bmi.n	80093f2 <_vfiprintf_r+0x202>
 80093e6:	89ab      	ldrh	r3, [r5, #12]
 80093e8:	059a      	lsls	r2, r3, #22
 80093ea:	d402      	bmi.n	80093f2 <_vfiprintf_r+0x202>
 80093ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093ee:	f7fe faa4 	bl	800793a <__retarget_lock_release_recursive>
 80093f2:	89ab      	ldrh	r3, [r5, #12]
 80093f4:	065b      	lsls	r3, r3, #25
 80093f6:	f53f af1d 	bmi.w	8009234 <_vfiprintf_r+0x44>
 80093fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093fc:	e71c      	b.n	8009238 <_vfiprintf_r+0x48>
 80093fe:	ab03      	add	r3, sp, #12
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	462a      	mov	r2, r5
 8009404:	4b05      	ldr	r3, [pc, #20]	; (800941c <_vfiprintf_r+0x22c>)
 8009406:	a904      	add	r1, sp, #16
 8009408:	4630      	mov	r0, r6
 800940a:	f7fe f803 	bl	8007414 <_printf_i>
 800940e:	e7e4      	b.n	80093da <_vfiprintf_r+0x1ea>
 8009410:	08009a7b 	.word	0x08009a7b
 8009414:	08009a85 	.word	0x08009a85
 8009418:	08006ecd 	.word	0x08006ecd
 800941c:	080091cd 	.word	0x080091cd
 8009420:	08009a81 	.word	0x08009a81

08009424 <__swbuf_r>:
 8009424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009426:	460e      	mov	r6, r1
 8009428:	4614      	mov	r4, r2
 800942a:	4605      	mov	r5, r0
 800942c:	b118      	cbz	r0, 8009436 <__swbuf_r+0x12>
 800942e:	6a03      	ldr	r3, [r0, #32]
 8009430:	b90b      	cbnz	r3, 8009436 <__swbuf_r+0x12>
 8009432:	f7fe f98b 	bl	800774c <__sinit>
 8009436:	69a3      	ldr	r3, [r4, #24]
 8009438:	60a3      	str	r3, [r4, #8]
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	071a      	lsls	r2, r3, #28
 800943e:	d525      	bpl.n	800948c <__swbuf_r+0x68>
 8009440:	6923      	ldr	r3, [r4, #16]
 8009442:	b31b      	cbz	r3, 800948c <__swbuf_r+0x68>
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	6922      	ldr	r2, [r4, #16]
 8009448:	1a98      	subs	r0, r3, r2
 800944a:	6963      	ldr	r3, [r4, #20]
 800944c:	b2f6      	uxtb	r6, r6
 800944e:	4283      	cmp	r3, r0
 8009450:	4637      	mov	r7, r6
 8009452:	dc04      	bgt.n	800945e <__swbuf_r+0x3a>
 8009454:	4621      	mov	r1, r4
 8009456:	4628      	mov	r0, r5
 8009458:	f7ff fdee 	bl	8009038 <_fflush_r>
 800945c:	b9e0      	cbnz	r0, 8009498 <__swbuf_r+0x74>
 800945e:	68a3      	ldr	r3, [r4, #8]
 8009460:	3b01      	subs	r3, #1
 8009462:	60a3      	str	r3, [r4, #8]
 8009464:	6823      	ldr	r3, [r4, #0]
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	6022      	str	r2, [r4, #0]
 800946a:	701e      	strb	r6, [r3, #0]
 800946c:	6962      	ldr	r2, [r4, #20]
 800946e:	1c43      	adds	r3, r0, #1
 8009470:	429a      	cmp	r2, r3
 8009472:	d004      	beq.n	800947e <__swbuf_r+0x5a>
 8009474:	89a3      	ldrh	r3, [r4, #12]
 8009476:	07db      	lsls	r3, r3, #31
 8009478:	d506      	bpl.n	8009488 <__swbuf_r+0x64>
 800947a:	2e0a      	cmp	r6, #10
 800947c:	d104      	bne.n	8009488 <__swbuf_r+0x64>
 800947e:	4621      	mov	r1, r4
 8009480:	4628      	mov	r0, r5
 8009482:	f7ff fdd9 	bl	8009038 <_fflush_r>
 8009486:	b938      	cbnz	r0, 8009498 <__swbuf_r+0x74>
 8009488:	4638      	mov	r0, r7
 800948a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800948c:	4621      	mov	r1, r4
 800948e:	4628      	mov	r0, r5
 8009490:	f000 f806 	bl	80094a0 <__swsetup_r>
 8009494:	2800      	cmp	r0, #0
 8009496:	d0d5      	beq.n	8009444 <__swbuf_r+0x20>
 8009498:	f04f 37ff 	mov.w	r7, #4294967295
 800949c:	e7f4      	b.n	8009488 <__swbuf_r+0x64>
	...

080094a0 <__swsetup_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	4b2a      	ldr	r3, [pc, #168]	; (800954c <__swsetup_r+0xac>)
 80094a4:	4605      	mov	r5, r0
 80094a6:	6818      	ldr	r0, [r3, #0]
 80094a8:	460c      	mov	r4, r1
 80094aa:	b118      	cbz	r0, 80094b4 <__swsetup_r+0x14>
 80094ac:	6a03      	ldr	r3, [r0, #32]
 80094ae:	b90b      	cbnz	r3, 80094b4 <__swsetup_r+0x14>
 80094b0:	f7fe f94c 	bl	800774c <__sinit>
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094ba:	0718      	lsls	r0, r3, #28
 80094bc:	d422      	bmi.n	8009504 <__swsetup_r+0x64>
 80094be:	06d9      	lsls	r1, r3, #27
 80094c0:	d407      	bmi.n	80094d2 <__swsetup_r+0x32>
 80094c2:	2309      	movs	r3, #9
 80094c4:	602b      	str	r3, [r5, #0]
 80094c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094ca:	81a3      	strh	r3, [r4, #12]
 80094cc:	f04f 30ff 	mov.w	r0, #4294967295
 80094d0:	e034      	b.n	800953c <__swsetup_r+0x9c>
 80094d2:	0758      	lsls	r0, r3, #29
 80094d4:	d512      	bpl.n	80094fc <__swsetup_r+0x5c>
 80094d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094d8:	b141      	cbz	r1, 80094ec <__swsetup_r+0x4c>
 80094da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094de:	4299      	cmp	r1, r3
 80094e0:	d002      	beq.n	80094e8 <__swsetup_r+0x48>
 80094e2:	4628      	mov	r0, r5
 80094e4:	f7ff f8a6 	bl	8008634 <_free_r>
 80094e8:	2300      	movs	r3, #0
 80094ea:	6363      	str	r3, [r4, #52]	; 0x34
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094f2:	81a3      	strh	r3, [r4, #12]
 80094f4:	2300      	movs	r3, #0
 80094f6:	6063      	str	r3, [r4, #4]
 80094f8:	6923      	ldr	r3, [r4, #16]
 80094fa:	6023      	str	r3, [r4, #0]
 80094fc:	89a3      	ldrh	r3, [r4, #12]
 80094fe:	f043 0308 	orr.w	r3, r3, #8
 8009502:	81a3      	strh	r3, [r4, #12]
 8009504:	6923      	ldr	r3, [r4, #16]
 8009506:	b94b      	cbnz	r3, 800951c <__swsetup_r+0x7c>
 8009508:	89a3      	ldrh	r3, [r4, #12]
 800950a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800950e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009512:	d003      	beq.n	800951c <__swsetup_r+0x7c>
 8009514:	4621      	mov	r1, r4
 8009516:	4628      	mov	r0, r5
 8009518:	f000 f884 	bl	8009624 <__smakebuf_r>
 800951c:	89a0      	ldrh	r0, [r4, #12]
 800951e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009522:	f010 0301 	ands.w	r3, r0, #1
 8009526:	d00a      	beq.n	800953e <__swsetup_r+0x9e>
 8009528:	2300      	movs	r3, #0
 800952a:	60a3      	str	r3, [r4, #8]
 800952c:	6963      	ldr	r3, [r4, #20]
 800952e:	425b      	negs	r3, r3
 8009530:	61a3      	str	r3, [r4, #24]
 8009532:	6923      	ldr	r3, [r4, #16]
 8009534:	b943      	cbnz	r3, 8009548 <__swsetup_r+0xa8>
 8009536:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800953a:	d1c4      	bne.n	80094c6 <__swsetup_r+0x26>
 800953c:	bd38      	pop	{r3, r4, r5, pc}
 800953e:	0781      	lsls	r1, r0, #30
 8009540:	bf58      	it	pl
 8009542:	6963      	ldrpl	r3, [r4, #20]
 8009544:	60a3      	str	r3, [r4, #8]
 8009546:	e7f4      	b.n	8009532 <__swsetup_r+0x92>
 8009548:	2000      	movs	r0, #0
 800954a:	e7f7      	b.n	800953c <__swsetup_r+0x9c>
 800954c:	20000064 	.word	0x20000064

08009550 <_raise_r>:
 8009550:	291f      	cmp	r1, #31
 8009552:	b538      	push	{r3, r4, r5, lr}
 8009554:	4604      	mov	r4, r0
 8009556:	460d      	mov	r5, r1
 8009558:	d904      	bls.n	8009564 <_raise_r+0x14>
 800955a:	2316      	movs	r3, #22
 800955c:	6003      	str	r3, [r0, #0]
 800955e:	f04f 30ff 	mov.w	r0, #4294967295
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009566:	b112      	cbz	r2, 800956e <_raise_r+0x1e>
 8009568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800956c:	b94b      	cbnz	r3, 8009582 <_raise_r+0x32>
 800956e:	4620      	mov	r0, r4
 8009570:	f000 f830 	bl	80095d4 <_getpid_r>
 8009574:	462a      	mov	r2, r5
 8009576:	4601      	mov	r1, r0
 8009578:	4620      	mov	r0, r4
 800957a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800957e:	f000 b817 	b.w	80095b0 <_kill_r>
 8009582:	2b01      	cmp	r3, #1
 8009584:	d00a      	beq.n	800959c <_raise_r+0x4c>
 8009586:	1c59      	adds	r1, r3, #1
 8009588:	d103      	bne.n	8009592 <_raise_r+0x42>
 800958a:	2316      	movs	r3, #22
 800958c:	6003      	str	r3, [r0, #0]
 800958e:	2001      	movs	r0, #1
 8009590:	e7e7      	b.n	8009562 <_raise_r+0x12>
 8009592:	2400      	movs	r4, #0
 8009594:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009598:	4628      	mov	r0, r5
 800959a:	4798      	blx	r3
 800959c:	2000      	movs	r0, #0
 800959e:	e7e0      	b.n	8009562 <_raise_r+0x12>

080095a0 <raise>:
 80095a0:	4b02      	ldr	r3, [pc, #8]	; (80095ac <raise+0xc>)
 80095a2:	4601      	mov	r1, r0
 80095a4:	6818      	ldr	r0, [r3, #0]
 80095a6:	f7ff bfd3 	b.w	8009550 <_raise_r>
 80095aa:	bf00      	nop
 80095ac:	20000064 	.word	0x20000064

080095b0 <_kill_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4d07      	ldr	r5, [pc, #28]	; (80095d0 <_kill_r+0x20>)
 80095b4:	2300      	movs	r3, #0
 80095b6:	4604      	mov	r4, r0
 80095b8:	4608      	mov	r0, r1
 80095ba:	4611      	mov	r1, r2
 80095bc:	602b      	str	r3, [r5, #0]
 80095be:	f7f8 fb67 	bl	8001c90 <_kill>
 80095c2:	1c43      	adds	r3, r0, #1
 80095c4:	d102      	bne.n	80095cc <_kill_r+0x1c>
 80095c6:	682b      	ldr	r3, [r5, #0]
 80095c8:	b103      	cbz	r3, 80095cc <_kill_r+0x1c>
 80095ca:	6023      	str	r3, [r4, #0]
 80095cc:	bd38      	pop	{r3, r4, r5, pc}
 80095ce:	bf00      	nop
 80095d0:	20000b14 	.word	0x20000b14

080095d4 <_getpid_r>:
 80095d4:	f7f8 bb54 	b.w	8001c80 <_getpid>

080095d8 <__swhatbuf_r>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	460c      	mov	r4, r1
 80095dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e0:	2900      	cmp	r1, #0
 80095e2:	b096      	sub	sp, #88	; 0x58
 80095e4:	4615      	mov	r5, r2
 80095e6:	461e      	mov	r6, r3
 80095e8:	da0d      	bge.n	8009606 <__swhatbuf_r+0x2e>
 80095ea:	89a3      	ldrh	r3, [r4, #12]
 80095ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095f0:	f04f 0100 	mov.w	r1, #0
 80095f4:	bf0c      	ite	eq
 80095f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80095fa:	2340      	movne	r3, #64	; 0x40
 80095fc:	2000      	movs	r0, #0
 80095fe:	6031      	str	r1, [r6, #0]
 8009600:	602b      	str	r3, [r5, #0]
 8009602:	b016      	add	sp, #88	; 0x58
 8009604:	bd70      	pop	{r4, r5, r6, pc}
 8009606:	466a      	mov	r2, sp
 8009608:	f000 f848 	bl	800969c <_fstat_r>
 800960c:	2800      	cmp	r0, #0
 800960e:	dbec      	blt.n	80095ea <__swhatbuf_r+0x12>
 8009610:	9901      	ldr	r1, [sp, #4]
 8009612:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009616:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800961a:	4259      	negs	r1, r3
 800961c:	4159      	adcs	r1, r3
 800961e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009622:	e7eb      	b.n	80095fc <__swhatbuf_r+0x24>

08009624 <__smakebuf_r>:
 8009624:	898b      	ldrh	r3, [r1, #12]
 8009626:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009628:	079d      	lsls	r5, r3, #30
 800962a:	4606      	mov	r6, r0
 800962c:	460c      	mov	r4, r1
 800962e:	d507      	bpl.n	8009640 <__smakebuf_r+0x1c>
 8009630:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	6123      	str	r3, [r4, #16]
 8009638:	2301      	movs	r3, #1
 800963a:	6163      	str	r3, [r4, #20]
 800963c:	b002      	add	sp, #8
 800963e:	bd70      	pop	{r4, r5, r6, pc}
 8009640:	ab01      	add	r3, sp, #4
 8009642:	466a      	mov	r2, sp
 8009644:	f7ff ffc8 	bl	80095d8 <__swhatbuf_r>
 8009648:	9900      	ldr	r1, [sp, #0]
 800964a:	4605      	mov	r5, r0
 800964c:	4630      	mov	r0, r6
 800964e:	f7ff f865 	bl	800871c <_malloc_r>
 8009652:	b948      	cbnz	r0, 8009668 <__smakebuf_r+0x44>
 8009654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009658:	059a      	lsls	r2, r3, #22
 800965a:	d4ef      	bmi.n	800963c <__smakebuf_r+0x18>
 800965c:	f023 0303 	bic.w	r3, r3, #3
 8009660:	f043 0302 	orr.w	r3, r3, #2
 8009664:	81a3      	strh	r3, [r4, #12]
 8009666:	e7e3      	b.n	8009630 <__smakebuf_r+0xc>
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	6020      	str	r0, [r4, #0]
 800966c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	9b00      	ldr	r3, [sp, #0]
 8009674:	6163      	str	r3, [r4, #20]
 8009676:	9b01      	ldr	r3, [sp, #4]
 8009678:	6120      	str	r0, [r4, #16]
 800967a:	b15b      	cbz	r3, 8009694 <__smakebuf_r+0x70>
 800967c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009680:	4630      	mov	r0, r6
 8009682:	f000 f81d 	bl	80096c0 <_isatty_r>
 8009686:	b128      	cbz	r0, 8009694 <__smakebuf_r+0x70>
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	f023 0303 	bic.w	r3, r3, #3
 800968e:	f043 0301 	orr.w	r3, r3, #1
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	431d      	orrs	r5, r3
 8009698:	81a5      	strh	r5, [r4, #12]
 800969a:	e7cf      	b.n	800963c <__smakebuf_r+0x18>

0800969c <_fstat_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4d07      	ldr	r5, [pc, #28]	; (80096bc <_fstat_r+0x20>)
 80096a0:	2300      	movs	r3, #0
 80096a2:	4604      	mov	r4, r0
 80096a4:	4608      	mov	r0, r1
 80096a6:	4611      	mov	r1, r2
 80096a8:	602b      	str	r3, [r5, #0]
 80096aa:	f7f8 fb50 	bl	8001d4e <_fstat>
 80096ae:	1c43      	adds	r3, r0, #1
 80096b0:	d102      	bne.n	80096b8 <_fstat_r+0x1c>
 80096b2:	682b      	ldr	r3, [r5, #0]
 80096b4:	b103      	cbz	r3, 80096b8 <_fstat_r+0x1c>
 80096b6:	6023      	str	r3, [r4, #0]
 80096b8:	bd38      	pop	{r3, r4, r5, pc}
 80096ba:	bf00      	nop
 80096bc:	20000b14 	.word	0x20000b14

080096c0 <_isatty_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4d06      	ldr	r5, [pc, #24]	; (80096dc <_isatty_r+0x1c>)
 80096c4:	2300      	movs	r3, #0
 80096c6:	4604      	mov	r4, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	602b      	str	r3, [r5, #0]
 80096cc:	f7f8 fb4f 	bl	8001d6e <_isatty>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_isatty_r+0x1a>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	b103      	cbz	r3, 80096da <_isatty_r+0x1a>
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	20000b14 	.word	0x20000b14

080096e0 <_init>:
 80096e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e2:	bf00      	nop
 80096e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e6:	bc08      	pop	{r3}
 80096e8:	469e      	mov	lr, r3
 80096ea:	4770      	bx	lr

080096ec <_fini>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	bf00      	nop
 80096f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f2:	bc08      	pop	{r3}
 80096f4:	469e      	mov	lr, r3
 80096f6:	4770      	bx	lr
