
ECE471_Hw4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009560  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08009730  08009730  00019730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ad4  08009ad4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009ad4  08009ad4  00019ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009adc  08009adc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009adc  08009adc  00019adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ae0  08009ae0  00019ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a0  200001d4  08009cb8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a74  08009cb8  00020a74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f89  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ecf  00000000  00000000  000361d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  000390a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee5  00000000  00000000  0003a3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002858a  00000000  00000000  0003b2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b7a  00000000  00000000  0006382f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9b29  00000000  00000000  0007b3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000062b4  00000000  00000000  00174ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0017b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009718 	.word	0x08009718

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08009718 	.word	0x08009718

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b090      	sub	sp, #64	; 0x40
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f000 fee4 	bl	8001cb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f863 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 fa6d 	bl	80013d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef6:	f000 fa39 	bl	800136c <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000efa:	f000 fa09 	bl	8001310 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000efe:	f000 f915 	bl	800112c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000f02:	f000 f9d5 	bl	80012b0 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000f06:	f000 f95d 	bl	80011c4 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000f0a:	f000 f8bd 	bl	8001088 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f0e:	2104      	movs	r1, #4
 8000f10:	4823      	ldr	r0, [pc, #140]	; (8000fa0 <main+0xbc>)
 8000f12:	f003 fd33 	bl	800497c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000f16:	4823      	ldr	r0, [pc, #140]	; (8000fa4 <main+0xc0>)
 8000f18:	f000 ff92 	bl	8001e40 <HAL_ADC_Start>

	  // Wait for the ADC conversion to complete (blocking)
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <main+0xc0>)
 8000f22:	f001 f85b 	bl	8001fdc <HAL_ADC_PollForConversion>

	  // Read the raw ADC value
	  uint16_t raw = HAL_ADC_GetValue(&hadc1);
 8000f26:	481f      	ldr	r0, [pc, #124]	; (8000fa4 <main+0xc0>)
 8000f28:	f001 f9f3 	bl	8002312 <HAL_ADC_GetValue>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	877b      	strh	r3, [r7, #58]	; 0x3a

	  // Convert the raw ADC value to voltage (assuming VREF = 3.0V)
	  float voltage = (float)raw *3/4095; // 12-bit ADC with VREF = 3.0V
 8000f30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f3a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000f3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f42:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000fa8 <main+0xc4>
 8000f46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f4a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	  // Print the voltage value
	  char msg[50];

	  sprintf(msg, "Voltage: %.2f V\r\n", voltage);
 8000f4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f50:	f7ff fb1a 	bl	8000588 <__aeabi_f2d>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4638      	mov	r0, r7
 8000f5a:	4914      	ldr	r1, [pc, #80]	; (8000fac <main+0xc8>)
 8000f5c:	f006 fa82 	bl	8007464 <siprintf>

	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f60:	463b      	mov	r3, r7
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff f9a4 	bl	80002b0 <strlen>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4639      	mov	r1, r7
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	480f      	ldr	r0, [pc, #60]	; (8000fb0 <main+0xcc>)
 8000f74:	f004 fde4 	bl	8005b40 <HAL_UART_Transmit>

	  // Delay for a brief moment (1 ms in this case)
	  HAL_Delay(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f000 fef9 	bl	8001d70 <HAL_Delay>
	  for (uint32_t coef=0; coef<99; coef++ )
 8000f7e:	2300      	movs	r3, #0
 8000f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f82:	e008      	b.n	8000f96 <main+0xb2>
	  	      {
	  	        TIM4->CCR2 = coef;
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <main+0xd0>)
 8000f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f88:	6393      	str	r3, [r2, #56]	; 0x38
	  	        HAL_Delay(20);
 8000f8a:	2014      	movs	r0, #20
 8000f8c:	f000 fef0 	bl	8001d70 <HAL_Delay>
	  for (uint32_t coef=0; coef<99; coef++ )
 8000f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f92:	3301      	adds	r3, #1
 8000f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f98:	2b62      	cmp	r3, #98	; 0x62
 8000f9a:	d9f3      	bls.n	8000f84 <main+0xa0>
  {
 8000f9c:	e7bb      	b.n	8000f16 <main+0x32>
 8000f9e:	bf00      	nop
 8000fa0:	200002e4 	.word	0x200002e4
 8000fa4:	200001f0 	.word	0x200001f0
 8000fa8:	457ff000 	.word	0x457ff000
 8000fac:	08009730 	.word	0x08009730
 8000fb0:	20000390 	.word	0x20000390
 8000fb4:	40000800 	.word	0x40000800

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b094      	sub	sp, #80	; 0x50
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	2230      	movs	r2, #48	; 0x30
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f006 faaf 	bl	800752a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fdc:	f002 fb4c 	bl	8003678 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <SystemClock_Config+0xc8>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	4a26      	ldr	r2, [pc, #152]	; (8001080 <SystemClock_Config+0xc8>)
 8000fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fea:	6413      	str	r3, [r2, #64]	; 0x40
 8000fec:	4b24      	ldr	r3, [pc, #144]	; (8001080 <SystemClock_Config+0xc8>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <SystemClock_Config+0xcc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001000:	4a20      	ldr	r2, [pc, #128]	; (8001084 <SystemClock_Config+0xcc>)
 8001002:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <SystemClock_Config+0xcc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001018:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001022:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001028:	2304      	movs	r3, #4
 800102a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800102c:	2348      	movs	r3, #72	; 0x48
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001030:	2302      	movs	r3, #2
 8001032:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001034:	2303      	movs	r3, #3
 8001036:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 0320 	add.w	r3, r7, #32
 800103c:	4618      	mov	r0, r3
 800103e:	f002 fb2b 	bl	8003698 <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001048:	f000 faa8 	bl	800159c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104c:	230f      	movs	r3, #15
 800104e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001050:	2302      	movs	r3, #2
 8001052:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2102      	movs	r1, #2
 8001068:	4618      	mov	r0, r3
 800106a:	f002 fdb9 	bl	8003be0 <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001074:	f000 fa92 	bl	800159c <Error_Handler>
  }
}
 8001078:	bf00      	nop
 800107a:	3750      	adds	r7, #80	; 0x50
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	40007000 	.word	0x40007000

08001088 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108e:	463b      	mov	r3, r7
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <MX_ADC1_Init+0x98>)
 800109c:	4a21      	ldr	r2, [pc, #132]	; (8001124 <MX_ADC1_Init+0x9c>)
 800109e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_ADC1_Init+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <MX_ADC1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_ADC1_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <MX_ADC1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_ADC1_Init+0x98>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_ADC1_Init+0x98>)
 80010c8:	4a17      	ldr	r2, [pc, #92]	; (8001128 <MX_ADC1_Init+0xa0>)
 80010ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_ADC1_Init+0x98>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_ADC1_Init+0x98>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_ADC1_Init+0x98>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_ADC1_Init+0x98>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e6:	480e      	ldr	r0, [pc, #56]	; (8001120 <MX_ADC1_Init+0x98>)
 80010e8:	f000 fe66 	bl	8001db8 <HAL_ADC_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010f2:	f000 fa53 	bl	800159c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010fa:	2301      	movs	r3, #1
 80010fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001102:	463b      	mov	r3, r7
 8001104:	4619      	mov	r1, r3
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <MX_ADC1_Init+0x98>)
 8001108:	f001 f92e 	bl	8002368 <HAL_ADC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001112:	f000 fa43 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001f0 	.word	0x200001f0
 8001124:	40012000 	.word	0x40012000
 8001128:	0f000001 	.word	0x0f000001

0800112c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800114a:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <MX_TIM2_Init+0x94>)
 800114c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001150:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <MX_TIM2_Init+0x94>)
 8001154:	2247      	movs	r2, #71	; 0x47
 8001156:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_TIM2_Init+0x94>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <MX_TIM2_Init+0x94>)
 8001160:	2263      	movs	r2, #99	; 0x63
 8001162:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <MX_TIM2_Init+0x94>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_TIM2_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001170:	4813      	ldr	r0, [pc, #76]	; (80011c0 <MX_TIM2_Init+0x94>)
 8001172:	f003 fb4b 	bl	800480c <HAL_TIM_Base_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800117c:	f000 fa0e 	bl	800159c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	4619      	mov	r1, r3
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <MX_TIM2_Init+0x94>)
 800118e:	f003 ff23 	bl	8004fd8 <HAL_TIM_ConfigClockSource>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001198:	f000 fa00 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_TIM2_Init+0x94>)
 80011aa:	f004 fbcf 	bl	800594c <HAL_TIMEx_MasterConfigSynchronization>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011b4:	f000 f9f2 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000298 	.word	0x20000298

080011c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08e      	sub	sp, #56	; 0x38
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011f6:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <MX_TIM4_Init+0xe4>)
 80011f8:	4a2c      	ldr	r2, [pc, #176]	; (80012ac <MX_TIM4_Init+0xe8>)
 80011fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80011fc:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <MX_TIM4_Init+0xe4>)
 80011fe:	2247      	movs	r2, #71	; 0x47
 8001200:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <MX_TIM4_Init+0xe4>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <MX_TIM4_Init+0xe4>)
 800120a:	2264      	movs	r2, #100	; 0x64
 800120c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <MX_TIM4_Init+0xe4>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_TIM4_Init+0xe4>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800121a:	4823      	ldr	r0, [pc, #140]	; (80012a8 <MX_TIM4_Init+0xe4>)
 800121c:	f003 faf6 	bl	800480c <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001226:	f000 f9b9 	bl	800159c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001230:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001234:	4619      	mov	r1, r3
 8001236:	481c      	ldr	r0, [pc, #112]	; (80012a8 <MX_TIM4_Init+0xe4>)
 8001238:	f003 fece 	bl	8004fd8 <HAL_TIM_ConfigClockSource>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001242:	f000 f9ab 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001246:	4818      	ldr	r0, [pc, #96]	; (80012a8 <MX_TIM4_Init+0xe4>)
 8001248:	f003 fb37 	bl	80048ba <HAL_TIM_PWM_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001252:	f000 f9a3 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	4810      	ldr	r0, [pc, #64]	; (80012a8 <MX_TIM4_Init+0xe4>)
 8001266:	f004 fb71 	bl	800594c <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001270:	f000 f994 	bl	800159c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001274:	2360      	movs	r3, #96	; 0x60
 8001276:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	2204      	movs	r2, #4
 8001288:	4619      	mov	r1, r3
 800128a:	4807      	ldr	r0, [pc, #28]	; (80012a8 <MX_TIM4_Init+0xe4>)
 800128c:	f003 fd90 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001296:	f000 f981 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800129a:	4803      	ldr	r0, [pc, #12]	; (80012a8 <MX_TIM4_Init+0xe4>)
 800129c:	f000 fa96 	bl	80017cc <HAL_TIM_MspPostInit>

}
 80012a0:	bf00      	nop
 80012a2:	3738      	adds	r7, #56	; 0x38
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200002e4 	.word	0x200002e4
 80012ac:	40000800 	.word	0x40000800

080012b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012b6:	4a15      	ldr	r2, [pc, #84]	; (800130c <MX_USART3_UART_Init+0x5c>)
 80012b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012f4:	f004 fbd6 	bl	8005aa4 <HAL_UART_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012fe:	f000 f94d 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000390 	.word	0x20000390
 800130c:	40004800 	.word	0x40004800

08001310 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001316:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800131a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800131e:	2206      	movs	r2, #6
 8001320:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001324:	2202      	movs	r2, #2
 8001326:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001330:	2202      	movs	r2, #2
 8001332:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001336:	2201      	movs	r2, #1
 8001338:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001348:	2201      	movs	r2, #1
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001354:	f002 f847 	bl	80033e6 <HAL_PCD_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800135e:	f000 f91d 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000418 	.word	0x20000418

0800136c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_DMA_Init+0x60>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a15      	ldr	r2, [pc, #84]	; (80013cc <MX_DMA_Init+0x60>)
 8001378:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_DMA_Init+0x60>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_DMA_Init+0x60>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <MX_DMA_Init+0x60>)
 8001390:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <MX_DMA_Init+0x60>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	2010      	movs	r0, #16
 80013a8:	f001 fb13 	bl	80029d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013ac:	2010      	movs	r0, #16
 80013ae:	f001 fb2c 	bl	8002a0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	2038      	movs	r0, #56	; 0x38
 80013b8:	f001 fb0b 	bl	80029d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013bc:	2038      	movs	r0, #56	; 0x38
 80013be:	f001 fb24 	bl	8002a0a <HAL_NVIC_EnableIRQ>

}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	; 0x30
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	4b67      	ldr	r3, [pc, #412]	; (8001584 <MX_GPIO_Init+0x1b4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a66      	ldr	r2, [pc, #408]	; (8001584 <MX_GPIO_Init+0x1b4>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b64      	ldr	r3, [pc, #400]	; (8001584 <MX_GPIO_Init+0x1b4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fe:	4b61      	ldr	r3, [pc, #388]	; (8001584 <MX_GPIO_Init+0x1b4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a60      	ldr	r2, [pc, #384]	; (8001584 <MX_GPIO_Init+0x1b4>)
 8001404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b5e      	ldr	r3, [pc, #376]	; (8001584 <MX_GPIO_Init+0x1b4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b5b      	ldr	r3, [pc, #364]	; (8001584 <MX_GPIO_Init+0x1b4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a5a      	ldr	r2, [pc, #360]	; (8001584 <MX_GPIO_Init+0x1b4>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b58      	ldr	r3, [pc, #352]	; (8001584 <MX_GPIO_Init+0x1b4>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b55      	ldr	r3, [pc, #340]	; (8001584 <MX_GPIO_Init+0x1b4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a54      	ldr	r2, [pc, #336]	; (8001584 <MX_GPIO_Init+0x1b4>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b52      	ldr	r3, [pc, #328]	; (8001584 <MX_GPIO_Init+0x1b4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001446:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <MX_GPIO_Init+0x1b4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a4e      	ldr	r2, [pc, #312]	; (8001584 <MX_GPIO_Init+0x1b4>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b4c      	ldr	r3, [pc, #304]	; (8001584 <MX_GPIO_Init+0x1b4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800145e:	4b49      	ldr	r3, [pc, #292]	; (8001584 <MX_GPIO_Init+0x1b4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a48      	ldr	r2, [pc, #288]	; (8001584 <MX_GPIO_Init+0x1b4>)
 8001464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b46      	ldr	r3, [pc, #280]	; (8001584 <MX_GPIO_Init+0x1b4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_13|LD3_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f246 0101 	movw	r1, #24577	; 0x6001
 800147c:	4842      	ldr	r0, [pc, #264]	; (8001588 <MX_GPIO_Init+0x1b8>)
 800147e:	f001 ff75 	bl	800336c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2140      	movs	r1, #64	; 0x40
 8001486:	4841      	ldr	r0, [pc, #260]	; (800158c <MX_GPIO_Init+0x1bc>)
 8001488:	f001 ff70 	bl	800336c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800148c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001492:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001496:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	483b      	ldr	r0, [pc, #236]	; (8001590 <MX_GPIO_Init+0x1c0>)
 80014a4:	f001 fdb6 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014b8:	230b      	movs	r3, #11
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	4833      	ldr	r0, [pc, #204]	; (8001590 <MX_GPIO_Init+0x1c0>)
 80014c4:	f001 fda6 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 80014c8:	2306      	movs	r3, #6
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014d8:	230b      	movs	r3, #11
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	482c      	ldr	r0, [pc, #176]	; (8001594 <MX_GPIO_Init+0x1c4>)
 80014e4:	f001 fd96 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014e8:	2330      	movs	r3, #48	; 0x30
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4825      	ldr	r0, [pc, #148]	; (8001590 <MX_GPIO_Init+0x1c0>)
 80014fc:	f001 fd8a 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|LD3_Pin;
 8001500:	f246 0301 	movw	r3, #24577	; 0x6001
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	481b      	ldr	r0, [pc, #108]	; (8001588 <MX_GPIO_Init+0x1b8>)
 800151a:	f001 fd7b 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800151e:	2340      	movs	r3, #64	; 0x40
 8001520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4815      	ldr	r0, [pc, #84]	; (800158c <MX_GPIO_Init+0x1bc>)
 8001536:	f001 fd6d 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin PG11 PG13 */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|GPIO_PIN_11|GPIO_PIN_13;
 800153a:	f44f 5322 	mov.w	r3, #10368	; 0x2880
 800153e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	4619      	mov	r1, r3
 800154e:	480f      	ldr	r0, [pc, #60]	; (800158c <MX_GPIO_Init+0x1bc>)
 8001550:	f001 fd60 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001554:	2308      	movs	r3, #8
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001558:	2303      	movs	r3, #3
 800155a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4619      	mov	r1, r3
 8001566:	480c      	ldr	r0, [pc, #48]	; (8001598 <MX_GPIO_Init+0x1c8>)
 8001568:	f001 fd54 	bl	8003014 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2100      	movs	r1, #0
 8001570:	2028      	movs	r0, #40	; 0x28
 8001572:	f001 fa2e 	bl	80029d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001576:	2028      	movs	r0, #40	; 0x28
 8001578:	f001 fa47 	bl	8002a0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800157c:	bf00      	nop
 800157e:	3730      	adds	r7, #48	; 0x30
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	40020400 	.word	0x40020400
 800158c:	40021800 	.word	0x40021800
 8001590:	40020800 	.word	0x40020800
 8001594:	40020000 	.word	0x40020000
 8001598:	40020c00 	.word	0x40020c00

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
}
 80015a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <Error_Handler+0x8>
	...

080015a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_MspInit+0x44>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_MspInit+0x44>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_MspInit+0x44>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_MspInit+0x44>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_MspInit+0x44>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_MspInit+0x44>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800

080015f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a30      	ldr	r2, [pc, #192]	; (80016d0 <HAL_ADC_MspInit+0xe0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d15a      	bne.n	80016c8 <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001612:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <HAL_ADC_MspInit+0xe4>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	4a2f      	ldr	r2, [pc, #188]	; (80016d4 <HAL_ADC_MspInit+0xe4>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161c:	6453      	str	r3, [r2, #68]	; 0x44
 800161e:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <HAL_ADC_MspInit+0xe4>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <HAL_ADC_MspInit+0xe4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a29      	ldr	r2, [pc, #164]	; (80016d4 <HAL_ADC_MspInit+0xe4>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_ADC_MspInit+0xe4>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001642:	2301      	movs	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001646:	2303      	movs	r3, #3
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4820      	ldr	r0, [pc, #128]	; (80016d8 <HAL_ADC_MspInit+0xe8>)
 8001656:	f001 fcdd 	bl	8003014 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_ADC_MspInit+0xec>)
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <HAL_ADC_MspInit+0xf0>)
 800165e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_ADC_MspInit+0xec>)
 8001662:	2200      	movs	r2, #0
 8001664:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_ADC_MspInit+0xec>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_ADC_MspInit+0xec>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <HAL_ADC_MspInit+0xec>)
 8001674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001678:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_ADC_MspInit+0xec>)
 800167c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001680:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_ADC_MspInit+0xec>)
 8001684:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001688:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_ADC_MspInit+0xec>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_ADC_MspInit+0xec>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_ADC_MspInit+0xec>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800169c:	480f      	ldr	r0, [pc, #60]	; (80016dc <HAL_ADC_MspInit+0xec>)
 800169e:	f001 f9cf 	bl	8002a40 <HAL_DMA_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 80016a8:	f7ff ff78 	bl	800159c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <HAL_ADC_MspInit+0xec>)
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_ADC_MspInit+0xec>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2012      	movs	r0, #18
 80016be:	f001 f988 	bl	80029d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80016c2:	2012      	movs	r0, #18
 80016c4:	f001 f9a1 	bl	8002a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	; 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40012000 	.word	0x40012000
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020000 	.word	0x40020000
 80016dc:	20000238 	.word	0x20000238
 80016e0:	40026410 	.word	0x40026410

080016e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f4:	d144      	bne.n	8001780 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f6:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_TIM_Base_MspInit+0xd8>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a30      	ldr	r2, [pc, #192]	; (80017bc <HAL_TIM_Base_MspInit+0xd8>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <HAL_TIM_Base_MspInit+0xd8>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800170e:	4b2c      	ldr	r3, [pc, #176]	; (80017c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001710:	4a2c      	ldr	r2, [pc, #176]	; (80017c4 <HAL_TIM_Base_MspInit+0xe0>)
 8001712:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001714:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001716:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800171a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <HAL_TIM_Base_MspInit+0xdc>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001722:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001728:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <HAL_TIM_Base_MspInit+0xdc>)
 800172a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001730:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001732:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001736:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001738:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_TIM_Base_MspInit+0xdc>)
 800173a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800173e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001740:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001746:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <HAL_TIM_Base_MspInit+0xdc>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001752:	481b      	ldr	r0, [pc, #108]	; (80017c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001754:	f001 f974 	bl	8002a40 <HAL_DMA_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 800175e:	f7ff ff1d 	bl	800159c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a16      	ldr	r2, [pc, #88]	; (80017c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001766:	625a      	str	r2, [r3, #36]	; 0x24
 8001768:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <HAL_TIM_Base_MspInit+0xdc>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	201c      	movs	r0, #28
 8001774:	f001 f92d 	bl	80029d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001778:	201c      	movs	r0, #28
 800177a:	f001 f946 	bl	8002a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800177e:	e018      	b.n	80017b2 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_TIM_Base_MspInit+0xe4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d113      	bne.n	80017b2 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_TIM_Base_MspInit+0xd8>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <HAL_TIM_Base_MspInit+0xd8>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_TIM_Base_MspInit+0xd8>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	201e      	movs	r0, #30
 80017a8:	f001 f913 	bl	80029d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017ac:	201e      	movs	r0, #30
 80017ae:	f001 f92c 	bl	8002a0a <HAL_NVIC_EnableIRQ>
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	20000330 	.word	0x20000330
 80017c4:	40026088 	.word	0x40026088
 80017c8:	40000800 	.word	0x40000800

080017cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a11      	ldr	r2, [pc, #68]	; (8001830 <HAL_TIM_MspPostInit+0x64>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d11b      	bne.n	8001826 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_TIM_MspPostInit+0x68>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a10      	ldr	r2, [pc, #64]	; (8001834 <HAL_TIM_MspPostInit+0x68>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_TIM_MspPostInit+0x68>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001816:	2302      	movs	r3, #2
 8001818:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	; (8001838 <HAL_TIM_MspPostInit+0x6c>)
 8001822:	f001 fbf7 	bl	8003014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001826:	bf00      	nop
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40000800 	.word	0x40000800
 8001834:	40023800 	.word	0x40023800
 8001838:	40020400 	.word	0x40020400

0800183c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0aa      	sub	sp, #168	; 0xa8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	2284      	movs	r2, #132	; 0x84
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f005 fe64 	bl	800752a <memset>
  if(huart->Instance==USART3)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <HAL_UART_MspInit+0xb4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d13c      	bne.n	80018e6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800186c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001870:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001872:	2300      	movs	r3, #0
 8001874:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	4618      	mov	r0, r3
 800187c:	f002 fbd6 	bl	800402c <HAL_RCCEx_PeriphCLKConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001886:	f7ff fe89 	bl	800159c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_UART_MspInit+0xb8>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a19      	ldr	r2, [pc, #100]	; (80018f4 <HAL_UART_MspInit+0xb8>)
 8001890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_UART_MspInit+0xb8>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_UART_MspInit+0xb8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <HAL_UART_MspInit+0xb8>)
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_UART_MspInit+0xb8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018d4:	2307      	movs	r3, #7
 80018d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018de:	4619      	mov	r1, r3
 80018e0:	4805      	ldr	r0, [pc, #20]	; (80018f8 <HAL_UART_MspInit+0xbc>)
 80018e2:	f001 fb97 	bl	8003014 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018e6:	bf00      	nop
 80018e8:	37a8      	adds	r7, #168	; 0xa8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40004800 	.word	0x40004800
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020c00 	.word	0x40020c00

080018fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b0ac      	sub	sp, #176	; 0xb0
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001914:	f107 0318 	add.w	r3, r7, #24
 8001918:	2284      	movs	r2, #132	; 0x84
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f005 fe04 	bl	800752a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800192a:	d159      	bne.n	80019e0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800192c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001930:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001938:	f107 0318 	add.w	r3, r7, #24
 800193c:	4618      	mov	r0, r3
 800193e:	f002 fb75 	bl	800402c <HAL_RCCEx_PeriphCLKConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001948:	f7ff fe28 	bl	800159c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_PCD_MspInit+0xec>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	4a25      	ldr	r2, [pc, #148]	; (80019e8 <HAL_PCD_MspInit+0xec>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6313      	str	r3, [r2, #48]	; 0x30
 8001958:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <HAL_PCD_MspInit+0xec>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001964:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800197e:	230a      	movs	r3, #10
 8001980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001988:	4619      	mov	r1, r3
 800198a:	4818      	ldr	r0, [pc, #96]	; (80019ec <HAL_PCD_MspInit+0xf0>)
 800198c:	f001 fb42 	bl	8003014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019a8:	4619      	mov	r1, r3
 80019aa:	4810      	ldr	r0, [pc, #64]	; (80019ec <HAL_PCD_MspInit+0xf0>)
 80019ac:	f001 fb32 	bl	8003014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_PCD_MspInit+0xec>)
 80019b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b4:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <HAL_PCD_MspInit+0xec>)
 80019b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ba:	6353      	str	r3, [r2, #52]	; 0x34
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_PCD_MspInit+0xec>)
 80019be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <HAL_PCD_MspInit+0xec>)
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <HAL_PCD_MspInit+0xec>)
 80019ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d2:	6453      	str	r3, [r2, #68]	; 0x44
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_PCD_MspInit+0xec>)
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019e0:	bf00      	nop
 80019e2:	37b0      	adds	r7, #176	; 0xb0
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020000 	.word	0x40020000

080019f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <NMI_Handler+0x4>

080019f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <HardFault_Handler+0x4>

080019fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <MemManage_Handler+0x4>

08001a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <BusFault_Handler+0x4>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <UsageFault_Handler+0x4>

08001a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3c:	f000 f978 	bl	8001d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream5_IRQn 0 */
 //HAL_DMA_IRQHandler(&hdma_tim2_ch1);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <ADC_IRQHandler+0x10>)
 8001a5a:	f000 fb4a 	bl	80020f2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200001f0 	.word	0x200001f0

08001a68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <TIM2_IRQHandler+0x10>)
 8001a6e:	f003 f87f 	bl	8004b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000298 	.word	0x20000298

08001a7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <TIM4_IRQHandler+0x10>)
 8001a82:	f003 f875 	bl	8004b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200002e4 	.word	0x200002e4

08001a90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001a94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a98:	f001 fc82 	bl	80033a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <DMA2_Stream0_IRQHandler+0x10>)
 8001aa6:	f001 f879 	bl	8002b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000238 	.word	0x20000238

08001ab4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return 1;
 8001ab8:	2301      	movs	r3, #1
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_kill>:

int _kill(int pid, int sig)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ace:	f005 fd7f 	bl	80075d0 <__errno>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2216      	movs	r2, #22
 8001ad6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_exit>:

void _exit (int status)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ffe7 	bl	8001ac4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001af6:	e7fe      	b.n	8001af6 <_exit+0x12>

08001af8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	e00a      	b.n	8001b20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b0a:	f3af 8000 	nop.w
 8001b0e:	4601      	mov	r1, r0
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	60ba      	str	r2, [r7, #8]
 8001b16:	b2ca      	uxtb	r2, r1
 8001b18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dbf0      	blt.n	8001b0a <_read+0x12>
  }

  return len;
 8001b28:	687b      	ldr	r3, [r7, #4]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	e009      	b.n	8001b58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	60ba      	str	r2, [r7, #8]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dbf1      	blt.n	8001b44 <_write+0x12>
  }
  return len;
 8001b60:	687b      	ldr	r3, [r7, #4]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_close>:

int _close(int file)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b92:	605a      	str	r2, [r3, #4]
  return 0;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <_isatty>:

int _isatty(int file)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <_sbrk+0x5c>)
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <_sbrk+0x60>)
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <_sbrk+0x64>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <_sbrk+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d207      	bcs.n	8001c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c04:	f005 fce4 	bl	80075d0 <__errno>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	e009      	b.n	8001c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <_sbrk+0x64>)
 8001c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20050000 	.word	0x20050000
 8001c34:	00000400 	.word	0x00000400
 8001c38:	20000920 	.word	0x20000920
 8001c3c:	20000a78 	.word	0x20000a78

08001c40 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <SystemInit+0x20>)
 8001c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <SystemInit+0x20>)
 8001c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c6a:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c70:	e002      	b.n	8001c78 <LoopCopyDataInit>

08001c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c76:	3304      	adds	r3, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c7c:	d3f9      	bcc.n	8001c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c80:	4c0b      	ldr	r4, [pc, #44]	; (8001cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c84:	e001      	b.n	8001c8a <LoopFillZerobss>

08001c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c88:	3204      	adds	r2, #4

08001c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c8c:	d3fb      	bcc.n	8001c86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c8e:	f7ff ffd7 	bl	8001c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c92:	f005 fca3 	bl	80075dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c96:	f7ff f925 	bl	8000ee4 <main>
  bx  lr    
 8001c9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c9c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ca8:	08009ae4 	.word	0x08009ae4
  ldr r2, =_sbss
 8001cac:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001cb0:	20000a74 	.word	0x20000a74

08001cb4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb4:	e7fe      	b.n	8001cb4 <CAN1_RX0_IRQHandler>

08001cb6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cba:	2003      	movs	r0, #3
 8001cbc:	f000 fe7e 	bl	80029bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f000 f805 	bl	8001cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc6:	f7ff fc6f 	bl	80015a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_InitTick+0x54>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_InitTick+0x58>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 fe99 	bl	8002a26 <HAL_SYSTICK_Config>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00e      	b.n	8001d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b0f      	cmp	r3, #15
 8001d02:	d80a      	bhi.n	8001d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d04:	2200      	movs	r2, #0
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f000 fe61 	bl	80029d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d10:	4a06      	ldr	r2, [pc, #24]	; (8001d2c <HAL_InitTick+0x5c>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000000 	.word	0x20000000
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	20000004 	.word	0x20000004

08001d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_IncTick+0x20>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_IncTick+0x24>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <HAL_IncTick+0x24>)
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000008 	.word	0x20000008
 8001d54:	20000924 	.word	0x20000924

08001d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <HAL_GetTick+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000924 	.word	0x20000924

08001d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff ffee 	bl	8001d58 <HAL_GetTick>
 8001d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d005      	beq.n	8001d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_Delay+0x44>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d96:	bf00      	nop
 8001d98:	f7ff ffde 	bl	8001d58 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d8f7      	bhi.n	8001d98 <HAL_Delay+0x28>
  {
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000008 	.word	0x20000008

08001db8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e031      	b.n	8001e32 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d109      	bne.n	8001dea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fc0a 	bl	80015f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d116      	bne.n	8001e24 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_ADC_Init+0x84>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	f043 0202 	orr.w	r2, r3, #2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fc04 	bl	8002614 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f023 0303 	bic.w	r3, r3, #3
 8001e1a:	f043 0201 	orr.w	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
 8001e22:	e001      	b.n	8001e28 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	ffffeefd 	.word	0xffffeefd

08001e40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_Start+0x1a>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e0ad      	b.n	8001fb6 <HAL_ADC_Start+0x176>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d018      	beq.n	8001ea2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_ADC_Start+0x184>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a50      	ldr	r2, [pc, #320]	; (8001fc8 <HAL_ADC_Start+0x188>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	0c9a      	lsrs	r2, r3, #18
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001e94:	e002      	b.n	8001e9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f9      	bne.n	8001e96 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d175      	bne.n	8001f9c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb4:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <HAL_ADC_Start+0x18c>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ed6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eea:	d106      	bne.n	8001efa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	f023 0206 	bic.w	r2, r3, #6
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ef8:	e002      	b.n	8001f00 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f10:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001f12:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <HAL_ADC_Start+0x190>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10f      	bne.n	8001f3e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d143      	bne.n	8001fb4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	e03a      	b.n	8001fb4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a24      	ldr	r2, [pc, #144]	; (8001fd4 <HAL_ADC_Start+0x194>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d10e      	bne.n	8001f66 <HAL_ADC_Start+0x126>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d107      	bne.n	8001f66 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f64:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <HAL_ADC_Start+0x190>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d120      	bne.n	8001fb4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a18      	ldr	r2, [pc, #96]	; (8001fd8 <HAL_ADC_Start+0x198>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d11b      	bne.n	8001fb4 <HAL_ADC_Start+0x174>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d114      	bne.n	8001fb4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	e00b      	b.n	8001fb4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f043 0210 	orr.w	r2, r3, #16
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	431bde83 	.word	0x431bde83
 8001fcc:	fffff8fe 	.word	0xfffff8fe
 8001fd0:	40012300 	.word	0x40012300
 8001fd4:	40012000 	.word	0x40012000
 8001fd8:	40012200 	.word	0x40012200

08001fdc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff8:	d113      	bne.n	8002022 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002008:	d10b      	bne.n	8002022 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f043 0220 	orr.w	r2, r3, #32
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e063      	b.n	80020ea <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002022:	f7ff fe99 	bl	8001d58 <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002028:	e021      	b.n	800206e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d01d      	beq.n	800206e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_ADC_PollForConversion+0x6c>
 8002038:	f7ff fe8e 	bl	8001d58 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d212      	bcs.n	800206e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b02      	cmp	r3, #2
 8002054:	d00b      	beq.n	800206e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f043 0204 	orr.w	r2, r3, #4
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e03d      	b.n	80020ea <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b02      	cmp	r3, #2
 800207a:	d1d6      	bne.n	800202a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0212 	mvn.w	r2, #18
 8002084:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d123      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d11f      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d111      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d049      	beq.n	80021bc <HAL_ADC_IRQHandler+0xca>
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d046      	beq.n	80021bc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	d105      	bne.n	8002146 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d12b      	bne.n	80021ac <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002158:	2b00      	cmp	r3, #0
 800215a:	d127      	bne.n	80021ac <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002174:	2b00      	cmp	r3, #0
 8002176:	d119      	bne.n	80021ac <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0220 	bic.w	r2, r2, #32
 8002186:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0201 	orr.w	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f8bd 	bl	800232c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f06f 0212 	mvn.w	r2, #18
 80021ba:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d057      	beq.n	8002282 <HAL_ADC_IRQHandler+0x190>
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d054      	beq.n	8002282 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d139      	bne.n	8002272 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002208:	2b00      	cmp	r3, #0
 800220a:	d006      	beq.n	800221a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002216:	2b00      	cmp	r3, #0
 8002218:	d12b      	bne.n	8002272 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002224:	2b00      	cmp	r3, #0
 8002226:	d124      	bne.n	8002272 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	d11d      	bne.n	8002272 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800223a:	2b00      	cmp	r3, #0
 800223c:	d119      	bne.n	8002272 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800224c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d105      	bne.n	8002272 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fac8 	bl	8002808 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 020c 	mvn.w	r2, #12
 8002280:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002290:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d017      	beq.n	80022c8 <HAL_ADC_IRQHandler+0x1d6>
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d014      	beq.n	80022c8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d10d      	bne.n	80022c8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f841 	bl	8002340 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f06f 0201 	mvn.w	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022d6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d015      	beq.n	800230a <HAL_ADC_IRQHandler+0x218>
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d012      	beq.n	800230a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e8:	f043 0202 	orr.w	r2, r3, #2
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0220 	mvn.w	r2, #32
 80022f8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f82a 	bl	8002354 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0220 	mvn.w	r2, #32
 8002308:	601a      	str	r2, [r3, #0]
  }
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1c>
 8002380:	2302      	movs	r3, #2
 8002382:	e136      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x28a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b09      	cmp	r3, #9
 8002392:	d93a      	bls.n	800240a <HAL_ADC_ConfigChannel+0xa2>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800239c:	d035      	beq.n	800240a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68d9      	ldr	r1, [r3, #12]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	3b1e      	subs	r3, #30
 80023b4:	2207      	movs	r2, #7
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	400a      	ands	r2, r1
 80023c2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a8d      	ldr	r2, [pc, #564]	; (8002600 <HAL_ADC_ConfigChannel+0x298>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10a      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68d9      	ldr	r1, [r3, #12]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	061a      	lsls	r2, r3, #24
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023e2:	e035      	b.n	8002450 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68d9      	ldr	r1, [r3, #12]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4618      	mov	r0, r3
 80023f6:	4603      	mov	r3, r0
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4403      	add	r3, r0
 80023fc:	3b1e      	subs	r3, #30
 80023fe:	409a      	lsls	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002408:	e022      	b.n	8002450 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6919      	ldr	r1, [r3, #16]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	2207      	movs	r2, #7
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43da      	mvns	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	400a      	ands	r2, r1
 800242c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6919      	ldr	r1, [r3, #16]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	b29b      	uxth	r3, r3
 800243e:	4618      	mov	r0, r3
 8002440:	4603      	mov	r3, r0
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4403      	add	r3, r0
 8002446:	409a      	lsls	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b06      	cmp	r3, #6
 8002456:	d824      	bhi.n	80024a2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3b05      	subs	r3, #5
 800246a:	221f      	movs	r2, #31
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43da      	mvns	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	400a      	ands	r2, r1
 8002478:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	4618      	mov	r0, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	3b05      	subs	r3, #5
 8002494:	fa00 f203 	lsl.w	r2, r0, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	635a      	str	r2, [r3, #52]	; 0x34
 80024a0:	e04c      	b.n	800253c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b0c      	cmp	r3, #12
 80024a8:	d824      	bhi.n	80024f4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	3b23      	subs	r3, #35	; 0x23
 80024bc:	221f      	movs	r2, #31
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	400a      	ands	r2, r1
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	3b23      	subs	r3, #35	; 0x23
 80024e6:	fa00 f203 	lsl.w	r2, r0, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	631a      	str	r2, [r3, #48]	; 0x30
 80024f2:	e023      	b.n	800253c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	3b41      	subs	r3, #65	; 0x41
 8002506:	221f      	movs	r2, #31
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43da      	mvns	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	400a      	ands	r2, r1
 8002514:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	4618      	mov	r0, r3
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3b41      	subs	r3, #65	; 0x41
 8002530:	fa00 f203 	lsl.w	r2, r0, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a30      	ldr	r2, [pc, #192]	; (8002604 <HAL_ADC_ConfigChannel+0x29c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d10a      	bne.n	800255c <HAL_ADC_ConfigChannel+0x1f4>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800254e:	d105      	bne.n	800255c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <HAL_ADC_ConfigChannel+0x2a0>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a2c      	ldr	r2, [pc, #176]	; (8002608 <HAL_ADC_ConfigChannel+0x2a0>)
 8002556:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800255a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a28      	ldr	r2, [pc, #160]	; (8002604 <HAL_ADC_ConfigChannel+0x29c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d10f      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x21e>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b12      	cmp	r3, #18
 800256c:	d10b      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800256e:	4b26      	ldr	r3, [pc, #152]	; (8002608 <HAL_ADC_ConfigChannel+0x2a0>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4a25      	ldr	r2, [pc, #148]	; (8002608 <HAL_ADC_ConfigChannel+0x2a0>)
 8002574:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002578:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800257a:	4b23      	ldr	r3, [pc, #140]	; (8002608 <HAL_ADC_ConfigChannel+0x2a0>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4a22      	ldr	r2, [pc, #136]	; (8002608 <HAL_ADC_ConfigChannel+0x2a0>)
 8002580:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002584:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <HAL_ADC_ConfigChannel+0x29c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d12b      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x280>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1a      	ldr	r2, [pc, #104]	; (8002600 <HAL_ADC_ConfigChannel+0x298>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d003      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0x23a>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b11      	cmp	r3, #17
 80025a0:	d122      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_ADC_ConfigChannel+0x2a0>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4a18      	ldr	r2, [pc, #96]	; (8002608 <HAL_ADC_ConfigChannel+0x2a0>)
 80025a8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80025ac:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <HAL_ADC_ConfigChannel+0x2a0>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4a15      	ldr	r2, [pc, #84]	; (8002608 <HAL_ADC_ConfigChannel+0x2a0>)
 80025b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025b8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a10      	ldr	r2, [pc, #64]	; (8002600 <HAL_ADC_ConfigChannel+0x298>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d111      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_ADC_ConfigChannel+0x2a4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a11      	ldr	r2, [pc, #68]	; (8002610 <HAL_ADC_ConfigChannel+0x2a8>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	0c9a      	lsrs	r2, r3, #18
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80025da:	e002      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3b01      	subs	r3, #1
 80025e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f9      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	10000012 	.word	0x10000012
 8002604:	40012000 	.word	0x40012000
 8002608:	40012300 	.word	0x40012300
 800260c:	20000000 	.word	0x20000000
 8002610:	431bde83 	.word	0x431bde83

08002614 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800261c:	4b78      	ldr	r3, [pc, #480]	; (8002800 <ADC_Init+0x1ec>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a77      	ldr	r2, [pc, #476]	; (8002800 <ADC_Init+0x1ec>)
 8002622:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002626:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002628:	4b75      	ldr	r3, [pc, #468]	; (8002800 <ADC_Init+0x1ec>)
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4973      	ldr	r1, [pc, #460]	; (8002800 <ADC_Init+0x1ec>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002644:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	021a      	lsls	r2, r3, #8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002668:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800268a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6899      	ldr	r1, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	4a58      	ldr	r2, [pc, #352]	; (8002804 <ADC_Init+0x1f0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d022      	beq.n	80026ee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6899      	ldr	r1, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	e00f      	b.n	800270e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800270c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0202 	bic.w	r2, r2, #2
 800271c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6899      	ldr	r1, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	005a      	lsls	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01b      	beq.n	8002774 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800274a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800275a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	3b01      	subs	r3, #1
 8002768:	035a      	lsls	r2, r3, #13
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	e007      	b.n	8002784 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002782:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002792:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	3b01      	subs	r3, #1
 80027a0:	051a      	lsls	r2, r3, #20
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6899      	ldr	r1, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027c6:	025a      	lsls	r2, r3, #9
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6899      	ldr	r1, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	029a      	lsls	r2, r3, #10
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40012300 	.word	0x40012300
 8002804:	0f000001 	.word	0x0f000001

08002808 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <__NVIC_SetPriorityGrouping+0x40>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <__NVIC_SetPriorityGrouping+0x44>)
 8002846:	4313      	orrs	r3, r2
 8002848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284a:	4a04      	ldr	r2, [pc, #16]	; (800285c <__NVIC_SetPriorityGrouping+0x40>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	60d3      	str	r3, [r2, #12]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00
 8002860:	05fa0000 	.word	0x05fa0000

08002864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <__NVIC_GetPriorityGrouping+0x18>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	f003 0307 	and.w	r3, r3, #7
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	2b00      	cmp	r3, #0
 8002890:	db0b      	blt.n	80028aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	f003 021f 	and.w	r2, r3, #31
 8002898:	4907      	ldr	r1, [pc, #28]	; (80028b8 <__NVIC_EnableIRQ+0x38>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2001      	movs	r0, #1
 80028a2:	fa00 f202 	lsl.w	r2, r0, r2
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000e100 	.word	0xe000e100

080028bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db0a      	blt.n	80028e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	490c      	ldr	r1, [pc, #48]	; (8002908 <__NVIC_SetPriority+0x4c>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e4:	e00a      	b.n	80028fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4908      	ldr	r1, [pc, #32]	; (800290c <__NVIC_SetPriority+0x50>)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3b04      	subs	r3, #4
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	761a      	strb	r2, [r3, #24]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f1c3 0307 	rsb	r3, r3, #7
 800292a:	2b04      	cmp	r3, #4
 800292c:	bf28      	it	cs
 800292e:	2304      	movcs	r3, #4
 8002930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3304      	adds	r3, #4
 8002936:	2b06      	cmp	r3, #6
 8002938:	d902      	bls.n	8002940 <NVIC_EncodePriority+0x30>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3b03      	subs	r3, #3
 800293e:	e000      	b.n	8002942 <NVIC_EncodePriority+0x32>
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	f04f 32ff 	mov.w	r2, #4294967295
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	401a      	ands	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43d9      	mvns	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	4313      	orrs	r3, r2
         );
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	; 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002988:	d301      	bcc.n	800298e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298a:	2301      	movs	r3, #1
 800298c:	e00f      	b.n	80029ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <SysTick_Config+0x40>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002996:	210f      	movs	r1, #15
 8002998:	f04f 30ff 	mov.w	r0, #4294967295
 800299c:	f7ff ff8e 	bl	80028bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <SysTick_Config+0x40>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a6:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <SysTick_Config+0x40>)
 80029a8:	2207      	movs	r2, #7
 80029aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	e000e010 	.word	0xe000e010

080029bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ff29 	bl	800281c <__NVIC_SetPriorityGrouping>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b086      	sub	sp, #24
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e4:	f7ff ff3e 	bl	8002864 <__NVIC_GetPriorityGrouping>
 80029e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	6978      	ldr	r0, [r7, #20]
 80029f0:	f7ff ff8e 	bl	8002910 <NVIC_EncodePriority>
 80029f4:	4602      	mov	r2, r0
 80029f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff5d 	bl	80028bc <__NVIC_SetPriority>
}
 8002a02:	bf00      	nop
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff31 	bl	8002880 <__NVIC_EnableIRQ>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff ffa2 	bl	8002978 <SysTick_Config>
 8002a34:	4603      	mov	r3, r0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a4c:	f7ff f984 	bl	8001d58 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e099      	b.n	8002b90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0201 	bic.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a7c:	e00f      	b.n	8002a9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a7e:	f7ff f96b 	bl	8001d58 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d908      	bls.n	8002a9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2203      	movs	r2, #3
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e078      	b.n	8002b90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e8      	bne.n	8002a7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <HAL_DMA_Init+0x158>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d107      	bne.n	8002b08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	4313      	orrs	r3, r2
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0307 	bic.w	r3, r3, #7
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d117      	bne.n	8002b62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00e      	beq.n	8002b62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f9e9 	bl	8002f1c <DMA_CheckFifoParam>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2240      	movs	r2, #64	; 0x40
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e016      	b.n	8002b90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f9a0 	bl	8002eb0 <DMA_CalcBaseAndBitshift>
 8002b70:	4603      	mov	r3, r0
 8002b72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	223f      	movs	r2, #63	; 0x3f
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	f010803f 	.word	0xf010803f

08002b9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002ba8:	4b8e      	ldr	r3, [pc, #568]	; (8002de4 <HAL_DMA_IRQHandler+0x248>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a8e      	ldr	r2, [pc, #568]	; (8002de8 <HAL_DMA_IRQHandler+0x24c>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	0a9b      	lsrs	r3, r3, #10
 8002bb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d01a      	beq.n	8002c08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d013      	beq.n	8002c08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0204 	bic.w	r2, r2, #4
 8002bee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c00:	f043 0201 	orr.w	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d012      	beq.n	8002c3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00b      	beq.n	8002c3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	f043 0202 	orr.w	r2, r3, #2
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c42:	2204      	movs	r2, #4
 8002c44:	409a      	lsls	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d012      	beq.n	8002c74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00b      	beq.n	8002c74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	2204      	movs	r2, #4
 8002c62:	409a      	lsls	r2, r3
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	f043 0204 	orr.w	r2, r3, #4
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c78:	2210      	movs	r2, #16
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d043      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d03c      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c96:	2210      	movs	r2, #16
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d018      	beq.n	8002cde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d108      	bne.n	8002ccc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d024      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
 8002cca:	e01f      	b.n	8002d0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01b      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	4798      	blx	r3
 8002cdc:	e016      	b.n	8002d0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d107      	bne.n	8002cfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0208 	bic.w	r2, r2, #8
 8002cfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	2220      	movs	r2, #32
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 808f 	beq.w	8002e3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8087 	beq.w	8002e3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	2220      	movs	r2, #32
 8002d34:	409a      	lsls	r2, r3
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b05      	cmp	r3, #5
 8002d44:	d136      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0216 	bic.w	r2, r2, #22
 8002d54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d103      	bne.n	8002d76 <HAL_DMA_IRQHandler+0x1da>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0208 	bic.w	r2, r2, #8
 8002d84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8a:	223f      	movs	r2, #63	; 0x3f
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d07e      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
        }
        return;
 8002db2:	e079      	b.n	8002ea8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d01d      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10d      	bne.n	8002dec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d031      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4798      	blx	r3
 8002de0:	e02c      	b.n	8002e3c <HAL_DMA_IRQHandler+0x2a0>
 8002de2:	bf00      	nop
 8002de4:	20000000 	.word	0x20000000
 8002de8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d023      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
 8002dfc:	e01e      	b.n	8002e3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10f      	bne.n	8002e2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0210 	bic.w	r2, r2, #16
 8002e1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d032      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d022      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2205      	movs	r2, #5
 8002e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d307      	bcc.n	8002e84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f2      	bne.n	8002e68 <HAL_DMA_IRQHandler+0x2cc>
 8002e82:	e000      	b.n	8002e86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
 8002ea6:	e000      	b.n	8002eaa <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ea8:	bf00      	nop
    }
  }
}
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	3b10      	subs	r3, #16
 8002ec0:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <DMA_CalcBaseAndBitshift+0x60>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eca:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <DMA_CalcBaseAndBitshift+0x64>)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d908      	bls.n	8002ef0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <DMA_CalcBaseAndBitshift+0x68>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	1d1a      	adds	r2, r3, #4
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	659a      	str	r2, [r3, #88]	; 0x58
 8002eee:	e006      	b.n	8002efe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <DMA_CalcBaseAndBitshift+0x68>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	aaaaaaab 	.word	0xaaaaaaab
 8002f14:	0800975c 	.word	0x0800975c
 8002f18:	fffffc00 	.word	0xfffffc00

08002f1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d11f      	bne.n	8002f76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d856      	bhi.n	8002fea <DMA_CheckFifoParam+0xce>
 8002f3c:	a201      	add	r2, pc, #4	; (adr r2, 8002f44 <DMA_CheckFifoParam+0x28>)
 8002f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f42:	bf00      	nop
 8002f44:	08002f55 	.word	0x08002f55
 8002f48:	08002f67 	.word	0x08002f67
 8002f4c:	08002f55 	.word	0x08002f55
 8002f50:	08002feb 	.word	0x08002feb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d046      	beq.n	8002fee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f64:	e043      	b.n	8002fee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f6e:	d140      	bne.n	8002ff2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f74:	e03d      	b.n	8002ff2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f7e:	d121      	bne.n	8002fc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d837      	bhi.n	8002ff6 <DMA_CheckFifoParam+0xda>
 8002f86:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <DMA_CheckFifoParam+0x70>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08002f9d 	.word	0x08002f9d
 8002f90:	08002fa3 	.word	0x08002fa3
 8002f94:	08002f9d 	.word	0x08002f9d
 8002f98:	08002fb5 	.word	0x08002fb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa0:	e030      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d025      	beq.n	8002ffa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb2:	e022      	b.n	8002ffa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fbc:	d11f      	bne.n	8002ffe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fc2:	e01c      	b.n	8002ffe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d903      	bls.n	8002fd2 <DMA_CheckFifoParam+0xb6>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d003      	beq.n	8002fd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fd0:	e018      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd6:	e015      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00e      	beq.n	8003002 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe8:	e00b      	b.n	8003002 <DMA_CheckFifoParam+0xe6>
      break;
 8002fea:	bf00      	nop
 8002fec:	e00a      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e008      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      break;
 8002ff2:	bf00      	nop
 8002ff4:	e006      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      break;
 8002ff6:	bf00      	nop
 8002ff8:	e004      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e002      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      break;
 8003002:	bf00      	nop
    }
  } 
  
  return status; 
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop

08003014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	; 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003026:	2300      	movs	r3, #0
 8003028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	e175      	b.n	8003320 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003034:	2201      	movs	r2, #1
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	429a      	cmp	r2, r3
 800304e:	f040 8164 	bne.w	800331a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b01      	cmp	r3, #1
 800305c:	d005      	beq.n	800306a <HAL_GPIO_Init+0x56>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d130      	bne.n	80030cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	2203      	movs	r2, #3
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030a0:	2201      	movs	r2, #1
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 0201 	and.w	r2, r3, #1
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d017      	beq.n	8003108 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	2203      	movs	r2, #3
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d123      	bne.n	800315c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	08da      	lsrs	r2, r3, #3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3208      	adds	r2, #8
 800311c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	220f      	movs	r2, #15
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	08da      	lsrs	r2, r3, #3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3208      	adds	r2, #8
 8003156:	69b9      	ldr	r1, [r7, #24]
 8003158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	2203      	movs	r2, #3
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0203 	and.w	r2, r3, #3
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80be 	beq.w	800331a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319e:	4b66      	ldr	r3, [pc, #408]	; (8003338 <HAL_GPIO_Init+0x324>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	4a65      	ldr	r2, [pc, #404]	; (8003338 <HAL_GPIO_Init+0x324>)
 80031a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a8:	6453      	str	r3, [r2, #68]	; 0x44
 80031aa:	4b63      	ldr	r3, [pc, #396]	; (8003338 <HAL_GPIO_Init+0x324>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031b6:	4a61      	ldr	r2, [pc, #388]	; (800333c <HAL_GPIO_Init+0x328>)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	3302      	adds	r3, #2
 80031be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	220f      	movs	r2, #15
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a58      	ldr	r2, [pc, #352]	; (8003340 <HAL_GPIO_Init+0x32c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d037      	beq.n	8003252 <HAL_GPIO_Init+0x23e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a57      	ldr	r2, [pc, #348]	; (8003344 <HAL_GPIO_Init+0x330>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d031      	beq.n	800324e <HAL_GPIO_Init+0x23a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a56      	ldr	r2, [pc, #344]	; (8003348 <HAL_GPIO_Init+0x334>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d02b      	beq.n	800324a <HAL_GPIO_Init+0x236>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a55      	ldr	r2, [pc, #340]	; (800334c <HAL_GPIO_Init+0x338>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d025      	beq.n	8003246 <HAL_GPIO_Init+0x232>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a54      	ldr	r2, [pc, #336]	; (8003350 <HAL_GPIO_Init+0x33c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01f      	beq.n	8003242 <HAL_GPIO_Init+0x22e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a53      	ldr	r2, [pc, #332]	; (8003354 <HAL_GPIO_Init+0x340>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d019      	beq.n	800323e <HAL_GPIO_Init+0x22a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a52      	ldr	r2, [pc, #328]	; (8003358 <HAL_GPIO_Init+0x344>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d013      	beq.n	800323a <HAL_GPIO_Init+0x226>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a51      	ldr	r2, [pc, #324]	; (800335c <HAL_GPIO_Init+0x348>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00d      	beq.n	8003236 <HAL_GPIO_Init+0x222>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a50      	ldr	r2, [pc, #320]	; (8003360 <HAL_GPIO_Init+0x34c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <HAL_GPIO_Init+0x21e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a4f      	ldr	r2, [pc, #316]	; (8003364 <HAL_GPIO_Init+0x350>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d101      	bne.n	800322e <HAL_GPIO_Init+0x21a>
 800322a:	2309      	movs	r3, #9
 800322c:	e012      	b.n	8003254 <HAL_GPIO_Init+0x240>
 800322e:	230a      	movs	r3, #10
 8003230:	e010      	b.n	8003254 <HAL_GPIO_Init+0x240>
 8003232:	2308      	movs	r3, #8
 8003234:	e00e      	b.n	8003254 <HAL_GPIO_Init+0x240>
 8003236:	2307      	movs	r3, #7
 8003238:	e00c      	b.n	8003254 <HAL_GPIO_Init+0x240>
 800323a:	2306      	movs	r3, #6
 800323c:	e00a      	b.n	8003254 <HAL_GPIO_Init+0x240>
 800323e:	2305      	movs	r3, #5
 8003240:	e008      	b.n	8003254 <HAL_GPIO_Init+0x240>
 8003242:	2304      	movs	r3, #4
 8003244:	e006      	b.n	8003254 <HAL_GPIO_Init+0x240>
 8003246:	2303      	movs	r3, #3
 8003248:	e004      	b.n	8003254 <HAL_GPIO_Init+0x240>
 800324a:	2302      	movs	r3, #2
 800324c:	e002      	b.n	8003254 <HAL_GPIO_Init+0x240>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_GPIO_Init+0x240>
 8003252:	2300      	movs	r3, #0
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	f002 0203 	and.w	r2, r2, #3
 800325a:	0092      	lsls	r2, r2, #2
 800325c:	4093      	lsls	r3, r2
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003264:	4935      	ldr	r1, [pc, #212]	; (800333c <HAL_GPIO_Init+0x328>)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	089b      	lsrs	r3, r3, #2
 800326a:	3302      	adds	r3, #2
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003272:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <HAL_GPIO_Init+0x354>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003296:	4a34      	ldr	r2, [pc, #208]	; (8003368 <HAL_GPIO_Init+0x354>)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800329c:	4b32      	ldr	r3, [pc, #200]	; (8003368 <HAL_GPIO_Init+0x354>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032c0:	4a29      	ldr	r2, [pc, #164]	; (8003368 <HAL_GPIO_Init+0x354>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032c6:	4b28      	ldr	r3, [pc, #160]	; (8003368 <HAL_GPIO_Init+0x354>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4013      	ands	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ea:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <HAL_GPIO_Init+0x354>)
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032f0:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_GPIO_Init+0x354>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003314:	4a14      	ldr	r2, [pc, #80]	; (8003368 <HAL_GPIO_Init+0x354>)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3301      	adds	r3, #1
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b0f      	cmp	r3, #15
 8003324:	f67f ae86 	bls.w	8003034 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	3724      	adds	r7, #36	; 0x24
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800
 800333c:	40013800 	.word	0x40013800
 8003340:	40020000 	.word	0x40020000
 8003344:	40020400 	.word	0x40020400
 8003348:	40020800 	.word	0x40020800
 800334c:	40020c00 	.word	0x40020c00
 8003350:	40021000 	.word	0x40021000
 8003354:	40021400 	.word	0x40021400
 8003358:	40021800 	.word	0x40021800
 800335c:	40021c00 	.word	0x40021c00
 8003360:	40022000 	.word	0x40022000
 8003364:	40022400 	.word	0x40022400
 8003368:	40013c00 	.word	0x40013c00

0800336c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	807b      	strh	r3, [r7, #2]
 8003378:	4613      	mov	r3, r2
 800337a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800337c:	787b      	ldrb	r3, [r7, #1]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003382:	887a      	ldrh	r2, [r7, #2]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003388:	e003      	b.n	8003392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800338a:	887b      	ldrh	r3, [r7, #2]
 800338c:	041a      	lsls	r2, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	619a      	str	r2, [r3, #24]
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d006      	beq.n	80033c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033b6:	4a05      	ldr	r2, [pc, #20]	; (80033cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f806 	bl	80033d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40013c00 	.word	0x40013c00

080033d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033e8:	b08f      	sub	sp, #60	; 0x3c
 80033ea:	af0a      	add	r7, sp, #40	; 0x28
 80033ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e116      	b.n	8003626 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fe fa72 	bl	80018fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2203      	movs	r2, #3
 800341c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f003 f862 	bl	8006500 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	603b      	str	r3, [r7, #0]
 8003442:	687e      	ldr	r6, [r7, #4]
 8003444:	466d      	mov	r5, sp
 8003446:	f106 0410 	add.w	r4, r6, #16
 800344a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800344c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800344e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003452:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003456:	e885 0003 	stmia.w	r5, {r0, r1}
 800345a:	1d33      	adds	r3, r6, #4
 800345c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800345e:	6838      	ldr	r0, [r7, #0]
 8003460:	f002 fff6 	bl	8006450 <USB_CoreInit>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2202      	movs	r2, #2
 800346e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e0d7      	b.n	8003626 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2100      	movs	r1, #0
 800347c:	4618      	mov	r0, r3
 800347e:	f003 f850 	bl	8006522 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003482:	2300      	movs	r3, #0
 8003484:	73fb      	strb	r3, [r7, #15]
 8003486:	e04a      	b.n	800351e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003488:	7bfa      	ldrb	r2, [r7, #15]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	333d      	adds	r3, #61	; 0x3d
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	333c      	adds	r3, #60	; 0x3c
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034b0:	7bfa      	ldrb	r2, [r7, #15]
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	b298      	uxth	r0, r3
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	3344      	adds	r3, #68	; 0x44
 80034c4:	4602      	mov	r2, r0
 80034c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	3340      	adds	r3, #64	; 0x40
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	3348      	adds	r3, #72	; 0x48
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	334c      	adds	r3, #76	; 0x4c
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3354      	adds	r3, #84	; 0x54
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	3301      	adds	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
 800351e:	7bfa      	ldrb	r2, [r7, #15]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	429a      	cmp	r2, r3
 8003526:	d3af      	bcc.n	8003488 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	e044      	b.n	80035b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800352e:	7bfa      	ldrb	r2, [r7, #15]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003556:	7bfa      	ldrb	r2, [r7, #15]
 8003558:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	3301      	adds	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d3b5      	bcc.n	800352e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	687e      	ldr	r6, [r7, #4]
 80035ca:	466d      	mov	r5, sp
 80035cc:	f106 0410 	add.w	r4, r6, #16
 80035d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80035e0:	1d33      	adds	r3, r6, #4
 80035e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035e4:	6838      	ldr	r0, [r7, #0]
 80035e6:	f002 ffe9 	bl	80065bc <USB_DevInit>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e014      	b.n	8003626 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	2b01      	cmp	r3, #1
 8003612:	d102      	bne.n	800361a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f80b 	bl	8003630 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f003 f9a7 	bl	8006972 <USB_DevDisconnect>

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003630 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_PCDEx_ActivateLPM+0x44>)
 8003660:	4313      	orrs	r3, r2
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	10000003 	.word	0x10000003

08003678 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a04      	ldr	r2, [pc, #16]	; (8003694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003686:	6013      	str	r3, [r2, #0]
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40007000 	.word	0x40007000

08003698 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80036a0:	2300      	movs	r3, #0
 80036a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e291      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8087 	beq.w	80037ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036bc:	4b96      	ldr	r3, [pc, #600]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d00c      	beq.n	80036e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036c8:	4b93      	ldr	r3, [pc, #588]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d112      	bne.n	80036fa <HAL_RCC_OscConfig+0x62>
 80036d4:	4b90      	ldr	r3, [pc, #576]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e0:	d10b      	bne.n	80036fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e2:	4b8d      	ldr	r3, [pc, #564]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d06c      	beq.n	80037c8 <HAL_RCC_OscConfig+0x130>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d168      	bne.n	80037c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e26b      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003702:	d106      	bne.n	8003712 <HAL_RCC_OscConfig+0x7a>
 8003704:	4b84      	ldr	r3, [pc, #528]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a83      	ldr	r2, [pc, #524]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 800370a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	e02e      	b.n	8003770 <HAL_RCC_OscConfig+0xd8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x9c>
 800371a:	4b7f      	ldr	r3, [pc, #508]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a7e      	ldr	r2, [pc, #504]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 8003720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	4b7c      	ldr	r3, [pc, #496]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a7b      	ldr	r2, [pc, #492]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 800372c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e01d      	b.n	8003770 <HAL_RCC_OscConfig+0xd8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800373c:	d10c      	bne.n	8003758 <HAL_RCC_OscConfig+0xc0>
 800373e:	4b76      	ldr	r3, [pc, #472]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a75      	ldr	r2, [pc, #468]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 8003744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	4b73      	ldr	r3, [pc, #460]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a72      	ldr	r2, [pc, #456]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e00b      	b.n	8003770 <HAL_RCC_OscConfig+0xd8>
 8003758:	4b6f      	ldr	r3, [pc, #444]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a6e      	ldr	r2, [pc, #440]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 800375e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	4b6c      	ldr	r3, [pc, #432]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a6b      	ldr	r2, [pc, #428]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 800376a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800376e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d013      	beq.n	80037a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fe faee 	bl	8001d58 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003780:	f7fe faea 	bl	8001d58 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	; 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e21f      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b61      	ldr	r3, [pc, #388]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0xe8>
 800379e:	e014      	b.n	80037ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fe fada 	bl	8001d58 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fe fad6 	bl	8001d58 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e20b      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ba:	4b57      	ldr	r3, [pc, #348]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x110>
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d069      	beq.n	80038aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037d6:	4b50      	ldr	r3, [pc, #320]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00b      	beq.n	80037fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037e2:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d11c      	bne.n	8003828 <HAL_RCC_OscConfig+0x190>
 80037ee:	4b4a      	ldr	r3, [pc, #296]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d116      	bne.n	8003828 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fa:	4b47      	ldr	r3, [pc, #284]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_RCC_OscConfig+0x17a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d001      	beq.n	8003812 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e1df      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003812:	4b41      	ldr	r3, [pc, #260]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	493d      	ldr	r1, [pc, #244]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003826:	e040      	b.n	80038aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d023      	beq.n	8003878 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003830:	4b39      	ldr	r3, [pc, #228]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a38      	ldr	r2, [pc, #224]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe fa8c 	bl	8001d58 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003844:	f7fe fa88 	bl	8001d58 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e1bd      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003856:	4b30      	ldr	r3, [pc, #192]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003862:	4b2d      	ldr	r3, [pc, #180]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4929      	ldr	r1, [pc, #164]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]
 8003876:	e018      	b.n	80038aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003878:	4b27      	ldr	r3, [pc, #156]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a26      	ldr	r2, [pc, #152]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 800387e:	f023 0301 	bic.w	r3, r3, #1
 8003882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fe fa68 	bl	8001d58 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388c:	f7fe fa64 	bl	8001d58 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e199      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d038      	beq.n	8003928 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d019      	beq.n	80038f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038be:	4b16      	ldr	r3, [pc, #88]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 80038c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c2:	4a15      	ldr	r2, [pc, #84]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ca:	f7fe fa45 	bl	8001d58 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d2:	f7fe fa41 	bl	8001d58 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e176      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 80038e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0x23a>
 80038f0:	e01a      	b.n	8003928 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f2:	4b09      	ldr	r3, [pc, #36]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 80038f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f6:	4a08      	ldr	r2, [pc, #32]	; (8003918 <HAL_RCC_OscConfig+0x280>)
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fe:	f7fe fa2b 	bl	8001d58 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003904:	e00a      	b.n	800391c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003906:	f7fe fa27 	bl	8001d58 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d903      	bls.n	800391c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e15c      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>
 8003918:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800391c:	4b91      	ldr	r3, [pc, #580]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 800391e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1ee      	bne.n	8003906 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80a4 	beq.w	8003a7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003936:	4b8b      	ldr	r3, [pc, #556]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10d      	bne.n	800395e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003942:	4b88      	ldr	r3, [pc, #544]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	4a87      	ldr	r2, [pc, #540]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394c:	6413      	str	r3, [r2, #64]	; 0x40
 800394e:	4b85      	ldr	r3, [pc, #532]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800395a:	2301      	movs	r3, #1
 800395c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800395e:	4b82      	ldr	r3, [pc, #520]	; (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003966:	2b00      	cmp	r3, #0
 8003968:	d118      	bne.n	800399c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800396a:	4b7f      	ldr	r3, [pc, #508]	; (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a7e      	ldr	r2, [pc, #504]	; (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003976:	f7fe f9ef 	bl	8001d58 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397e:	f7fe f9eb 	bl	8001d58 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b64      	cmp	r3, #100	; 0x64
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e120      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003990:	4b75      	ldr	r3, [pc, #468]	; (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d106      	bne.n	80039b2 <HAL_RCC_OscConfig+0x31a>
 80039a4:	4b6f      	ldr	r3, [pc, #444]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	4a6e      	ldr	r2, [pc, #440]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6713      	str	r3, [r2, #112]	; 0x70
 80039b0:	e02d      	b.n	8003a0e <HAL_RCC_OscConfig+0x376>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x33c>
 80039ba:	4b6a      	ldr	r3, [pc, #424]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039be:	4a69      	ldr	r2, [pc, #420]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	6713      	str	r3, [r2, #112]	; 0x70
 80039c6:	4b67      	ldr	r3, [pc, #412]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	4a66      	ldr	r2, [pc, #408]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 80039cc:	f023 0304 	bic.w	r3, r3, #4
 80039d0:	6713      	str	r3, [r2, #112]	; 0x70
 80039d2:	e01c      	b.n	8003a0e <HAL_RCC_OscConfig+0x376>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b05      	cmp	r3, #5
 80039da:	d10c      	bne.n	80039f6 <HAL_RCC_OscConfig+0x35e>
 80039dc:	4b61      	ldr	r3, [pc, #388]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e0:	4a60      	ldr	r2, [pc, #384]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 80039e2:	f043 0304 	orr.w	r3, r3, #4
 80039e6:	6713      	str	r3, [r2, #112]	; 0x70
 80039e8:	4b5e      	ldr	r3, [pc, #376]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	4a5d      	ldr	r2, [pc, #372]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6713      	str	r3, [r2, #112]	; 0x70
 80039f4:	e00b      	b.n	8003a0e <HAL_RCC_OscConfig+0x376>
 80039f6:	4b5b      	ldr	r3, [pc, #364]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	4a5a      	ldr	r2, [pc, #360]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	6713      	str	r3, [r2, #112]	; 0x70
 8003a02:	4b58      	ldr	r3, [pc, #352]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	4a57      	ldr	r2, [pc, #348]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003a08:	f023 0304 	bic.w	r3, r3, #4
 8003a0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d015      	beq.n	8003a42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a16:	f7fe f99f 	bl	8001d58 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1c:	e00a      	b.n	8003a34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1e:	f7fe f99b 	bl	8001d58 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e0ce      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	4b4b      	ldr	r3, [pc, #300]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ee      	beq.n	8003a1e <HAL_RCC_OscConfig+0x386>
 8003a40:	e014      	b.n	8003a6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a42:	f7fe f989 	bl	8001d58 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7fe f985 	bl	8001d58 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e0b8      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a60:	4b40      	ldr	r3, [pc, #256]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1ee      	bne.n	8003a4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d105      	bne.n	8003a7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a72:	4b3c      	ldr	r3, [pc, #240]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	4a3b      	ldr	r2, [pc, #236]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80a4 	beq.w	8003bd0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a88:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d06b      	beq.n	8003b6c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d149      	bne.n	8003b30 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9c:	4b31      	ldr	r3, [pc, #196]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a30      	ldr	r2, [pc, #192]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fe f956 	bl	8001d58 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fe f952 	bl	8001d58 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e087      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac2:	4b28      	ldr	r3, [pc, #160]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69da      	ldr	r2, [r3, #28]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	019b      	lsls	r3, r3, #6
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	041b      	lsls	r3, r3, #16
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	4313      	orrs	r3, r2
 8003af4:	4a1b      	ldr	r2, [pc, #108]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003af6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003afa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003afc:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fe f926 	bl	8001d58 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fe f922 	bl	8001d58 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e057      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x478>
 8003b2e:	e04f      	b.n	8003bd0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fe f90c 	bl	8001d58 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fe f908 	bl	8001d58 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e03d      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b56:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <HAL_RCC_OscConfig+0x4cc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x4ac>
 8003b62:	e035      	b.n	8003bd0 <HAL_RCC_OscConfig+0x538>
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <HAL_RCC_OscConfig+0x544>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d028      	beq.n	8003bcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d121      	bne.n	8003bcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d11a      	bne.n	8003bcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ba2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d111      	bne.n	8003bcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d107      	bne.n	8003bcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800

08003be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0d0      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf8:	4b6a      	ldr	r3, [pc, #424]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d910      	bls.n	8003c28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	4b67      	ldr	r3, [pc, #412]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 020f 	bic.w	r2, r3, #15
 8003c0e:	4965      	ldr	r1, [pc, #404]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b63      	ldr	r3, [pc, #396]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0b8      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c40:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a58      	ldr	r2, [pc, #352]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c58:	4b53      	ldr	r3, [pc, #332]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4a52      	ldr	r2, [pc, #328]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	4b50      	ldr	r3, [pc, #320]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	494d      	ldr	r1, [pc, #308]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d040      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d115      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e07f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d107      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca2:	4b41      	ldr	r3, [pc, #260]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e073      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb2:	4b3d      	ldr	r3, [pc, #244]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e06b      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cc2:	4b39      	ldr	r3, [pc, #228]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f023 0203 	bic.w	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4936      	ldr	r1, [pc, #216]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd4:	f7fe f840 	bl	8001d58 <HAL_GetTick>
 8003cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cdc:	f7fe f83c 	bl	8001d58 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e053      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf2:	4b2d      	ldr	r3, [pc, #180]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 020c 	and.w	r2, r3, #12
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d1eb      	bne.n	8003cdc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d04:	4b27      	ldr	r3, [pc, #156]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d210      	bcs.n	8003d34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b24      	ldr	r3, [pc, #144]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 020f 	bic.w	r2, r3, #15
 8003d1a:	4922      	ldr	r1, [pc, #136]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e032      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4916      	ldr	r1, [pc, #88]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	490e      	ldr	r1, [pc, #56]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d72:	f000 f821 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8003d76:	4602      	mov	r2, r0
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	490a      	ldr	r1, [pc, #40]	; (8003dac <HAL_RCC_ClockConfig+0x1cc>)
 8003d84:	5ccb      	ldrb	r3, [r1, r3]
 8003d86:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8a:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <HAL_RCC_ClockConfig+0x1d0>)
 8003d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCC_ClockConfig+0x1d4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fd ff9c 	bl	8001cd0 <HAL_InitTick>

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023c00 	.word	0x40023c00
 8003da8:	40023800 	.word	0x40023800
 8003dac:	08009744 	.word	0x08009744
 8003db0:	20000000 	.word	0x20000000
 8003db4:	20000004 	.word	0x20000004

08003db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dbc:	b094      	sub	sp, #80	; 0x50
 8003dbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc8:	2300      	movs	r3, #0
 8003dca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd0:	4b79      	ldr	r3, [pc, #484]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d00d      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	f200 80e1 	bhi.w	8003fa4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0x34>
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d003      	beq.n	8003df2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dea:	e0db      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dec:	4b73      	ldr	r3, [pc, #460]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x204>)
 8003dee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003df0:	e0db      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003df2:	4b73      	ldr	r3, [pc, #460]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003df4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003df6:	e0d8      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003df8:	4b6f      	ldr	r3, [pc, #444]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e00:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e02:	4b6d      	ldr	r3, [pc, #436]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d063      	beq.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e0e:	4b6a      	ldr	r3, [pc, #424]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	099b      	lsrs	r3, r3, #6
 8003e14:	2200      	movs	r2, #0
 8003e16:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e20:	633b      	str	r3, [r7, #48]	; 0x30
 8003e22:	2300      	movs	r3, #0
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
 8003e26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e2a:	4622      	mov	r2, r4
 8003e2c:	462b      	mov	r3, r5
 8003e2e:	f04f 0000 	mov.w	r0, #0
 8003e32:	f04f 0100 	mov.w	r1, #0
 8003e36:	0159      	lsls	r1, r3, #5
 8003e38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e3c:	0150      	lsls	r0, r2, #5
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4621      	mov	r1, r4
 8003e44:	1a51      	subs	r1, r2, r1
 8003e46:	6139      	str	r1, [r7, #16]
 8003e48:	4629      	mov	r1, r5
 8003e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e5c:	4659      	mov	r1, fp
 8003e5e:	018b      	lsls	r3, r1, #6
 8003e60:	4651      	mov	r1, sl
 8003e62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e66:	4651      	mov	r1, sl
 8003e68:	018a      	lsls	r2, r1, #6
 8003e6a:	4651      	mov	r1, sl
 8003e6c:	ebb2 0801 	subs.w	r8, r2, r1
 8003e70:	4659      	mov	r1, fp
 8003e72:	eb63 0901 	sbc.w	r9, r3, r1
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e8a:	4690      	mov	r8, r2
 8003e8c:	4699      	mov	r9, r3
 8003e8e:	4623      	mov	r3, r4
 8003e90:	eb18 0303 	adds.w	r3, r8, r3
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	462b      	mov	r3, r5
 8003e98:	eb49 0303 	adc.w	r3, r9, r3
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eaa:	4629      	mov	r1, r5
 8003eac:	024b      	lsls	r3, r1, #9
 8003eae:	4621      	mov	r1, r4
 8003eb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	024a      	lsls	r2, r1, #9
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ec2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ec4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ec8:	f7fc fe8e 	bl	8000be8 <__aeabi_uldivmod>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed4:	e058      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed6:	4b38      	ldr	r3, [pc, #224]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	099b      	lsrs	r3, r3, #6
 8003edc:	2200      	movs	r2, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ee6:	623b      	str	r3, [r7, #32]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
 8003eec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ef0:	4642      	mov	r2, r8
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	f04f 0000 	mov.w	r0, #0
 8003ef8:	f04f 0100 	mov.w	r1, #0
 8003efc:	0159      	lsls	r1, r3, #5
 8003efe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f02:	0150      	lsls	r0, r2, #5
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4641      	mov	r1, r8
 8003f0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f0e:	4649      	mov	r1, r9
 8003f10:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f28:	ebb2 040a 	subs.w	r4, r2, sl
 8003f2c:	eb63 050b 	sbc.w	r5, r3, fp
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	00eb      	lsls	r3, r5, #3
 8003f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f3e:	00e2      	lsls	r2, r4, #3
 8003f40:	4614      	mov	r4, r2
 8003f42:	461d      	mov	r5, r3
 8003f44:	4643      	mov	r3, r8
 8003f46:	18e3      	adds	r3, r4, r3
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	eb45 0303 	adc.w	r3, r5, r3
 8003f50:	607b      	str	r3, [r7, #4]
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f5e:	4629      	mov	r1, r5
 8003f60:	028b      	lsls	r3, r1, #10
 8003f62:	4621      	mov	r1, r4
 8003f64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f68:	4621      	mov	r1, r4
 8003f6a:	028a      	lsls	r2, r1, #10
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f72:	2200      	movs	r2, #0
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	61fa      	str	r2, [r7, #28]
 8003f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f7c:	f7fc fe34 	bl	8000be8 <__aeabi_uldivmod>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4613      	mov	r3, r2
 8003f86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	0c1b      	lsrs	r3, r3, #16
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	3301      	adds	r3, #1
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003f98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fa2:	e002      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x204>)
 8003fa6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3750      	adds	r7, #80	; 0x50
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	00f42400 	.word	0x00f42400
 8003fc0:	007a1200 	.word	0x007a1200

08003fc4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fca:	681b      	ldr	r3, [r3, #0]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000000 	.word	0x20000000

08003fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fe0:	f7ff fff0 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	0a9b      	lsrs	r3, r3, #10
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	4903      	ldr	r1, [pc, #12]	; (8004000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ff2:	5ccb      	ldrb	r3, [r1, r3]
 8003ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40023800 	.word	0x40023800
 8004000:	08009754 	.word	0x08009754

08004004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004008:	f7ff ffdc 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 800400c:	4602      	mov	r2, r0
 800400e:	4b05      	ldr	r3, [pc, #20]	; (8004024 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	0b5b      	lsrs	r3, r3, #13
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	4903      	ldr	r1, [pc, #12]	; (8004028 <HAL_RCC_GetPCLK2Freq+0x24>)
 800401a:	5ccb      	ldrb	r3, [r1, r3]
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40023800 	.word	0x40023800
 8004028:	08009754 	.word	0x08009754

0800402c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d012      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004054:	4b69      	ldr	r3, [pc, #420]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a68      	ldr	r2, [pc, #416]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800405e:	6093      	str	r3, [r2, #8]
 8004060:	4b66      	ldr	r3, [pc, #408]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004068:	4964      	ldr	r1, [pc, #400]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406a:	4313      	orrs	r3, r2
 800406c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004076:	2301      	movs	r3, #1
 8004078:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d017      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004086:	4b5d      	ldr	r3, [pc, #372]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800408c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004094:	4959      	ldr	r1, [pc, #356]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040a4:	d101      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80040a6:	2301      	movs	r3, #1
 80040a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80040b2:	2301      	movs	r3, #1
 80040b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d017      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040c2:	4b4e      	ldr	r3, [pc, #312]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	494a      	ldr	r1, [pc, #296]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e0:	d101      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80040e2:	2301      	movs	r3, #1
 80040e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80040ee:	2301      	movs	r3, #1
 80040f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80040fe:	2301      	movs	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 808b 	beq.w	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004110:	4b3a      	ldr	r3, [pc, #232]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	4a39      	ldr	r2, [pc, #228]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411a:	6413      	str	r3, [r2, #64]	; 0x40
 800411c:	4b37      	ldr	r3, [pc, #220]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004128:	4b35      	ldr	r3, [pc, #212]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a34      	ldr	r2, [pc, #208]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800412e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004134:	f7fd fe10 	bl	8001d58 <HAL_GetTick>
 8004138:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413c:	f7fd fe0c 	bl	8001d58 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b64      	cmp	r3, #100	; 0x64
 8004148:	d901      	bls.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e357      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800414e:	4b2c      	ldr	r3, [pc, #176]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800415a:	4b28      	ldr	r3, [pc, #160]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004162:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d035      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	429a      	cmp	r2, r3
 8004176:	d02e      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004178:	4b20      	ldr	r3, [pc, #128]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004180:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004182:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800418e:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	4a1a      	ldr	r2, [pc, #104]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004198:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800419a:	4a18      	ldr	r2, [pc, #96]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041a0:	4b16      	ldr	r3, [pc, #88]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d114      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fd fdd4 	bl	8001d58 <HAL_GetTick>
 80041b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b2:	e00a      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b4:	f7fd fdd0 	bl	8001d58 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e319      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ca:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0ee      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041e2:	d111      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80041e4:	4b05      	ldr	r3, [pc, #20]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041f2:	400b      	ands	r3, r1
 80041f4:	4901      	ldr	r1, [pc, #4]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
 80041fa:	e00b      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041fc:	40023800 	.word	0x40023800
 8004200:	40007000 	.word	0x40007000
 8004204:	0ffffcff 	.word	0x0ffffcff
 8004208:	4baa      	ldr	r3, [pc, #680]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4aa9      	ldr	r2, [pc, #676]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004212:	6093      	str	r3, [r2, #8]
 8004214:	4ba7      	ldr	r3, [pc, #668]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004216:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004220:	49a4      	ldr	r1, [pc, #656]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004222:	4313      	orrs	r3, r2
 8004224:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	2b00      	cmp	r3, #0
 8004230:	d010      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004232:	4ba0      	ldr	r3, [pc, #640]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004238:	4a9e      	ldr	r2, [pc, #632]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800423a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800423e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004242:	4b9c      	ldr	r3, [pc, #624]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004244:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	4999      	ldr	r1, [pc, #612]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004260:	4b94      	ldr	r3, [pc, #592]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800426e:	4991      	ldr	r1, [pc, #580]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004282:	4b8c      	ldr	r3, [pc, #560]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004288:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004290:	4988      	ldr	r1, [pc, #544]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042a4:	4b83      	ldr	r3, [pc, #524]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b2:	4980      	ldr	r1, [pc, #512]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042c6:	4b7b      	ldr	r3, [pc, #492]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	4977      	ldr	r1, [pc, #476]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042e8:	4b72      	ldr	r3, [pc, #456]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f023 0203 	bic.w	r2, r3, #3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	496f      	ldr	r1, [pc, #444]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800430a:	4b6a      	ldr	r3, [pc, #424]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	f023 020c 	bic.w	r2, r3, #12
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004318:	4966      	ldr	r1, [pc, #408]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800432c:	4b61      	ldr	r3, [pc, #388]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433a:	495e      	ldr	r1, [pc, #376]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800434e:	4b59      	ldr	r3, [pc, #356]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004354:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435c:	4955      	ldr	r1, [pc, #340]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004370:	4b50      	ldr	r3, [pc, #320]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	494d      	ldr	r1, [pc, #308]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004392:	4b48      	ldr	r3, [pc, #288]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	4944      	ldr	r1, [pc, #272]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80043b4:	4b3f      	ldr	r3, [pc, #252]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c2:	493c      	ldr	r1, [pc, #240]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80043d6:	4b37      	ldr	r3, [pc, #220]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e4:	4933      	ldr	r1, [pc, #204]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043f8:	4b2e      	ldr	r3, [pc, #184]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004406:	492b      	ldr	r1, [pc, #172]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d011      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800441a:	4b26      	ldr	r3, [pc, #152]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800441c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004420:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004428:	4922      	ldr	r1, [pc, #136]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004438:	d101      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800443a:	2301      	movs	r3, #1
 800443c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800444a:	2301      	movs	r3, #1
 800444c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800445a:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004468:	4912      	ldr	r1, [pc, #72]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00b      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800447c:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800448c:	4909      	ldr	r1, [pc, #36]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d006      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 80d9 	beq.w	800465a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044a8:	4b02      	ldr	r3, [pc, #8]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a01      	ldr	r2, [pc, #4]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044b2:	e001      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80044b4:	40023800 	.word	0x40023800
 80044b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ba:	f7fd fc4d 	bl	8001d58 <HAL_GetTick>
 80044be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044c2:	f7fd fc49 	bl	8001d58 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b64      	cmp	r3, #100	; 0x64
 80044ce:	d901      	bls.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e194      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044d4:	4b6c      	ldr	r3, [pc, #432]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f0      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d021      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11d      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044f4:	4b64      	ldr	r3, [pc, #400]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fa:	0c1b      	lsrs	r3, r3, #16
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004502:	4b61      	ldr	r3, [pc, #388]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004508:	0e1b      	lsrs	r3, r3, #24
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	019a      	lsls	r2, r3, #6
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	431a      	orrs	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	061b      	lsls	r3, r3, #24
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	071b      	lsls	r3, r3, #28
 8004528:	4957      	ldr	r1, [pc, #348]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d004      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004544:	d00a      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800454e:	2b00      	cmp	r3, #0
 8004550:	d02e      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800455a:	d129      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800455c:	4b4a      	ldr	r3, [pc, #296]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800455e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004562:	0c1b      	lsrs	r3, r3, #16
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800456a:	4b47      	ldr	r3, [pc, #284]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800456c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004570:	0f1b      	lsrs	r3, r3, #28
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	019a      	lsls	r2, r3, #6
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	041b      	lsls	r3, r3, #16
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	431a      	orrs	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	071b      	lsls	r3, r3, #28
 8004590:	493d      	ldr	r1, [pc, #244]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004598:	4b3b      	ldr	r3, [pc, #236]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800459a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800459e:	f023 021f 	bic.w	r2, r3, #31
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	3b01      	subs	r3, #1
 80045a8:	4937      	ldr	r1, [pc, #220]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01d      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045bc:	4b32      	ldr	r3, [pc, #200]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c2:	0e1b      	lsrs	r3, r3, #24
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045ca:	4b2f      	ldr	r3, [pc, #188]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d0:	0f1b      	lsrs	r3, r3, #28
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	019a      	lsls	r2, r3, #6
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	041b      	lsls	r3, r3, #16
 80045e4:	431a      	orrs	r2, r3
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	061b      	lsls	r3, r3, #24
 80045ea:	431a      	orrs	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	071b      	lsls	r3, r3, #28
 80045f0:	4925      	ldr	r1, [pc, #148]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d011      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	019a      	lsls	r2, r3, #6
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	041b      	lsls	r3, r3, #16
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	061b      	lsls	r3, r3, #24
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	071b      	lsls	r3, r3, #28
 8004620:	4919      	ldr	r1, [pc, #100]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004628:	4b17      	ldr	r3, [pc, #92]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a16      	ldr	r2, [pc, #88]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800462e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004634:	f7fd fb90 	bl	8001d58 <HAL_GetTick>
 8004638:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800463a:	e008      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800463c:	f7fd fb8c 	bl	8001d58 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	; 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e0d7      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800464e:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b01      	cmp	r3, #1
 800465e:	f040 80cd 	bne.w	80047fc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004662:	4b09      	ldr	r3, [pc, #36]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a08      	ldr	r2, [pc, #32]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800466c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800466e:	f7fd fb73 	bl	8001d58 <HAL_GetTick>
 8004672:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004674:	e00a      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004676:	f7fd fb6f 	bl	8001d58 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b64      	cmp	r3, #100	; 0x64
 8004682:	d903      	bls.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e0ba      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004688:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800468c:	4b5e      	ldr	r3, [pc, #376]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004698:	d0ed      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x682>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d02e      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d12a      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046c2:	4b51      	ldr	r3, [pc, #324]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c8:	0c1b      	lsrs	r3, r3, #16
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046d0:	4b4d      	ldr	r3, [pc, #308]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d6:	0f1b      	lsrs	r3, r3, #28
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	019a      	lsls	r2, r3, #6
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	041b      	lsls	r3, r3, #16
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	061b      	lsls	r3, r3, #24
 80046f0:	431a      	orrs	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	071b      	lsls	r3, r3, #28
 80046f6:	4944      	ldr	r1, [pc, #272]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046fe:	4b42      	ldr	r3, [pc, #264]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004704:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	3b01      	subs	r3, #1
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	493d      	ldr	r1, [pc, #244]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d022      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004728:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800472c:	d11d      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800472e:	4b36      	ldr	r3, [pc, #216]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004734:	0e1b      	lsrs	r3, r3, #24
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800473c:	4b32      	ldr	r3, [pc, #200]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800473e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004742:	0f1b      	lsrs	r3, r3, #28
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	019a      	lsls	r2, r3, #6
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	041b      	lsls	r3, r3, #16
 8004756:	431a      	orrs	r2, r3
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	061b      	lsls	r3, r3, #24
 800475c:	431a      	orrs	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	071b      	lsls	r3, r3, #28
 8004762:	4929      	ldr	r1, [pc, #164]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d028      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004776:	4b24      	ldr	r3, [pc, #144]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	0e1b      	lsrs	r3, r3, #24
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004784:	4b20      	ldr	r3, [pc, #128]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478a:	0c1b      	lsrs	r3, r3, #16
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	019a      	lsls	r2, r3, #6
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	041b      	lsls	r3, r3, #16
 800479c:	431a      	orrs	r2, r3
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	061b      	lsls	r3, r3, #24
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	071b      	lsls	r3, r3, #28
 80047aa:	4917      	ldr	r1, [pc, #92]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	4911      	ldr	r1, [pc, #68]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047c8:	4b0f      	ldr	r3, [pc, #60]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a0e      	ldr	r2, [pc, #56]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d4:	f7fd fac0 	bl	8001d58 <HAL_GetTick>
 80047d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047dc:	f7fd fabc 	bl	8001d58 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	; 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e007      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047ee:	4b06      	ldr	r3, [pc, #24]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047fa:	d1ef      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800

0800480c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e049      	b.n	80048b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fc ff56 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4610      	mov	r0, r2
 800484c:	f000 fcc0 	bl	80051d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e049      	b.n	8004960 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d106      	bne.n	80048e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f841 	bl	8004968 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3304      	adds	r3, #4
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f000 fc69 	bl	80051d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <HAL_TIM_PWM_Start+0x24>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	e03c      	b.n	8004a1a <HAL_TIM_PWM_Start+0x9e>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d109      	bne.n	80049ba <HAL_TIM_PWM_Start+0x3e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	bf14      	ite	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	2300      	moveq	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	e02f      	b.n	8004a1a <HAL_TIM_PWM_Start+0x9e>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d109      	bne.n	80049d4 <HAL_TIM_PWM_Start+0x58>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e022      	b.n	8004a1a <HAL_TIM_PWM_Start+0x9e>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d109      	bne.n	80049ee <HAL_TIM_PWM_Start+0x72>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	bf14      	ite	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	2300      	moveq	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	e015      	b.n	8004a1a <HAL_TIM_PWM_Start+0x9e>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b10      	cmp	r3, #16
 80049f2:	d109      	bne.n	8004a08 <HAL_TIM_PWM_Start+0x8c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	bf14      	ite	ne
 8004a00:	2301      	movne	r3, #1
 8004a02:	2300      	moveq	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	e008      	b.n	8004a1a <HAL_TIM_PWM_Start+0x9e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	bf14      	ite	ne
 8004a14:	2301      	movne	r3, #1
 8004a16:	2300      	moveq	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e092      	b.n	8004b48 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_PWM_Start+0xb6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a30:	e023      	b.n	8004a7a <HAL_TIM_PWM_Start+0xfe>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_PWM_Start+0xc6>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a40:	e01b      	b.n	8004a7a <HAL_TIM_PWM_Start+0xfe>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_PWM_Start+0xd6>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a50:	e013      	b.n	8004a7a <HAL_TIM_PWM_Start+0xfe>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b0c      	cmp	r3, #12
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_PWM_Start+0xe6>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a60:	e00b      	b.n	8004a7a <HAL_TIM_PWM_Start+0xfe>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b10      	cmp	r3, #16
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_PWM_Start+0xf6>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a70:	e003      	b.n	8004a7a <HAL_TIM_PWM_Start+0xfe>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2202      	movs	r2, #2
 8004a76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	6839      	ldr	r1, [r7, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 ff3c 	bl	8005900 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a30      	ldr	r2, [pc, #192]	; (8004b50 <HAL_TIM_PWM_Start+0x1d4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d004      	beq.n	8004a9c <HAL_TIM_PWM_Start+0x120>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a2f      	ldr	r2, [pc, #188]	; (8004b54 <HAL_TIM_PWM_Start+0x1d8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d101      	bne.n	8004aa0 <HAL_TIM_PWM_Start+0x124>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <HAL_TIM_PWM_Start+0x126>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ab4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a25      	ldr	r2, [pc, #148]	; (8004b50 <HAL_TIM_PWM_Start+0x1d4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d022      	beq.n	8004b06 <HAL_TIM_PWM_Start+0x18a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac8:	d01d      	beq.n	8004b06 <HAL_TIM_PWM_Start+0x18a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a22      	ldr	r2, [pc, #136]	; (8004b58 <HAL_TIM_PWM_Start+0x1dc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d018      	beq.n	8004b06 <HAL_TIM_PWM_Start+0x18a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a20      	ldr	r2, [pc, #128]	; (8004b5c <HAL_TIM_PWM_Start+0x1e0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d013      	beq.n	8004b06 <HAL_TIM_PWM_Start+0x18a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1f      	ldr	r2, [pc, #124]	; (8004b60 <HAL_TIM_PWM_Start+0x1e4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00e      	beq.n	8004b06 <HAL_TIM_PWM_Start+0x18a>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a19      	ldr	r2, [pc, #100]	; (8004b54 <HAL_TIM_PWM_Start+0x1d8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d009      	beq.n	8004b06 <HAL_TIM_PWM_Start+0x18a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1b      	ldr	r2, [pc, #108]	; (8004b64 <HAL_TIM_PWM_Start+0x1e8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d004      	beq.n	8004b06 <HAL_TIM_PWM_Start+0x18a>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a19      	ldr	r2, [pc, #100]	; (8004b68 <HAL_TIM_PWM_Start+0x1ec>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d115      	bne.n	8004b32 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	4b17      	ldr	r3, [pc, #92]	; (8004b6c <HAL_TIM_PWM_Start+0x1f0>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b06      	cmp	r3, #6
 8004b16:	d015      	beq.n	8004b44 <HAL_TIM_PWM_Start+0x1c8>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1e:	d011      	beq.n	8004b44 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b30:	e008      	b.n	8004b44 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0201 	orr.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e000      	b.n	8004b46 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40010400 	.word	0x40010400
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800
 8004b60:	40000c00 	.word	0x40000c00
 8004b64:	40014000 	.word	0x40014000
 8004b68:	40001800 	.word	0x40001800
 8004b6c:	00010007 	.word	0x00010007

08004b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d122      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d11b      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0202 	mvn.w	r2, #2
 8004b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 faee 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fae0 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 faf1 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d122      	bne.n	8004c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d11b      	bne.n	8004c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0204 	mvn.w	r2, #4
 8004bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fac4 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fab6 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fac7 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d122      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d11b      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0208 	mvn.w	r2, #8
 8004c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2204      	movs	r2, #4
 8004c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fa9a 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004c60:	e005      	b.n	8004c6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fa8c 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fa9d 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	d122      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d11b      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0210 	mvn.w	r2, #16
 8004c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2208      	movs	r2, #8
 8004c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fa70 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004cb4:	e005      	b.n	8004cc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fa62 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fa73 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d10e      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d107      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0201 	mvn.w	r2, #1
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fa3c 	bl	800516c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfe:	2b80      	cmp	r3, #128	; 0x80
 8004d00:	d10e      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0c:	2b80      	cmp	r3, #128	; 0x80
 8004d0e:	d107      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 feae 	bl	8005a7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2e:	d10e      	bne.n	8004d4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3a:	2b80      	cmp	r3, #128	; 0x80
 8004d3c:	d107      	bne.n	8004d4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fea1 	bl	8005a90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d10e      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b40      	cmp	r3, #64	; 0x40
 8004d68:	d107      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fa21 	bl	80051bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d10e      	bne.n	8004da6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d107      	bne.n	8004da6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f06f 0220 	mvn.w	r2, #32
 8004d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fe61 	bl	8005a68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e0ff      	b.n	8004fce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b14      	cmp	r3, #20
 8004dda:	f200 80f0 	bhi.w	8004fbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004dde:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004e39 	.word	0x08004e39
 8004de8:	08004fbf 	.word	0x08004fbf
 8004dec:	08004fbf 	.word	0x08004fbf
 8004df0:	08004fbf 	.word	0x08004fbf
 8004df4:	08004e79 	.word	0x08004e79
 8004df8:	08004fbf 	.word	0x08004fbf
 8004dfc:	08004fbf 	.word	0x08004fbf
 8004e00:	08004fbf 	.word	0x08004fbf
 8004e04:	08004ebb 	.word	0x08004ebb
 8004e08:	08004fbf 	.word	0x08004fbf
 8004e0c:	08004fbf 	.word	0x08004fbf
 8004e10:	08004fbf 	.word	0x08004fbf
 8004e14:	08004efb 	.word	0x08004efb
 8004e18:	08004fbf 	.word	0x08004fbf
 8004e1c:	08004fbf 	.word	0x08004fbf
 8004e20:	08004fbf 	.word	0x08004fbf
 8004e24:	08004f3d 	.word	0x08004f3d
 8004e28:	08004fbf 	.word	0x08004fbf
 8004e2c:	08004fbf 	.word	0x08004fbf
 8004e30:	08004fbf 	.word	0x08004fbf
 8004e34:	08004f7d 	.word	0x08004f7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fa66 	bl	8005310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0208 	orr.w	r2, r2, #8
 8004e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0204 	bic.w	r2, r2, #4
 8004e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6999      	ldr	r1, [r3, #24]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	619a      	str	r2, [r3, #24]
      break;
 8004e76:	e0a5      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fab8 	bl	80053f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6999      	ldr	r1, [r3, #24]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	021a      	lsls	r2, r3, #8
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	619a      	str	r2, [r3, #24]
      break;
 8004eb8:	e084      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fb0f 	bl	80054e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0208 	orr.w	r2, r2, #8
 8004ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0204 	bic.w	r2, r2, #4
 8004ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69d9      	ldr	r1, [r3, #28]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	61da      	str	r2, [r3, #28]
      break;
 8004ef8:	e064      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fb65 	bl	80055d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69d9      	ldr	r1, [r3, #28]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	021a      	lsls	r2, r3, #8
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	61da      	str	r2, [r3, #28]
      break;
 8004f3a:	e043      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fb9c 	bl	8005680 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0208 	orr.w	r2, r2, #8
 8004f56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0204 	bic.w	r2, r2, #4
 8004f66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f7a:	e023      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fbce 	bl	8005724 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	021a      	lsls	r2, r3, #8
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fbc:	e002      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop

08004fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e0b4      	b.n	800515e <HAL_TIM_ConfigClockSource+0x186>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	4b56      	ldr	r3, [pc, #344]	; (8005168 <HAL_TIM_ConfigClockSource+0x190>)
 8005010:	4013      	ands	r3, r2
 8005012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800501a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502c:	d03e      	beq.n	80050ac <HAL_TIM_ConfigClockSource+0xd4>
 800502e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005032:	f200 8087 	bhi.w	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 8005036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503a:	f000 8086 	beq.w	800514a <HAL_TIM_ConfigClockSource+0x172>
 800503e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005042:	d87f      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 8005044:	2b70      	cmp	r3, #112	; 0x70
 8005046:	d01a      	beq.n	800507e <HAL_TIM_ConfigClockSource+0xa6>
 8005048:	2b70      	cmp	r3, #112	; 0x70
 800504a:	d87b      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 800504c:	2b60      	cmp	r3, #96	; 0x60
 800504e:	d050      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005050:	2b60      	cmp	r3, #96	; 0x60
 8005052:	d877      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 8005054:	2b50      	cmp	r3, #80	; 0x50
 8005056:	d03c      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005058:	2b50      	cmp	r3, #80	; 0x50
 800505a:	d873      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d058      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x13a>
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d86f      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 8005064:	2b30      	cmp	r3, #48	; 0x30
 8005066:	d064      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x15a>
 8005068:	2b30      	cmp	r3, #48	; 0x30
 800506a:	d86b      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 800506c:	2b20      	cmp	r3, #32
 800506e:	d060      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x15a>
 8005070:	2b20      	cmp	r3, #32
 8005072:	d867      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d05c      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x15a>
 8005078:	2b10      	cmp	r3, #16
 800507a:	d05a      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x15a>
 800507c:	e062      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800508e:	f000 fc17 	bl	80058c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	609a      	str	r2, [r3, #8]
      break;
 80050aa:	e04f      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050bc:	f000 fc00 	bl	80058c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050ce:	609a      	str	r2, [r3, #8]
      break;
 80050d0:	e03c      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050de:	461a      	mov	r2, r3
 80050e0:	f000 fb74 	bl	80057cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2150      	movs	r1, #80	; 0x50
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fbcd 	bl	800588a <TIM_ITRx_SetConfig>
      break;
 80050f0:	e02c      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050fe:	461a      	mov	r2, r3
 8005100:	f000 fb93 	bl	800582a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2160      	movs	r1, #96	; 0x60
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fbbd 	bl	800588a <TIM_ITRx_SetConfig>
      break;
 8005110:	e01c      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800511e:	461a      	mov	r2, r3
 8005120:	f000 fb54 	bl	80057cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2140      	movs	r1, #64	; 0x40
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fbad 	bl	800588a <TIM_ITRx_SetConfig>
      break;
 8005130:	e00c      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4619      	mov	r1, r3
 800513c:	4610      	mov	r0, r2
 800513e:	f000 fba4 	bl	800588a <TIM_ITRx_SetConfig>
      break;
 8005142:	e003      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
      break;
 8005148:	e000      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800514a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	fffeff88 	.word	0xfffeff88

0800516c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a40      	ldr	r2, [pc, #256]	; (80052e4 <TIM_Base_SetConfig+0x114>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d013      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ee:	d00f      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a3d      	ldr	r2, [pc, #244]	; (80052e8 <TIM_Base_SetConfig+0x118>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00b      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3c      	ldr	r2, [pc, #240]	; (80052ec <TIM_Base_SetConfig+0x11c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d007      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a3b      	ldr	r2, [pc, #236]	; (80052f0 <TIM_Base_SetConfig+0x120>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a3a      	ldr	r2, [pc, #232]	; (80052f4 <TIM_Base_SetConfig+0x124>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d108      	bne.n	8005222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a2f      	ldr	r2, [pc, #188]	; (80052e4 <TIM_Base_SetConfig+0x114>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d02b      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005230:	d027      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2c      	ldr	r2, [pc, #176]	; (80052e8 <TIM_Base_SetConfig+0x118>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d023      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2b      	ldr	r2, [pc, #172]	; (80052ec <TIM_Base_SetConfig+0x11c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01f      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2a      	ldr	r2, [pc, #168]	; (80052f0 <TIM_Base_SetConfig+0x120>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01b      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a29      	ldr	r2, [pc, #164]	; (80052f4 <TIM_Base_SetConfig+0x124>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d017      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a28      	ldr	r2, [pc, #160]	; (80052f8 <TIM_Base_SetConfig+0x128>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a27      	ldr	r2, [pc, #156]	; (80052fc <TIM_Base_SetConfig+0x12c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00f      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a26      	ldr	r2, [pc, #152]	; (8005300 <TIM_Base_SetConfig+0x130>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00b      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a25      	ldr	r2, [pc, #148]	; (8005304 <TIM_Base_SetConfig+0x134>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d007      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a24      	ldr	r2, [pc, #144]	; (8005308 <TIM_Base_SetConfig+0x138>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a23      	ldr	r2, [pc, #140]	; (800530c <TIM_Base_SetConfig+0x13c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d108      	bne.n	8005294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a0a      	ldr	r2, [pc, #40]	; (80052e4 <TIM_Base_SetConfig+0x114>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d003      	beq.n	80052c8 <TIM_Base_SetConfig+0xf8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a0c      	ldr	r2, [pc, #48]	; (80052f4 <TIM_Base_SetConfig+0x124>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d103      	bne.n	80052d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	615a      	str	r2, [r3, #20]
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	40010400 	.word	0x40010400
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40014400 	.word	0x40014400
 8005300:	40014800 	.word	0x40014800
 8005304:	40001800 	.word	0x40001800
 8005308:	40001c00 	.word	0x40001c00
 800530c:	40002000 	.word	0x40002000

08005310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	f023 0201 	bic.w	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4b2b      	ldr	r3, [pc, #172]	; (80053e8 <TIM_OC1_SetConfig+0xd8>)
 800533c:	4013      	ands	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0303 	bic.w	r3, r3, #3
 8005346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f023 0302 	bic.w	r3, r3, #2
 8005358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a21      	ldr	r2, [pc, #132]	; (80053ec <TIM_OC1_SetConfig+0xdc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_OC1_SetConfig+0x64>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a20      	ldr	r2, [pc, #128]	; (80053f0 <TIM_OC1_SetConfig+0xe0>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d10c      	bne.n	800538e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f023 0308 	bic.w	r3, r3, #8
 800537a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f023 0304 	bic.w	r3, r3, #4
 800538c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a16      	ldr	r2, [pc, #88]	; (80053ec <TIM_OC1_SetConfig+0xdc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d003      	beq.n	800539e <TIM_OC1_SetConfig+0x8e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a15      	ldr	r2, [pc, #84]	; (80053f0 <TIM_OC1_SetConfig+0xe0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d111      	bne.n	80053c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	621a      	str	r2, [r3, #32]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	fffeff8f 	.word	0xfffeff8f
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40010400 	.word	0x40010400

080053f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f023 0210 	bic.w	r2, r3, #16
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4b2e      	ldr	r3, [pc, #184]	; (80054d8 <TIM_OC2_SetConfig+0xe4>)
 8005420:	4013      	ands	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f023 0320 	bic.w	r3, r3, #32
 800543e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a23      	ldr	r2, [pc, #140]	; (80054dc <TIM_OC2_SetConfig+0xe8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d003      	beq.n	800545c <TIM_OC2_SetConfig+0x68>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a22      	ldr	r2, [pc, #136]	; (80054e0 <TIM_OC2_SetConfig+0xec>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d10d      	bne.n	8005478 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005476:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a18      	ldr	r2, [pc, #96]	; (80054dc <TIM_OC2_SetConfig+0xe8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d003      	beq.n	8005488 <TIM_OC2_SetConfig+0x94>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a17      	ldr	r2, [pc, #92]	; (80054e0 <TIM_OC2_SetConfig+0xec>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d113      	bne.n	80054b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800548e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	feff8fff 	.word	0xfeff8fff
 80054dc:	40010000 	.word	0x40010000
 80054e0:	40010400 	.word	0x40010400

080054e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4b2d      	ldr	r3, [pc, #180]	; (80055c4 <TIM_OC3_SetConfig+0xe0>)
 8005510:	4013      	ands	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0303 	bic.w	r3, r3, #3
 800551a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800552c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a22      	ldr	r2, [pc, #136]	; (80055c8 <TIM_OC3_SetConfig+0xe4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_OC3_SetConfig+0x66>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a21      	ldr	r2, [pc, #132]	; (80055cc <TIM_OC3_SetConfig+0xe8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d10d      	bne.n	8005566 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a17      	ldr	r2, [pc, #92]	; (80055c8 <TIM_OC3_SetConfig+0xe4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d003      	beq.n	8005576 <TIM_OC3_SetConfig+0x92>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a16      	ldr	r2, [pc, #88]	; (80055cc <TIM_OC3_SetConfig+0xe8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d113      	bne.n	800559e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800557c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	621a      	str	r2, [r3, #32]
}
 80055b8:	bf00      	nop
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	fffeff8f 	.word	0xfffeff8f
 80055c8:	40010000 	.word	0x40010000
 80055cc:	40010400 	.word	0x40010400

080055d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4b1e      	ldr	r3, [pc, #120]	; (8005674 <TIM_OC4_SetConfig+0xa4>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800561a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	031b      	lsls	r3, r3, #12
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a13      	ldr	r2, [pc, #76]	; (8005678 <TIM_OC4_SetConfig+0xa8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_OC4_SetConfig+0x68>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a12      	ldr	r2, [pc, #72]	; (800567c <TIM_OC4_SetConfig+0xac>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d109      	bne.n	800564c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800563e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	019b      	lsls	r3, r3, #6
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	621a      	str	r2, [r3, #32]
}
 8005666:	bf00      	nop
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	feff8fff 	.word	0xfeff8fff
 8005678:	40010000 	.word	0x40010000
 800567c:	40010400 	.word	0x40010400

08005680 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4b1b      	ldr	r3, [pc, #108]	; (8005718 <TIM_OC5_SetConfig+0x98>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	041b      	lsls	r3, r3, #16
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a12      	ldr	r2, [pc, #72]	; (800571c <TIM_OC5_SetConfig+0x9c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d003      	beq.n	80056de <TIM_OC5_SetConfig+0x5e>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a11      	ldr	r2, [pc, #68]	; (8005720 <TIM_OC5_SetConfig+0xa0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d109      	bne.n	80056f2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	621a      	str	r2, [r3, #32]
}
 800570c:	bf00      	nop
 800570e:	371c      	adds	r7, #28
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	fffeff8f 	.word	0xfffeff8f
 800571c:	40010000 	.word	0x40010000
 8005720:	40010400 	.word	0x40010400

08005724 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4b1c      	ldr	r3, [pc, #112]	; (80057c0 <TIM_OC6_SetConfig+0x9c>)
 8005750:	4013      	ands	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	051b      	lsls	r3, r3, #20
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <TIM_OC6_SetConfig+0xa0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d003      	beq.n	8005784 <TIM_OC6_SetConfig+0x60>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a12      	ldr	r2, [pc, #72]	; (80057c8 <TIM_OC6_SetConfig+0xa4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d109      	bne.n	8005798 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800578a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	029b      	lsls	r3, r3, #10
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	621a      	str	r2, [r3, #32]
}
 80057b2:	bf00      	nop
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	feff8fff 	.word	0xfeff8fff
 80057c4:	40010000 	.word	0x40010000
 80057c8:	40010400 	.word	0x40010400

080057cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f023 0201 	bic.w	r2, r3, #1
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4313      	orrs	r3, r2
 8005800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f023 030a 	bic.w	r3, r3, #10
 8005808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800582a:	b480      	push	{r7}
 800582c:	b087      	sub	sp, #28
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	f023 0210 	bic.w	r2, r3, #16
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	031b      	lsls	r3, r3, #12
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005866:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800588a:	b480      	push	{r7}
 800588c:	b085      	sub	sp, #20
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f043 0307 	orr.w	r3, r3, #7
 80058ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	609a      	str	r2, [r3, #8]
}
 80058b4:	bf00      	nop
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	021a      	lsls	r2, r3, #8
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	609a      	str	r2, [r3, #8]
}
 80058f4:	bf00      	nop
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	2201      	movs	r2, #1
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a1a      	ldr	r2, [r3, #32]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	43db      	mvns	r3, r3
 8005922:	401a      	ands	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a1a      	ldr	r2, [r3, #32]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	fa01 f303 	lsl.w	r3, r1, r3
 8005938:	431a      	orrs	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	621a      	str	r2, [r3, #32]
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
	...

0800594c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005960:	2302      	movs	r3, #2
 8005962:	e06d      	b.n	8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a30      	ldr	r2, [pc, #192]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d004      	beq.n	8005998 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a2f      	ldr	r2, [pc, #188]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d108      	bne.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800599e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a20      	ldr	r2, [pc, #128]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d022      	beq.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d6:	d01d      	beq.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d018      	beq.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1a      	ldr	r2, [pc, #104]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00e      	beq.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d009      	beq.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a15      	ldr	r2, [pc, #84]	; (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d10c      	bne.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40010400 	.word	0x40010400
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800
 8005a5c:	40000c00 	.word	0x40000c00
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40001800 	.word	0x40001800

08005a68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e040      	b.n	8005b38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fb feb8 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2224      	movs	r2, #36	; 0x24
 8005ad0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0201 	bic.w	r2, r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f8b0 	bl	8005c48 <UART_SetConfig>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e022      	b.n	8005b38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fb08 	bl	8006110 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fb8f 	bl	8006254 <UART_CheckIdleState>
 8005b36:	4603      	mov	r3, r0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	; 0x28
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d171      	bne.n	8005c3c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_UART_Transmit+0x24>
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e06a      	b.n	8005c3e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2221      	movs	r2, #33	; 0x21
 8005b74:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b76:	f7fc f8ef 	bl	8001d58 <HAL_GetTick>
 8005b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	88fa      	ldrh	r2, [r7, #6]
 8005b80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	88fa      	ldrh	r2, [r7, #6]
 8005b88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b94:	d108      	bne.n	8005ba8 <HAL_UART_Transmit+0x68>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d104      	bne.n	8005ba8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	e003      	b.n	8005bb0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bb0:	e02c      	b.n	8005c0c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2180      	movs	r1, #128	; 0x80
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 fb80 	bl	80062c2 <UART_WaitOnFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e038      	b.n	8005c3e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10b      	bne.n	8005bea <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005be0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	3302      	adds	r3, #2
 8005be6:	61bb      	str	r3, [r7, #24]
 8005be8:	e007      	b.n	8005bfa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	781a      	ldrb	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1cc      	bne.n	8005bb2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2140      	movs	r1, #64	; 0x40
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 fb4d 	bl	80062c2 <UART_WaitOnFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e005      	b.n	8005c3e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	e000      	b.n	8005c3e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005c3c:	2302      	movs	r3, #2
  }
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4ba6      	ldr	r3, [pc, #664]	; (8005f0c <UART_SetConfig+0x2c4>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6812      	ldr	r2, [r2, #0]
 8005c7a:	6979      	ldr	r1, [r7, #20]
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a94      	ldr	r2, [pc, #592]	; (8005f10 <UART_SetConfig+0x2c8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d120      	bne.n	8005d06 <UART_SetConfig+0xbe>
 8005cc4:	4b93      	ldr	r3, [pc, #588]	; (8005f14 <UART_SetConfig+0x2cc>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d816      	bhi.n	8005d00 <UART_SetConfig+0xb8>
 8005cd2:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <UART_SetConfig+0x90>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005ce9 	.word	0x08005ce9
 8005cdc:	08005cf5 	.word	0x08005cf5
 8005ce0:	08005cef 	.word	0x08005cef
 8005ce4:	08005cfb 	.word	0x08005cfb
 8005ce8:	2301      	movs	r3, #1
 8005cea:	77fb      	strb	r3, [r7, #31]
 8005cec:	e150      	b.n	8005f90 <UART_SetConfig+0x348>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	77fb      	strb	r3, [r7, #31]
 8005cf2:	e14d      	b.n	8005f90 <UART_SetConfig+0x348>
 8005cf4:	2304      	movs	r3, #4
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e14a      	b.n	8005f90 <UART_SetConfig+0x348>
 8005cfa:	2308      	movs	r3, #8
 8005cfc:	77fb      	strb	r3, [r7, #31]
 8005cfe:	e147      	b.n	8005f90 <UART_SetConfig+0x348>
 8005d00:	2310      	movs	r3, #16
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e144      	b.n	8005f90 <UART_SetConfig+0x348>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a83      	ldr	r2, [pc, #524]	; (8005f18 <UART_SetConfig+0x2d0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d132      	bne.n	8005d76 <UART_SetConfig+0x12e>
 8005d10:	4b80      	ldr	r3, [pc, #512]	; (8005f14 <UART_SetConfig+0x2cc>)
 8005d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d16:	f003 030c 	and.w	r3, r3, #12
 8005d1a:	2b0c      	cmp	r3, #12
 8005d1c:	d828      	bhi.n	8005d70 <UART_SetConfig+0x128>
 8005d1e:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <UART_SetConfig+0xdc>)
 8005d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d24:	08005d59 	.word	0x08005d59
 8005d28:	08005d71 	.word	0x08005d71
 8005d2c:	08005d71 	.word	0x08005d71
 8005d30:	08005d71 	.word	0x08005d71
 8005d34:	08005d65 	.word	0x08005d65
 8005d38:	08005d71 	.word	0x08005d71
 8005d3c:	08005d71 	.word	0x08005d71
 8005d40:	08005d71 	.word	0x08005d71
 8005d44:	08005d5f 	.word	0x08005d5f
 8005d48:	08005d71 	.word	0x08005d71
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d71 	.word	0x08005d71
 8005d54:	08005d6b 	.word	0x08005d6b
 8005d58:	2300      	movs	r3, #0
 8005d5a:	77fb      	strb	r3, [r7, #31]
 8005d5c:	e118      	b.n	8005f90 <UART_SetConfig+0x348>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	77fb      	strb	r3, [r7, #31]
 8005d62:	e115      	b.n	8005f90 <UART_SetConfig+0x348>
 8005d64:	2304      	movs	r3, #4
 8005d66:	77fb      	strb	r3, [r7, #31]
 8005d68:	e112      	b.n	8005f90 <UART_SetConfig+0x348>
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	77fb      	strb	r3, [r7, #31]
 8005d6e:	e10f      	b.n	8005f90 <UART_SetConfig+0x348>
 8005d70:	2310      	movs	r3, #16
 8005d72:	77fb      	strb	r3, [r7, #31]
 8005d74:	e10c      	b.n	8005f90 <UART_SetConfig+0x348>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a68      	ldr	r2, [pc, #416]	; (8005f1c <UART_SetConfig+0x2d4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d120      	bne.n	8005dc2 <UART_SetConfig+0x17a>
 8005d80:	4b64      	ldr	r3, [pc, #400]	; (8005f14 <UART_SetConfig+0x2cc>)
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d8a:	2b30      	cmp	r3, #48	; 0x30
 8005d8c:	d013      	beq.n	8005db6 <UART_SetConfig+0x16e>
 8005d8e:	2b30      	cmp	r3, #48	; 0x30
 8005d90:	d814      	bhi.n	8005dbc <UART_SetConfig+0x174>
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d009      	beq.n	8005daa <UART_SetConfig+0x162>
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d810      	bhi.n	8005dbc <UART_SetConfig+0x174>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <UART_SetConfig+0x15c>
 8005d9e:	2b10      	cmp	r3, #16
 8005da0:	d006      	beq.n	8005db0 <UART_SetConfig+0x168>
 8005da2:	e00b      	b.n	8005dbc <UART_SetConfig+0x174>
 8005da4:	2300      	movs	r3, #0
 8005da6:	77fb      	strb	r3, [r7, #31]
 8005da8:	e0f2      	b.n	8005f90 <UART_SetConfig+0x348>
 8005daa:	2302      	movs	r3, #2
 8005dac:	77fb      	strb	r3, [r7, #31]
 8005dae:	e0ef      	b.n	8005f90 <UART_SetConfig+0x348>
 8005db0:	2304      	movs	r3, #4
 8005db2:	77fb      	strb	r3, [r7, #31]
 8005db4:	e0ec      	b.n	8005f90 <UART_SetConfig+0x348>
 8005db6:	2308      	movs	r3, #8
 8005db8:	77fb      	strb	r3, [r7, #31]
 8005dba:	e0e9      	b.n	8005f90 <UART_SetConfig+0x348>
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	e0e6      	b.n	8005f90 <UART_SetConfig+0x348>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a56      	ldr	r2, [pc, #344]	; (8005f20 <UART_SetConfig+0x2d8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d120      	bne.n	8005e0e <UART_SetConfig+0x1c6>
 8005dcc:	4b51      	ldr	r3, [pc, #324]	; (8005f14 <UART_SetConfig+0x2cc>)
 8005dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8005dd8:	d013      	beq.n	8005e02 <UART_SetConfig+0x1ba>
 8005dda:	2bc0      	cmp	r3, #192	; 0xc0
 8005ddc:	d814      	bhi.n	8005e08 <UART_SetConfig+0x1c0>
 8005dde:	2b80      	cmp	r3, #128	; 0x80
 8005de0:	d009      	beq.n	8005df6 <UART_SetConfig+0x1ae>
 8005de2:	2b80      	cmp	r3, #128	; 0x80
 8005de4:	d810      	bhi.n	8005e08 <UART_SetConfig+0x1c0>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <UART_SetConfig+0x1a8>
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d006      	beq.n	8005dfc <UART_SetConfig+0x1b4>
 8005dee:	e00b      	b.n	8005e08 <UART_SetConfig+0x1c0>
 8005df0:	2300      	movs	r3, #0
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e0cc      	b.n	8005f90 <UART_SetConfig+0x348>
 8005df6:	2302      	movs	r3, #2
 8005df8:	77fb      	strb	r3, [r7, #31]
 8005dfa:	e0c9      	b.n	8005f90 <UART_SetConfig+0x348>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e0c6      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e02:	2308      	movs	r3, #8
 8005e04:	77fb      	strb	r3, [r7, #31]
 8005e06:	e0c3      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e08:	2310      	movs	r3, #16
 8005e0a:	77fb      	strb	r3, [r7, #31]
 8005e0c:	e0c0      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a44      	ldr	r2, [pc, #272]	; (8005f24 <UART_SetConfig+0x2dc>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d125      	bne.n	8005e64 <UART_SetConfig+0x21c>
 8005e18:	4b3e      	ldr	r3, [pc, #248]	; (8005f14 <UART_SetConfig+0x2cc>)
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e26:	d017      	beq.n	8005e58 <UART_SetConfig+0x210>
 8005e28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e2c:	d817      	bhi.n	8005e5e <UART_SetConfig+0x216>
 8005e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e32:	d00b      	beq.n	8005e4c <UART_SetConfig+0x204>
 8005e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e38:	d811      	bhi.n	8005e5e <UART_SetConfig+0x216>
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <UART_SetConfig+0x1fe>
 8005e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e42:	d006      	beq.n	8005e52 <UART_SetConfig+0x20a>
 8005e44:	e00b      	b.n	8005e5e <UART_SetConfig+0x216>
 8005e46:	2300      	movs	r3, #0
 8005e48:	77fb      	strb	r3, [r7, #31]
 8005e4a:	e0a1      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	77fb      	strb	r3, [r7, #31]
 8005e50:	e09e      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e52:	2304      	movs	r3, #4
 8005e54:	77fb      	strb	r3, [r7, #31]
 8005e56:	e09b      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e58:	2308      	movs	r3, #8
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e098      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e5e:	2310      	movs	r3, #16
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e095      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a2f      	ldr	r2, [pc, #188]	; (8005f28 <UART_SetConfig+0x2e0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d125      	bne.n	8005eba <UART_SetConfig+0x272>
 8005e6e:	4b29      	ldr	r3, [pc, #164]	; (8005f14 <UART_SetConfig+0x2cc>)
 8005e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e7c:	d017      	beq.n	8005eae <UART_SetConfig+0x266>
 8005e7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e82:	d817      	bhi.n	8005eb4 <UART_SetConfig+0x26c>
 8005e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e88:	d00b      	beq.n	8005ea2 <UART_SetConfig+0x25a>
 8005e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8e:	d811      	bhi.n	8005eb4 <UART_SetConfig+0x26c>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <UART_SetConfig+0x254>
 8005e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e98:	d006      	beq.n	8005ea8 <UART_SetConfig+0x260>
 8005e9a:	e00b      	b.n	8005eb4 <UART_SetConfig+0x26c>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e076      	b.n	8005f90 <UART_SetConfig+0x348>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	77fb      	strb	r3, [r7, #31]
 8005ea6:	e073      	b.n	8005f90 <UART_SetConfig+0x348>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e070      	b.n	8005f90 <UART_SetConfig+0x348>
 8005eae:	2308      	movs	r3, #8
 8005eb0:	77fb      	strb	r3, [r7, #31]
 8005eb2:	e06d      	b.n	8005f90 <UART_SetConfig+0x348>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e06a      	b.n	8005f90 <UART_SetConfig+0x348>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <UART_SetConfig+0x2e4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d138      	bne.n	8005f36 <UART_SetConfig+0x2ee>
 8005ec4:	4b13      	ldr	r3, [pc, #76]	; (8005f14 <UART_SetConfig+0x2cc>)
 8005ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005ece:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ed2:	d017      	beq.n	8005f04 <UART_SetConfig+0x2bc>
 8005ed4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ed8:	d82a      	bhi.n	8005f30 <UART_SetConfig+0x2e8>
 8005eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ede:	d00b      	beq.n	8005ef8 <UART_SetConfig+0x2b0>
 8005ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee4:	d824      	bhi.n	8005f30 <UART_SetConfig+0x2e8>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <UART_SetConfig+0x2aa>
 8005eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eee:	d006      	beq.n	8005efe <UART_SetConfig+0x2b6>
 8005ef0:	e01e      	b.n	8005f30 <UART_SetConfig+0x2e8>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	77fb      	strb	r3, [r7, #31]
 8005ef6:	e04b      	b.n	8005f90 <UART_SetConfig+0x348>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e048      	b.n	8005f90 <UART_SetConfig+0x348>
 8005efe:	2304      	movs	r3, #4
 8005f00:	77fb      	strb	r3, [r7, #31]
 8005f02:	e045      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f04:	2308      	movs	r3, #8
 8005f06:	77fb      	strb	r3, [r7, #31]
 8005f08:	e042      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f0a:	bf00      	nop
 8005f0c:	efff69f3 	.word	0xefff69f3
 8005f10:	40011000 	.word	0x40011000
 8005f14:	40023800 	.word	0x40023800
 8005f18:	40004400 	.word	0x40004400
 8005f1c:	40004800 	.word	0x40004800
 8005f20:	40004c00 	.word	0x40004c00
 8005f24:	40005000 	.word	0x40005000
 8005f28:	40011400 	.word	0x40011400
 8005f2c:	40007800 	.word	0x40007800
 8005f30:	2310      	movs	r3, #16
 8005f32:	77fb      	strb	r3, [r7, #31]
 8005f34:	e02c      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a72      	ldr	r2, [pc, #456]	; (8006104 <UART_SetConfig+0x4bc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d125      	bne.n	8005f8c <UART_SetConfig+0x344>
 8005f40:	4b71      	ldr	r3, [pc, #452]	; (8006108 <UART_SetConfig+0x4c0>)
 8005f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f4e:	d017      	beq.n	8005f80 <UART_SetConfig+0x338>
 8005f50:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f54:	d817      	bhi.n	8005f86 <UART_SetConfig+0x33e>
 8005f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5a:	d00b      	beq.n	8005f74 <UART_SetConfig+0x32c>
 8005f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f60:	d811      	bhi.n	8005f86 <UART_SetConfig+0x33e>
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <UART_SetConfig+0x326>
 8005f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f6a:	d006      	beq.n	8005f7a <UART_SetConfig+0x332>
 8005f6c:	e00b      	b.n	8005f86 <UART_SetConfig+0x33e>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	77fb      	strb	r3, [r7, #31]
 8005f72:	e00d      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f74:	2302      	movs	r3, #2
 8005f76:	77fb      	strb	r3, [r7, #31]
 8005f78:	e00a      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f7a:	2304      	movs	r3, #4
 8005f7c:	77fb      	strb	r3, [r7, #31]
 8005f7e:	e007      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f80:	2308      	movs	r3, #8
 8005f82:	77fb      	strb	r3, [r7, #31]
 8005f84:	e004      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f86:	2310      	movs	r3, #16
 8005f88:	77fb      	strb	r3, [r7, #31]
 8005f8a:	e001      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f8c:	2310      	movs	r3, #16
 8005f8e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f98:	d15b      	bne.n	8006052 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f9a:	7ffb      	ldrb	r3, [r7, #31]
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d828      	bhi.n	8005ff2 <UART_SetConfig+0x3aa>
 8005fa0:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <UART_SetConfig+0x360>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	08005ff3 	.word	0x08005ff3
 8005fb8:	08005fe3 	.word	0x08005fe3
 8005fbc:	08005ff3 	.word	0x08005ff3
 8005fc0:	08005ff3 	.word	0x08005ff3
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	08005feb 	.word	0x08005feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fe f806 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8005fd0:	61b8      	str	r0, [r7, #24]
        break;
 8005fd2:	e013      	b.n	8005ffc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd4:	f7fe f816 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 8005fd8:	61b8      	str	r0, [r7, #24]
        break;
 8005fda:	e00f      	b.n	8005ffc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fdc:	4b4b      	ldr	r3, [pc, #300]	; (800610c <UART_SetConfig+0x4c4>)
 8005fde:	61bb      	str	r3, [r7, #24]
        break;
 8005fe0:	e00c      	b.n	8005ffc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe2:	f7fd fee9 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8005fe6:	61b8      	str	r0, [r7, #24]
        break;
 8005fe8:	e008      	b.n	8005ffc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fee:	61bb      	str	r3, [r7, #24]
        break;
 8005ff0:	e004      	b.n	8005ffc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	77bb      	strb	r3, [r7, #30]
        break;
 8005ffa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d074      	beq.n	80060ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	005a      	lsls	r2, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	441a      	add	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	fbb2 f3f3 	udiv	r3, r2, r3
 8006016:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	2b0f      	cmp	r3, #15
 800601c:	d916      	bls.n	800604c <UART_SetConfig+0x404>
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006024:	d212      	bcs.n	800604c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	b29b      	uxth	r3, r3
 800602a:	f023 030f 	bic.w	r3, r3, #15
 800602e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	b29b      	uxth	r3, r3
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	b29a      	uxth	r2, r3
 800603c:	89fb      	ldrh	r3, [r7, #14]
 800603e:	4313      	orrs	r3, r2
 8006040:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	89fa      	ldrh	r2, [r7, #14]
 8006048:	60da      	str	r2, [r3, #12]
 800604a:	e04f      	b.n	80060ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	77bb      	strb	r3, [r7, #30]
 8006050:	e04c      	b.n	80060ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006052:	7ffb      	ldrb	r3, [r7, #31]
 8006054:	2b08      	cmp	r3, #8
 8006056:	d828      	bhi.n	80060aa <UART_SetConfig+0x462>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x418>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006085 	.word	0x08006085
 8006064:	0800608d 	.word	0x0800608d
 8006068:	08006095 	.word	0x08006095
 800606c:	080060ab 	.word	0x080060ab
 8006070:	0800609b 	.word	0x0800609b
 8006074:	080060ab 	.word	0x080060ab
 8006078:	080060ab 	.word	0x080060ab
 800607c:	080060ab 	.word	0x080060ab
 8006080:	080060a3 	.word	0x080060a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006084:	f7fd ffaa 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8006088:	61b8      	str	r0, [r7, #24]
        break;
 800608a:	e013      	b.n	80060b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800608c:	f7fd ffba 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 8006090:	61b8      	str	r0, [r7, #24]
        break;
 8006092:	e00f      	b.n	80060b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006094:	4b1d      	ldr	r3, [pc, #116]	; (800610c <UART_SetConfig+0x4c4>)
 8006096:	61bb      	str	r3, [r7, #24]
        break;
 8006098:	e00c      	b.n	80060b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800609a:	f7fd fe8d 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 800609e:	61b8      	str	r0, [r7, #24]
        break;
 80060a0:	e008      	b.n	80060b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a6:	61bb      	str	r3, [r7, #24]
        break;
 80060a8:	e004      	b.n	80060b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	77bb      	strb	r3, [r7, #30]
        break;
 80060b2:	bf00      	nop
    }

    if (pclk != 0U)
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d018      	beq.n	80060ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	085a      	lsrs	r2, r3, #1
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	441a      	add	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b0f      	cmp	r3, #15
 80060d2:	d909      	bls.n	80060e8 <UART_SetConfig+0x4a0>
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060da:	d205      	bcs.n	80060e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	b29a      	uxth	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60da      	str	r2, [r3, #12]
 80060e6:	e001      	b.n	80060ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80060f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3720      	adds	r7, #32
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	40007c00 	.word	0x40007c00
 8006108:	40023800 	.word	0x40023800
 800610c:	00f42400 	.word	0x00f42400

08006110 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00a      	beq.n	800617e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	f003 0310 	and.w	r3, r3, #16
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01a      	beq.n	8006226 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800620e:	d10a      	bne.n	8006226 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	605a      	str	r2, [r3, #4]
  }
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af02      	add	r7, sp, #8
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006264:	f7fb fd78 	bl	8001d58 <HAL_GetTick>
 8006268:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b08      	cmp	r3, #8
 8006276:	d10e      	bne.n	8006296 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006278:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f81b 	bl	80062c2 <UART_WaitOnFlagUntilTimeout>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e011      	b.n	80062ba <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b09c      	sub	sp, #112	; 0x70
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	603b      	str	r3, [r7, #0]
 80062ce:	4613      	mov	r3, r2
 80062d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d2:	e0a7      	b.n	8006424 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062da:	f000 80a3 	beq.w	8006424 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062de:	f7fb fd3b 	bl	8001d58 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d302      	bcc.n	80062f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80062ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d13f      	bne.n	8006374 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006308:	667b      	str	r3, [r7, #100]	; 0x64
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006312:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006314:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006318:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e6      	bne.n	80062f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3308      	adds	r3, #8
 800632c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006338:	f023 0301 	bic.w	r3, r3, #1
 800633c:	663b      	str	r3, [r7, #96]	; 0x60
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3308      	adds	r3, #8
 8006344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006346:	64ba      	str	r2, [r7, #72]	; 0x48
 8006348:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800634c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e5      	bne.n	8006326 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2220      	movs	r2, #32
 800635e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e068      	b.n	8006446 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0304 	and.w	r3, r3, #4
 800637e:	2b00      	cmp	r3, #0
 8006380:	d050      	beq.n	8006424 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800638c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006390:	d148      	bne.n	8006424 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800639a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ba:	637b      	str	r3, [r7, #52]	; 0x34
 80063bc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e6      	bne.n	800639c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3308      	adds	r3, #8
 80063d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	613b      	str	r3, [r7, #16]
   return(result);
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f023 0301 	bic.w	r3, r3, #1
 80063e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3308      	adds	r3, #8
 80063ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063ee:	623a      	str	r2, [r7, #32]
 80063f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	69f9      	ldr	r1, [r7, #28]
 80063f4:	6a3a      	ldr	r2, [r7, #32]
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e5      	bne.n	80063ce <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2220      	movs	r2, #32
 8006406:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2220      	movs	r2, #32
 8006414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e010      	b.n	8006446 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	69da      	ldr	r2, [r3, #28]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4013      	ands	r3, r2
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	429a      	cmp	r2, r3
 8006432:	bf0c      	ite	eq
 8006434:	2301      	moveq	r3, #1
 8006436:	2300      	movne	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	429a      	cmp	r2, r3
 8006440:	f43f af48 	beq.w	80062d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3770      	adds	r7, #112	; 0x70
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006450:	b084      	sub	sp, #16
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	f107 001c 	add.w	r0, r7, #28
 800645e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	2b01      	cmp	r3, #1
 8006466:	d120      	bne.n	80064aa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	4b20      	ldr	r3, [pc, #128]	; (80064fc <USB_CoreInit+0xac>)
 800647a:	4013      	ands	r3, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800648c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648e:	2b01      	cmp	r3, #1
 8006490:	d105      	bne.n	800649e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa96 	bl	80069d0 <USB_CoreReset>
 80064a4:	4603      	mov	r3, r0
 80064a6:	73fb      	strb	r3, [r7, #15]
 80064a8:	e010      	b.n	80064cc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fa8a 	bl	80069d0 <USB_CoreReset>
 80064bc:	4603      	mov	r3, r0
 80064be:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d10b      	bne.n	80064ea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f043 0206 	orr.w	r2, r3, #6
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f043 0220 	orr.w	r2, r3, #32
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064f6:	b004      	add	sp, #16
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	ffbdffbf 	.word	0xffbdffbf

08006500 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f023 0201 	bic.w	r2, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	460b      	mov	r3, r1
 800652c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800653e:	78fb      	ldrb	r3, [r7, #3]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d115      	bne.n	8006570 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006550:	2001      	movs	r0, #1
 8006552:	f7fb fc0d 	bl	8001d70 <HAL_Delay>
      ms++;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3301      	adds	r3, #1
 800655a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fa29 	bl	80069b4 <USB_GetMode>
 8006562:	4603      	mov	r3, r0
 8006564:	2b01      	cmp	r3, #1
 8006566:	d01e      	beq.n	80065a6 <USB_SetCurrentMode+0x84>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b31      	cmp	r3, #49	; 0x31
 800656c:	d9f0      	bls.n	8006550 <USB_SetCurrentMode+0x2e>
 800656e:	e01a      	b.n	80065a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d115      	bne.n	80065a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006582:	2001      	movs	r0, #1
 8006584:	f7fb fbf4 	bl	8001d70 <HAL_Delay>
      ms++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3301      	adds	r3, #1
 800658c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fa10 	bl	80069b4 <USB_GetMode>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <USB_SetCurrentMode+0x84>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b31      	cmp	r3, #49	; 0x31
 800659e:	d9f0      	bls.n	8006582 <USB_SetCurrentMode+0x60>
 80065a0:	e001      	b.n	80065a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e005      	b.n	80065b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b32      	cmp	r3, #50	; 0x32
 80065aa:	d101      	bne.n	80065b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065bc:	b084      	sub	sp, #16
 80065be:	b580      	push	{r7, lr}
 80065c0:	b086      	sub	sp, #24
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065d6:	2300      	movs	r3, #0
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	e009      	b.n	80065f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	3340      	adds	r3, #64	; 0x40
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	2200      	movs	r2, #0
 80065e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	3301      	adds	r3, #1
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2b0e      	cmp	r3, #14
 80065f4:	d9f2      	bls.n	80065dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d11c      	bne.n	8006636 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800660a:	f043 0302 	orr.w	r3, r3, #2
 800660e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	e005      	b.n	8006642 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006648:	461a      	mov	r2, r3
 800664a:	2300      	movs	r3, #0
 800664c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006654:	4619      	mov	r1, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665c:	461a      	mov	r2, r3
 800665e:	680b      	ldr	r3, [r1, #0]
 8006660:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	2b01      	cmp	r3, #1
 8006666:	d10c      	bne.n	8006682 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d104      	bne.n	8006678 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800666e:	2100      	movs	r1, #0
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f965 	bl	8006940 <USB_SetDevSpeed>
 8006676:	e008      	b.n	800668a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006678:	2101      	movs	r1, #1
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f960 	bl	8006940 <USB_SetDevSpeed>
 8006680:	e003      	b.n	800668a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006682:	2103      	movs	r1, #3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f95b 	bl	8006940 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800668a:	2110      	movs	r1, #16
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f8f3 	bl	8006878 <USB_FlushTxFifo>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f91f 	bl	80068e0 <USB_FlushRxFifo>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b2:	461a      	mov	r2, r3
 80066b4:	2300      	movs	r3, #0
 80066b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066be:	461a      	mov	r2, r3
 80066c0:	2300      	movs	r3, #0
 80066c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ca:	461a      	mov	r2, r3
 80066cc:	2300      	movs	r3, #0
 80066ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066d0:	2300      	movs	r3, #0
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	e043      	b.n	800675e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ec:	d118      	bne.n	8006720 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006700:	461a      	mov	r2, r3
 8006702:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	e013      	b.n	8006732 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006716:	461a      	mov	r2, r3
 8006718:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	e008      	b.n	8006732 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672c:	461a      	mov	r2, r3
 800672e:	2300      	movs	r3, #0
 8006730:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673e:	461a      	mov	r2, r3
 8006740:	2300      	movs	r3, #0
 8006742:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006750:	461a      	mov	r2, r3
 8006752:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006756:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	3301      	adds	r3, #1
 800675c:	613b      	str	r3, [r7, #16]
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	429a      	cmp	r2, r3
 8006764:	d3b7      	bcc.n	80066d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006766:	2300      	movs	r3, #0
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	e043      	b.n	80067f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800677e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006782:	d118      	bne.n	80067b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006796:	461a      	mov	r2, r3
 8006798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	e013      	b.n	80067c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ac:	461a      	mov	r2, r3
 80067ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	e008      	b.n	80067c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c2:	461a      	mov	r2, r3
 80067c4:	2300      	movs	r3, #0
 80067c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d4:	461a      	mov	r2, r3
 80067d6:	2300      	movs	r3, #0
 80067d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e6:	461a      	mov	r2, r3
 80067e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	3301      	adds	r3, #1
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d3b7      	bcc.n	800676c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800680a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800680e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800681c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f043 0210 	orr.w	r2, r3, #16
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	699a      	ldr	r2, [r3, #24]
 8006834:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <USB_DevInit+0x2b4>)
 8006836:	4313      	orrs	r3, r2
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800683c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	f043 0208 	orr.w	r2, r3, #8
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800684e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d105      	bne.n	8006860 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699a      	ldr	r2, [r3, #24]
 8006858:	4b06      	ldr	r3, [pc, #24]	; (8006874 <USB_DevInit+0x2b8>)
 800685a:	4313      	orrs	r3, r2
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006860:	7dfb      	ldrb	r3, [r7, #23]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800686c:	b004      	add	sp, #16
 800686e:	4770      	bx	lr
 8006870:	803c3800 	.word	0x803c3800
 8006874:	40000004 	.word	0x40000004

08006878 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3301      	adds	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a13      	ldr	r2, [pc, #76]	; (80068dc <USB_FlushTxFifo+0x64>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d901      	bls.n	8006898 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e01b      	b.n	80068d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	daf2      	bge.n	8006886 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	019b      	lsls	r3, r3, #6
 80068a8:	f043 0220 	orr.w	r2, r3, #32
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4a08      	ldr	r2, [pc, #32]	; (80068dc <USB_FlushTxFifo+0x64>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d901      	bls.n	80068c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e006      	b.n	80068d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	d0f0      	beq.n	80068b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	00030d40 	.word	0x00030d40

080068e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3301      	adds	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4a11      	ldr	r2, [pc, #68]	; (800693c <USB_FlushRxFifo+0x5c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d901      	bls.n	80068fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e018      	b.n	8006930 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	daf2      	bge.n	80068ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2210      	movs	r2, #16
 800690e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3301      	adds	r3, #1
 8006914:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4a08      	ldr	r2, [pc, #32]	; (800693c <USB_FlushRxFifo+0x5c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d901      	bls.n	8006922 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e006      	b.n	8006930 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b10      	cmp	r3, #16
 800692c:	d0f0      	beq.n	8006910 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	00030d40 	.word	0x00030d40

08006940 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	68f9      	ldr	r1, [r7, #12]
 800695c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006960:	4313      	orrs	r3, r2
 8006962:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006972:	b480      	push	{r7}
 8006974:	b085      	sub	sp, #20
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800698c:	f023 0303 	bic.w	r3, r3, #3
 8006990:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069a0:	f043 0302 	orr.w	r3, r3, #2
 80069a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	f003 0301 	and.w	r3, r3, #1
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3301      	adds	r3, #1
 80069e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4a13      	ldr	r2, [pc, #76]	; (8006a34 <USB_CoreReset+0x64>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d901      	bls.n	80069ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e01b      	b.n	8006a26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	daf2      	bge.n	80069dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f043 0201 	orr.w	r2, r3, #1
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4a09      	ldr	r2, [pc, #36]	; (8006a34 <USB_CoreReset+0x64>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d901      	bls.n	8006a18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e006      	b.n	8006a26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d0f0      	beq.n	8006a06 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	00030d40 	.word	0x00030d40

08006a38 <__cvt>:
 8006a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a3c:	ec55 4b10 	vmov	r4, r5, d0
 8006a40:	2d00      	cmp	r5, #0
 8006a42:	460e      	mov	r6, r1
 8006a44:	4619      	mov	r1, r3
 8006a46:	462b      	mov	r3, r5
 8006a48:	bfbb      	ittet	lt
 8006a4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a4e:	461d      	movlt	r5, r3
 8006a50:	2300      	movge	r3, #0
 8006a52:	232d      	movlt	r3, #45	; 0x2d
 8006a54:	700b      	strb	r3, [r1, #0]
 8006a56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a5c:	4691      	mov	r9, r2
 8006a5e:	f023 0820 	bic.w	r8, r3, #32
 8006a62:	bfbc      	itt	lt
 8006a64:	4622      	movlt	r2, r4
 8006a66:	4614      	movlt	r4, r2
 8006a68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a6c:	d005      	beq.n	8006a7a <__cvt+0x42>
 8006a6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a72:	d100      	bne.n	8006a76 <__cvt+0x3e>
 8006a74:	3601      	adds	r6, #1
 8006a76:	2102      	movs	r1, #2
 8006a78:	e000      	b.n	8006a7c <__cvt+0x44>
 8006a7a:	2103      	movs	r1, #3
 8006a7c:	ab03      	add	r3, sp, #12
 8006a7e:	9301      	str	r3, [sp, #4]
 8006a80:	ab02      	add	r3, sp, #8
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	ec45 4b10 	vmov	d0, r4, r5
 8006a88:	4653      	mov	r3, sl
 8006a8a:	4632      	mov	r2, r6
 8006a8c:	f000 fe54 	bl	8007738 <_dtoa_r>
 8006a90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a94:	4607      	mov	r7, r0
 8006a96:	d102      	bne.n	8006a9e <__cvt+0x66>
 8006a98:	f019 0f01 	tst.w	r9, #1
 8006a9c:	d022      	beq.n	8006ae4 <__cvt+0xac>
 8006a9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006aa2:	eb07 0906 	add.w	r9, r7, r6
 8006aa6:	d110      	bne.n	8006aca <__cvt+0x92>
 8006aa8:	783b      	ldrb	r3, [r7, #0]
 8006aaa:	2b30      	cmp	r3, #48	; 0x30
 8006aac:	d10a      	bne.n	8006ac4 <__cvt+0x8c>
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	f7fa f827 	bl	8000b08 <__aeabi_dcmpeq>
 8006aba:	b918      	cbnz	r0, 8006ac4 <__cvt+0x8c>
 8006abc:	f1c6 0601 	rsb	r6, r6, #1
 8006ac0:	f8ca 6000 	str.w	r6, [sl]
 8006ac4:	f8da 3000 	ldr.w	r3, [sl]
 8006ac8:	4499      	add	r9, r3
 8006aca:	2200      	movs	r2, #0
 8006acc:	2300      	movs	r3, #0
 8006ace:	4620      	mov	r0, r4
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	f7fa f819 	bl	8000b08 <__aeabi_dcmpeq>
 8006ad6:	b108      	cbz	r0, 8006adc <__cvt+0xa4>
 8006ad8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006adc:	2230      	movs	r2, #48	; 0x30
 8006ade:	9b03      	ldr	r3, [sp, #12]
 8006ae0:	454b      	cmp	r3, r9
 8006ae2:	d307      	bcc.n	8006af4 <__cvt+0xbc>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ae8:	1bdb      	subs	r3, r3, r7
 8006aea:	4638      	mov	r0, r7
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	b004      	add	sp, #16
 8006af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af4:	1c59      	adds	r1, r3, #1
 8006af6:	9103      	str	r1, [sp, #12]
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	e7f0      	b.n	8006ade <__cvt+0xa6>

08006afc <__exponent>:
 8006afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006afe:	4603      	mov	r3, r0
 8006b00:	2900      	cmp	r1, #0
 8006b02:	bfb8      	it	lt
 8006b04:	4249      	neglt	r1, r1
 8006b06:	f803 2b02 	strb.w	r2, [r3], #2
 8006b0a:	bfb4      	ite	lt
 8006b0c:	222d      	movlt	r2, #45	; 0x2d
 8006b0e:	222b      	movge	r2, #43	; 0x2b
 8006b10:	2909      	cmp	r1, #9
 8006b12:	7042      	strb	r2, [r0, #1]
 8006b14:	dd2a      	ble.n	8006b6c <__exponent+0x70>
 8006b16:	f10d 0207 	add.w	r2, sp, #7
 8006b1a:	4617      	mov	r7, r2
 8006b1c:	260a      	movs	r6, #10
 8006b1e:	4694      	mov	ip, r2
 8006b20:	fb91 f5f6 	sdiv	r5, r1, r6
 8006b24:	fb06 1415 	mls	r4, r6, r5, r1
 8006b28:	3430      	adds	r4, #48	; 0x30
 8006b2a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006b2e:	460c      	mov	r4, r1
 8006b30:	2c63      	cmp	r4, #99	; 0x63
 8006b32:	f102 32ff 	add.w	r2, r2, #4294967295
 8006b36:	4629      	mov	r1, r5
 8006b38:	dcf1      	bgt.n	8006b1e <__exponent+0x22>
 8006b3a:	3130      	adds	r1, #48	; 0x30
 8006b3c:	f1ac 0402 	sub.w	r4, ip, #2
 8006b40:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b44:	1c41      	adds	r1, r0, #1
 8006b46:	4622      	mov	r2, r4
 8006b48:	42ba      	cmp	r2, r7
 8006b4a:	d30a      	bcc.n	8006b62 <__exponent+0x66>
 8006b4c:	f10d 0209 	add.w	r2, sp, #9
 8006b50:	eba2 020c 	sub.w	r2, r2, ip
 8006b54:	42bc      	cmp	r4, r7
 8006b56:	bf88      	it	hi
 8006b58:	2200      	movhi	r2, #0
 8006b5a:	4413      	add	r3, r2
 8006b5c:	1a18      	subs	r0, r3, r0
 8006b5e:	b003      	add	sp, #12
 8006b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b62:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006b66:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006b6a:	e7ed      	b.n	8006b48 <__exponent+0x4c>
 8006b6c:	2330      	movs	r3, #48	; 0x30
 8006b6e:	3130      	adds	r1, #48	; 0x30
 8006b70:	7083      	strb	r3, [r0, #2]
 8006b72:	70c1      	strb	r1, [r0, #3]
 8006b74:	1d03      	adds	r3, r0, #4
 8006b76:	e7f1      	b.n	8006b5c <__exponent+0x60>

08006b78 <_printf_float>:
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	ed2d 8b02 	vpush	{d8}
 8006b80:	b08d      	sub	sp, #52	; 0x34
 8006b82:	460c      	mov	r4, r1
 8006b84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b88:	4616      	mov	r6, r2
 8006b8a:	461f      	mov	r7, r3
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	f000 fcd5 	bl	800753c <_localeconv_r>
 8006b92:	f8d0 a000 	ldr.w	sl, [r0]
 8006b96:	4650      	mov	r0, sl
 8006b98:	f7f9 fb8a 	bl	80002b0 <strlen>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	9305      	str	r3, [sp, #20]
 8006ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ba8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006bac:	3307      	adds	r3, #7
 8006bae:	f023 0307 	bic.w	r3, r3, #7
 8006bb2:	f103 0208 	add.w	r2, r3, #8
 8006bb6:	f8c8 2000 	str.w	r2, [r8]
 8006bba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006bc2:	9307      	str	r3, [sp, #28]
 8006bc4:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bc8:	ee08 0a10 	vmov	s16, r0
 8006bcc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006bd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bd4:	4b9e      	ldr	r3, [pc, #632]	; (8006e50 <_printf_float+0x2d8>)
 8006bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bda:	f7f9 ffc7 	bl	8000b6c <__aeabi_dcmpun>
 8006bde:	bb88      	cbnz	r0, 8006c44 <_printf_float+0xcc>
 8006be0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006be4:	4b9a      	ldr	r3, [pc, #616]	; (8006e50 <_printf_float+0x2d8>)
 8006be6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bea:	f7f9 ffa1 	bl	8000b30 <__aeabi_dcmple>
 8006bee:	bb48      	cbnz	r0, 8006c44 <_printf_float+0xcc>
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	f7f9 ff90 	bl	8000b1c <__aeabi_dcmplt>
 8006bfc:	b110      	cbz	r0, 8006c04 <_printf_float+0x8c>
 8006bfe:	232d      	movs	r3, #45	; 0x2d
 8006c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c04:	4a93      	ldr	r2, [pc, #588]	; (8006e54 <_printf_float+0x2dc>)
 8006c06:	4b94      	ldr	r3, [pc, #592]	; (8006e58 <_printf_float+0x2e0>)
 8006c08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c0c:	bf94      	ite	ls
 8006c0e:	4690      	movls	r8, r2
 8006c10:	4698      	movhi	r8, r3
 8006c12:	2303      	movs	r3, #3
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	9b05      	ldr	r3, [sp, #20]
 8006c18:	f023 0304 	bic.w	r3, r3, #4
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	f04f 0900 	mov.w	r9, #0
 8006c22:	9700      	str	r7, [sp, #0]
 8006c24:	4633      	mov	r3, r6
 8006c26:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f000 f9da 	bl	8006fe4 <_printf_common>
 8006c30:	3001      	adds	r0, #1
 8006c32:	f040 8090 	bne.w	8006d56 <_printf_float+0x1de>
 8006c36:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3a:	b00d      	add	sp, #52	; 0x34
 8006c3c:	ecbd 8b02 	vpop	{d8}
 8006c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c44:	4642      	mov	r2, r8
 8006c46:	464b      	mov	r3, r9
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 ff8e 	bl	8000b6c <__aeabi_dcmpun>
 8006c50:	b140      	cbz	r0, 8006c64 <_printf_float+0xec>
 8006c52:	464b      	mov	r3, r9
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	bfbc      	itt	lt
 8006c58:	232d      	movlt	r3, #45	; 0x2d
 8006c5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c5e:	4a7f      	ldr	r2, [pc, #508]	; (8006e5c <_printf_float+0x2e4>)
 8006c60:	4b7f      	ldr	r3, [pc, #508]	; (8006e60 <_printf_float+0x2e8>)
 8006c62:	e7d1      	b.n	8006c08 <_printf_float+0x90>
 8006c64:	6863      	ldr	r3, [r4, #4]
 8006c66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c6a:	9206      	str	r2, [sp, #24]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	d13f      	bne.n	8006cf0 <_printf_float+0x178>
 8006c70:	2306      	movs	r3, #6
 8006c72:	6063      	str	r3, [r4, #4]
 8006c74:	9b05      	ldr	r3, [sp, #20]
 8006c76:	6861      	ldr	r1, [r4, #4]
 8006c78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	9303      	str	r3, [sp, #12]
 8006c80:	ab0a      	add	r3, sp, #40	; 0x28
 8006c82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c86:	ab09      	add	r3, sp, #36	; 0x24
 8006c88:	ec49 8b10 	vmov	d0, r8, r9
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	6022      	str	r2, [r4, #0]
 8006c90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c94:	4628      	mov	r0, r5
 8006c96:	f7ff fecf 	bl	8006a38 <__cvt>
 8006c9a:	9b06      	ldr	r3, [sp, #24]
 8006c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c9e:	2b47      	cmp	r3, #71	; 0x47
 8006ca0:	4680      	mov	r8, r0
 8006ca2:	d108      	bne.n	8006cb6 <_printf_float+0x13e>
 8006ca4:	1cc8      	adds	r0, r1, #3
 8006ca6:	db02      	blt.n	8006cae <_printf_float+0x136>
 8006ca8:	6863      	ldr	r3, [r4, #4]
 8006caa:	4299      	cmp	r1, r3
 8006cac:	dd41      	ble.n	8006d32 <_printf_float+0x1ba>
 8006cae:	f1ab 0302 	sub.w	r3, fp, #2
 8006cb2:	fa5f fb83 	uxtb.w	fp, r3
 8006cb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cba:	d820      	bhi.n	8006cfe <_printf_float+0x186>
 8006cbc:	3901      	subs	r1, #1
 8006cbe:	465a      	mov	r2, fp
 8006cc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cc4:	9109      	str	r1, [sp, #36]	; 0x24
 8006cc6:	f7ff ff19 	bl	8006afc <__exponent>
 8006cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ccc:	1813      	adds	r3, r2, r0
 8006cce:	2a01      	cmp	r2, #1
 8006cd0:	4681      	mov	r9, r0
 8006cd2:	6123      	str	r3, [r4, #16]
 8006cd4:	dc02      	bgt.n	8006cdc <_printf_float+0x164>
 8006cd6:	6822      	ldr	r2, [r4, #0]
 8006cd8:	07d2      	lsls	r2, r2, #31
 8006cda:	d501      	bpl.n	8006ce0 <_printf_float+0x168>
 8006cdc:	3301      	adds	r3, #1
 8006cde:	6123      	str	r3, [r4, #16]
 8006ce0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d09c      	beq.n	8006c22 <_printf_float+0xaa>
 8006ce8:	232d      	movs	r3, #45	; 0x2d
 8006cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cee:	e798      	b.n	8006c22 <_printf_float+0xaa>
 8006cf0:	9a06      	ldr	r2, [sp, #24]
 8006cf2:	2a47      	cmp	r2, #71	; 0x47
 8006cf4:	d1be      	bne.n	8006c74 <_printf_float+0xfc>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1bc      	bne.n	8006c74 <_printf_float+0xfc>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e7b9      	b.n	8006c72 <_printf_float+0xfa>
 8006cfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d02:	d118      	bne.n	8006d36 <_printf_float+0x1be>
 8006d04:	2900      	cmp	r1, #0
 8006d06:	6863      	ldr	r3, [r4, #4]
 8006d08:	dd0b      	ble.n	8006d22 <_printf_float+0x1aa>
 8006d0a:	6121      	str	r1, [r4, #16]
 8006d0c:	b913      	cbnz	r3, 8006d14 <_printf_float+0x19c>
 8006d0e:	6822      	ldr	r2, [r4, #0]
 8006d10:	07d0      	lsls	r0, r2, #31
 8006d12:	d502      	bpl.n	8006d1a <_printf_float+0x1a2>
 8006d14:	3301      	adds	r3, #1
 8006d16:	440b      	add	r3, r1
 8006d18:	6123      	str	r3, [r4, #16]
 8006d1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d1c:	f04f 0900 	mov.w	r9, #0
 8006d20:	e7de      	b.n	8006ce0 <_printf_float+0x168>
 8006d22:	b913      	cbnz	r3, 8006d2a <_printf_float+0x1b2>
 8006d24:	6822      	ldr	r2, [r4, #0]
 8006d26:	07d2      	lsls	r2, r2, #31
 8006d28:	d501      	bpl.n	8006d2e <_printf_float+0x1b6>
 8006d2a:	3302      	adds	r3, #2
 8006d2c:	e7f4      	b.n	8006d18 <_printf_float+0x1a0>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e7f2      	b.n	8006d18 <_printf_float+0x1a0>
 8006d32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	db05      	blt.n	8006d48 <_printf_float+0x1d0>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	6121      	str	r1, [r4, #16]
 8006d40:	07d8      	lsls	r0, r3, #31
 8006d42:	d5ea      	bpl.n	8006d1a <_printf_float+0x1a2>
 8006d44:	1c4b      	adds	r3, r1, #1
 8006d46:	e7e7      	b.n	8006d18 <_printf_float+0x1a0>
 8006d48:	2900      	cmp	r1, #0
 8006d4a:	bfd4      	ite	le
 8006d4c:	f1c1 0202 	rsble	r2, r1, #2
 8006d50:	2201      	movgt	r2, #1
 8006d52:	4413      	add	r3, r2
 8006d54:	e7e0      	b.n	8006d18 <_printf_float+0x1a0>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	055a      	lsls	r2, r3, #21
 8006d5a:	d407      	bmi.n	8006d6c <_printf_float+0x1f4>
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	4642      	mov	r2, r8
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	d12c      	bne.n	8006dc4 <_printf_float+0x24c>
 8006d6a:	e764      	b.n	8006c36 <_printf_float+0xbe>
 8006d6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d70:	f240 80e0 	bls.w	8006f34 <_printf_float+0x3bc>
 8006d74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f7f9 fec4 	bl	8000b08 <__aeabi_dcmpeq>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d034      	beq.n	8006dee <_printf_float+0x276>
 8006d84:	4a37      	ldr	r2, [pc, #220]	; (8006e64 <_printf_float+0x2ec>)
 8006d86:	2301      	movs	r3, #1
 8006d88:	4631      	mov	r1, r6
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	47b8      	blx	r7
 8006d8e:	3001      	adds	r0, #1
 8006d90:	f43f af51 	beq.w	8006c36 <_printf_float+0xbe>
 8006d94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	db02      	blt.n	8006da2 <_printf_float+0x22a>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	07d8      	lsls	r0, r3, #31
 8006da0:	d510      	bpl.n	8006dc4 <_printf_float+0x24c>
 8006da2:	ee18 3a10 	vmov	r3, s16
 8006da6:	4652      	mov	r2, sl
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b8      	blx	r7
 8006dae:	3001      	adds	r0, #1
 8006db0:	f43f af41 	beq.w	8006c36 <_printf_float+0xbe>
 8006db4:	f04f 0800 	mov.w	r8, #0
 8006db8:	f104 091a 	add.w	r9, r4, #26
 8006dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	4543      	cmp	r3, r8
 8006dc2:	dc09      	bgt.n	8006dd8 <_printf_float+0x260>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	079b      	lsls	r3, r3, #30
 8006dc8:	f100 8107 	bmi.w	8006fda <_printf_float+0x462>
 8006dcc:	68e0      	ldr	r0, [r4, #12]
 8006dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dd0:	4298      	cmp	r0, r3
 8006dd2:	bfb8      	it	lt
 8006dd4:	4618      	movlt	r0, r3
 8006dd6:	e730      	b.n	8006c3a <_printf_float+0xc2>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	464a      	mov	r2, r9
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	47b8      	blx	r7
 8006de2:	3001      	adds	r0, #1
 8006de4:	f43f af27 	beq.w	8006c36 <_printf_float+0xbe>
 8006de8:	f108 0801 	add.w	r8, r8, #1
 8006dec:	e7e6      	b.n	8006dbc <_printf_float+0x244>
 8006dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dc39      	bgt.n	8006e68 <_printf_float+0x2f0>
 8006df4:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <_printf_float+0x2ec>)
 8006df6:	2301      	movs	r3, #1
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	47b8      	blx	r7
 8006dfe:	3001      	adds	r0, #1
 8006e00:	f43f af19 	beq.w	8006c36 <_printf_float+0xbe>
 8006e04:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	d102      	bne.n	8006e12 <_printf_float+0x29a>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	07d9      	lsls	r1, r3, #31
 8006e10:	d5d8      	bpl.n	8006dc4 <_printf_float+0x24c>
 8006e12:	ee18 3a10 	vmov	r3, s16
 8006e16:	4652      	mov	r2, sl
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f af09 	beq.w	8006c36 <_printf_float+0xbe>
 8006e24:	f04f 0900 	mov.w	r9, #0
 8006e28:	f104 0a1a 	add.w	sl, r4, #26
 8006e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e2e:	425b      	negs	r3, r3
 8006e30:	454b      	cmp	r3, r9
 8006e32:	dc01      	bgt.n	8006e38 <_printf_float+0x2c0>
 8006e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e36:	e792      	b.n	8006d5e <_printf_float+0x1e6>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	4652      	mov	r2, sl
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	f43f aef7 	beq.w	8006c36 <_printf_float+0xbe>
 8006e48:	f109 0901 	add.w	r9, r9, #1
 8006e4c:	e7ee      	b.n	8006e2c <_printf_float+0x2b4>
 8006e4e:	bf00      	nop
 8006e50:	7fefffff 	.word	0x7fefffff
 8006e54:	08009764 	.word	0x08009764
 8006e58:	08009768 	.word	0x08009768
 8006e5c:	0800976c 	.word	0x0800976c
 8006e60:	08009770 	.word	0x08009770
 8006e64:	08009774 	.word	0x08009774
 8006e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	bfa8      	it	ge
 8006e70:	461a      	movge	r2, r3
 8006e72:	2a00      	cmp	r2, #0
 8006e74:	4691      	mov	r9, r2
 8006e76:	dc37      	bgt.n	8006ee8 <_printf_float+0x370>
 8006e78:	f04f 0b00 	mov.w	fp, #0
 8006e7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e80:	f104 021a 	add.w	r2, r4, #26
 8006e84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e86:	9305      	str	r3, [sp, #20]
 8006e88:	eba3 0309 	sub.w	r3, r3, r9
 8006e8c:	455b      	cmp	r3, fp
 8006e8e:	dc33      	bgt.n	8006ef8 <_printf_float+0x380>
 8006e90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e94:	429a      	cmp	r2, r3
 8006e96:	db3b      	blt.n	8006f10 <_printf_float+0x398>
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	07da      	lsls	r2, r3, #31
 8006e9c:	d438      	bmi.n	8006f10 <_printf_float+0x398>
 8006e9e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006ea2:	eba2 0903 	sub.w	r9, r2, r3
 8006ea6:	9b05      	ldr	r3, [sp, #20]
 8006ea8:	1ad2      	subs	r2, r2, r3
 8006eaa:	4591      	cmp	r9, r2
 8006eac:	bfa8      	it	ge
 8006eae:	4691      	movge	r9, r2
 8006eb0:	f1b9 0f00 	cmp.w	r9, #0
 8006eb4:	dc35      	bgt.n	8006f22 <_printf_float+0x3aa>
 8006eb6:	f04f 0800 	mov.w	r8, #0
 8006eba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ebe:	f104 0a1a 	add.w	sl, r4, #26
 8006ec2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	eba3 0309 	sub.w	r3, r3, r9
 8006ecc:	4543      	cmp	r3, r8
 8006ece:	f77f af79 	ble.w	8006dc4 <_printf_float+0x24c>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	4652      	mov	r2, sl
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	f43f aeaa 	beq.w	8006c36 <_printf_float+0xbe>
 8006ee2:	f108 0801 	add.w	r8, r8, #1
 8006ee6:	e7ec      	b.n	8006ec2 <_printf_float+0x34a>
 8006ee8:	4613      	mov	r3, r2
 8006eea:	4631      	mov	r1, r6
 8006eec:	4642      	mov	r2, r8
 8006eee:	4628      	mov	r0, r5
 8006ef0:	47b8      	blx	r7
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	d1c0      	bne.n	8006e78 <_printf_float+0x300>
 8006ef6:	e69e      	b.n	8006c36 <_printf_float+0xbe>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	9205      	str	r2, [sp, #20]
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	f43f ae97 	beq.w	8006c36 <_printf_float+0xbe>
 8006f08:	9a05      	ldr	r2, [sp, #20]
 8006f0a:	f10b 0b01 	add.w	fp, fp, #1
 8006f0e:	e7b9      	b.n	8006e84 <_printf_float+0x30c>
 8006f10:	ee18 3a10 	vmov	r3, s16
 8006f14:	4652      	mov	r2, sl
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d1be      	bne.n	8006e9e <_printf_float+0x326>
 8006f20:	e689      	b.n	8006c36 <_printf_float+0xbe>
 8006f22:	9a05      	ldr	r2, [sp, #20]
 8006f24:	464b      	mov	r3, r9
 8006f26:	4442      	add	r2, r8
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d1c1      	bne.n	8006eb6 <_printf_float+0x33e>
 8006f32:	e680      	b.n	8006c36 <_printf_float+0xbe>
 8006f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f36:	2a01      	cmp	r2, #1
 8006f38:	dc01      	bgt.n	8006f3e <_printf_float+0x3c6>
 8006f3a:	07db      	lsls	r3, r3, #31
 8006f3c:	d53a      	bpl.n	8006fb4 <_printf_float+0x43c>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	4642      	mov	r2, r8
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	f43f ae74 	beq.w	8006c36 <_printf_float+0xbe>
 8006f4e:	ee18 3a10 	vmov	r3, s16
 8006f52:	4652      	mov	r2, sl
 8006f54:	4631      	mov	r1, r6
 8006f56:	4628      	mov	r0, r5
 8006f58:	47b8      	blx	r7
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	f43f ae6b 	beq.w	8006c36 <_printf_float+0xbe>
 8006f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f64:	2200      	movs	r2, #0
 8006f66:	2300      	movs	r3, #0
 8006f68:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006f6c:	f7f9 fdcc 	bl	8000b08 <__aeabi_dcmpeq>
 8006f70:	b9d8      	cbnz	r0, 8006faa <_printf_float+0x432>
 8006f72:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006f76:	f108 0201 	add.w	r2, r8, #1
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	d10e      	bne.n	8006fa2 <_printf_float+0x42a>
 8006f84:	e657      	b.n	8006c36 <_printf_float+0xbe>
 8006f86:	2301      	movs	r3, #1
 8006f88:	4652      	mov	r2, sl
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	47b8      	blx	r7
 8006f90:	3001      	adds	r0, #1
 8006f92:	f43f ae50 	beq.w	8006c36 <_printf_float+0xbe>
 8006f96:	f108 0801 	add.w	r8, r8, #1
 8006f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	4543      	cmp	r3, r8
 8006fa0:	dcf1      	bgt.n	8006f86 <_printf_float+0x40e>
 8006fa2:	464b      	mov	r3, r9
 8006fa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fa8:	e6da      	b.n	8006d60 <_printf_float+0x1e8>
 8006faa:	f04f 0800 	mov.w	r8, #0
 8006fae:	f104 0a1a 	add.w	sl, r4, #26
 8006fb2:	e7f2      	b.n	8006f9a <_printf_float+0x422>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	4642      	mov	r2, r8
 8006fb8:	e7df      	b.n	8006f7a <_printf_float+0x402>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	464a      	mov	r2, r9
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	47b8      	blx	r7
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	f43f ae36 	beq.w	8006c36 <_printf_float+0xbe>
 8006fca:	f108 0801 	add.w	r8, r8, #1
 8006fce:	68e3      	ldr	r3, [r4, #12]
 8006fd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fd2:	1a5b      	subs	r3, r3, r1
 8006fd4:	4543      	cmp	r3, r8
 8006fd6:	dcf0      	bgt.n	8006fba <_printf_float+0x442>
 8006fd8:	e6f8      	b.n	8006dcc <_printf_float+0x254>
 8006fda:	f04f 0800 	mov.w	r8, #0
 8006fde:	f104 0919 	add.w	r9, r4, #25
 8006fe2:	e7f4      	b.n	8006fce <_printf_float+0x456>

08006fe4 <_printf_common>:
 8006fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe8:	4616      	mov	r6, r2
 8006fea:	4699      	mov	r9, r3
 8006fec:	688a      	ldr	r2, [r1, #8]
 8006fee:	690b      	ldr	r3, [r1, #16]
 8006ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	bfb8      	it	lt
 8006ff8:	4613      	movlt	r3, r2
 8006ffa:	6033      	str	r3, [r6, #0]
 8006ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007000:	4607      	mov	r7, r0
 8007002:	460c      	mov	r4, r1
 8007004:	b10a      	cbz	r2, 800700a <_printf_common+0x26>
 8007006:	3301      	adds	r3, #1
 8007008:	6033      	str	r3, [r6, #0]
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	0699      	lsls	r1, r3, #26
 800700e:	bf42      	ittt	mi
 8007010:	6833      	ldrmi	r3, [r6, #0]
 8007012:	3302      	addmi	r3, #2
 8007014:	6033      	strmi	r3, [r6, #0]
 8007016:	6825      	ldr	r5, [r4, #0]
 8007018:	f015 0506 	ands.w	r5, r5, #6
 800701c:	d106      	bne.n	800702c <_printf_common+0x48>
 800701e:	f104 0a19 	add.w	sl, r4, #25
 8007022:	68e3      	ldr	r3, [r4, #12]
 8007024:	6832      	ldr	r2, [r6, #0]
 8007026:	1a9b      	subs	r3, r3, r2
 8007028:	42ab      	cmp	r3, r5
 800702a:	dc26      	bgt.n	800707a <_printf_common+0x96>
 800702c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007030:	1e13      	subs	r3, r2, #0
 8007032:	6822      	ldr	r2, [r4, #0]
 8007034:	bf18      	it	ne
 8007036:	2301      	movne	r3, #1
 8007038:	0692      	lsls	r2, r2, #26
 800703a:	d42b      	bmi.n	8007094 <_printf_common+0xb0>
 800703c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007040:	4649      	mov	r1, r9
 8007042:	4638      	mov	r0, r7
 8007044:	47c0      	blx	r8
 8007046:	3001      	adds	r0, #1
 8007048:	d01e      	beq.n	8007088 <_printf_common+0xa4>
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	6922      	ldr	r2, [r4, #16]
 800704e:	f003 0306 	and.w	r3, r3, #6
 8007052:	2b04      	cmp	r3, #4
 8007054:	bf02      	ittt	eq
 8007056:	68e5      	ldreq	r5, [r4, #12]
 8007058:	6833      	ldreq	r3, [r6, #0]
 800705a:	1aed      	subeq	r5, r5, r3
 800705c:	68a3      	ldr	r3, [r4, #8]
 800705e:	bf0c      	ite	eq
 8007060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007064:	2500      	movne	r5, #0
 8007066:	4293      	cmp	r3, r2
 8007068:	bfc4      	itt	gt
 800706a:	1a9b      	subgt	r3, r3, r2
 800706c:	18ed      	addgt	r5, r5, r3
 800706e:	2600      	movs	r6, #0
 8007070:	341a      	adds	r4, #26
 8007072:	42b5      	cmp	r5, r6
 8007074:	d11a      	bne.n	80070ac <_printf_common+0xc8>
 8007076:	2000      	movs	r0, #0
 8007078:	e008      	b.n	800708c <_printf_common+0xa8>
 800707a:	2301      	movs	r3, #1
 800707c:	4652      	mov	r2, sl
 800707e:	4649      	mov	r1, r9
 8007080:	4638      	mov	r0, r7
 8007082:	47c0      	blx	r8
 8007084:	3001      	adds	r0, #1
 8007086:	d103      	bne.n	8007090 <_printf_common+0xac>
 8007088:	f04f 30ff 	mov.w	r0, #4294967295
 800708c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007090:	3501      	adds	r5, #1
 8007092:	e7c6      	b.n	8007022 <_printf_common+0x3e>
 8007094:	18e1      	adds	r1, r4, r3
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	2030      	movs	r0, #48	; 0x30
 800709a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800709e:	4422      	add	r2, r4
 80070a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070a8:	3302      	adds	r3, #2
 80070aa:	e7c7      	b.n	800703c <_printf_common+0x58>
 80070ac:	2301      	movs	r3, #1
 80070ae:	4622      	mov	r2, r4
 80070b0:	4649      	mov	r1, r9
 80070b2:	4638      	mov	r0, r7
 80070b4:	47c0      	blx	r8
 80070b6:	3001      	adds	r0, #1
 80070b8:	d0e6      	beq.n	8007088 <_printf_common+0xa4>
 80070ba:	3601      	adds	r6, #1
 80070bc:	e7d9      	b.n	8007072 <_printf_common+0x8e>
	...

080070c0 <_printf_i>:
 80070c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070c4:	7e0f      	ldrb	r7, [r1, #24]
 80070c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070c8:	2f78      	cmp	r7, #120	; 0x78
 80070ca:	4691      	mov	r9, r2
 80070cc:	4680      	mov	r8, r0
 80070ce:	460c      	mov	r4, r1
 80070d0:	469a      	mov	sl, r3
 80070d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070d6:	d807      	bhi.n	80070e8 <_printf_i+0x28>
 80070d8:	2f62      	cmp	r7, #98	; 0x62
 80070da:	d80a      	bhi.n	80070f2 <_printf_i+0x32>
 80070dc:	2f00      	cmp	r7, #0
 80070de:	f000 80d4 	beq.w	800728a <_printf_i+0x1ca>
 80070e2:	2f58      	cmp	r7, #88	; 0x58
 80070e4:	f000 80c0 	beq.w	8007268 <_printf_i+0x1a8>
 80070e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070f0:	e03a      	b.n	8007168 <_printf_i+0xa8>
 80070f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070f6:	2b15      	cmp	r3, #21
 80070f8:	d8f6      	bhi.n	80070e8 <_printf_i+0x28>
 80070fa:	a101      	add	r1, pc, #4	; (adr r1, 8007100 <_printf_i+0x40>)
 80070fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007100:	08007159 	.word	0x08007159
 8007104:	0800716d 	.word	0x0800716d
 8007108:	080070e9 	.word	0x080070e9
 800710c:	080070e9 	.word	0x080070e9
 8007110:	080070e9 	.word	0x080070e9
 8007114:	080070e9 	.word	0x080070e9
 8007118:	0800716d 	.word	0x0800716d
 800711c:	080070e9 	.word	0x080070e9
 8007120:	080070e9 	.word	0x080070e9
 8007124:	080070e9 	.word	0x080070e9
 8007128:	080070e9 	.word	0x080070e9
 800712c:	08007271 	.word	0x08007271
 8007130:	08007199 	.word	0x08007199
 8007134:	0800722b 	.word	0x0800722b
 8007138:	080070e9 	.word	0x080070e9
 800713c:	080070e9 	.word	0x080070e9
 8007140:	08007293 	.word	0x08007293
 8007144:	080070e9 	.word	0x080070e9
 8007148:	08007199 	.word	0x08007199
 800714c:	080070e9 	.word	0x080070e9
 8007150:	080070e9 	.word	0x080070e9
 8007154:	08007233 	.word	0x08007233
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	1d1a      	adds	r2, r3, #4
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	602a      	str	r2, [r5, #0]
 8007160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007168:	2301      	movs	r3, #1
 800716a:	e09f      	b.n	80072ac <_printf_i+0x1ec>
 800716c:	6820      	ldr	r0, [r4, #0]
 800716e:	682b      	ldr	r3, [r5, #0]
 8007170:	0607      	lsls	r7, r0, #24
 8007172:	f103 0104 	add.w	r1, r3, #4
 8007176:	6029      	str	r1, [r5, #0]
 8007178:	d501      	bpl.n	800717e <_printf_i+0xbe>
 800717a:	681e      	ldr	r6, [r3, #0]
 800717c:	e003      	b.n	8007186 <_printf_i+0xc6>
 800717e:	0646      	lsls	r6, r0, #25
 8007180:	d5fb      	bpl.n	800717a <_printf_i+0xba>
 8007182:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007186:	2e00      	cmp	r6, #0
 8007188:	da03      	bge.n	8007192 <_printf_i+0xd2>
 800718a:	232d      	movs	r3, #45	; 0x2d
 800718c:	4276      	negs	r6, r6
 800718e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007192:	485a      	ldr	r0, [pc, #360]	; (80072fc <_printf_i+0x23c>)
 8007194:	230a      	movs	r3, #10
 8007196:	e012      	b.n	80071be <_printf_i+0xfe>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	6820      	ldr	r0, [r4, #0]
 800719c:	1d19      	adds	r1, r3, #4
 800719e:	6029      	str	r1, [r5, #0]
 80071a0:	0605      	lsls	r5, r0, #24
 80071a2:	d501      	bpl.n	80071a8 <_printf_i+0xe8>
 80071a4:	681e      	ldr	r6, [r3, #0]
 80071a6:	e002      	b.n	80071ae <_printf_i+0xee>
 80071a8:	0641      	lsls	r1, r0, #25
 80071aa:	d5fb      	bpl.n	80071a4 <_printf_i+0xe4>
 80071ac:	881e      	ldrh	r6, [r3, #0]
 80071ae:	4853      	ldr	r0, [pc, #332]	; (80072fc <_printf_i+0x23c>)
 80071b0:	2f6f      	cmp	r7, #111	; 0x6f
 80071b2:	bf0c      	ite	eq
 80071b4:	2308      	moveq	r3, #8
 80071b6:	230a      	movne	r3, #10
 80071b8:	2100      	movs	r1, #0
 80071ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071be:	6865      	ldr	r5, [r4, #4]
 80071c0:	60a5      	str	r5, [r4, #8]
 80071c2:	2d00      	cmp	r5, #0
 80071c4:	bfa2      	ittt	ge
 80071c6:	6821      	ldrge	r1, [r4, #0]
 80071c8:	f021 0104 	bicge.w	r1, r1, #4
 80071cc:	6021      	strge	r1, [r4, #0]
 80071ce:	b90e      	cbnz	r6, 80071d4 <_printf_i+0x114>
 80071d0:	2d00      	cmp	r5, #0
 80071d2:	d04b      	beq.n	800726c <_printf_i+0x1ac>
 80071d4:	4615      	mov	r5, r2
 80071d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80071da:	fb03 6711 	mls	r7, r3, r1, r6
 80071de:	5dc7      	ldrb	r7, [r0, r7]
 80071e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071e4:	4637      	mov	r7, r6
 80071e6:	42bb      	cmp	r3, r7
 80071e8:	460e      	mov	r6, r1
 80071ea:	d9f4      	bls.n	80071d6 <_printf_i+0x116>
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d10b      	bne.n	8007208 <_printf_i+0x148>
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	07de      	lsls	r6, r3, #31
 80071f4:	d508      	bpl.n	8007208 <_printf_i+0x148>
 80071f6:	6923      	ldr	r3, [r4, #16]
 80071f8:	6861      	ldr	r1, [r4, #4]
 80071fa:	4299      	cmp	r1, r3
 80071fc:	bfde      	ittt	le
 80071fe:	2330      	movle	r3, #48	; 0x30
 8007200:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007204:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007208:	1b52      	subs	r2, r2, r5
 800720a:	6122      	str	r2, [r4, #16]
 800720c:	f8cd a000 	str.w	sl, [sp]
 8007210:	464b      	mov	r3, r9
 8007212:	aa03      	add	r2, sp, #12
 8007214:	4621      	mov	r1, r4
 8007216:	4640      	mov	r0, r8
 8007218:	f7ff fee4 	bl	8006fe4 <_printf_common>
 800721c:	3001      	adds	r0, #1
 800721e:	d14a      	bne.n	80072b6 <_printf_i+0x1f6>
 8007220:	f04f 30ff 	mov.w	r0, #4294967295
 8007224:	b004      	add	sp, #16
 8007226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	f043 0320 	orr.w	r3, r3, #32
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	4833      	ldr	r0, [pc, #204]	; (8007300 <_printf_i+0x240>)
 8007234:	2778      	movs	r7, #120	; 0x78
 8007236:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	6829      	ldr	r1, [r5, #0]
 800723e:	061f      	lsls	r7, r3, #24
 8007240:	f851 6b04 	ldr.w	r6, [r1], #4
 8007244:	d402      	bmi.n	800724c <_printf_i+0x18c>
 8007246:	065f      	lsls	r7, r3, #25
 8007248:	bf48      	it	mi
 800724a:	b2b6      	uxthmi	r6, r6
 800724c:	07df      	lsls	r7, r3, #31
 800724e:	bf48      	it	mi
 8007250:	f043 0320 	orrmi.w	r3, r3, #32
 8007254:	6029      	str	r1, [r5, #0]
 8007256:	bf48      	it	mi
 8007258:	6023      	strmi	r3, [r4, #0]
 800725a:	b91e      	cbnz	r6, 8007264 <_printf_i+0x1a4>
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	f023 0320 	bic.w	r3, r3, #32
 8007262:	6023      	str	r3, [r4, #0]
 8007264:	2310      	movs	r3, #16
 8007266:	e7a7      	b.n	80071b8 <_printf_i+0xf8>
 8007268:	4824      	ldr	r0, [pc, #144]	; (80072fc <_printf_i+0x23c>)
 800726a:	e7e4      	b.n	8007236 <_printf_i+0x176>
 800726c:	4615      	mov	r5, r2
 800726e:	e7bd      	b.n	80071ec <_printf_i+0x12c>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	6826      	ldr	r6, [r4, #0]
 8007274:	6961      	ldr	r1, [r4, #20]
 8007276:	1d18      	adds	r0, r3, #4
 8007278:	6028      	str	r0, [r5, #0]
 800727a:	0635      	lsls	r5, r6, #24
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	d501      	bpl.n	8007284 <_printf_i+0x1c4>
 8007280:	6019      	str	r1, [r3, #0]
 8007282:	e002      	b.n	800728a <_printf_i+0x1ca>
 8007284:	0670      	lsls	r0, r6, #25
 8007286:	d5fb      	bpl.n	8007280 <_printf_i+0x1c0>
 8007288:	8019      	strh	r1, [r3, #0]
 800728a:	2300      	movs	r3, #0
 800728c:	6123      	str	r3, [r4, #16]
 800728e:	4615      	mov	r5, r2
 8007290:	e7bc      	b.n	800720c <_printf_i+0x14c>
 8007292:	682b      	ldr	r3, [r5, #0]
 8007294:	1d1a      	adds	r2, r3, #4
 8007296:	602a      	str	r2, [r5, #0]
 8007298:	681d      	ldr	r5, [r3, #0]
 800729a:	6862      	ldr	r2, [r4, #4]
 800729c:	2100      	movs	r1, #0
 800729e:	4628      	mov	r0, r5
 80072a0:	f7f8 ffb6 	bl	8000210 <memchr>
 80072a4:	b108      	cbz	r0, 80072aa <_printf_i+0x1ea>
 80072a6:	1b40      	subs	r0, r0, r5
 80072a8:	6060      	str	r0, [r4, #4]
 80072aa:	6863      	ldr	r3, [r4, #4]
 80072ac:	6123      	str	r3, [r4, #16]
 80072ae:	2300      	movs	r3, #0
 80072b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072b4:	e7aa      	b.n	800720c <_printf_i+0x14c>
 80072b6:	6923      	ldr	r3, [r4, #16]
 80072b8:	462a      	mov	r2, r5
 80072ba:	4649      	mov	r1, r9
 80072bc:	4640      	mov	r0, r8
 80072be:	47d0      	blx	sl
 80072c0:	3001      	adds	r0, #1
 80072c2:	d0ad      	beq.n	8007220 <_printf_i+0x160>
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	079b      	lsls	r3, r3, #30
 80072c8:	d413      	bmi.n	80072f2 <_printf_i+0x232>
 80072ca:	68e0      	ldr	r0, [r4, #12]
 80072cc:	9b03      	ldr	r3, [sp, #12]
 80072ce:	4298      	cmp	r0, r3
 80072d0:	bfb8      	it	lt
 80072d2:	4618      	movlt	r0, r3
 80072d4:	e7a6      	b.n	8007224 <_printf_i+0x164>
 80072d6:	2301      	movs	r3, #1
 80072d8:	4632      	mov	r2, r6
 80072da:	4649      	mov	r1, r9
 80072dc:	4640      	mov	r0, r8
 80072de:	47d0      	blx	sl
 80072e0:	3001      	adds	r0, #1
 80072e2:	d09d      	beq.n	8007220 <_printf_i+0x160>
 80072e4:	3501      	adds	r5, #1
 80072e6:	68e3      	ldr	r3, [r4, #12]
 80072e8:	9903      	ldr	r1, [sp, #12]
 80072ea:	1a5b      	subs	r3, r3, r1
 80072ec:	42ab      	cmp	r3, r5
 80072ee:	dcf2      	bgt.n	80072d6 <_printf_i+0x216>
 80072f0:	e7eb      	b.n	80072ca <_printf_i+0x20a>
 80072f2:	2500      	movs	r5, #0
 80072f4:	f104 0619 	add.w	r6, r4, #25
 80072f8:	e7f5      	b.n	80072e6 <_printf_i+0x226>
 80072fa:	bf00      	nop
 80072fc:	08009776 	.word	0x08009776
 8007300:	08009787 	.word	0x08009787

08007304 <std>:
 8007304:	2300      	movs	r3, #0
 8007306:	b510      	push	{r4, lr}
 8007308:	4604      	mov	r4, r0
 800730a:	e9c0 3300 	strd	r3, r3, [r0]
 800730e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007312:	6083      	str	r3, [r0, #8]
 8007314:	8181      	strh	r1, [r0, #12]
 8007316:	6643      	str	r3, [r0, #100]	; 0x64
 8007318:	81c2      	strh	r2, [r0, #14]
 800731a:	6183      	str	r3, [r0, #24]
 800731c:	4619      	mov	r1, r3
 800731e:	2208      	movs	r2, #8
 8007320:	305c      	adds	r0, #92	; 0x5c
 8007322:	f000 f902 	bl	800752a <memset>
 8007326:	4b05      	ldr	r3, [pc, #20]	; (800733c <std+0x38>)
 8007328:	6263      	str	r3, [r4, #36]	; 0x24
 800732a:	4b05      	ldr	r3, [pc, #20]	; (8007340 <std+0x3c>)
 800732c:	62a3      	str	r3, [r4, #40]	; 0x28
 800732e:	4b05      	ldr	r3, [pc, #20]	; (8007344 <std+0x40>)
 8007330:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007332:	4b05      	ldr	r3, [pc, #20]	; (8007348 <std+0x44>)
 8007334:	6224      	str	r4, [r4, #32]
 8007336:	6323      	str	r3, [r4, #48]	; 0x30
 8007338:	bd10      	pop	{r4, pc}
 800733a:	bf00      	nop
 800733c:	080074a5 	.word	0x080074a5
 8007340:	080074c7 	.word	0x080074c7
 8007344:	080074ff 	.word	0x080074ff
 8007348:	08007523 	.word	0x08007523

0800734c <stdio_exit_handler>:
 800734c:	4a02      	ldr	r2, [pc, #8]	; (8007358 <stdio_exit_handler+0xc>)
 800734e:	4903      	ldr	r1, [pc, #12]	; (800735c <stdio_exit_handler+0x10>)
 8007350:	4803      	ldr	r0, [pc, #12]	; (8007360 <stdio_exit_handler+0x14>)
 8007352:	f000 b869 	b.w	8007428 <_fwalk_sglue>
 8007356:	bf00      	nop
 8007358:	2000000c 	.word	0x2000000c
 800735c:	08008fd1 	.word	0x08008fd1
 8007360:	20000018 	.word	0x20000018

08007364 <cleanup_stdio>:
 8007364:	6841      	ldr	r1, [r0, #4]
 8007366:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <cleanup_stdio+0x34>)
 8007368:	4299      	cmp	r1, r3
 800736a:	b510      	push	{r4, lr}
 800736c:	4604      	mov	r4, r0
 800736e:	d001      	beq.n	8007374 <cleanup_stdio+0x10>
 8007370:	f001 fe2e 	bl	8008fd0 <_fflush_r>
 8007374:	68a1      	ldr	r1, [r4, #8]
 8007376:	4b09      	ldr	r3, [pc, #36]	; (800739c <cleanup_stdio+0x38>)
 8007378:	4299      	cmp	r1, r3
 800737a:	d002      	beq.n	8007382 <cleanup_stdio+0x1e>
 800737c:	4620      	mov	r0, r4
 800737e:	f001 fe27 	bl	8008fd0 <_fflush_r>
 8007382:	68e1      	ldr	r1, [r4, #12]
 8007384:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <cleanup_stdio+0x3c>)
 8007386:	4299      	cmp	r1, r3
 8007388:	d004      	beq.n	8007394 <cleanup_stdio+0x30>
 800738a:	4620      	mov	r0, r4
 800738c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007390:	f001 be1e 	b.w	8008fd0 <_fflush_r>
 8007394:	bd10      	pop	{r4, pc}
 8007396:	bf00      	nop
 8007398:	20000928 	.word	0x20000928
 800739c:	20000990 	.word	0x20000990
 80073a0:	200009f8 	.word	0x200009f8

080073a4 <global_stdio_init.part.0>:
 80073a4:	b510      	push	{r4, lr}
 80073a6:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <global_stdio_init.part.0+0x30>)
 80073a8:	4c0b      	ldr	r4, [pc, #44]	; (80073d8 <global_stdio_init.part.0+0x34>)
 80073aa:	4a0c      	ldr	r2, [pc, #48]	; (80073dc <global_stdio_init.part.0+0x38>)
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	4620      	mov	r0, r4
 80073b0:	2200      	movs	r2, #0
 80073b2:	2104      	movs	r1, #4
 80073b4:	f7ff ffa6 	bl	8007304 <std>
 80073b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80073bc:	2201      	movs	r2, #1
 80073be:	2109      	movs	r1, #9
 80073c0:	f7ff ffa0 	bl	8007304 <std>
 80073c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80073c8:	2202      	movs	r2, #2
 80073ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073ce:	2112      	movs	r1, #18
 80073d0:	f7ff bf98 	b.w	8007304 <std>
 80073d4:	20000a60 	.word	0x20000a60
 80073d8:	20000928 	.word	0x20000928
 80073dc:	0800734d 	.word	0x0800734d

080073e0 <__sfp_lock_acquire>:
 80073e0:	4801      	ldr	r0, [pc, #4]	; (80073e8 <__sfp_lock_acquire+0x8>)
 80073e2:	f000 b91f 	b.w	8007624 <__retarget_lock_acquire_recursive>
 80073e6:	bf00      	nop
 80073e8:	20000a69 	.word	0x20000a69

080073ec <__sfp_lock_release>:
 80073ec:	4801      	ldr	r0, [pc, #4]	; (80073f4 <__sfp_lock_release+0x8>)
 80073ee:	f000 b91a 	b.w	8007626 <__retarget_lock_release_recursive>
 80073f2:	bf00      	nop
 80073f4:	20000a69 	.word	0x20000a69

080073f8 <__sinit>:
 80073f8:	b510      	push	{r4, lr}
 80073fa:	4604      	mov	r4, r0
 80073fc:	f7ff fff0 	bl	80073e0 <__sfp_lock_acquire>
 8007400:	6a23      	ldr	r3, [r4, #32]
 8007402:	b11b      	cbz	r3, 800740c <__sinit+0x14>
 8007404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007408:	f7ff bff0 	b.w	80073ec <__sfp_lock_release>
 800740c:	4b04      	ldr	r3, [pc, #16]	; (8007420 <__sinit+0x28>)
 800740e:	6223      	str	r3, [r4, #32]
 8007410:	4b04      	ldr	r3, [pc, #16]	; (8007424 <__sinit+0x2c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1f5      	bne.n	8007404 <__sinit+0xc>
 8007418:	f7ff ffc4 	bl	80073a4 <global_stdio_init.part.0>
 800741c:	e7f2      	b.n	8007404 <__sinit+0xc>
 800741e:	bf00      	nop
 8007420:	08007365 	.word	0x08007365
 8007424:	20000a60 	.word	0x20000a60

08007428 <_fwalk_sglue>:
 8007428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800742c:	4607      	mov	r7, r0
 800742e:	4688      	mov	r8, r1
 8007430:	4614      	mov	r4, r2
 8007432:	2600      	movs	r6, #0
 8007434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007438:	f1b9 0901 	subs.w	r9, r9, #1
 800743c:	d505      	bpl.n	800744a <_fwalk_sglue+0x22>
 800743e:	6824      	ldr	r4, [r4, #0]
 8007440:	2c00      	cmp	r4, #0
 8007442:	d1f7      	bne.n	8007434 <_fwalk_sglue+0xc>
 8007444:	4630      	mov	r0, r6
 8007446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800744a:	89ab      	ldrh	r3, [r5, #12]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d907      	bls.n	8007460 <_fwalk_sglue+0x38>
 8007450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007454:	3301      	adds	r3, #1
 8007456:	d003      	beq.n	8007460 <_fwalk_sglue+0x38>
 8007458:	4629      	mov	r1, r5
 800745a:	4638      	mov	r0, r7
 800745c:	47c0      	blx	r8
 800745e:	4306      	orrs	r6, r0
 8007460:	3568      	adds	r5, #104	; 0x68
 8007462:	e7e9      	b.n	8007438 <_fwalk_sglue+0x10>

08007464 <siprintf>:
 8007464:	b40e      	push	{r1, r2, r3}
 8007466:	b500      	push	{lr}
 8007468:	b09c      	sub	sp, #112	; 0x70
 800746a:	ab1d      	add	r3, sp, #116	; 0x74
 800746c:	9002      	str	r0, [sp, #8]
 800746e:	9006      	str	r0, [sp, #24]
 8007470:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007474:	4809      	ldr	r0, [pc, #36]	; (800749c <siprintf+0x38>)
 8007476:	9107      	str	r1, [sp, #28]
 8007478:	9104      	str	r1, [sp, #16]
 800747a:	4909      	ldr	r1, [pc, #36]	; (80074a0 <siprintf+0x3c>)
 800747c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007480:	9105      	str	r1, [sp, #20]
 8007482:	6800      	ldr	r0, [r0, #0]
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	a902      	add	r1, sp, #8
 8007488:	f001 fc1e 	bl	8008cc8 <_svfiprintf_r>
 800748c:	9b02      	ldr	r3, [sp, #8]
 800748e:	2200      	movs	r2, #0
 8007490:	701a      	strb	r2, [r3, #0]
 8007492:	b01c      	add	sp, #112	; 0x70
 8007494:	f85d eb04 	ldr.w	lr, [sp], #4
 8007498:	b003      	add	sp, #12
 800749a:	4770      	bx	lr
 800749c:	20000064 	.word	0x20000064
 80074a0:	ffff0208 	.word	0xffff0208

080074a4 <__sread>:
 80074a4:	b510      	push	{r4, lr}
 80074a6:	460c      	mov	r4, r1
 80074a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ac:	f000 f86c 	bl	8007588 <_read_r>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	bfab      	itete	ge
 80074b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074b6:	89a3      	ldrhlt	r3, [r4, #12]
 80074b8:	181b      	addge	r3, r3, r0
 80074ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074be:	bfac      	ite	ge
 80074c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80074c2:	81a3      	strhlt	r3, [r4, #12]
 80074c4:	bd10      	pop	{r4, pc}

080074c6 <__swrite>:
 80074c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ca:	461f      	mov	r7, r3
 80074cc:	898b      	ldrh	r3, [r1, #12]
 80074ce:	05db      	lsls	r3, r3, #23
 80074d0:	4605      	mov	r5, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	4616      	mov	r6, r2
 80074d6:	d505      	bpl.n	80074e4 <__swrite+0x1e>
 80074d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074dc:	2302      	movs	r3, #2
 80074de:	2200      	movs	r2, #0
 80074e0:	f000 f840 	bl	8007564 <_lseek_r>
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ee:	81a3      	strh	r3, [r4, #12]
 80074f0:	4632      	mov	r2, r6
 80074f2:	463b      	mov	r3, r7
 80074f4:	4628      	mov	r0, r5
 80074f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074fa:	f000 b857 	b.w	80075ac <_write_r>

080074fe <__sseek>:
 80074fe:	b510      	push	{r4, lr}
 8007500:	460c      	mov	r4, r1
 8007502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007506:	f000 f82d 	bl	8007564 <_lseek_r>
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	bf15      	itete	ne
 8007510:	6560      	strne	r0, [r4, #84]	; 0x54
 8007512:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007516:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800751a:	81a3      	strheq	r3, [r4, #12]
 800751c:	bf18      	it	ne
 800751e:	81a3      	strhne	r3, [r4, #12]
 8007520:	bd10      	pop	{r4, pc}

08007522 <__sclose>:
 8007522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007526:	f000 b80d 	b.w	8007544 <_close_r>

0800752a <memset>:
 800752a:	4402      	add	r2, r0
 800752c:	4603      	mov	r3, r0
 800752e:	4293      	cmp	r3, r2
 8007530:	d100      	bne.n	8007534 <memset+0xa>
 8007532:	4770      	bx	lr
 8007534:	f803 1b01 	strb.w	r1, [r3], #1
 8007538:	e7f9      	b.n	800752e <memset+0x4>
	...

0800753c <_localeconv_r>:
 800753c:	4800      	ldr	r0, [pc, #0]	; (8007540 <_localeconv_r+0x4>)
 800753e:	4770      	bx	lr
 8007540:	20000158 	.word	0x20000158

08007544 <_close_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	4d06      	ldr	r5, [pc, #24]	; (8007560 <_close_r+0x1c>)
 8007548:	2300      	movs	r3, #0
 800754a:	4604      	mov	r4, r0
 800754c:	4608      	mov	r0, r1
 800754e:	602b      	str	r3, [r5, #0]
 8007550:	f7fa fb0b 	bl	8001b6a <_close>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d102      	bne.n	800755e <_close_r+0x1a>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b103      	cbz	r3, 800755e <_close_r+0x1a>
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	20000a64 	.word	0x20000a64

08007564 <_lseek_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d07      	ldr	r5, [pc, #28]	; (8007584 <_lseek_r+0x20>)
 8007568:	4604      	mov	r4, r0
 800756a:	4608      	mov	r0, r1
 800756c:	4611      	mov	r1, r2
 800756e:	2200      	movs	r2, #0
 8007570:	602a      	str	r2, [r5, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	f7fa fb20 	bl	8001bb8 <_lseek>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d102      	bne.n	8007582 <_lseek_r+0x1e>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	b103      	cbz	r3, 8007582 <_lseek_r+0x1e>
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	20000a64 	.word	0x20000a64

08007588 <_read_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4d07      	ldr	r5, [pc, #28]	; (80075a8 <_read_r+0x20>)
 800758c:	4604      	mov	r4, r0
 800758e:	4608      	mov	r0, r1
 8007590:	4611      	mov	r1, r2
 8007592:	2200      	movs	r2, #0
 8007594:	602a      	str	r2, [r5, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	f7fa faae 	bl	8001af8 <_read>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d102      	bne.n	80075a6 <_read_r+0x1e>
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	b103      	cbz	r3, 80075a6 <_read_r+0x1e>
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	20000a64 	.word	0x20000a64

080075ac <_write_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4d07      	ldr	r5, [pc, #28]	; (80075cc <_write_r+0x20>)
 80075b0:	4604      	mov	r4, r0
 80075b2:	4608      	mov	r0, r1
 80075b4:	4611      	mov	r1, r2
 80075b6:	2200      	movs	r2, #0
 80075b8:	602a      	str	r2, [r5, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	f7fa fab9 	bl	8001b32 <_write>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d102      	bne.n	80075ca <_write_r+0x1e>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	b103      	cbz	r3, 80075ca <_write_r+0x1e>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	20000a64 	.word	0x20000a64

080075d0 <__errno>:
 80075d0:	4b01      	ldr	r3, [pc, #4]	; (80075d8 <__errno+0x8>)
 80075d2:	6818      	ldr	r0, [r3, #0]
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	20000064 	.word	0x20000064

080075dc <__libc_init_array>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	4d0d      	ldr	r5, [pc, #52]	; (8007614 <__libc_init_array+0x38>)
 80075e0:	4c0d      	ldr	r4, [pc, #52]	; (8007618 <__libc_init_array+0x3c>)
 80075e2:	1b64      	subs	r4, r4, r5
 80075e4:	10a4      	asrs	r4, r4, #2
 80075e6:	2600      	movs	r6, #0
 80075e8:	42a6      	cmp	r6, r4
 80075ea:	d109      	bne.n	8007600 <__libc_init_array+0x24>
 80075ec:	4d0b      	ldr	r5, [pc, #44]	; (800761c <__libc_init_array+0x40>)
 80075ee:	4c0c      	ldr	r4, [pc, #48]	; (8007620 <__libc_init_array+0x44>)
 80075f0:	f002 f892 	bl	8009718 <_init>
 80075f4:	1b64      	subs	r4, r4, r5
 80075f6:	10a4      	asrs	r4, r4, #2
 80075f8:	2600      	movs	r6, #0
 80075fa:	42a6      	cmp	r6, r4
 80075fc:	d105      	bne.n	800760a <__libc_init_array+0x2e>
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	f855 3b04 	ldr.w	r3, [r5], #4
 8007604:	4798      	blx	r3
 8007606:	3601      	adds	r6, #1
 8007608:	e7ee      	b.n	80075e8 <__libc_init_array+0xc>
 800760a:	f855 3b04 	ldr.w	r3, [r5], #4
 800760e:	4798      	blx	r3
 8007610:	3601      	adds	r6, #1
 8007612:	e7f2      	b.n	80075fa <__libc_init_array+0x1e>
 8007614:	08009adc 	.word	0x08009adc
 8007618:	08009adc 	.word	0x08009adc
 800761c:	08009adc 	.word	0x08009adc
 8007620:	08009ae0 	.word	0x08009ae0

08007624 <__retarget_lock_acquire_recursive>:
 8007624:	4770      	bx	lr

08007626 <__retarget_lock_release_recursive>:
 8007626:	4770      	bx	lr

08007628 <quorem>:
 8007628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762c:	6903      	ldr	r3, [r0, #16]
 800762e:	690c      	ldr	r4, [r1, #16]
 8007630:	42a3      	cmp	r3, r4
 8007632:	4607      	mov	r7, r0
 8007634:	db7e      	blt.n	8007734 <quorem+0x10c>
 8007636:	3c01      	subs	r4, #1
 8007638:	f101 0814 	add.w	r8, r1, #20
 800763c:	f100 0514 	add.w	r5, r0, #20
 8007640:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007644:	9301      	str	r3, [sp, #4]
 8007646:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800764a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800764e:	3301      	adds	r3, #1
 8007650:	429a      	cmp	r2, r3
 8007652:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007656:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800765a:	fbb2 f6f3 	udiv	r6, r2, r3
 800765e:	d331      	bcc.n	80076c4 <quorem+0x9c>
 8007660:	f04f 0e00 	mov.w	lr, #0
 8007664:	4640      	mov	r0, r8
 8007666:	46ac      	mov	ip, r5
 8007668:	46f2      	mov	sl, lr
 800766a:	f850 2b04 	ldr.w	r2, [r0], #4
 800766e:	b293      	uxth	r3, r2
 8007670:	fb06 e303 	mla	r3, r6, r3, lr
 8007674:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007678:	0c1a      	lsrs	r2, r3, #16
 800767a:	b29b      	uxth	r3, r3
 800767c:	ebaa 0303 	sub.w	r3, sl, r3
 8007680:	f8dc a000 	ldr.w	sl, [ip]
 8007684:	fa13 f38a 	uxtah	r3, r3, sl
 8007688:	fb06 220e 	mla	r2, r6, lr, r2
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	9b00      	ldr	r3, [sp, #0]
 8007690:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007694:	b292      	uxth	r2, r2
 8007696:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800769a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800769e:	f8bd 3000 	ldrh.w	r3, [sp]
 80076a2:	4581      	cmp	r9, r0
 80076a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076a8:	f84c 3b04 	str.w	r3, [ip], #4
 80076ac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076b0:	d2db      	bcs.n	800766a <quorem+0x42>
 80076b2:	f855 300b 	ldr.w	r3, [r5, fp]
 80076b6:	b92b      	cbnz	r3, 80076c4 <quorem+0x9c>
 80076b8:	9b01      	ldr	r3, [sp, #4]
 80076ba:	3b04      	subs	r3, #4
 80076bc:	429d      	cmp	r5, r3
 80076be:	461a      	mov	r2, r3
 80076c0:	d32c      	bcc.n	800771c <quorem+0xf4>
 80076c2:	613c      	str	r4, [r7, #16]
 80076c4:	4638      	mov	r0, r7
 80076c6:	f001 f9a5 	bl	8008a14 <__mcmp>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	db22      	blt.n	8007714 <quorem+0xec>
 80076ce:	3601      	adds	r6, #1
 80076d0:	4629      	mov	r1, r5
 80076d2:	2000      	movs	r0, #0
 80076d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80076d8:	f8d1 c000 	ldr.w	ip, [r1]
 80076dc:	b293      	uxth	r3, r2
 80076de:	1ac3      	subs	r3, r0, r3
 80076e0:	0c12      	lsrs	r2, r2, #16
 80076e2:	fa13 f38c 	uxtah	r3, r3, ip
 80076e6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80076ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076f4:	45c1      	cmp	r9, r8
 80076f6:	f841 3b04 	str.w	r3, [r1], #4
 80076fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076fe:	d2e9      	bcs.n	80076d4 <quorem+0xac>
 8007700:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007704:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007708:	b922      	cbnz	r2, 8007714 <quorem+0xec>
 800770a:	3b04      	subs	r3, #4
 800770c:	429d      	cmp	r5, r3
 800770e:	461a      	mov	r2, r3
 8007710:	d30a      	bcc.n	8007728 <quorem+0x100>
 8007712:	613c      	str	r4, [r7, #16]
 8007714:	4630      	mov	r0, r6
 8007716:	b003      	add	sp, #12
 8007718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771c:	6812      	ldr	r2, [r2, #0]
 800771e:	3b04      	subs	r3, #4
 8007720:	2a00      	cmp	r2, #0
 8007722:	d1ce      	bne.n	80076c2 <quorem+0x9a>
 8007724:	3c01      	subs	r4, #1
 8007726:	e7c9      	b.n	80076bc <quorem+0x94>
 8007728:	6812      	ldr	r2, [r2, #0]
 800772a:	3b04      	subs	r3, #4
 800772c:	2a00      	cmp	r2, #0
 800772e:	d1f0      	bne.n	8007712 <quorem+0xea>
 8007730:	3c01      	subs	r4, #1
 8007732:	e7eb      	b.n	800770c <quorem+0xe4>
 8007734:	2000      	movs	r0, #0
 8007736:	e7ee      	b.n	8007716 <quorem+0xee>

08007738 <_dtoa_r>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	ed2d 8b04 	vpush	{d8-d9}
 8007740:	69c5      	ldr	r5, [r0, #28]
 8007742:	b093      	sub	sp, #76	; 0x4c
 8007744:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007748:	ec57 6b10 	vmov	r6, r7, d0
 800774c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007750:	9107      	str	r1, [sp, #28]
 8007752:	4604      	mov	r4, r0
 8007754:	920a      	str	r2, [sp, #40]	; 0x28
 8007756:	930d      	str	r3, [sp, #52]	; 0x34
 8007758:	b975      	cbnz	r5, 8007778 <_dtoa_r+0x40>
 800775a:	2010      	movs	r0, #16
 800775c:	f000 fe2a 	bl	80083b4 <malloc>
 8007760:	4602      	mov	r2, r0
 8007762:	61e0      	str	r0, [r4, #28]
 8007764:	b920      	cbnz	r0, 8007770 <_dtoa_r+0x38>
 8007766:	4bae      	ldr	r3, [pc, #696]	; (8007a20 <_dtoa_r+0x2e8>)
 8007768:	21ef      	movs	r1, #239	; 0xef
 800776a:	48ae      	ldr	r0, [pc, #696]	; (8007a24 <_dtoa_r+0x2ec>)
 800776c:	f001 fc90 	bl	8009090 <__assert_func>
 8007770:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007774:	6005      	str	r5, [r0, #0]
 8007776:	60c5      	str	r5, [r0, #12]
 8007778:	69e3      	ldr	r3, [r4, #28]
 800777a:	6819      	ldr	r1, [r3, #0]
 800777c:	b151      	cbz	r1, 8007794 <_dtoa_r+0x5c>
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	604a      	str	r2, [r1, #4]
 8007782:	2301      	movs	r3, #1
 8007784:	4093      	lsls	r3, r2
 8007786:	608b      	str	r3, [r1, #8]
 8007788:	4620      	mov	r0, r4
 800778a:	f000 ff07 	bl	800859c <_Bfree>
 800778e:	69e3      	ldr	r3, [r4, #28]
 8007790:	2200      	movs	r2, #0
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	1e3b      	subs	r3, r7, #0
 8007796:	bfbb      	ittet	lt
 8007798:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800779c:	9303      	strlt	r3, [sp, #12]
 800779e:	2300      	movge	r3, #0
 80077a0:	2201      	movlt	r2, #1
 80077a2:	bfac      	ite	ge
 80077a4:	f8c8 3000 	strge.w	r3, [r8]
 80077a8:	f8c8 2000 	strlt.w	r2, [r8]
 80077ac:	4b9e      	ldr	r3, [pc, #632]	; (8007a28 <_dtoa_r+0x2f0>)
 80077ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80077b2:	ea33 0308 	bics.w	r3, r3, r8
 80077b6:	d11b      	bne.n	80077f0 <_dtoa_r+0xb8>
 80077b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80077c4:	4333      	orrs	r3, r6
 80077c6:	f000 8593 	beq.w	80082f0 <_dtoa_r+0xbb8>
 80077ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077cc:	b963      	cbnz	r3, 80077e8 <_dtoa_r+0xb0>
 80077ce:	4b97      	ldr	r3, [pc, #604]	; (8007a2c <_dtoa_r+0x2f4>)
 80077d0:	e027      	b.n	8007822 <_dtoa_r+0xea>
 80077d2:	4b97      	ldr	r3, [pc, #604]	; (8007a30 <_dtoa_r+0x2f8>)
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	3308      	adds	r3, #8
 80077d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	9800      	ldr	r0, [sp, #0]
 80077de:	b013      	add	sp, #76	; 0x4c
 80077e0:	ecbd 8b04 	vpop	{d8-d9}
 80077e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e8:	4b90      	ldr	r3, [pc, #576]	; (8007a2c <_dtoa_r+0x2f4>)
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	3303      	adds	r3, #3
 80077ee:	e7f3      	b.n	80077d8 <_dtoa_r+0xa0>
 80077f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077f4:	2200      	movs	r2, #0
 80077f6:	ec51 0b17 	vmov	r0, r1, d7
 80077fa:	eeb0 8a47 	vmov.f32	s16, s14
 80077fe:	eef0 8a67 	vmov.f32	s17, s15
 8007802:	2300      	movs	r3, #0
 8007804:	f7f9 f980 	bl	8000b08 <__aeabi_dcmpeq>
 8007808:	4681      	mov	r9, r0
 800780a:	b160      	cbz	r0, 8007826 <_dtoa_r+0xee>
 800780c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800780e:	2301      	movs	r3, #1
 8007810:	6013      	str	r3, [r2, #0]
 8007812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 8568 	beq.w	80082ea <_dtoa_r+0xbb2>
 800781a:	4b86      	ldr	r3, [pc, #536]	; (8007a34 <_dtoa_r+0x2fc>)
 800781c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800781e:	6013      	str	r3, [r2, #0]
 8007820:	3b01      	subs	r3, #1
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	e7da      	b.n	80077dc <_dtoa_r+0xa4>
 8007826:	aa10      	add	r2, sp, #64	; 0x40
 8007828:	a911      	add	r1, sp, #68	; 0x44
 800782a:	4620      	mov	r0, r4
 800782c:	eeb0 0a48 	vmov.f32	s0, s16
 8007830:	eef0 0a68 	vmov.f32	s1, s17
 8007834:	f001 f994 	bl	8008b60 <__d2b>
 8007838:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800783c:	4682      	mov	sl, r0
 800783e:	2d00      	cmp	r5, #0
 8007840:	d07f      	beq.n	8007942 <_dtoa_r+0x20a>
 8007842:	ee18 3a90 	vmov	r3, s17
 8007846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800784a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800784e:	ec51 0b18 	vmov	r0, r1, d8
 8007852:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007856:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800785a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800785e:	4619      	mov	r1, r3
 8007860:	2200      	movs	r2, #0
 8007862:	4b75      	ldr	r3, [pc, #468]	; (8007a38 <_dtoa_r+0x300>)
 8007864:	f7f8 fd30 	bl	80002c8 <__aeabi_dsub>
 8007868:	a367      	add	r3, pc, #412	; (adr r3, 8007a08 <_dtoa_r+0x2d0>)
 800786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786e:	f7f8 fee3 	bl	8000638 <__aeabi_dmul>
 8007872:	a367      	add	r3, pc, #412	; (adr r3, 8007a10 <_dtoa_r+0x2d8>)
 8007874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007878:	f7f8 fd28 	bl	80002cc <__adddf3>
 800787c:	4606      	mov	r6, r0
 800787e:	4628      	mov	r0, r5
 8007880:	460f      	mov	r7, r1
 8007882:	f7f8 fe6f 	bl	8000564 <__aeabi_i2d>
 8007886:	a364      	add	r3, pc, #400	; (adr r3, 8007a18 <_dtoa_r+0x2e0>)
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f7f8 fed4 	bl	8000638 <__aeabi_dmul>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4630      	mov	r0, r6
 8007896:	4639      	mov	r1, r7
 8007898:	f7f8 fd18 	bl	80002cc <__adddf3>
 800789c:	4606      	mov	r6, r0
 800789e:	460f      	mov	r7, r1
 80078a0:	f7f9 f97a 	bl	8000b98 <__aeabi_d2iz>
 80078a4:	2200      	movs	r2, #0
 80078a6:	4683      	mov	fp, r0
 80078a8:	2300      	movs	r3, #0
 80078aa:	4630      	mov	r0, r6
 80078ac:	4639      	mov	r1, r7
 80078ae:	f7f9 f935 	bl	8000b1c <__aeabi_dcmplt>
 80078b2:	b148      	cbz	r0, 80078c8 <_dtoa_r+0x190>
 80078b4:	4658      	mov	r0, fp
 80078b6:	f7f8 fe55 	bl	8000564 <__aeabi_i2d>
 80078ba:	4632      	mov	r2, r6
 80078bc:	463b      	mov	r3, r7
 80078be:	f7f9 f923 	bl	8000b08 <__aeabi_dcmpeq>
 80078c2:	b908      	cbnz	r0, 80078c8 <_dtoa_r+0x190>
 80078c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078c8:	f1bb 0f16 	cmp.w	fp, #22
 80078cc:	d857      	bhi.n	800797e <_dtoa_r+0x246>
 80078ce:	4b5b      	ldr	r3, [pc, #364]	; (8007a3c <_dtoa_r+0x304>)
 80078d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	ec51 0b18 	vmov	r0, r1, d8
 80078dc:	f7f9 f91e 	bl	8000b1c <__aeabi_dcmplt>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d04e      	beq.n	8007982 <_dtoa_r+0x24a>
 80078e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078e8:	2300      	movs	r3, #0
 80078ea:	930c      	str	r3, [sp, #48]	; 0x30
 80078ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078ee:	1b5b      	subs	r3, r3, r5
 80078f0:	1e5a      	subs	r2, r3, #1
 80078f2:	bf45      	ittet	mi
 80078f4:	f1c3 0301 	rsbmi	r3, r3, #1
 80078f8:	9305      	strmi	r3, [sp, #20]
 80078fa:	2300      	movpl	r3, #0
 80078fc:	2300      	movmi	r3, #0
 80078fe:	9206      	str	r2, [sp, #24]
 8007900:	bf54      	ite	pl
 8007902:	9305      	strpl	r3, [sp, #20]
 8007904:	9306      	strmi	r3, [sp, #24]
 8007906:	f1bb 0f00 	cmp.w	fp, #0
 800790a:	db3c      	blt.n	8007986 <_dtoa_r+0x24e>
 800790c:	9b06      	ldr	r3, [sp, #24]
 800790e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007912:	445b      	add	r3, fp
 8007914:	9306      	str	r3, [sp, #24]
 8007916:	2300      	movs	r3, #0
 8007918:	9308      	str	r3, [sp, #32]
 800791a:	9b07      	ldr	r3, [sp, #28]
 800791c:	2b09      	cmp	r3, #9
 800791e:	d868      	bhi.n	80079f2 <_dtoa_r+0x2ba>
 8007920:	2b05      	cmp	r3, #5
 8007922:	bfc4      	itt	gt
 8007924:	3b04      	subgt	r3, #4
 8007926:	9307      	strgt	r3, [sp, #28]
 8007928:	9b07      	ldr	r3, [sp, #28]
 800792a:	f1a3 0302 	sub.w	r3, r3, #2
 800792e:	bfcc      	ite	gt
 8007930:	2500      	movgt	r5, #0
 8007932:	2501      	movle	r5, #1
 8007934:	2b03      	cmp	r3, #3
 8007936:	f200 8085 	bhi.w	8007a44 <_dtoa_r+0x30c>
 800793a:	e8df f003 	tbb	[pc, r3]
 800793e:	3b2e      	.short	0x3b2e
 8007940:	5839      	.short	0x5839
 8007942:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007946:	441d      	add	r5, r3
 8007948:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800794c:	2b20      	cmp	r3, #32
 800794e:	bfc1      	itttt	gt
 8007950:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007954:	fa08 f803 	lslgt.w	r8, r8, r3
 8007958:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800795c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007960:	bfd6      	itet	le
 8007962:	f1c3 0320 	rsble	r3, r3, #32
 8007966:	ea48 0003 	orrgt.w	r0, r8, r3
 800796a:	fa06 f003 	lslle.w	r0, r6, r3
 800796e:	f7f8 fde9 	bl	8000544 <__aeabi_ui2d>
 8007972:	2201      	movs	r2, #1
 8007974:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007978:	3d01      	subs	r5, #1
 800797a:	920e      	str	r2, [sp, #56]	; 0x38
 800797c:	e76f      	b.n	800785e <_dtoa_r+0x126>
 800797e:	2301      	movs	r3, #1
 8007980:	e7b3      	b.n	80078ea <_dtoa_r+0x1b2>
 8007982:	900c      	str	r0, [sp, #48]	; 0x30
 8007984:	e7b2      	b.n	80078ec <_dtoa_r+0x1b4>
 8007986:	9b05      	ldr	r3, [sp, #20]
 8007988:	eba3 030b 	sub.w	r3, r3, fp
 800798c:	9305      	str	r3, [sp, #20]
 800798e:	f1cb 0300 	rsb	r3, fp, #0
 8007992:	9308      	str	r3, [sp, #32]
 8007994:	2300      	movs	r3, #0
 8007996:	930b      	str	r3, [sp, #44]	; 0x2c
 8007998:	e7bf      	b.n	800791a <_dtoa_r+0x1e2>
 800799a:	2300      	movs	r3, #0
 800799c:	9309      	str	r3, [sp, #36]	; 0x24
 800799e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	dc52      	bgt.n	8007a4a <_dtoa_r+0x312>
 80079a4:	2301      	movs	r3, #1
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	9304      	str	r3, [sp, #16]
 80079aa:	461a      	mov	r2, r3
 80079ac:	920a      	str	r2, [sp, #40]	; 0x28
 80079ae:	e00b      	b.n	80079c8 <_dtoa_r+0x290>
 80079b0:	2301      	movs	r3, #1
 80079b2:	e7f3      	b.n	800799c <_dtoa_r+0x264>
 80079b4:	2300      	movs	r3, #0
 80079b6:	9309      	str	r3, [sp, #36]	; 0x24
 80079b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ba:	445b      	add	r3, fp
 80079bc:	9301      	str	r3, [sp, #4]
 80079be:	3301      	adds	r3, #1
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	9304      	str	r3, [sp, #16]
 80079c4:	bfb8      	it	lt
 80079c6:	2301      	movlt	r3, #1
 80079c8:	69e0      	ldr	r0, [r4, #28]
 80079ca:	2100      	movs	r1, #0
 80079cc:	2204      	movs	r2, #4
 80079ce:	f102 0614 	add.w	r6, r2, #20
 80079d2:	429e      	cmp	r6, r3
 80079d4:	d93d      	bls.n	8007a52 <_dtoa_r+0x31a>
 80079d6:	6041      	str	r1, [r0, #4]
 80079d8:	4620      	mov	r0, r4
 80079da:	f000 fd9f 	bl	800851c <_Balloc>
 80079de:	9000      	str	r0, [sp, #0]
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d139      	bne.n	8007a58 <_dtoa_r+0x320>
 80079e4:	4b16      	ldr	r3, [pc, #88]	; (8007a40 <_dtoa_r+0x308>)
 80079e6:	4602      	mov	r2, r0
 80079e8:	f240 11af 	movw	r1, #431	; 0x1af
 80079ec:	e6bd      	b.n	800776a <_dtoa_r+0x32>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e7e1      	b.n	80079b6 <_dtoa_r+0x27e>
 80079f2:	2501      	movs	r5, #1
 80079f4:	2300      	movs	r3, #0
 80079f6:	9307      	str	r3, [sp, #28]
 80079f8:	9509      	str	r5, [sp, #36]	; 0x24
 80079fa:	f04f 33ff 	mov.w	r3, #4294967295
 80079fe:	9301      	str	r3, [sp, #4]
 8007a00:	9304      	str	r3, [sp, #16]
 8007a02:	2200      	movs	r2, #0
 8007a04:	2312      	movs	r3, #18
 8007a06:	e7d1      	b.n	80079ac <_dtoa_r+0x274>
 8007a08:	636f4361 	.word	0x636f4361
 8007a0c:	3fd287a7 	.word	0x3fd287a7
 8007a10:	8b60c8b3 	.word	0x8b60c8b3
 8007a14:	3fc68a28 	.word	0x3fc68a28
 8007a18:	509f79fb 	.word	0x509f79fb
 8007a1c:	3fd34413 	.word	0x3fd34413
 8007a20:	080097a5 	.word	0x080097a5
 8007a24:	080097bc 	.word	0x080097bc
 8007a28:	7ff00000 	.word	0x7ff00000
 8007a2c:	080097a1 	.word	0x080097a1
 8007a30:	08009798 	.word	0x08009798
 8007a34:	08009775 	.word	0x08009775
 8007a38:	3ff80000 	.word	0x3ff80000
 8007a3c:	080098a8 	.word	0x080098a8
 8007a40:	08009814 	.word	0x08009814
 8007a44:	2301      	movs	r3, #1
 8007a46:	9309      	str	r3, [sp, #36]	; 0x24
 8007a48:	e7d7      	b.n	80079fa <_dtoa_r+0x2c2>
 8007a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	9304      	str	r3, [sp, #16]
 8007a50:	e7ba      	b.n	80079c8 <_dtoa_r+0x290>
 8007a52:	3101      	adds	r1, #1
 8007a54:	0052      	lsls	r2, r2, #1
 8007a56:	e7ba      	b.n	80079ce <_dtoa_r+0x296>
 8007a58:	69e3      	ldr	r3, [r4, #28]
 8007a5a:	9a00      	ldr	r2, [sp, #0]
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	9b04      	ldr	r3, [sp, #16]
 8007a60:	2b0e      	cmp	r3, #14
 8007a62:	f200 80a8 	bhi.w	8007bb6 <_dtoa_r+0x47e>
 8007a66:	2d00      	cmp	r5, #0
 8007a68:	f000 80a5 	beq.w	8007bb6 <_dtoa_r+0x47e>
 8007a6c:	f1bb 0f00 	cmp.w	fp, #0
 8007a70:	dd38      	ble.n	8007ae4 <_dtoa_r+0x3ac>
 8007a72:	4bc0      	ldr	r3, [pc, #768]	; (8007d74 <_dtoa_r+0x63c>)
 8007a74:	f00b 020f 	and.w	r2, fp, #15
 8007a78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007a80:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007a84:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007a88:	d019      	beq.n	8007abe <_dtoa_r+0x386>
 8007a8a:	4bbb      	ldr	r3, [pc, #748]	; (8007d78 <_dtoa_r+0x640>)
 8007a8c:	ec51 0b18 	vmov	r0, r1, d8
 8007a90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a94:	f7f8 fefa 	bl	800088c <__aeabi_ddiv>
 8007a98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a9c:	f008 080f 	and.w	r8, r8, #15
 8007aa0:	2503      	movs	r5, #3
 8007aa2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007d78 <_dtoa_r+0x640>
 8007aa6:	f1b8 0f00 	cmp.w	r8, #0
 8007aaa:	d10a      	bne.n	8007ac2 <_dtoa_r+0x38a>
 8007aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ab0:	4632      	mov	r2, r6
 8007ab2:	463b      	mov	r3, r7
 8007ab4:	f7f8 feea 	bl	800088c <__aeabi_ddiv>
 8007ab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007abc:	e02b      	b.n	8007b16 <_dtoa_r+0x3de>
 8007abe:	2502      	movs	r5, #2
 8007ac0:	e7ef      	b.n	8007aa2 <_dtoa_r+0x36a>
 8007ac2:	f018 0f01 	tst.w	r8, #1
 8007ac6:	d008      	beq.n	8007ada <_dtoa_r+0x3a2>
 8007ac8:	4630      	mov	r0, r6
 8007aca:	4639      	mov	r1, r7
 8007acc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ad0:	f7f8 fdb2 	bl	8000638 <__aeabi_dmul>
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	460f      	mov	r7, r1
 8007ada:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007ade:	f109 0908 	add.w	r9, r9, #8
 8007ae2:	e7e0      	b.n	8007aa6 <_dtoa_r+0x36e>
 8007ae4:	f000 809f 	beq.w	8007c26 <_dtoa_r+0x4ee>
 8007ae8:	f1cb 0600 	rsb	r6, fp, #0
 8007aec:	4ba1      	ldr	r3, [pc, #644]	; (8007d74 <_dtoa_r+0x63c>)
 8007aee:	4fa2      	ldr	r7, [pc, #648]	; (8007d78 <_dtoa_r+0x640>)
 8007af0:	f006 020f 	and.w	r2, r6, #15
 8007af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	ec51 0b18 	vmov	r0, r1, d8
 8007b00:	f7f8 fd9a 	bl	8000638 <__aeabi_dmul>
 8007b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b08:	1136      	asrs	r6, r6, #4
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	2502      	movs	r5, #2
 8007b0e:	2e00      	cmp	r6, #0
 8007b10:	d17e      	bne.n	8007c10 <_dtoa_r+0x4d8>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1d0      	bne.n	8007ab8 <_dtoa_r+0x380>
 8007b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 8084 	beq.w	8007c2a <_dtoa_r+0x4f2>
 8007b22:	4b96      	ldr	r3, [pc, #600]	; (8007d7c <_dtoa_r+0x644>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	4640      	mov	r0, r8
 8007b28:	4649      	mov	r1, r9
 8007b2a:	f7f8 fff7 	bl	8000b1c <__aeabi_dcmplt>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d07b      	beq.n	8007c2a <_dtoa_r+0x4f2>
 8007b32:	9b04      	ldr	r3, [sp, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d078      	beq.n	8007c2a <_dtoa_r+0x4f2>
 8007b38:	9b01      	ldr	r3, [sp, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	dd39      	ble.n	8007bb2 <_dtoa_r+0x47a>
 8007b3e:	4b90      	ldr	r3, [pc, #576]	; (8007d80 <_dtoa_r+0x648>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	4640      	mov	r0, r8
 8007b44:	4649      	mov	r1, r9
 8007b46:	f7f8 fd77 	bl	8000638 <__aeabi_dmul>
 8007b4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b4e:	9e01      	ldr	r6, [sp, #4]
 8007b50:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007b54:	3501      	adds	r5, #1
 8007b56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f7f8 fd02 	bl	8000564 <__aeabi_i2d>
 8007b60:	4642      	mov	r2, r8
 8007b62:	464b      	mov	r3, r9
 8007b64:	f7f8 fd68 	bl	8000638 <__aeabi_dmul>
 8007b68:	4b86      	ldr	r3, [pc, #536]	; (8007d84 <_dtoa_r+0x64c>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f7f8 fbae 	bl	80002cc <__adddf3>
 8007b70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b78:	9303      	str	r3, [sp, #12]
 8007b7a:	2e00      	cmp	r6, #0
 8007b7c:	d158      	bne.n	8007c30 <_dtoa_r+0x4f8>
 8007b7e:	4b82      	ldr	r3, [pc, #520]	; (8007d88 <_dtoa_r+0x650>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	4640      	mov	r0, r8
 8007b84:	4649      	mov	r1, r9
 8007b86:	f7f8 fb9f 	bl	80002c8 <__aeabi_dsub>
 8007b8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b8e:	4680      	mov	r8, r0
 8007b90:	4689      	mov	r9, r1
 8007b92:	f7f8 ffe1 	bl	8000b58 <__aeabi_dcmpgt>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	f040 8296 	bne.w	80080c8 <_dtoa_r+0x990>
 8007b9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007ba0:	4640      	mov	r0, r8
 8007ba2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	f7f8 ffb8 	bl	8000b1c <__aeabi_dcmplt>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	f040 8289 	bne.w	80080c4 <_dtoa_r+0x98c>
 8007bb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007bb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f2c0 814e 	blt.w	8007e5a <_dtoa_r+0x722>
 8007bbe:	f1bb 0f0e 	cmp.w	fp, #14
 8007bc2:	f300 814a 	bgt.w	8007e5a <_dtoa_r+0x722>
 8007bc6:	4b6b      	ldr	r3, [pc, #428]	; (8007d74 <_dtoa_r+0x63c>)
 8007bc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007bcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f280 80dc 	bge.w	8007d90 <_dtoa_r+0x658>
 8007bd8:	9b04      	ldr	r3, [sp, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f300 80d8 	bgt.w	8007d90 <_dtoa_r+0x658>
 8007be0:	f040 826f 	bne.w	80080c2 <_dtoa_r+0x98a>
 8007be4:	4b68      	ldr	r3, [pc, #416]	; (8007d88 <_dtoa_r+0x650>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	4640      	mov	r0, r8
 8007bea:	4649      	mov	r1, r9
 8007bec:	f7f8 fd24 	bl	8000638 <__aeabi_dmul>
 8007bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bf4:	f7f8 ffa6 	bl	8000b44 <__aeabi_dcmpge>
 8007bf8:	9e04      	ldr	r6, [sp, #16]
 8007bfa:	4637      	mov	r7, r6
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f040 8245 	bne.w	800808c <_dtoa_r+0x954>
 8007c02:	9d00      	ldr	r5, [sp, #0]
 8007c04:	2331      	movs	r3, #49	; 0x31
 8007c06:	f805 3b01 	strb.w	r3, [r5], #1
 8007c0a:	f10b 0b01 	add.w	fp, fp, #1
 8007c0e:	e241      	b.n	8008094 <_dtoa_r+0x95c>
 8007c10:	07f2      	lsls	r2, r6, #31
 8007c12:	d505      	bpl.n	8007c20 <_dtoa_r+0x4e8>
 8007c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c18:	f7f8 fd0e 	bl	8000638 <__aeabi_dmul>
 8007c1c:	3501      	adds	r5, #1
 8007c1e:	2301      	movs	r3, #1
 8007c20:	1076      	asrs	r6, r6, #1
 8007c22:	3708      	adds	r7, #8
 8007c24:	e773      	b.n	8007b0e <_dtoa_r+0x3d6>
 8007c26:	2502      	movs	r5, #2
 8007c28:	e775      	b.n	8007b16 <_dtoa_r+0x3de>
 8007c2a:	9e04      	ldr	r6, [sp, #16]
 8007c2c:	465f      	mov	r7, fp
 8007c2e:	e792      	b.n	8007b56 <_dtoa_r+0x41e>
 8007c30:	9900      	ldr	r1, [sp, #0]
 8007c32:	4b50      	ldr	r3, [pc, #320]	; (8007d74 <_dtoa_r+0x63c>)
 8007c34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c38:	4431      	add	r1, r6
 8007c3a:	9102      	str	r1, [sp, #8]
 8007c3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c3e:	eeb0 9a47 	vmov.f32	s18, s14
 8007c42:	eef0 9a67 	vmov.f32	s19, s15
 8007c46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c4e:	2900      	cmp	r1, #0
 8007c50:	d044      	beq.n	8007cdc <_dtoa_r+0x5a4>
 8007c52:	494e      	ldr	r1, [pc, #312]	; (8007d8c <_dtoa_r+0x654>)
 8007c54:	2000      	movs	r0, #0
 8007c56:	f7f8 fe19 	bl	800088c <__aeabi_ddiv>
 8007c5a:	ec53 2b19 	vmov	r2, r3, d9
 8007c5e:	f7f8 fb33 	bl	80002c8 <__aeabi_dsub>
 8007c62:	9d00      	ldr	r5, [sp, #0]
 8007c64:	ec41 0b19 	vmov	d9, r0, r1
 8007c68:	4649      	mov	r1, r9
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	f7f8 ff94 	bl	8000b98 <__aeabi_d2iz>
 8007c70:	4606      	mov	r6, r0
 8007c72:	f7f8 fc77 	bl	8000564 <__aeabi_i2d>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	f7f8 fb23 	bl	80002c8 <__aeabi_dsub>
 8007c82:	3630      	adds	r6, #48	; 0x30
 8007c84:	f805 6b01 	strb.w	r6, [r5], #1
 8007c88:	ec53 2b19 	vmov	r2, r3, d9
 8007c8c:	4680      	mov	r8, r0
 8007c8e:	4689      	mov	r9, r1
 8007c90:	f7f8 ff44 	bl	8000b1c <__aeabi_dcmplt>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d164      	bne.n	8007d62 <_dtoa_r+0x62a>
 8007c98:	4642      	mov	r2, r8
 8007c9a:	464b      	mov	r3, r9
 8007c9c:	4937      	ldr	r1, [pc, #220]	; (8007d7c <_dtoa_r+0x644>)
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	f7f8 fb12 	bl	80002c8 <__aeabi_dsub>
 8007ca4:	ec53 2b19 	vmov	r2, r3, d9
 8007ca8:	f7f8 ff38 	bl	8000b1c <__aeabi_dcmplt>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f040 80b6 	bne.w	8007e1e <_dtoa_r+0x6e6>
 8007cb2:	9b02      	ldr	r3, [sp, #8]
 8007cb4:	429d      	cmp	r5, r3
 8007cb6:	f43f af7c 	beq.w	8007bb2 <_dtoa_r+0x47a>
 8007cba:	4b31      	ldr	r3, [pc, #196]	; (8007d80 <_dtoa_r+0x648>)
 8007cbc:	ec51 0b19 	vmov	r0, r1, d9
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f7f8 fcb9 	bl	8000638 <__aeabi_dmul>
 8007cc6:	4b2e      	ldr	r3, [pc, #184]	; (8007d80 <_dtoa_r+0x648>)
 8007cc8:	ec41 0b19 	vmov	d9, r0, r1
 8007ccc:	2200      	movs	r2, #0
 8007cce:	4640      	mov	r0, r8
 8007cd0:	4649      	mov	r1, r9
 8007cd2:	f7f8 fcb1 	bl	8000638 <__aeabi_dmul>
 8007cd6:	4680      	mov	r8, r0
 8007cd8:	4689      	mov	r9, r1
 8007cda:	e7c5      	b.n	8007c68 <_dtoa_r+0x530>
 8007cdc:	ec51 0b17 	vmov	r0, r1, d7
 8007ce0:	f7f8 fcaa 	bl	8000638 <__aeabi_dmul>
 8007ce4:	9b02      	ldr	r3, [sp, #8]
 8007ce6:	9d00      	ldr	r5, [sp, #0]
 8007ce8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cea:	ec41 0b19 	vmov	d9, r0, r1
 8007cee:	4649      	mov	r1, r9
 8007cf0:	4640      	mov	r0, r8
 8007cf2:	f7f8 ff51 	bl	8000b98 <__aeabi_d2iz>
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	f7f8 fc34 	bl	8000564 <__aeabi_i2d>
 8007cfc:	3630      	adds	r6, #48	; 0x30
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4640      	mov	r0, r8
 8007d04:	4649      	mov	r1, r9
 8007d06:	f7f8 fadf 	bl	80002c8 <__aeabi_dsub>
 8007d0a:	f805 6b01 	strb.w	r6, [r5], #1
 8007d0e:	9b02      	ldr	r3, [sp, #8]
 8007d10:	429d      	cmp	r5, r3
 8007d12:	4680      	mov	r8, r0
 8007d14:	4689      	mov	r9, r1
 8007d16:	f04f 0200 	mov.w	r2, #0
 8007d1a:	d124      	bne.n	8007d66 <_dtoa_r+0x62e>
 8007d1c:	4b1b      	ldr	r3, [pc, #108]	; (8007d8c <_dtoa_r+0x654>)
 8007d1e:	ec51 0b19 	vmov	r0, r1, d9
 8007d22:	f7f8 fad3 	bl	80002cc <__adddf3>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	f7f8 ff13 	bl	8000b58 <__aeabi_dcmpgt>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d173      	bne.n	8007e1e <_dtoa_r+0x6e6>
 8007d36:	ec53 2b19 	vmov	r2, r3, d9
 8007d3a:	4914      	ldr	r1, [pc, #80]	; (8007d8c <_dtoa_r+0x654>)
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	f7f8 fac3 	bl	80002c8 <__aeabi_dsub>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	4640      	mov	r0, r8
 8007d48:	4649      	mov	r1, r9
 8007d4a:	f7f8 fee7 	bl	8000b1c <__aeabi_dcmplt>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	f43f af2f 	beq.w	8007bb2 <_dtoa_r+0x47a>
 8007d54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d56:	1e6b      	subs	r3, r5, #1
 8007d58:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d5e:	2b30      	cmp	r3, #48	; 0x30
 8007d60:	d0f8      	beq.n	8007d54 <_dtoa_r+0x61c>
 8007d62:	46bb      	mov	fp, r7
 8007d64:	e04a      	b.n	8007dfc <_dtoa_r+0x6c4>
 8007d66:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <_dtoa_r+0x648>)
 8007d68:	f7f8 fc66 	bl	8000638 <__aeabi_dmul>
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	4689      	mov	r9, r1
 8007d70:	e7bd      	b.n	8007cee <_dtoa_r+0x5b6>
 8007d72:	bf00      	nop
 8007d74:	080098a8 	.word	0x080098a8
 8007d78:	08009880 	.word	0x08009880
 8007d7c:	3ff00000 	.word	0x3ff00000
 8007d80:	40240000 	.word	0x40240000
 8007d84:	401c0000 	.word	0x401c0000
 8007d88:	40140000 	.word	0x40140000
 8007d8c:	3fe00000 	.word	0x3fe00000
 8007d90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d94:	9d00      	ldr	r5, [sp, #0]
 8007d96:	4642      	mov	r2, r8
 8007d98:	464b      	mov	r3, r9
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	f7f8 fd75 	bl	800088c <__aeabi_ddiv>
 8007da2:	f7f8 fef9 	bl	8000b98 <__aeabi_d2iz>
 8007da6:	9001      	str	r0, [sp, #4]
 8007da8:	f7f8 fbdc 	bl	8000564 <__aeabi_i2d>
 8007dac:	4642      	mov	r2, r8
 8007dae:	464b      	mov	r3, r9
 8007db0:	f7f8 fc42 	bl	8000638 <__aeabi_dmul>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4630      	mov	r0, r6
 8007dba:	4639      	mov	r1, r7
 8007dbc:	f7f8 fa84 	bl	80002c8 <__aeabi_dsub>
 8007dc0:	9e01      	ldr	r6, [sp, #4]
 8007dc2:	9f04      	ldr	r7, [sp, #16]
 8007dc4:	3630      	adds	r6, #48	; 0x30
 8007dc6:	f805 6b01 	strb.w	r6, [r5], #1
 8007dca:	9e00      	ldr	r6, [sp, #0]
 8007dcc:	1bae      	subs	r6, r5, r6
 8007dce:	42b7      	cmp	r7, r6
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	d134      	bne.n	8007e40 <_dtoa_r+0x708>
 8007dd6:	f7f8 fa79 	bl	80002cc <__adddf3>
 8007dda:	4642      	mov	r2, r8
 8007ddc:	464b      	mov	r3, r9
 8007dde:	4606      	mov	r6, r0
 8007de0:	460f      	mov	r7, r1
 8007de2:	f7f8 feb9 	bl	8000b58 <__aeabi_dcmpgt>
 8007de6:	b9c8      	cbnz	r0, 8007e1c <_dtoa_r+0x6e4>
 8007de8:	4642      	mov	r2, r8
 8007dea:	464b      	mov	r3, r9
 8007dec:	4630      	mov	r0, r6
 8007dee:	4639      	mov	r1, r7
 8007df0:	f7f8 fe8a 	bl	8000b08 <__aeabi_dcmpeq>
 8007df4:	b110      	cbz	r0, 8007dfc <_dtoa_r+0x6c4>
 8007df6:	9b01      	ldr	r3, [sp, #4]
 8007df8:	07db      	lsls	r3, r3, #31
 8007dfa:	d40f      	bmi.n	8007e1c <_dtoa_r+0x6e4>
 8007dfc:	4651      	mov	r1, sl
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 fbcc 	bl	800859c <_Bfree>
 8007e04:	2300      	movs	r3, #0
 8007e06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e08:	702b      	strb	r3, [r5, #0]
 8007e0a:	f10b 0301 	add.w	r3, fp, #1
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f43f ace2 	beq.w	80077dc <_dtoa_r+0xa4>
 8007e18:	601d      	str	r5, [r3, #0]
 8007e1a:	e4df      	b.n	80077dc <_dtoa_r+0xa4>
 8007e1c:	465f      	mov	r7, fp
 8007e1e:	462b      	mov	r3, r5
 8007e20:	461d      	mov	r5, r3
 8007e22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e26:	2a39      	cmp	r2, #57	; 0x39
 8007e28:	d106      	bne.n	8007e38 <_dtoa_r+0x700>
 8007e2a:	9a00      	ldr	r2, [sp, #0]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d1f7      	bne.n	8007e20 <_dtoa_r+0x6e8>
 8007e30:	9900      	ldr	r1, [sp, #0]
 8007e32:	2230      	movs	r2, #48	; 0x30
 8007e34:	3701      	adds	r7, #1
 8007e36:	700a      	strb	r2, [r1, #0]
 8007e38:	781a      	ldrb	r2, [r3, #0]
 8007e3a:	3201      	adds	r2, #1
 8007e3c:	701a      	strb	r2, [r3, #0]
 8007e3e:	e790      	b.n	8007d62 <_dtoa_r+0x62a>
 8007e40:	4ba3      	ldr	r3, [pc, #652]	; (80080d0 <_dtoa_r+0x998>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	f7f8 fbf8 	bl	8000638 <__aeabi_dmul>
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	460f      	mov	r7, r1
 8007e50:	f7f8 fe5a 	bl	8000b08 <__aeabi_dcmpeq>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d09e      	beq.n	8007d96 <_dtoa_r+0x65e>
 8007e58:	e7d0      	b.n	8007dfc <_dtoa_r+0x6c4>
 8007e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e5c:	2a00      	cmp	r2, #0
 8007e5e:	f000 80ca 	beq.w	8007ff6 <_dtoa_r+0x8be>
 8007e62:	9a07      	ldr	r2, [sp, #28]
 8007e64:	2a01      	cmp	r2, #1
 8007e66:	f300 80ad 	bgt.w	8007fc4 <_dtoa_r+0x88c>
 8007e6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e6c:	2a00      	cmp	r2, #0
 8007e6e:	f000 80a5 	beq.w	8007fbc <_dtoa_r+0x884>
 8007e72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e76:	9e08      	ldr	r6, [sp, #32]
 8007e78:	9d05      	ldr	r5, [sp, #20]
 8007e7a:	9a05      	ldr	r2, [sp, #20]
 8007e7c:	441a      	add	r2, r3
 8007e7e:	9205      	str	r2, [sp, #20]
 8007e80:	9a06      	ldr	r2, [sp, #24]
 8007e82:	2101      	movs	r1, #1
 8007e84:	441a      	add	r2, r3
 8007e86:	4620      	mov	r0, r4
 8007e88:	9206      	str	r2, [sp, #24]
 8007e8a:	f000 fc3d 	bl	8008708 <__i2b>
 8007e8e:	4607      	mov	r7, r0
 8007e90:	b165      	cbz	r5, 8007eac <_dtoa_r+0x774>
 8007e92:	9b06      	ldr	r3, [sp, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	dd09      	ble.n	8007eac <_dtoa_r+0x774>
 8007e98:	42ab      	cmp	r3, r5
 8007e9a:	9a05      	ldr	r2, [sp, #20]
 8007e9c:	bfa8      	it	ge
 8007e9e:	462b      	movge	r3, r5
 8007ea0:	1ad2      	subs	r2, r2, r3
 8007ea2:	9205      	str	r2, [sp, #20]
 8007ea4:	9a06      	ldr	r2, [sp, #24]
 8007ea6:	1aed      	subs	r5, r5, r3
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	9306      	str	r3, [sp, #24]
 8007eac:	9b08      	ldr	r3, [sp, #32]
 8007eae:	b1f3      	cbz	r3, 8007eee <_dtoa_r+0x7b6>
 8007eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 80a3 	beq.w	8007ffe <_dtoa_r+0x8c6>
 8007eb8:	2e00      	cmp	r6, #0
 8007eba:	dd10      	ble.n	8007ede <_dtoa_r+0x7a6>
 8007ebc:	4639      	mov	r1, r7
 8007ebe:	4632      	mov	r2, r6
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f000 fce1 	bl	8008888 <__pow5mult>
 8007ec6:	4652      	mov	r2, sl
 8007ec8:	4601      	mov	r1, r0
 8007eca:	4607      	mov	r7, r0
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 fc31 	bl	8008734 <__multiply>
 8007ed2:	4651      	mov	r1, sl
 8007ed4:	4680      	mov	r8, r0
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f000 fb60 	bl	800859c <_Bfree>
 8007edc:	46c2      	mov	sl, r8
 8007ede:	9b08      	ldr	r3, [sp, #32]
 8007ee0:	1b9a      	subs	r2, r3, r6
 8007ee2:	d004      	beq.n	8007eee <_dtoa_r+0x7b6>
 8007ee4:	4651      	mov	r1, sl
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 fcce 	bl	8008888 <__pow5mult>
 8007eec:	4682      	mov	sl, r0
 8007eee:	2101      	movs	r1, #1
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f000 fc09 	bl	8008708 <__i2b>
 8007ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	4606      	mov	r6, r0
 8007efc:	f340 8081 	ble.w	8008002 <_dtoa_r+0x8ca>
 8007f00:	461a      	mov	r2, r3
 8007f02:	4601      	mov	r1, r0
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 fcbf 	bl	8008888 <__pow5mult>
 8007f0a:	9b07      	ldr	r3, [sp, #28]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	4606      	mov	r6, r0
 8007f10:	dd7a      	ble.n	8008008 <_dtoa_r+0x8d0>
 8007f12:	f04f 0800 	mov.w	r8, #0
 8007f16:	6933      	ldr	r3, [r6, #16]
 8007f18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f1c:	6918      	ldr	r0, [r3, #16]
 8007f1e:	f000 fba5 	bl	800866c <__hi0bits>
 8007f22:	f1c0 0020 	rsb	r0, r0, #32
 8007f26:	9b06      	ldr	r3, [sp, #24]
 8007f28:	4418      	add	r0, r3
 8007f2a:	f010 001f 	ands.w	r0, r0, #31
 8007f2e:	f000 8094 	beq.w	800805a <_dtoa_r+0x922>
 8007f32:	f1c0 0320 	rsb	r3, r0, #32
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	f340 8085 	ble.w	8008046 <_dtoa_r+0x90e>
 8007f3c:	9b05      	ldr	r3, [sp, #20]
 8007f3e:	f1c0 001c 	rsb	r0, r0, #28
 8007f42:	4403      	add	r3, r0
 8007f44:	9305      	str	r3, [sp, #20]
 8007f46:	9b06      	ldr	r3, [sp, #24]
 8007f48:	4403      	add	r3, r0
 8007f4a:	4405      	add	r5, r0
 8007f4c:	9306      	str	r3, [sp, #24]
 8007f4e:	9b05      	ldr	r3, [sp, #20]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	dd05      	ble.n	8007f60 <_dtoa_r+0x828>
 8007f54:	4651      	mov	r1, sl
 8007f56:	461a      	mov	r2, r3
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f000 fcef 	bl	800893c <__lshift>
 8007f5e:	4682      	mov	sl, r0
 8007f60:	9b06      	ldr	r3, [sp, #24]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	dd05      	ble.n	8007f72 <_dtoa_r+0x83a>
 8007f66:	4631      	mov	r1, r6
 8007f68:	461a      	mov	r2, r3
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 fce6 	bl	800893c <__lshift>
 8007f70:	4606      	mov	r6, r0
 8007f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d072      	beq.n	800805e <_dtoa_r+0x926>
 8007f78:	4631      	mov	r1, r6
 8007f7a:	4650      	mov	r0, sl
 8007f7c:	f000 fd4a 	bl	8008a14 <__mcmp>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	da6c      	bge.n	800805e <_dtoa_r+0x926>
 8007f84:	2300      	movs	r3, #0
 8007f86:	4651      	mov	r1, sl
 8007f88:	220a      	movs	r2, #10
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f000 fb28 	bl	80085e0 <__multadd>
 8007f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f96:	4682      	mov	sl, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 81b0 	beq.w	80082fe <_dtoa_r+0xbc6>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	4639      	mov	r1, r7
 8007fa2:	220a      	movs	r2, #10
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f000 fb1b 	bl	80085e0 <__multadd>
 8007faa:	9b01      	ldr	r3, [sp, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	4607      	mov	r7, r0
 8007fb0:	f300 8096 	bgt.w	80080e0 <_dtoa_r+0x9a8>
 8007fb4:	9b07      	ldr	r3, [sp, #28]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	dc59      	bgt.n	800806e <_dtoa_r+0x936>
 8007fba:	e091      	b.n	80080e0 <_dtoa_r+0x9a8>
 8007fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fc2:	e758      	b.n	8007e76 <_dtoa_r+0x73e>
 8007fc4:	9b04      	ldr	r3, [sp, #16]
 8007fc6:	1e5e      	subs	r6, r3, #1
 8007fc8:	9b08      	ldr	r3, [sp, #32]
 8007fca:	42b3      	cmp	r3, r6
 8007fcc:	bfbf      	itttt	lt
 8007fce:	9b08      	ldrlt	r3, [sp, #32]
 8007fd0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007fd2:	9608      	strlt	r6, [sp, #32]
 8007fd4:	1af3      	sublt	r3, r6, r3
 8007fd6:	bfb4      	ite	lt
 8007fd8:	18d2      	addlt	r2, r2, r3
 8007fda:	1b9e      	subge	r6, r3, r6
 8007fdc:	9b04      	ldr	r3, [sp, #16]
 8007fde:	bfbc      	itt	lt
 8007fe0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007fe2:	2600      	movlt	r6, #0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bfb7      	itett	lt
 8007fe8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007fec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007ff0:	1a9d      	sublt	r5, r3, r2
 8007ff2:	2300      	movlt	r3, #0
 8007ff4:	e741      	b.n	8007e7a <_dtoa_r+0x742>
 8007ff6:	9e08      	ldr	r6, [sp, #32]
 8007ff8:	9d05      	ldr	r5, [sp, #20]
 8007ffa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ffc:	e748      	b.n	8007e90 <_dtoa_r+0x758>
 8007ffe:	9a08      	ldr	r2, [sp, #32]
 8008000:	e770      	b.n	8007ee4 <_dtoa_r+0x7ac>
 8008002:	9b07      	ldr	r3, [sp, #28]
 8008004:	2b01      	cmp	r3, #1
 8008006:	dc19      	bgt.n	800803c <_dtoa_r+0x904>
 8008008:	9b02      	ldr	r3, [sp, #8]
 800800a:	b9bb      	cbnz	r3, 800803c <_dtoa_r+0x904>
 800800c:	9b03      	ldr	r3, [sp, #12]
 800800e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008012:	b99b      	cbnz	r3, 800803c <_dtoa_r+0x904>
 8008014:	9b03      	ldr	r3, [sp, #12]
 8008016:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800801a:	0d1b      	lsrs	r3, r3, #20
 800801c:	051b      	lsls	r3, r3, #20
 800801e:	b183      	cbz	r3, 8008042 <_dtoa_r+0x90a>
 8008020:	9b05      	ldr	r3, [sp, #20]
 8008022:	3301      	adds	r3, #1
 8008024:	9305      	str	r3, [sp, #20]
 8008026:	9b06      	ldr	r3, [sp, #24]
 8008028:	3301      	adds	r3, #1
 800802a:	9306      	str	r3, [sp, #24]
 800802c:	f04f 0801 	mov.w	r8, #1
 8008030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008032:	2b00      	cmp	r3, #0
 8008034:	f47f af6f 	bne.w	8007f16 <_dtoa_r+0x7de>
 8008038:	2001      	movs	r0, #1
 800803a:	e774      	b.n	8007f26 <_dtoa_r+0x7ee>
 800803c:	f04f 0800 	mov.w	r8, #0
 8008040:	e7f6      	b.n	8008030 <_dtoa_r+0x8f8>
 8008042:	4698      	mov	r8, r3
 8008044:	e7f4      	b.n	8008030 <_dtoa_r+0x8f8>
 8008046:	d082      	beq.n	8007f4e <_dtoa_r+0x816>
 8008048:	9a05      	ldr	r2, [sp, #20]
 800804a:	331c      	adds	r3, #28
 800804c:	441a      	add	r2, r3
 800804e:	9205      	str	r2, [sp, #20]
 8008050:	9a06      	ldr	r2, [sp, #24]
 8008052:	441a      	add	r2, r3
 8008054:	441d      	add	r5, r3
 8008056:	9206      	str	r2, [sp, #24]
 8008058:	e779      	b.n	8007f4e <_dtoa_r+0x816>
 800805a:	4603      	mov	r3, r0
 800805c:	e7f4      	b.n	8008048 <_dtoa_r+0x910>
 800805e:	9b04      	ldr	r3, [sp, #16]
 8008060:	2b00      	cmp	r3, #0
 8008062:	dc37      	bgt.n	80080d4 <_dtoa_r+0x99c>
 8008064:	9b07      	ldr	r3, [sp, #28]
 8008066:	2b02      	cmp	r3, #2
 8008068:	dd34      	ble.n	80080d4 <_dtoa_r+0x99c>
 800806a:	9b04      	ldr	r3, [sp, #16]
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	b963      	cbnz	r3, 800808c <_dtoa_r+0x954>
 8008072:	4631      	mov	r1, r6
 8008074:	2205      	movs	r2, #5
 8008076:	4620      	mov	r0, r4
 8008078:	f000 fab2 	bl	80085e0 <__multadd>
 800807c:	4601      	mov	r1, r0
 800807e:	4606      	mov	r6, r0
 8008080:	4650      	mov	r0, sl
 8008082:	f000 fcc7 	bl	8008a14 <__mcmp>
 8008086:	2800      	cmp	r0, #0
 8008088:	f73f adbb 	bgt.w	8007c02 <_dtoa_r+0x4ca>
 800808c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800808e:	9d00      	ldr	r5, [sp, #0]
 8008090:	ea6f 0b03 	mvn.w	fp, r3
 8008094:	f04f 0800 	mov.w	r8, #0
 8008098:	4631      	mov	r1, r6
 800809a:	4620      	mov	r0, r4
 800809c:	f000 fa7e 	bl	800859c <_Bfree>
 80080a0:	2f00      	cmp	r7, #0
 80080a2:	f43f aeab 	beq.w	8007dfc <_dtoa_r+0x6c4>
 80080a6:	f1b8 0f00 	cmp.w	r8, #0
 80080aa:	d005      	beq.n	80080b8 <_dtoa_r+0x980>
 80080ac:	45b8      	cmp	r8, r7
 80080ae:	d003      	beq.n	80080b8 <_dtoa_r+0x980>
 80080b0:	4641      	mov	r1, r8
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 fa72 	bl	800859c <_Bfree>
 80080b8:	4639      	mov	r1, r7
 80080ba:	4620      	mov	r0, r4
 80080bc:	f000 fa6e 	bl	800859c <_Bfree>
 80080c0:	e69c      	b.n	8007dfc <_dtoa_r+0x6c4>
 80080c2:	2600      	movs	r6, #0
 80080c4:	4637      	mov	r7, r6
 80080c6:	e7e1      	b.n	800808c <_dtoa_r+0x954>
 80080c8:	46bb      	mov	fp, r7
 80080ca:	4637      	mov	r7, r6
 80080cc:	e599      	b.n	8007c02 <_dtoa_r+0x4ca>
 80080ce:	bf00      	nop
 80080d0:	40240000 	.word	0x40240000
 80080d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 80c8 	beq.w	800826c <_dtoa_r+0xb34>
 80080dc:	9b04      	ldr	r3, [sp, #16]
 80080de:	9301      	str	r3, [sp, #4]
 80080e0:	2d00      	cmp	r5, #0
 80080e2:	dd05      	ble.n	80080f0 <_dtoa_r+0x9b8>
 80080e4:	4639      	mov	r1, r7
 80080e6:	462a      	mov	r2, r5
 80080e8:	4620      	mov	r0, r4
 80080ea:	f000 fc27 	bl	800893c <__lshift>
 80080ee:	4607      	mov	r7, r0
 80080f0:	f1b8 0f00 	cmp.w	r8, #0
 80080f4:	d05b      	beq.n	80081ae <_dtoa_r+0xa76>
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 fa0f 	bl	800851c <_Balloc>
 80080fe:	4605      	mov	r5, r0
 8008100:	b928      	cbnz	r0, 800810e <_dtoa_r+0x9d6>
 8008102:	4b83      	ldr	r3, [pc, #524]	; (8008310 <_dtoa_r+0xbd8>)
 8008104:	4602      	mov	r2, r0
 8008106:	f240 21ef 	movw	r1, #751	; 0x2ef
 800810a:	f7ff bb2e 	b.w	800776a <_dtoa_r+0x32>
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	3202      	adds	r2, #2
 8008112:	0092      	lsls	r2, r2, #2
 8008114:	f107 010c 	add.w	r1, r7, #12
 8008118:	300c      	adds	r0, #12
 800811a:	f000 ffab 	bl	8009074 <memcpy>
 800811e:	2201      	movs	r2, #1
 8008120:	4629      	mov	r1, r5
 8008122:	4620      	mov	r0, r4
 8008124:	f000 fc0a 	bl	800893c <__lshift>
 8008128:	9b00      	ldr	r3, [sp, #0]
 800812a:	3301      	adds	r3, #1
 800812c:	9304      	str	r3, [sp, #16]
 800812e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008132:	4413      	add	r3, r2
 8008134:	9308      	str	r3, [sp, #32]
 8008136:	9b02      	ldr	r3, [sp, #8]
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	46b8      	mov	r8, r7
 800813e:	9306      	str	r3, [sp, #24]
 8008140:	4607      	mov	r7, r0
 8008142:	9b04      	ldr	r3, [sp, #16]
 8008144:	4631      	mov	r1, r6
 8008146:	3b01      	subs	r3, #1
 8008148:	4650      	mov	r0, sl
 800814a:	9301      	str	r3, [sp, #4]
 800814c:	f7ff fa6c 	bl	8007628 <quorem>
 8008150:	4641      	mov	r1, r8
 8008152:	9002      	str	r0, [sp, #8]
 8008154:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008158:	4650      	mov	r0, sl
 800815a:	f000 fc5b 	bl	8008a14 <__mcmp>
 800815e:	463a      	mov	r2, r7
 8008160:	9005      	str	r0, [sp, #20]
 8008162:	4631      	mov	r1, r6
 8008164:	4620      	mov	r0, r4
 8008166:	f000 fc71 	bl	8008a4c <__mdiff>
 800816a:	68c2      	ldr	r2, [r0, #12]
 800816c:	4605      	mov	r5, r0
 800816e:	bb02      	cbnz	r2, 80081b2 <_dtoa_r+0xa7a>
 8008170:	4601      	mov	r1, r0
 8008172:	4650      	mov	r0, sl
 8008174:	f000 fc4e 	bl	8008a14 <__mcmp>
 8008178:	4602      	mov	r2, r0
 800817a:	4629      	mov	r1, r5
 800817c:	4620      	mov	r0, r4
 800817e:	9209      	str	r2, [sp, #36]	; 0x24
 8008180:	f000 fa0c 	bl	800859c <_Bfree>
 8008184:	9b07      	ldr	r3, [sp, #28]
 8008186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008188:	9d04      	ldr	r5, [sp, #16]
 800818a:	ea43 0102 	orr.w	r1, r3, r2
 800818e:	9b06      	ldr	r3, [sp, #24]
 8008190:	4319      	orrs	r1, r3
 8008192:	d110      	bne.n	80081b6 <_dtoa_r+0xa7e>
 8008194:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008198:	d029      	beq.n	80081ee <_dtoa_r+0xab6>
 800819a:	9b05      	ldr	r3, [sp, #20]
 800819c:	2b00      	cmp	r3, #0
 800819e:	dd02      	ble.n	80081a6 <_dtoa_r+0xa6e>
 80081a0:	9b02      	ldr	r3, [sp, #8]
 80081a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80081a6:	9b01      	ldr	r3, [sp, #4]
 80081a8:	f883 9000 	strb.w	r9, [r3]
 80081ac:	e774      	b.n	8008098 <_dtoa_r+0x960>
 80081ae:	4638      	mov	r0, r7
 80081b0:	e7ba      	b.n	8008128 <_dtoa_r+0x9f0>
 80081b2:	2201      	movs	r2, #1
 80081b4:	e7e1      	b.n	800817a <_dtoa_r+0xa42>
 80081b6:	9b05      	ldr	r3, [sp, #20]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	db04      	blt.n	80081c6 <_dtoa_r+0xa8e>
 80081bc:	9907      	ldr	r1, [sp, #28]
 80081be:	430b      	orrs	r3, r1
 80081c0:	9906      	ldr	r1, [sp, #24]
 80081c2:	430b      	orrs	r3, r1
 80081c4:	d120      	bne.n	8008208 <_dtoa_r+0xad0>
 80081c6:	2a00      	cmp	r2, #0
 80081c8:	dded      	ble.n	80081a6 <_dtoa_r+0xa6e>
 80081ca:	4651      	mov	r1, sl
 80081cc:	2201      	movs	r2, #1
 80081ce:	4620      	mov	r0, r4
 80081d0:	f000 fbb4 	bl	800893c <__lshift>
 80081d4:	4631      	mov	r1, r6
 80081d6:	4682      	mov	sl, r0
 80081d8:	f000 fc1c 	bl	8008a14 <__mcmp>
 80081dc:	2800      	cmp	r0, #0
 80081de:	dc03      	bgt.n	80081e8 <_dtoa_r+0xab0>
 80081e0:	d1e1      	bne.n	80081a6 <_dtoa_r+0xa6e>
 80081e2:	f019 0f01 	tst.w	r9, #1
 80081e6:	d0de      	beq.n	80081a6 <_dtoa_r+0xa6e>
 80081e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081ec:	d1d8      	bne.n	80081a0 <_dtoa_r+0xa68>
 80081ee:	9a01      	ldr	r2, [sp, #4]
 80081f0:	2339      	movs	r3, #57	; 0x39
 80081f2:	7013      	strb	r3, [r2, #0]
 80081f4:	462b      	mov	r3, r5
 80081f6:	461d      	mov	r5, r3
 80081f8:	3b01      	subs	r3, #1
 80081fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081fe:	2a39      	cmp	r2, #57	; 0x39
 8008200:	d06c      	beq.n	80082dc <_dtoa_r+0xba4>
 8008202:	3201      	adds	r2, #1
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	e747      	b.n	8008098 <_dtoa_r+0x960>
 8008208:	2a00      	cmp	r2, #0
 800820a:	dd07      	ble.n	800821c <_dtoa_r+0xae4>
 800820c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008210:	d0ed      	beq.n	80081ee <_dtoa_r+0xab6>
 8008212:	9a01      	ldr	r2, [sp, #4]
 8008214:	f109 0301 	add.w	r3, r9, #1
 8008218:	7013      	strb	r3, [r2, #0]
 800821a:	e73d      	b.n	8008098 <_dtoa_r+0x960>
 800821c:	9b04      	ldr	r3, [sp, #16]
 800821e:	9a08      	ldr	r2, [sp, #32]
 8008220:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008224:	4293      	cmp	r3, r2
 8008226:	d043      	beq.n	80082b0 <_dtoa_r+0xb78>
 8008228:	4651      	mov	r1, sl
 800822a:	2300      	movs	r3, #0
 800822c:	220a      	movs	r2, #10
 800822e:	4620      	mov	r0, r4
 8008230:	f000 f9d6 	bl	80085e0 <__multadd>
 8008234:	45b8      	cmp	r8, r7
 8008236:	4682      	mov	sl, r0
 8008238:	f04f 0300 	mov.w	r3, #0
 800823c:	f04f 020a 	mov.w	r2, #10
 8008240:	4641      	mov	r1, r8
 8008242:	4620      	mov	r0, r4
 8008244:	d107      	bne.n	8008256 <_dtoa_r+0xb1e>
 8008246:	f000 f9cb 	bl	80085e0 <__multadd>
 800824a:	4680      	mov	r8, r0
 800824c:	4607      	mov	r7, r0
 800824e:	9b04      	ldr	r3, [sp, #16]
 8008250:	3301      	adds	r3, #1
 8008252:	9304      	str	r3, [sp, #16]
 8008254:	e775      	b.n	8008142 <_dtoa_r+0xa0a>
 8008256:	f000 f9c3 	bl	80085e0 <__multadd>
 800825a:	4639      	mov	r1, r7
 800825c:	4680      	mov	r8, r0
 800825e:	2300      	movs	r3, #0
 8008260:	220a      	movs	r2, #10
 8008262:	4620      	mov	r0, r4
 8008264:	f000 f9bc 	bl	80085e0 <__multadd>
 8008268:	4607      	mov	r7, r0
 800826a:	e7f0      	b.n	800824e <_dtoa_r+0xb16>
 800826c:	9b04      	ldr	r3, [sp, #16]
 800826e:	9301      	str	r3, [sp, #4]
 8008270:	9d00      	ldr	r5, [sp, #0]
 8008272:	4631      	mov	r1, r6
 8008274:	4650      	mov	r0, sl
 8008276:	f7ff f9d7 	bl	8007628 <quorem>
 800827a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800827e:	9b00      	ldr	r3, [sp, #0]
 8008280:	f805 9b01 	strb.w	r9, [r5], #1
 8008284:	1aea      	subs	r2, r5, r3
 8008286:	9b01      	ldr	r3, [sp, #4]
 8008288:	4293      	cmp	r3, r2
 800828a:	dd07      	ble.n	800829c <_dtoa_r+0xb64>
 800828c:	4651      	mov	r1, sl
 800828e:	2300      	movs	r3, #0
 8008290:	220a      	movs	r2, #10
 8008292:	4620      	mov	r0, r4
 8008294:	f000 f9a4 	bl	80085e0 <__multadd>
 8008298:	4682      	mov	sl, r0
 800829a:	e7ea      	b.n	8008272 <_dtoa_r+0xb3a>
 800829c:	9b01      	ldr	r3, [sp, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bfc8      	it	gt
 80082a2:	461d      	movgt	r5, r3
 80082a4:	9b00      	ldr	r3, [sp, #0]
 80082a6:	bfd8      	it	le
 80082a8:	2501      	movle	r5, #1
 80082aa:	441d      	add	r5, r3
 80082ac:	f04f 0800 	mov.w	r8, #0
 80082b0:	4651      	mov	r1, sl
 80082b2:	2201      	movs	r2, #1
 80082b4:	4620      	mov	r0, r4
 80082b6:	f000 fb41 	bl	800893c <__lshift>
 80082ba:	4631      	mov	r1, r6
 80082bc:	4682      	mov	sl, r0
 80082be:	f000 fba9 	bl	8008a14 <__mcmp>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	dc96      	bgt.n	80081f4 <_dtoa_r+0xabc>
 80082c6:	d102      	bne.n	80082ce <_dtoa_r+0xb96>
 80082c8:	f019 0f01 	tst.w	r9, #1
 80082cc:	d192      	bne.n	80081f4 <_dtoa_r+0xabc>
 80082ce:	462b      	mov	r3, r5
 80082d0:	461d      	mov	r5, r3
 80082d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082d6:	2a30      	cmp	r2, #48	; 0x30
 80082d8:	d0fa      	beq.n	80082d0 <_dtoa_r+0xb98>
 80082da:	e6dd      	b.n	8008098 <_dtoa_r+0x960>
 80082dc:	9a00      	ldr	r2, [sp, #0]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d189      	bne.n	80081f6 <_dtoa_r+0xabe>
 80082e2:	f10b 0b01 	add.w	fp, fp, #1
 80082e6:	2331      	movs	r3, #49	; 0x31
 80082e8:	e796      	b.n	8008218 <_dtoa_r+0xae0>
 80082ea:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <_dtoa_r+0xbdc>)
 80082ec:	f7ff ba99 	b.w	8007822 <_dtoa_r+0xea>
 80082f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f47f aa6d 	bne.w	80077d2 <_dtoa_r+0x9a>
 80082f8:	4b07      	ldr	r3, [pc, #28]	; (8008318 <_dtoa_r+0xbe0>)
 80082fa:	f7ff ba92 	b.w	8007822 <_dtoa_r+0xea>
 80082fe:	9b01      	ldr	r3, [sp, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	dcb5      	bgt.n	8008270 <_dtoa_r+0xb38>
 8008304:	9b07      	ldr	r3, [sp, #28]
 8008306:	2b02      	cmp	r3, #2
 8008308:	f73f aeb1 	bgt.w	800806e <_dtoa_r+0x936>
 800830c:	e7b0      	b.n	8008270 <_dtoa_r+0xb38>
 800830e:	bf00      	nop
 8008310:	08009814 	.word	0x08009814
 8008314:	08009774 	.word	0x08009774
 8008318:	08009798 	.word	0x08009798

0800831c <_free_r>:
 800831c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800831e:	2900      	cmp	r1, #0
 8008320:	d044      	beq.n	80083ac <_free_r+0x90>
 8008322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008326:	9001      	str	r0, [sp, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	f1a1 0404 	sub.w	r4, r1, #4
 800832e:	bfb8      	it	lt
 8008330:	18e4      	addlt	r4, r4, r3
 8008332:	f000 f8e7 	bl	8008504 <__malloc_lock>
 8008336:	4a1e      	ldr	r2, [pc, #120]	; (80083b0 <_free_r+0x94>)
 8008338:	9801      	ldr	r0, [sp, #4]
 800833a:	6813      	ldr	r3, [r2, #0]
 800833c:	b933      	cbnz	r3, 800834c <_free_r+0x30>
 800833e:	6063      	str	r3, [r4, #4]
 8008340:	6014      	str	r4, [r2, #0]
 8008342:	b003      	add	sp, #12
 8008344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008348:	f000 b8e2 	b.w	8008510 <__malloc_unlock>
 800834c:	42a3      	cmp	r3, r4
 800834e:	d908      	bls.n	8008362 <_free_r+0x46>
 8008350:	6825      	ldr	r5, [r4, #0]
 8008352:	1961      	adds	r1, r4, r5
 8008354:	428b      	cmp	r3, r1
 8008356:	bf01      	itttt	eq
 8008358:	6819      	ldreq	r1, [r3, #0]
 800835a:	685b      	ldreq	r3, [r3, #4]
 800835c:	1949      	addeq	r1, r1, r5
 800835e:	6021      	streq	r1, [r4, #0]
 8008360:	e7ed      	b.n	800833e <_free_r+0x22>
 8008362:	461a      	mov	r2, r3
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	b10b      	cbz	r3, 800836c <_free_r+0x50>
 8008368:	42a3      	cmp	r3, r4
 800836a:	d9fa      	bls.n	8008362 <_free_r+0x46>
 800836c:	6811      	ldr	r1, [r2, #0]
 800836e:	1855      	adds	r5, r2, r1
 8008370:	42a5      	cmp	r5, r4
 8008372:	d10b      	bne.n	800838c <_free_r+0x70>
 8008374:	6824      	ldr	r4, [r4, #0]
 8008376:	4421      	add	r1, r4
 8008378:	1854      	adds	r4, r2, r1
 800837a:	42a3      	cmp	r3, r4
 800837c:	6011      	str	r1, [r2, #0]
 800837e:	d1e0      	bne.n	8008342 <_free_r+0x26>
 8008380:	681c      	ldr	r4, [r3, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	6053      	str	r3, [r2, #4]
 8008386:	440c      	add	r4, r1
 8008388:	6014      	str	r4, [r2, #0]
 800838a:	e7da      	b.n	8008342 <_free_r+0x26>
 800838c:	d902      	bls.n	8008394 <_free_r+0x78>
 800838e:	230c      	movs	r3, #12
 8008390:	6003      	str	r3, [r0, #0]
 8008392:	e7d6      	b.n	8008342 <_free_r+0x26>
 8008394:	6825      	ldr	r5, [r4, #0]
 8008396:	1961      	adds	r1, r4, r5
 8008398:	428b      	cmp	r3, r1
 800839a:	bf04      	itt	eq
 800839c:	6819      	ldreq	r1, [r3, #0]
 800839e:	685b      	ldreq	r3, [r3, #4]
 80083a0:	6063      	str	r3, [r4, #4]
 80083a2:	bf04      	itt	eq
 80083a4:	1949      	addeq	r1, r1, r5
 80083a6:	6021      	streq	r1, [r4, #0]
 80083a8:	6054      	str	r4, [r2, #4]
 80083aa:	e7ca      	b.n	8008342 <_free_r+0x26>
 80083ac:	b003      	add	sp, #12
 80083ae:	bd30      	pop	{r4, r5, pc}
 80083b0:	20000a6c 	.word	0x20000a6c

080083b4 <malloc>:
 80083b4:	4b02      	ldr	r3, [pc, #8]	; (80083c0 <malloc+0xc>)
 80083b6:	4601      	mov	r1, r0
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	f000 b823 	b.w	8008404 <_malloc_r>
 80083be:	bf00      	nop
 80083c0:	20000064 	.word	0x20000064

080083c4 <sbrk_aligned>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	4e0e      	ldr	r6, [pc, #56]	; (8008400 <sbrk_aligned+0x3c>)
 80083c8:	460c      	mov	r4, r1
 80083ca:	6831      	ldr	r1, [r6, #0]
 80083cc:	4605      	mov	r5, r0
 80083ce:	b911      	cbnz	r1, 80083d6 <sbrk_aligned+0x12>
 80083d0:	f000 fe40 	bl	8009054 <_sbrk_r>
 80083d4:	6030      	str	r0, [r6, #0]
 80083d6:	4621      	mov	r1, r4
 80083d8:	4628      	mov	r0, r5
 80083da:	f000 fe3b 	bl	8009054 <_sbrk_r>
 80083de:	1c43      	adds	r3, r0, #1
 80083e0:	d00a      	beq.n	80083f8 <sbrk_aligned+0x34>
 80083e2:	1cc4      	adds	r4, r0, #3
 80083e4:	f024 0403 	bic.w	r4, r4, #3
 80083e8:	42a0      	cmp	r0, r4
 80083ea:	d007      	beq.n	80083fc <sbrk_aligned+0x38>
 80083ec:	1a21      	subs	r1, r4, r0
 80083ee:	4628      	mov	r0, r5
 80083f0:	f000 fe30 	bl	8009054 <_sbrk_r>
 80083f4:	3001      	adds	r0, #1
 80083f6:	d101      	bne.n	80083fc <sbrk_aligned+0x38>
 80083f8:	f04f 34ff 	mov.w	r4, #4294967295
 80083fc:	4620      	mov	r0, r4
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
 8008400:	20000a70 	.word	0x20000a70

08008404 <_malloc_r>:
 8008404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008408:	1ccd      	adds	r5, r1, #3
 800840a:	f025 0503 	bic.w	r5, r5, #3
 800840e:	3508      	adds	r5, #8
 8008410:	2d0c      	cmp	r5, #12
 8008412:	bf38      	it	cc
 8008414:	250c      	movcc	r5, #12
 8008416:	2d00      	cmp	r5, #0
 8008418:	4607      	mov	r7, r0
 800841a:	db01      	blt.n	8008420 <_malloc_r+0x1c>
 800841c:	42a9      	cmp	r1, r5
 800841e:	d905      	bls.n	800842c <_malloc_r+0x28>
 8008420:	230c      	movs	r3, #12
 8008422:	603b      	str	r3, [r7, #0]
 8008424:	2600      	movs	r6, #0
 8008426:	4630      	mov	r0, r6
 8008428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800842c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008500 <_malloc_r+0xfc>
 8008430:	f000 f868 	bl	8008504 <__malloc_lock>
 8008434:	f8d8 3000 	ldr.w	r3, [r8]
 8008438:	461c      	mov	r4, r3
 800843a:	bb5c      	cbnz	r4, 8008494 <_malloc_r+0x90>
 800843c:	4629      	mov	r1, r5
 800843e:	4638      	mov	r0, r7
 8008440:	f7ff ffc0 	bl	80083c4 <sbrk_aligned>
 8008444:	1c43      	adds	r3, r0, #1
 8008446:	4604      	mov	r4, r0
 8008448:	d155      	bne.n	80084f6 <_malloc_r+0xf2>
 800844a:	f8d8 4000 	ldr.w	r4, [r8]
 800844e:	4626      	mov	r6, r4
 8008450:	2e00      	cmp	r6, #0
 8008452:	d145      	bne.n	80084e0 <_malloc_r+0xdc>
 8008454:	2c00      	cmp	r4, #0
 8008456:	d048      	beq.n	80084ea <_malloc_r+0xe6>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	4631      	mov	r1, r6
 800845c:	4638      	mov	r0, r7
 800845e:	eb04 0903 	add.w	r9, r4, r3
 8008462:	f000 fdf7 	bl	8009054 <_sbrk_r>
 8008466:	4581      	cmp	r9, r0
 8008468:	d13f      	bne.n	80084ea <_malloc_r+0xe6>
 800846a:	6821      	ldr	r1, [r4, #0]
 800846c:	1a6d      	subs	r5, r5, r1
 800846e:	4629      	mov	r1, r5
 8008470:	4638      	mov	r0, r7
 8008472:	f7ff ffa7 	bl	80083c4 <sbrk_aligned>
 8008476:	3001      	adds	r0, #1
 8008478:	d037      	beq.n	80084ea <_malloc_r+0xe6>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	442b      	add	r3, r5
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	f8d8 3000 	ldr.w	r3, [r8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d038      	beq.n	80084fa <_malloc_r+0xf6>
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	42a2      	cmp	r2, r4
 800848c:	d12b      	bne.n	80084e6 <_malloc_r+0xe2>
 800848e:	2200      	movs	r2, #0
 8008490:	605a      	str	r2, [r3, #4]
 8008492:	e00f      	b.n	80084b4 <_malloc_r+0xb0>
 8008494:	6822      	ldr	r2, [r4, #0]
 8008496:	1b52      	subs	r2, r2, r5
 8008498:	d41f      	bmi.n	80084da <_malloc_r+0xd6>
 800849a:	2a0b      	cmp	r2, #11
 800849c:	d917      	bls.n	80084ce <_malloc_r+0xca>
 800849e:	1961      	adds	r1, r4, r5
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	6025      	str	r5, [r4, #0]
 80084a4:	bf18      	it	ne
 80084a6:	6059      	strne	r1, [r3, #4]
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	bf08      	it	eq
 80084ac:	f8c8 1000 	streq.w	r1, [r8]
 80084b0:	5162      	str	r2, [r4, r5]
 80084b2:	604b      	str	r3, [r1, #4]
 80084b4:	4638      	mov	r0, r7
 80084b6:	f104 060b 	add.w	r6, r4, #11
 80084ba:	f000 f829 	bl	8008510 <__malloc_unlock>
 80084be:	f026 0607 	bic.w	r6, r6, #7
 80084c2:	1d23      	adds	r3, r4, #4
 80084c4:	1af2      	subs	r2, r6, r3
 80084c6:	d0ae      	beq.n	8008426 <_malloc_r+0x22>
 80084c8:	1b9b      	subs	r3, r3, r6
 80084ca:	50a3      	str	r3, [r4, r2]
 80084cc:	e7ab      	b.n	8008426 <_malloc_r+0x22>
 80084ce:	42a3      	cmp	r3, r4
 80084d0:	6862      	ldr	r2, [r4, #4]
 80084d2:	d1dd      	bne.n	8008490 <_malloc_r+0x8c>
 80084d4:	f8c8 2000 	str.w	r2, [r8]
 80084d8:	e7ec      	b.n	80084b4 <_malloc_r+0xb0>
 80084da:	4623      	mov	r3, r4
 80084dc:	6864      	ldr	r4, [r4, #4]
 80084de:	e7ac      	b.n	800843a <_malloc_r+0x36>
 80084e0:	4634      	mov	r4, r6
 80084e2:	6876      	ldr	r6, [r6, #4]
 80084e4:	e7b4      	b.n	8008450 <_malloc_r+0x4c>
 80084e6:	4613      	mov	r3, r2
 80084e8:	e7cc      	b.n	8008484 <_malloc_r+0x80>
 80084ea:	230c      	movs	r3, #12
 80084ec:	603b      	str	r3, [r7, #0]
 80084ee:	4638      	mov	r0, r7
 80084f0:	f000 f80e 	bl	8008510 <__malloc_unlock>
 80084f4:	e797      	b.n	8008426 <_malloc_r+0x22>
 80084f6:	6025      	str	r5, [r4, #0]
 80084f8:	e7dc      	b.n	80084b4 <_malloc_r+0xb0>
 80084fa:	605b      	str	r3, [r3, #4]
 80084fc:	deff      	udf	#255	; 0xff
 80084fe:	bf00      	nop
 8008500:	20000a6c 	.word	0x20000a6c

08008504 <__malloc_lock>:
 8008504:	4801      	ldr	r0, [pc, #4]	; (800850c <__malloc_lock+0x8>)
 8008506:	f7ff b88d 	b.w	8007624 <__retarget_lock_acquire_recursive>
 800850a:	bf00      	nop
 800850c:	20000a68 	.word	0x20000a68

08008510 <__malloc_unlock>:
 8008510:	4801      	ldr	r0, [pc, #4]	; (8008518 <__malloc_unlock+0x8>)
 8008512:	f7ff b888 	b.w	8007626 <__retarget_lock_release_recursive>
 8008516:	bf00      	nop
 8008518:	20000a68 	.word	0x20000a68

0800851c <_Balloc>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	69c6      	ldr	r6, [r0, #28]
 8008520:	4604      	mov	r4, r0
 8008522:	460d      	mov	r5, r1
 8008524:	b976      	cbnz	r6, 8008544 <_Balloc+0x28>
 8008526:	2010      	movs	r0, #16
 8008528:	f7ff ff44 	bl	80083b4 <malloc>
 800852c:	4602      	mov	r2, r0
 800852e:	61e0      	str	r0, [r4, #28]
 8008530:	b920      	cbnz	r0, 800853c <_Balloc+0x20>
 8008532:	4b18      	ldr	r3, [pc, #96]	; (8008594 <_Balloc+0x78>)
 8008534:	4818      	ldr	r0, [pc, #96]	; (8008598 <_Balloc+0x7c>)
 8008536:	216b      	movs	r1, #107	; 0x6b
 8008538:	f000 fdaa 	bl	8009090 <__assert_func>
 800853c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008540:	6006      	str	r6, [r0, #0]
 8008542:	60c6      	str	r6, [r0, #12]
 8008544:	69e6      	ldr	r6, [r4, #28]
 8008546:	68f3      	ldr	r3, [r6, #12]
 8008548:	b183      	cbz	r3, 800856c <_Balloc+0x50>
 800854a:	69e3      	ldr	r3, [r4, #28]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008552:	b9b8      	cbnz	r0, 8008584 <_Balloc+0x68>
 8008554:	2101      	movs	r1, #1
 8008556:	fa01 f605 	lsl.w	r6, r1, r5
 800855a:	1d72      	adds	r2, r6, #5
 800855c:	0092      	lsls	r2, r2, #2
 800855e:	4620      	mov	r0, r4
 8008560:	f000 fdb4 	bl	80090cc <_calloc_r>
 8008564:	b160      	cbz	r0, 8008580 <_Balloc+0x64>
 8008566:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800856a:	e00e      	b.n	800858a <_Balloc+0x6e>
 800856c:	2221      	movs	r2, #33	; 0x21
 800856e:	2104      	movs	r1, #4
 8008570:	4620      	mov	r0, r4
 8008572:	f000 fdab 	bl	80090cc <_calloc_r>
 8008576:	69e3      	ldr	r3, [r4, #28]
 8008578:	60f0      	str	r0, [r6, #12]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e4      	bne.n	800854a <_Balloc+0x2e>
 8008580:	2000      	movs	r0, #0
 8008582:	bd70      	pop	{r4, r5, r6, pc}
 8008584:	6802      	ldr	r2, [r0, #0]
 8008586:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800858a:	2300      	movs	r3, #0
 800858c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008590:	e7f7      	b.n	8008582 <_Balloc+0x66>
 8008592:	bf00      	nop
 8008594:	080097a5 	.word	0x080097a5
 8008598:	08009825 	.word	0x08009825

0800859c <_Bfree>:
 800859c:	b570      	push	{r4, r5, r6, lr}
 800859e:	69c6      	ldr	r6, [r0, #28]
 80085a0:	4605      	mov	r5, r0
 80085a2:	460c      	mov	r4, r1
 80085a4:	b976      	cbnz	r6, 80085c4 <_Bfree+0x28>
 80085a6:	2010      	movs	r0, #16
 80085a8:	f7ff ff04 	bl	80083b4 <malloc>
 80085ac:	4602      	mov	r2, r0
 80085ae:	61e8      	str	r0, [r5, #28]
 80085b0:	b920      	cbnz	r0, 80085bc <_Bfree+0x20>
 80085b2:	4b09      	ldr	r3, [pc, #36]	; (80085d8 <_Bfree+0x3c>)
 80085b4:	4809      	ldr	r0, [pc, #36]	; (80085dc <_Bfree+0x40>)
 80085b6:	218f      	movs	r1, #143	; 0x8f
 80085b8:	f000 fd6a 	bl	8009090 <__assert_func>
 80085bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085c0:	6006      	str	r6, [r0, #0]
 80085c2:	60c6      	str	r6, [r0, #12]
 80085c4:	b13c      	cbz	r4, 80085d6 <_Bfree+0x3a>
 80085c6:	69eb      	ldr	r3, [r5, #28]
 80085c8:	6862      	ldr	r2, [r4, #4]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085d0:	6021      	str	r1, [r4, #0]
 80085d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085d6:	bd70      	pop	{r4, r5, r6, pc}
 80085d8:	080097a5 	.word	0x080097a5
 80085dc:	08009825 	.word	0x08009825

080085e0 <__multadd>:
 80085e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e4:	690d      	ldr	r5, [r1, #16]
 80085e6:	4607      	mov	r7, r0
 80085e8:	460c      	mov	r4, r1
 80085ea:	461e      	mov	r6, r3
 80085ec:	f101 0c14 	add.w	ip, r1, #20
 80085f0:	2000      	movs	r0, #0
 80085f2:	f8dc 3000 	ldr.w	r3, [ip]
 80085f6:	b299      	uxth	r1, r3
 80085f8:	fb02 6101 	mla	r1, r2, r1, r6
 80085fc:	0c1e      	lsrs	r6, r3, #16
 80085fe:	0c0b      	lsrs	r3, r1, #16
 8008600:	fb02 3306 	mla	r3, r2, r6, r3
 8008604:	b289      	uxth	r1, r1
 8008606:	3001      	adds	r0, #1
 8008608:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800860c:	4285      	cmp	r5, r0
 800860e:	f84c 1b04 	str.w	r1, [ip], #4
 8008612:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008616:	dcec      	bgt.n	80085f2 <__multadd+0x12>
 8008618:	b30e      	cbz	r6, 800865e <__multadd+0x7e>
 800861a:	68a3      	ldr	r3, [r4, #8]
 800861c:	42ab      	cmp	r3, r5
 800861e:	dc19      	bgt.n	8008654 <__multadd+0x74>
 8008620:	6861      	ldr	r1, [r4, #4]
 8008622:	4638      	mov	r0, r7
 8008624:	3101      	adds	r1, #1
 8008626:	f7ff ff79 	bl	800851c <_Balloc>
 800862a:	4680      	mov	r8, r0
 800862c:	b928      	cbnz	r0, 800863a <__multadd+0x5a>
 800862e:	4602      	mov	r2, r0
 8008630:	4b0c      	ldr	r3, [pc, #48]	; (8008664 <__multadd+0x84>)
 8008632:	480d      	ldr	r0, [pc, #52]	; (8008668 <__multadd+0x88>)
 8008634:	21ba      	movs	r1, #186	; 0xba
 8008636:	f000 fd2b 	bl	8009090 <__assert_func>
 800863a:	6922      	ldr	r2, [r4, #16]
 800863c:	3202      	adds	r2, #2
 800863e:	f104 010c 	add.w	r1, r4, #12
 8008642:	0092      	lsls	r2, r2, #2
 8008644:	300c      	adds	r0, #12
 8008646:	f000 fd15 	bl	8009074 <memcpy>
 800864a:	4621      	mov	r1, r4
 800864c:	4638      	mov	r0, r7
 800864e:	f7ff ffa5 	bl	800859c <_Bfree>
 8008652:	4644      	mov	r4, r8
 8008654:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008658:	3501      	adds	r5, #1
 800865a:	615e      	str	r6, [r3, #20]
 800865c:	6125      	str	r5, [r4, #16]
 800865e:	4620      	mov	r0, r4
 8008660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008664:	08009814 	.word	0x08009814
 8008668:	08009825 	.word	0x08009825

0800866c <__hi0bits>:
 800866c:	0c03      	lsrs	r3, r0, #16
 800866e:	041b      	lsls	r3, r3, #16
 8008670:	b9d3      	cbnz	r3, 80086a8 <__hi0bits+0x3c>
 8008672:	0400      	lsls	r0, r0, #16
 8008674:	2310      	movs	r3, #16
 8008676:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800867a:	bf04      	itt	eq
 800867c:	0200      	lsleq	r0, r0, #8
 800867e:	3308      	addeq	r3, #8
 8008680:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008684:	bf04      	itt	eq
 8008686:	0100      	lsleq	r0, r0, #4
 8008688:	3304      	addeq	r3, #4
 800868a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800868e:	bf04      	itt	eq
 8008690:	0080      	lsleq	r0, r0, #2
 8008692:	3302      	addeq	r3, #2
 8008694:	2800      	cmp	r0, #0
 8008696:	db05      	blt.n	80086a4 <__hi0bits+0x38>
 8008698:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800869c:	f103 0301 	add.w	r3, r3, #1
 80086a0:	bf08      	it	eq
 80086a2:	2320      	moveq	r3, #32
 80086a4:	4618      	mov	r0, r3
 80086a6:	4770      	bx	lr
 80086a8:	2300      	movs	r3, #0
 80086aa:	e7e4      	b.n	8008676 <__hi0bits+0xa>

080086ac <__lo0bits>:
 80086ac:	6803      	ldr	r3, [r0, #0]
 80086ae:	f013 0207 	ands.w	r2, r3, #7
 80086b2:	d00c      	beq.n	80086ce <__lo0bits+0x22>
 80086b4:	07d9      	lsls	r1, r3, #31
 80086b6:	d422      	bmi.n	80086fe <__lo0bits+0x52>
 80086b8:	079a      	lsls	r2, r3, #30
 80086ba:	bf49      	itett	mi
 80086bc:	085b      	lsrmi	r3, r3, #1
 80086be:	089b      	lsrpl	r3, r3, #2
 80086c0:	6003      	strmi	r3, [r0, #0]
 80086c2:	2201      	movmi	r2, #1
 80086c4:	bf5c      	itt	pl
 80086c6:	6003      	strpl	r3, [r0, #0]
 80086c8:	2202      	movpl	r2, #2
 80086ca:	4610      	mov	r0, r2
 80086cc:	4770      	bx	lr
 80086ce:	b299      	uxth	r1, r3
 80086d0:	b909      	cbnz	r1, 80086d6 <__lo0bits+0x2a>
 80086d2:	0c1b      	lsrs	r3, r3, #16
 80086d4:	2210      	movs	r2, #16
 80086d6:	b2d9      	uxtb	r1, r3
 80086d8:	b909      	cbnz	r1, 80086de <__lo0bits+0x32>
 80086da:	3208      	adds	r2, #8
 80086dc:	0a1b      	lsrs	r3, r3, #8
 80086de:	0719      	lsls	r1, r3, #28
 80086e0:	bf04      	itt	eq
 80086e2:	091b      	lsreq	r3, r3, #4
 80086e4:	3204      	addeq	r2, #4
 80086e6:	0799      	lsls	r1, r3, #30
 80086e8:	bf04      	itt	eq
 80086ea:	089b      	lsreq	r3, r3, #2
 80086ec:	3202      	addeq	r2, #2
 80086ee:	07d9      	lsls	r1, r3, #31
 80086f0:	d403      	bmi.n	80086fa <__lo0bits+0x4e>
 80086f2:	085b      	lsrs	r3, r3, #1
 80086f4:	f102 0201 	add.w	r2, r2, #1
 80086f8:	d003      	beq.n	8008702 <__lo0bits+0x56>
 80086fa:	6003      	str	r3, [r0, #0]
 80086fc:	e7e5      	b.n	80086ca <__lo0bits+0x1e>
 80086fe:	2200      	movs	r2, #0
 8008700:	e7e3      	b.n	80086ca <__lo0bits+0x1e>
 8008702:	2220      	movs	r2, #32
 8008704:	e7e1      	b.n	80086ca <__lo0bits+0x1e>
	...

08008708 <__i2b>:
 8008708:	b510      	push	{r4, lr}
 800870a:	460c      	mov	r4, r1
 800870c:	2101      	movs	r1, #1
 800870e:	f7ff ff05 	bl	800851c <_Balloc>
 8008712:	4602      	mov	r2, r0
 8008714:	b928      	cbnz	r0, 8008722 <__i2b+0x1a>
 8008716:	4b05      	ldr	r3, [pc, #20]	; (800872c <__i2b+0x24>)
 8008718:	4805      	ldr	r0, [pc, #20]	; (8008730 <__i2b+0x28>)
 800871a:	f240 1145 	movw	r1, #325	; 0x145
 800871e:	f000 fcb7 	bl	8009090 <__assert_func>
 8008722:	2301      	movs	r3, #1
 8008724:	6144      	str	r4, [r0, #20]
 8008726:	6103      	str	r3, [r0, #16]
 8008728:	bd10      	pop	{r4, pc}
 800872a:	bf00      	nop
 800872c:	08009814 	.word	0x08009814
 8008730:	08009825 	.word	0x08009825

08008734 <__multiply>:
 8008734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008738:	4691      	mov	r9, r2
 800873a:	690a      	ldr	r2, [r1, #16]
 800873c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008740:	429a      	cmp	r2, r3
 8008742:	bfb8      	it	lt
 8008744:	460b      	movlt	r3, r1
 8008746:	460c      	mov	r4, r1
 8008748:	bfbc      	itt	lt
 800874a:	464c      	movlt	r4, r9
 800874c:	4699      	movlt	r9, r3
 800874e:	6927      	ldr	r7, [r4, #16]
 8008750:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008754:	68a3      	ldr	r3, [r4, #8]
 8008756:	6861      	ldr	r1, [r4, #4]
 8008758:	eb07 060a 	add.w	r6, r7, sl
 800875c:	42b3      	cmp	r3, r6
 800875e:	b085      	sub	sp, #20
 8008760:	bfb8      	it	lt
 8008762:	3101      	addlt	r1, #1
 8008764:	f7ff feda 	bl	800851c <_Balloc>
 8008768:	b930      	cbnz	r0, 8008778 <__multiply+0x44>
 800876a:	4602      	mov	r2, r0
 800876c:	4b44      	ldr	r3, [pc, #272]	; (8008880 <__multiply+0x14c>)
 800876e:	4845      	ldr	r0, [pc, #276]	; (8008884 <__multiply+0x150>)
 8008770:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008774:	f000 fc8c 	bl	8009090 <__assert_func>
 8008778:	f100 0514 	add.w	r5, r0, #20
 800877c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008780:	462b      	mov	r3, r5
 8008782:	2200      	movs	r2, #0
 8008784:	4543      	cmp	r3, r8
 8008786:	d321      	bcc.n	80087cc <__multiply+0x98>
 8008788:	f104 0314 	add.w	r3, r4, #20
 800878c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008790:	f109 0314 	add.w	r3, r9, #20
 8008794:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008798:	9202      	str	r2, [sp, #8]
 800879a:	1b3a      	subs	r2, r7, r4
 800879c:	3a15      	subs	r2, #21
 800879e:	f022 0203 	bic.w	r2, r2, #3
 80087a2:	3204      	adds	r2, #4
 80087a4:	f104 0115 	add.w	r1, r4, #21
 80087a8:	428f      	cmp	r7, r1
 80087aa:	bf38      	it	cc
 80087ac:	2204      	movcc	r2, #4
 80087ae:	9201      	str	r2, [sp, #4]
 80087b0:	9a02      	ldr	r2, [sp, #8]
 80087b2:	9303      	str	r3, [sp, #12]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d80c      	bhi.n	80087d2 <__multiply+0x9e>
 80087b8:	2e00      	cmp	r6, #0
 80087ba:	dd03      	ble.n	80087c4 <__multiply+0x90>
 80087bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d05b      	beq.n	800887c <__multiply+0x148>
 80087c4:	6106      	str	r6, [r0, #16]
 80087c6:	b005      	add	sp, #20
 80087c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087cc:	f843 2b04 	str.w	r2, [r3], #4
 80087d0:	e7d8      	b.n	8008784 <__multiply+0x50>
 80087d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80087d6:	f1ba 0f00 	cmp.w	sl, #0
 80087da:	d024      	beq.n	8008826 <__multiply+0xf2>
 80087dc:	f104 0e14 	add.w	lr, r4, #20
 80087e0:	46a9      	mov	r9, r5
 80087e2:	f04f 0c00 	mov.w	ip, #0
 80087e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087ea:	f8d9 1000 	ldr.w	r1, [r9]
 80087ee:	fa1f fb82 	uxth.w	fp, r2
 80087f2:	b289      	uxth	r1, r1
 80087f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80087f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087fc:	f8d9 2000 	ldr.w	r2, [r9]
 8008800:	4461      	add	r1, ip
 8008802:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008806:	fb0a c20b 	mla	r2, sl, fp, ip
 800880a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800880e:	b289      	uxth	r1, r1
 8008810:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008814:	4577      	cmp	r7, lr
 8008816:	f849 1b04 	str.w	r1, [r9], #4
 800881a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800881e:	d8e2      	bhi.n	80087e6 <__multiply+0xb2>
 8008820:	9a01      	ldr	r2, [sp, #4]
 8008822:	f845 c002 	str.w	ip, [r5, r2]
 8008826:	9a03      	ldr	r2, [sp, #12]
 8008828:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800882c:	3304      	adds	r3, #4
 800882e:	f1b9 0f00 	cmp.w	r9, #0
 8008832:	d021      	beq.n	8008878 <__multiply+0x144>
 8008834:	6829      	ldr	r1, [r5, #0]
 8008836:	f104 0c14 	add.w	ip, r4, #20
 800883a:	46ae      	mov	lr, r5
 800883c:	f04f 0a00 	mov.w	sl, #0
 8008840:	f8bc b000 	ldrh.w	fp, [ip]
 8008844:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008848:	fb09 220b 	mla	r2, r9, fp, r2
 800884c:	4452      	add	r2, sl
 800884e:	b289      	uxth	r1, r1
 8008850:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008854:	f84e 1b04 	str.w	r1, [lr], #4
 8008858:	f85c 1b04 	ldr.w	r1, [ip], #4
 800885c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008860:	f8be 1000 	ldrh.w	r1, [lr]
 8008864:	fb09 110a 	mla	r1, r9, sl, r1
 8008868:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800886c:	4567      	cmp	r7, ip
 800886e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008872:	d8e5      	bhi.n	8008840 <__multiply+0x10c>
 8008874:	9a01      	ldr	r2, [sp, #4]
 8008876:	50a9      	str	r1, [r5, r2]
 8008878:	3504      	adds	r5, #4
 800887a:	e799      	b.n	80087b0 <__multiply+0x7c>
 800887c:	3e01      	subs	r6, #1
 800887e:	e79b      	b.n	80087b8 <__multiply+0x84>
 8008880:	08009814 	.word	0x08009814
 8008884:	08009825 	.word	0x08009825

08008888 <__pow5mult>:
 8008888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800888c:	4615      	mov	r5, r2
 800888e:	f012 0203 	ands.w	r2, r2, #3
 8008892:	4606      	mov	r6, r0
 8008894:	460f      	mov	r7, r1
 8008896:	d007      	beq.n	80088a8 <__pow5mult+0x20>
 8008898:	4c25      	ldr	r4, [pc, #148]	; (8008930 <__pow5mult+0xa8>)
 800889a:	3a01      	subs	r2, #1
 800889c:	2300      	movs	r3, #0
 800889e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088a2:	f7ff fe9d 	bl	80085e0 <__multadd>
 80088a6:	4607      	mov	r7, r0
 80088a8:	10ad      	asrs	r5, r5, #2
 80088aa:	d03d      	beq.n	8008928 <__pow5mult+0xa0>
 80088ac:	69f4      	ldr	r4, [r6, #28]
 80088ae:	b97c      	cbnz	r4, 80088d0 <__pow5mult+0x48>
 80088b0:	2010      	movs	r0, #16
 80088b2:	f7ff fd7f 	bl	80083b4 <malloc>
 80088b6:	4602      	mov	r2, r0
 80088b8:	61f0      	str	r0, [r6, #28]
 80088ba:	b928      	cbnz	r0, 80088c8 <__pow5mult+0x40>
 80088bc:	4b1d      	ldr	r3, [pc, #116]	; (8008934 <__pow5mult+0xac>)
 80088be:	481e      	ldr	r0, [pc, #120]	; (8008938 <__pow5mult+0xb0>)
 80088c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80088c4:	f000 fbe4 	bl	8009090 <__assert_func>
 80088c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088cc:	6004      	str	r4, [r0, #0]
 80088ce:	60c4      	str	r4, [r0, #12]
 80088d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80088d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088d8:	b94c      	cbnz	r4, 80088ee <__pow5mult+0x66>
 80088da:	f240 2171 	movw	r1, #625	; 0x271
 80088de:	4630      	mov	r0, r6
 80088e0:	f7ff ff12 	bl	8008708 <__i2b>
 80088e4:	2300      	movs	r3, #0
 80088e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80088ea:	4604      	mov	r4, r0
 80088ec:	6003      	str	r3, [r0, #0]
 80088ee:	f04f 0900 	mov.w	r9, #0
 80088f2:	07eb      	lsls	r3, r5, #31
 80088f4:	d50a      	bpl.n	800890c <__pow5mult+0x84>
 80088f6:	4639      	mov	r1, r7
 80088f8:	4622      	mov	r2, r4
 80088fa:	4630      	mov	r0, r6
 80088fc:	f7ff ff1a 	bl	8008734 <__multiply>
 8008900:	4639      	mov	r1, r7
 8008902:	4680      	mov	r8, r0
 8008904:	4630      	mov	r0, r6
 8008906:	f7ff fe49 	bl	800859c <_Bfree>
 800890a:	4647      	mov	r7, r8
 800890c:	106d      	asrs	r5, r5, #1
 800890e:	d00b      	beq.n	8008928 <__pow5mult+0xa0>
 8008910:	6820      	ldr	r0, [r4, #0]
 8008912:	b938      	cbnz	r0, 8008924 <__pow5mult+0x9c>
 8008914:	4622      	mov	r2, r4
 8008916:	4621      	mov	r1, r4
 8008918:	4630      	mov	r0, r6
 800891a:	f7ff ff0b 	bl	8008734 <__multiply>
 800891e:	6020      	str	r0, [r4, #0]
 8008920:	f8c0 9000 	str.w	r9, [r0]
 8008924:	4604      	mov	r4, r0
 8008926:	e7e4      	b.n	80088f2 <__pow5mult+0x6a>
 8008928:	4638      	mov	r0, r7
 800892a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800892e:	bf00      	nop
 8008930:	08009970 	.word	0x08009970
 8008934:	080097a5 	.word	0x080097a5
 8008938:	08009825 	.word	0x08009825

0800893c <__lshift>:
 800893c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008940:	460c      	mov	r4, r1
 8008942:	6849      	ldr	r1, [r1, #4]
 8008944:	6923      	ldr	r3, [r4, #16]
 8008946:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800894a:	68a3      	ldr	r3, [r4, #8]
 800894c:	4607      	mov	r7, r0
 800894e:	4691      	mov	r9, r2
 8008950:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008954:	f108 0601 	add.w	r6, r8, #1
 8008958:	42b3      	cmp	r3, r6
 800895a:	db0b      	blt.n	8008974 <__lshift+0x38>
 800895c:	4638      	mov	r0, r7
 800895e:	f7ff fddd 	bl	800851c <_Balloc>
 8008962:	4605      	mov	r5, r0
 8008964:	b948      	cbnz	r0, 800897a <__lshift+0x3e>
 8008966:	4602      	mov	r2, r0
 8008968:	4b28      	ldr	r3, [pc, #160]	; (8008a0c <__lshift+0xd0>)
 800896a:	4829      	ldr	r0, [pc, #164]	; (8008a10 <__lshift+0xd4>)
 800896c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008970:	f000 fb8e 	bl	8009090 <__assert_func>
 8008974:	3101      	adds	r1, #1
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	e7ee      	b.n	8008958 <__lshift+0x1c>
 800897a:	2300      	movs	r3, #0
 800897c:	f100 0114 	add.w	r1, r0, #20
 8008980:	f100 0210 	add.w	r2, r0, #16
 8008984:	4618      	mov	r0, r3
 8008986:	4553      	cmp	r3, sl
 8008988:	db33      	blt.n	80089f2 <__lshift+0xb6>
 800898a:	6920      	ldr	r0, [r4, #16]
 800898c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008990:	f104 0314 	add.w	r3, r4, #20
 8008994:	f019 091f 	ands.w	r9, r9, #31
 8008998:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800899c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089a0:	d02b      	beq.n	80089fa <__lshift+0xbe>
 80089a2:	f1c9 0e20 	rsb	lr, r9, #32
 80089a6:	468a      	mov	sl, r1
 80089a8:	2200      	movs	r2, #0
 80089aa:	6818      	ldr	r0, [r3, #0]
 80089ac:	fa00 f009 	lsl.w	r0, r0, r9
 80089b0:	4310      	orrs	r0, r2
 80089b2:	f84a 0b04 	str.w	r0, [sl], #4
 80089b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ba:	459c      	cmp	ip, r3
 80089bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80089c0:	d8f3      	bhi.n	80089aa <__lshift+0x6e>
 80089c2:	ebac 0304 	sub.w	r3, ip, r4
 80089c6:	3b15      	subs	r3, #21
 80089c8:	f023 0303 	bic.w	r3, r3, #3
 80089cc:	3304      	adds	r3, #4
 80089ce:	f104 0015 	add.w	r0, r4, #21
 80089d2:	4584      	cmp	ip, r0
 80089d4:	bf38      	it	cc
 80089d6:	2304      	movcc	r3, #4
 80089d8:	50ca      	str	r2, [r1, r3]
 80089da:	b10a      	cbz	r2, 80089e0 <__lshift+0xa4>
 80089dc:	f108 0602 	add.w	r6, r8, #2
 80089e0:	3e01      	subs	r6, #1
 80089e2:	4638      	mov	r0, r7
 80089e4:	612e      	str	r6, [r5, #16]
 80089e6:	4621      	mov	r1, r4
 80089e8:	f7ff fdd8 	bl	800859c <_Bfree>
 80089ec:	4628      	mov	r0, r5
 80089ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80089f6:	3301      	adds	r3, #1
 80089f8:	e7c5      	b.n	8008986 <__lshift+0x4a>
 80089fa:	3904      	subs	r1, #4
 80089fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a00:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a04:	459c      	cmp	ip, r3
 8008a06:	d8f9      	bhi.n	80089fc <__lshift+0xc0>
 8008a08:	e7ea      	b.n	80089e0 <__lshift+0xa4>
 8008a0a:	bf00      	nop
 8008a0c:	08009814 	.word	0x08009814
 8008a10:	08009825 	.word	0x08009825

08008a14 <__mcmp>:
 8008a14:	b530      	push	{r4, r5, lr}
 8008a16:	6902      	ldr	r2, [r0, #16]
 8008a18:	690c      	ldr	r4, [r1, #16]
 8008a1a:	1b12      	subs	r2, r2, r4
 8008a1c:	d10e      	bne.n	8008a3c <__mcmp+0x28>
 8008a1e:	f100 0314 	add.w	r3, r0, #20
 8008a22:	3114      	adds	r1, #20
 8008a24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a34:	42a5      	cmp	r5, r4
 8008a36:	d003      	beq.n	8008a40 <__mcmp+0x2c>
 8008a38:	d305      	bcc.n	8008a46 <__mcmp+0x32>
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	bd30      	pop	{r4, r5, pc}
 8008a40:	4283      	cmp	r3, r0
 8008a42:	d3f3      	bcc.n	8008a2c <__mcmp+0x18>
 8008a44:	e7fa      	b.n	8008a3c <__mcmp+0x28>
 8008a46:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4a:	e7f7      	b.n	8008a3c <__mcmp+0x28>

08008a4c <__mdiff>:
 8008a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a50:	460c      	mov	r4, r1
 8008a52:	4606      	mov	r6, r0
 8008a54:	4611      	mov	r1, r2
 8008a56:	4620      	mov	r0, r4
 8008a58:	4690      	mov	r8, r2
 8008a5a:	f7ff ffdb 	bl	8008a14 <__mcmp>
 8008a5e:	1e05      	subs	r5, r0, #0
 8008a60:	d110      	bne.n	8008a84 <__mdiff+0x38>
 8008a62:	4629      	mov	r1, r5
 8008a64:	4630      	mov	r0, r6
 8008a66:	f7ff fd59 	bl	800851c <_Balloc>
 8008a6a:	b930      	cbnz	r0, 8008a7a <__mdiff+0x2e>
 8008a6c:	4b3a      	ldr	r3, [pc, #232]	; (8008b58 <__mdiff+0x10c>)
 8008a6e:	4602      	mov	r2, r0
 8008a70:	f240 2137 	movw	r1, #567	; 0x237
 8008a74:	4839      	ldr	r0, [pc, #228]	; (8008b5c <__mdiff+0x110>)
 8008a76:	f000 fb0b 	bl	8009090 <__assert_func>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a84:	bfa4      	itt	ge
 8008a86:	4643      	movge	r3, r8
 8008a88:	46a0      	movge	r8, r4
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a90:	bfa6      	itte	ge
 8008a92:	461c      	movge	r4, r3
 8008a94:	2500      	movge	r5, #0
 8008a96:	2501      	movlt	r5, #1
 8008a98:	f7ff fd40 	bl	800851c <_Balloc>
 8008a9c:	b920      	cbnz	r0, 8008aa8 <__mdiff+0x5c>
 8008a9e:	4b2e      	ldr	r3, [pc, #184]	; (8008b58 <__mdiff+0x10c>)
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	f240 2145 	movw	r1, #581	; 0x245
 8008aa6:	e7e5      	b.n	8008a74 <__mdiff+0x28>
 8008aa8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008aac:	6926      	ldr	r6, [r4, #16]
 8008aae:	60c5      	str	r5, [r0, #12]
 8008ab0:	f104 0914 	add.w	r9, r4, #20
 8008ab4:	f108 0514 	add.w	r5, r8, #20
 8008ab8:	f100 0e14 	add.w	lr, r0, #20
 8008abc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ac0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ac4:	f108 0210 	add.w	r2, r8, #16
 8008ac8:	46f2      	mov	sl, lr
 8008aca:	2100      	movs	r1, #0
 8008acc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ad0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ad4:	fa11 f88b 	uxtah	r8, r1, fp
 8008ad8:	b299      	uxth	r1, r3
 8008ada:	0c1b      	lsrs	r3, r3, #16
 8008adc:	eba8 0801 	sub.w	r8, r8, r1
 8008ae0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ae4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ae8:	fa1f f888 	uxth.w	r8, r8
 8008aec:	1419      	asrs	r1, r3, #16
 8008aee:	454e      	cmp	r6, r9
 8008af0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008af4:	f84a 3b04 	str.w	r3, [sl], #4
 8008af8:	d8e8      	bhi.n	8008acc <__mdiff+0x80>
 8008afa:	1b33      	subs	r3, r6, r4
 8008afc:	3b15      	subs	r3, #21
 8008afe:	f023 0303 	bic.w	r3, r3, #3
 8008b02:	3304      	adds	r3, #4
 8008b04:	3415      	adds	r4, #21
 8008b06:	42a6      	cmp	r6, r4
 8008b08:	bf38      	it	cc
 8008b0a:	2304      	movcc	r3, #4
 8008b0c:	441d      	add	r5, r3
 8008b0e:	4473      	add	r3, lr
 8008b10:	469e      	mov	lr, r3
 8008b12:	462e      	mov	r6, r5
 8008b14:	4566      	cmp	r6, ip
 8008b16:	d30e      	bcc.n	8008b36 <__mdiff+0xea>
 8008b18:	f10c 0203 	add.w	r2, ip, #3
 8008b1c:	1b52      	subs	r2, r2, r5
 8008b1e:	f022 0203 	bic.w	r2, r2, #3
 8008b22:	3d03      	subs	r5, #3
 8008b24:	45ac      	cmp	ip, r5
 8008b26:	bf38      	it	cc
 8008b28:	2200      	movcc	r2, #0
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008b30:	b17a      	cbz	r2, 8008b52 <__mdiff+0x106>
 8008b32:	6107      	str	r7, [r0, #16]
 8008b34:	e7a4      	b.n	8008a80 <__mdiff+0x34>
 8008b36:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b3a:	fa11 f288 	uxtah	r2, r1, r8
 8008b3e:	1414      	asrs	r4, r2, #16
 8008b40:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b44:	b292      	uxth	r2, r2
 8008b46:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b4a:	f84e 2b04 	str.w	r2, [lr], #4
 8008b4e:	1421      	asrs	r1, r4, #16
 8008b50:	e7e0      	b.n	8008b14 <__mdiff+0xc8>
 8008b52:	3f01      	subs	r7, #1
 8008b54:	e7ea      	b.n	8008b2c <__mdiff+0xe0>
 8008b56:	bf00      	nop
 8008b58:	08009814 	.word	0x08009814
 8008b5c:	08009825 	.word	0x08009825

08008b60 <__d2b>:
 8008b60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b64:	460f      	mov	r7, r1
 8008b66:	2101      	movs	r1, #1
 8008b68:	ec59 8b10 	vmov	r8, r9, d0
 8008b6c:	4616      	mov	r6, r2
 8008b6e:	f7ff fcd5 	bl	800851c <_Balloc>
 8008b72:	4604      	mov	r4, r0
 8008b74:	b930      	cbnz	r0, 8008b84 <__d2b+0x24>
 8008b76:	4602      	mov	r2, r0
 8008b78:	4b24      	ldr	r3, [pc, #144]	; (8008c0c <__d2b+0xac>)
 8008b7a:	4825      	ldr	r0, [pc, #148]	; (8008c10 <__d2b+0xb0>)
 8008b7c:	f240 310f 	movw	r1, #783	; 0x30f
 8008b80:	f000 fa86 	bl	8009090 <__assert_func>
 8008b84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b8c:	bb2d      	cbnz	r5, 8008bda <__d2b+0x7a>
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	f1b8 0300 	subs.w	r3, r8, #0
 8008b94:	d026      	beq.n	8008be4 <__d2b+0x84>
 8008b96:	4668      	mov	r0, sp
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	f7ff fd87 	bl	80086ac <__lo0bits>
 8008b9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ba2:	b1e8      	cbz	r0, 8008be0 <__d2b+0x80>
 8008ba4:	f1c0 0320 	rsb	r3, r0, #32
 8008ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bac:	430b      	orrs	r3, r1
 8008bae:	40c2      	lsrs	r2, r0
 8008bb0:	6163      	str	r3, [r4, #20]
 8008bb2:	9201      	str	r2, [sp, #4]
 8008bb4:	9b01      	ldr	r3, [sp, #4]
 8008bb6:	61a3      	str	r3, [r4, #24]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	bf14      	ite	ne
 8008bbc:	2202      	movne	r2, #2
 8008bbe:	2201      	moveq	r2, #1
 8008bc0:	6122      	str	r2, [r4, #16]
 8008bc2:	b1bd      	cbz	r5, 8008bf4 <__d2b+0x94>
 8008bc4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008bc8:	4405      	add	r5, r0
 8008bca:	603d      	str	r5, [r7, #0]
 8008bcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bd0:	6030      	str	r0, [r6, #0]
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	b003      	add	sp, #12
 8008bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bde:	e7d6      	b.n	8008b8e <__d2b+0x2e>
 8008be0:	6161      	str	r1, [r4, #20]
 8008be2:	e7e7      	b.n	8008bb4 <__d2b+0x54>
 8008be4:	a801      	add	r0, sp, #4
 8008be6:	f7ff fd61 	bl	80086ac <__lo0bits>
 8008bea:	9b01      	ldr	r3, [sp, #4]
 8008bec:	6163      	str	r3, [r4, #20]
 8008bee:	3020      	adds	r0, #32
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	e7e5      	b.n	8008bc0 <__d2b+0x60>
 8008bf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bfc:	6038      	str	r0, [r7, #0]
 8008bfe:	6918      	ldr	r0, [r3, #16]
 8008c00:	f7ff fd34 	bl	800866c <__hi0bits>
 8008c04:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c08:	e7e2      	b.n	8008bd0 <__d2b+0x70>
 8008c0a:	bf00      	nop
 8008c0c:	08009814 	.word	0x08009814
 8008c10:	08009825 	.word	0x08009825

08008c14 <__ssputs_r>:
 8008c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c18:	688e      	ldr	r6, [r1, #8]
 8008c1a:	461f      	mov	r7, r3
 8008c1c:	42be      	cmp	r6, r7
 8008c1e:	680b      	ldr	r3, [r1, #0]
 8008c20:	4682      	mov	sl, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	4690      	mov	r8, r2
 8008c26:	d82c      	bhi.n	8008c82 <__ssputs_r+0x6e>
 8008c28:	898a      	ldrh	r2, [r1, #12]
 8008c2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c2e:	d026      	beq.n	8008c7e <__ssputs_r+0x6a>
 8008c30:	6965      	ldr	r5, [r4, #20]
 8008c32:	6909      	ldr	r1, [r1, #16]
 8008c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c38:	eba3 0901 	sub.w	r9, r3, r1
 8008c3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c40:	1c7b      	adds	r3, r7, #1
 8008c42:	444b      	add	r3, r9
 8008c44:	106d      	asrs	r5, r5, #1
 8008c46:	429d      	cmp	r5, r3
 8008c48:	bf38      	it	cc
 8008c4a:	461d      	movcc	r5, r3
 8008c4c:	0553      	lsls	r3, r2, #21
 8008c4e:	d527      	bpl.n	8008ca0 <__ssputs_r+0x8c>
 8008c50:	4629      	mov	r1, r5
 8008c52:	f7ff fbd7 	bl	8008404 <_malloc_r>
 8008c56:	4606      	mov	r6, r0
 8008c58:	b360      	cbz	r0, 8008cb4 <__ssputs_r+0xa0>
 8008c5a:	6921      	ldr	r1, [r4, #16]
 8008c5c:	464a      	mov	r2, r9
 8008c5e:	f000 fa09 	bl	8009074 <memcpy>
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c6c:	81a3      	strh	r3, [r4, #12]
 8008c6e:	6126      	str	r6, [r4, #16]
 8008c70:	6165      	str	r5, [r4, #20]
 8008c72:	444e      	add	r6, r9
 8008c74:	eba5 0509 	sub.w	r5, r5, r9
 8008c78:	6026      	str	r6, [r4, #0]
 8008c7a:	60a5      	str	r5, [r4, #8]
 8008c7c:	463e      	mov	r6, r7
 8008c7e:	42be      	cmp	r6, r7
 8008c80:	d900      	bls.n	8008c84 <__ssputs_r+0x70>
 8008c82:	463e      	mov	r6, r7
 8008c84:	6820      	ldr	r0, [r4, #0]
 8008c86:	4632      	mov	r2, r6
 8008c88:	4641      	mov	r1, r8
 8008c8a:	f000 f9c9 	bl	8009020 <memmove>
 8008c8e:	68a3      	ldr	r3, [r4, #8]
 8008c90:	1b9b      	subs	r3, r3, r6
 8008c92:	60a3      	str	r3, [r4, #8]
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	4433      	add	r3, r6
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca0:	462a      	mov	r2, r5
 8008ca2:	f000 fa3b 	bl	800911c <_realloc_r>
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d1e0      	bne.n	8008c6e <__ssputs_r+0x5a>
 8008cac:	6921      	ldr	r1, [r4, #16]
 8008cae:	4650      	mov	r0, sl
 8008cb0:	f7ff fb34 	bl	800831c <_free_r>
 8008cb4:	230c      	movs	r3, #12
 8008cb6:	f8ca 3000 	str.w	r3, [sl]
 8008cba:	89a3      	ldrh	r3, [r4, #12]
 8008cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cc0:	81a3      	strh	r3, [r4, #12]
 8008cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc6:	e7e9      	b.n	8008c9c <__ssputs_r+0x88>

08008cc8 <_svfiprintf_r>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	4698      	mov	r8, r3
 8008cce:	898b      	ldrh	r3, [r1, #12]
 8008cd0:	061b      	lsls	r3, r3, #24
 8008cd2:	b09d      	sub	sp, #116	; 0x74
 8008cd4:	4607      	mov	r7, r0
 8008cd6:	460d      	mov	r5, r1
 8008cd8:	4614      	mov	r4, r2
 8008cda:	d50e      	bpl.n	8008cfa <_svfiprintf_r+0x32>
 8008cdc:	690b      	ldr	r3, [r1, #16]
 8008cde:	b963      	cbnz	r3, 8008cfa <_svfiprintf_r+0x32>
 8008ce0:	2140      	movs	r1, #64	; 0x40
 8008ce2:	f7ff fb8f 	bl	8008404 <_malloc_r>
 8008ce6:	6028      	str	r0, [r5, #0]
 8008ce8:	6128      	str	r0, [r5, #16]
 8008cea:	b920      	cbnz	r0, 8008cf6 <_svfiprintf_r+0x2e>
 8008cec:	230c      	movs	r3, #12
 8008cee:	603b      	str	r3, [r7, #0]
 8008cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf4:	e0d0      	b.n	8008e98 <_svfiprintf_r+0x1d0>
 8008cf6:	2340      	movs	r3, #64	; 0x40
 8008cf8:	616b      	str	r3, [r5, #20]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cfe:	2320      	movs	r3, #32
 8008d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d08:	2330      	movs	r3, #48	; 0x30
 8008d0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008eb0 <_svfiprintf_r+0x1e8>
 8008d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d12:	f04f 0901 	mov.w	r9, #1
 8008d16:	4623      	mov	r3, r4
 8008d18:	469a      	mov	sl, r3
 8008d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d1e:	b10a      	cbz	r2, 8008d24 <_svfiprintf_r+0x5c>
 8008d20:	2a25      	cmp	r2, #37	; 0x25
 8008d22:	d1f9      	bne.n	8008d18 <_svfiprintf_r+0x50>
 8008d24:	ebba 0b04 	subs.w	fp, sl, r4
 8008d28:	d00b      	beq.n	8008d42 <_svfiprintf_r+0x7a>
 8008d2a:	465b      	mov	r3, fp
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	4629      	mov	r1, r5
 8008d30:	4638      	mov	r0, r7
 8008d32:	f7ff ff6f 	bl	8008c14 <__ssputs_r>
 8008d36:	3001      	adds	r0, #1
 8008d38:	f000 80a9 	beq.w	8008e8e <_svfiprintf_r+0x1c6>
 8008d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d3e:	445a      	add	r2, fp
 8008d40:	9209      	str	r2, [sp, #36]	; 0x24
 8008d42:	f89a 3000 	ldrb.w	r3, [sl]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 80a1 	beq.w	8008e8e <_svfiprintf_r+0x1c6>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d56:	f10a 0a01 	add.w	sl, sl, #1
 8008d5a:	9304      	str	r3, [sp, #16]
 8008d5c:	9307      	str	r3, [sp, #28]
 8008d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d62:	931a      	str	r3, [sp, #104]	; 0x68
 8008d64:	4654      	mov	r4, sl
 8008d66:	2205      	movs	r2, #5
 8008d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d6c:	4850      	ldr	r0, [pc, #320]	; (8008eb0 <_svfiprintf_r+0x1e8>)
 8008d6e:	f7f7 fa4f 	bl	8000210 <memchr>
 8008d72:	9a04      	ldr	r2, [sp, #16]
 8008d74:	b9d8      	cbnz	r0, 8008dae <_svfiprintf_r+0xe6>
 8008d76:	06d0      	lsls	r0, r2, #27
 8008d78:	bf44      	itt	mi
 8008d7a:	2320      	movmi	r3, #32
 8008d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d80:	0711      	lsls	r1, r2, #28
 8008d82:	bf44      	itt	mi
 8008d84:	232b      	movmi	r3, #43	; 0x2b
 8008d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d90:	d015      	beq.n	8008dbe <_svfiprintf_r+0xf6>
 8008d92:	9a07      	ldr	r2, [sp, #28]
 8008d94:	4654      	mov	r4, sl
 8008d96:	2000      	movs	r0, #0
 8008d98:	f04f 0c0a 	mov.w	ip, #10
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008da2:	3b30      	subs	r3, #48	; 0x30
 8008da4:	2b09      	cmp	r3, #9
 8008da6:	d94d      	bls.n	8008e44 <_svfiprintf_r+0x17c>
 8008da8:	b1b0      	cbz	r0, 8008dd8 <_svfiprintf_r+0x110>
 8008daa:	9207      	str	r2, [sp, #28]
 8008dac:	e014      	b.n	8008dd8 <_svfiprintf_r+0x110>
 8008dae:	eba0 0308 	sub.w	r3, r0, r8
 8008db2:	fa09 f303 	lsl.w	r3, r9, r3
 8008db6:	4313      	orrs	r3, r2
 8008db8:	9304      	str	r3, [sp, #16]
 8008dba:	46a2      	mov	sl, r4
 8008dbc:	e7d2      	b.n	8008d64 <_svfiprintf_r+0x9c>
 8008dbe:	9b03      	ldr	r3, [sp, #12]
 8008dc0:	1d19      	adds	r1, r3, #4
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	9103      	str	r1, [sp, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	bfbb      	ittet	lt
 8008dca:	425b      	neglt	r3, r3
 8008dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8008dd0:	9307      	strge	r3, [sp, #28]
 8008dd2:	9307      	strlt	r3, [sp, #28]
 8008dd4:	bfb8      	it	lt
 8008dd6:	9204      	strlt	r2, [sp, #16]
 8008dd8:	7823      	ldrb	r3, [r4, #0]
 8008dda:	2b2e      	cmp	r3, #46	; 0x2e
 8008ddc:	d10c      	bne.n	8008df8 <_svfiprintf_r+0x130>
 8008dde:	7863      	ldrb	r3, [r4, #1]
 8008de0:	2b2a      	cmp	r3, #42	; 0x2a
 8008de2:	d134      	bne.n	8008e4e <_svfiprintf_r+0x186>
 8008de4:	9b03      	ldr	r3, [sp, #12]
 8008de6:	1d1a      	adds	r2, r3, #4
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	9203      	str	r2, [sp, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	bfb8      	it	lt
 8008df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008df4:	3402      	adds	r4, #2
 8008df6:	9305      	str	r3, [sp, #20]
 8008df8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008ec0 <_svfiprintf_r+0x1f8>
 8008dfc:	7821      	ldrb	r1, [r4, #0]
 8008dfe:	2203      	movs	r2, #3
 8008e00:	4650      	mov	r0, sl
 8008e02:	f7f7 fa05 	bl	8000210 <memchr>
 8008e06:	b138      	cbz	r0, 8008e18 <_svfiprintf_r+0x150>
 8008e08:	9b04      	ldr	r3, [sp, #16]
 8008e0a:	eba0 000a 	sub.w	r0, r0, sl
 8008e0e:	2240      	movs	r2, #64	; 0x40
 8008e10:	4082      	lsls	r2, r0
 8008e12:	4313      	orrs	r3, r2
 8008e14:	3401      	adds	r4, #1
 8008e16:	9304      	str	r3, [sp, #16]
 8008e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e1c:	4825      	ldr	r0, [pc, #148]	; (8008eb4 <_svfiprintf_r+0x1ec>)
 8008e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e22:	2206      	movs	r2, #6
 8008e24:	f7f7 f9f4 	bl	8000210 <memchr>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d038      	beq.n	8008e9e <_svfiprintf_r+0x1d6>
 8008e2c:	4b22      	ldr	r3, [pc, #136]	; (8008eb8 <_svfiprintf_r+0x1f0>)
 8008e2e:	bb1b      	cbnz	r3, 8008e78 <_svfiprintf_r+0x1b0>
 8008e30:	9b03      	ldr	r3, [sp, #12]
 8008e32:	3307      	adds	r3, #7
 8008e34:	f023 0307 	bic.w	r3, r3, #7
 8008e38:	3308      	adds	r3, #8
 8008e3a:	9303      	str	r3, [sp, #12]
 8008e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e3e:	4433      	add	r3, r6
 8008e40:	9309      	str	r3, [sp, #36]	; 0x24
 8008e42:	e768      	b.n	8008d16 <_svfiprintf_r+0x4e>
 8008e44:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e48:	460c      	mov	r4, r1
 8008e4a:	2001      	movs	r0, #1
 8008e4c:	e7a6      	b.n	8008d9c <_svfiprintf_r+0xd4>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	3401      	adds	r4, #1
 8008e52:	9305      	str	r3, [sp, #20]
 8008e54:	4619      	mov	r1, r3
 8008e56:	f04f 0c0a 	mov.w	ip, #10
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e60:	3a30      	subs	r2, #48	; 0x30
 8008e62:	2a09      	cmp	r2, #9
 8008e64:	d903      	bls.n	8008e6e <_svfiprintf_r+0x1a6>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d0c6      	beq.n	8008df8 <_svfiprintf_r+0x130>
 8008e6a:	9105      	str	r1, [sp, #20]
 8008e6c:	e7c4      	b.n	8008df8 <_svfiprintf_r+0x130>
 8008e6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e72:	4604      	mov	r4, r0
 8008e74:	2301      	movs	r3, #1
 8008e76:	e7f0      	b.n	8008e5a <_svfiprintf_r+0x192>
 8008e78:	ab03      	add	r3, sp, #12
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	462a      	mov	r2, r5
 8008e7e:	4b0f      	ldr	r3, [pc, #60]	; (8008ebc <_svfiprintf_r+0x1f4>)
 8008e80:	a904      	add	r1, sp, #16
 8008e82:	4638      	mov	r0, r7
 8008e84:	f7fd fe78 	bl	8006b78 <_printf_float>
 8008e88:	1c42      	adds	r2, r0, #1
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	d1d6      	bne.n	8008e3c <_svfiprintf_r+0x174>
 8008e8e:	89ab      	ldrh	r3, [r5, #12]
 8008e90:	065b      	lsls	r3, r3, #25
 8008e92:	f53f af2d 	bmi.w	8008cf0 <_svfiprintf_r+0x28>
 8008e96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e98:	b01d      	add	sp, #116	; 0x74
 8008e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9e:	ab03      	add	r3, sp, #12
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	462a      	mov	r2, r5
 8008ea4:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <_svfiprintf_r+0x1f4>)
 8008ea6:	a904      	add	r1, sp, #16
 8008ea8:	4638      	mov	r0, r7
 8008eaa:	f7fe f909 	bl	80070c0 <_printf_i>
 8008eae:	e7eb      	b.n	8008e88 <_svfiprintf_r+0x1c0>
 8008eb0:	0800997c 	.word	0x0800997c
 8008eb4:	08009986 	.word	0x08009986
 8008eb8:	08006b79 	.word	0x08006b79
 8008ebc:	08008c15 	.word	0x08008c15
 8008ec0:	08009982 	.word	0x08009982

08008ec4 <__sflush_r>:
 8008ec4:	898a      	ldrh	r2, [r1, #12]
 8008ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eca:	4605      	mov	r5, r0
 8008ecc:	0710      	lsls	r0, r2, #28
 8008ece:	460c      	mov	r4, r1
 8008ed0:	d458      	bmi.n	8008f84 <__sflush_r+0xc0>
 8008ed2:	684b      	ldr	r3, [r1, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	dc05      	bgt.n	8008ee4 <__sflush_r+0x20>
 8008ed8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	dc02      	bgt.n	8008ee4 <__sflush_r+0x20>
 8008ede:	2000      	movs	r0, #0
 8008ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ee6:	2e00      	cmp	r6, #0
 8008ee8:	d0f9      	beq.n	8008ede <__sflush_r+0x1a>
 8008eea:	2300      	movs	r3, #0
 8008eec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ef0:	682f      	ldr	r7, [r5, #0]
 8008ef2:	6a21      	ldr	r1, [r4, #32]
 8008ef4:	602b      	str	r3, [r5, #0]
 8008ef6:	d032      	beq.n	8008f5e <__sflush_r+0x9a>
 8008ef8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	075a      	lsls	r2, r3, #29
 8008efe:	d505      	bpl.n	8008f0c <__sflush_r+0x48>
 8008f00:	6863      	ldr	r3, [r4, #4]
 8008f02:	1ac0      	subs	r0, r0, r3
 8008f04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f06:	b10b      	cbz	r3, 8008f0c <__sflush_r+0x48>
 8008f08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f0a:	1ac0      	subs	r0, r0, r3
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4602      	mov	r2, r0
 8008f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f12:	6a21      	ldr	r1, [r4, #32]
 8008f14:	4628      	mov	r0, r5
 8008f16:	47b0      	blx	r6
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	89a3      	ldrh	r3, [r4, #12]
 8008f1c:	d106      	bne.n	8008f2c <__sflush_r+0x68>
 8008f1e:	6829      	ldr	r1, [r5, #0]
 8008f20:	291d      	cmp	r1, #29
 8008f22:	d82b      	bhi.n	8008f7c <__sflush_r+0xb8>
 8008f24:	4a29      	ldr	r2, [pc, #164]	; (8008fcc <__sflush_r+0x108>)
 8008f26:	410a      	asrs	r2, r1
 8008f28:	07d6      	lsls	r6, r2, #31
 8008f2a:	d427      	bmi.n	8008f7c <__sflush_r+0xb8>
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	6062      	str	r2, [r4, #4]
 8008f30:	04d9      	lsls	r1, r3, #19
 8008f32:	6922      	ldr	r2, [r4, #16]
 8008f34:	6022      	str	r2, [r4, #0]
 8008f36:	d504      	bpl.n	8008f42 <__sflush_r+0x7e>
 8008f38:	1c42      	adds	r2, r0, #1
 8008f3a:	d101      	bne.n	8008f40 <__sflush_r+0x7c>
 8008f3c:	682b      	ldr	r3, [r5, #0]
 8008f3e:	b903      	cbnz	r3, 8008f42 <__sflush_r+0x7e>
 8008f40:	6560      	str	r0, [r4, #84]	; 0x54
 8008f42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f44:	602f      	str	r7, [r5, #0]
 8008f46:	2900      	cmp	r1, #0
 8008f48:	d0c9      	beq.n	8008ede <__sflush_r+0x1a>
 8008f4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f4e:	4299      	cmp	r1, r3
 8008f50:	d002      	beq.n	8008f58 <__sflush_r+0x94>
 8008f52:	4628      	mov	r0, r5
 8008f54:	f7ff f9e2 	bl	800831c <_free_r>
 8008f58:	2000      	movs	r0, #0
 8008f5a:	6360      	str	r0, [r4, #52]	; 0x34
 8008f5c:	e7c0      	b.n	8008ee0 <__sflush_r+0x1c>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	4628      	mov	r0, r5
 8008f62:	47b0      	blx	r6
 8008f64:	1c41      	adds	r1, r0, #1
 8008f66:	d1c8      	bne.n	8008efa <__sflush_r+0x36>
 8008f68:	682b      	ldr	r3, [r5, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0c5      	beq.n	8008efa <__sflush_r+0x36>
 8008f6e:	2b1d      	cmp	r3, #29
 8008f70:	d001      	beq.n	8008f76 <__sflush_r+0xb2>
 8008f72:	2b16      	cmp	r3, #22
 8008f74:	d101      	bne.n	8008f7a <__sflush_r+0xb6>
 8008f76:	602f      	str	r7, [r5, #0]
 8008f78:	e7b1      	b.n	8008ede <__sflush_r+0x1a>
 8008f7a:	89a3      	ldrh	r3, [r4, #12]
 8008f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f80:	81a3      	strh	r3, [r4, #12]
 8008f82:	e7ad      	b.n	8008ee0 <__sflush_r+0x1c>
 8008f84:	690f      	ldr	r7, [r1, #16]
 8008f86:	2f00      	cmp	r7, #0
 8008f88:	d0a9      	beq.n	8008ede <__sflush_r+0x1a>
 8008f8a:	0793      	lsls	r3, r2, #30
 8008f8c:	680e      	ldr	r6, [r1, #0]
 8008f8e:	bf08      	it	eq
 8008f90:	694b      	ldreq	r3, [r1, #20]
 8008f92:	600f      	str	r7, [r1, #0]
 8008f94:	bf18      	it	ne
 8008f96:	2300      	movne	r3, #0
 8008f98:	eba6 0807 	sub.w	r8, r6, r7
 8008f9c:	608b      	str	r3, [r1, #8]
 8008f9e:	f1b8 0f00 	cmp.w	r8, #0
 8008fa2:	dd9c      	ble.n	8008ede <__sflush_r+0x1a>
 8008fa4:	6a21      	ldr	r1, [r4, #32]
 8008fa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fa8:	4643      	mov	r3, r8
 8008faa:	463a      	mov	r2, r7
 8008fac:	4628      	mov	r0, r5
 8008fae:	47b0      	blx	r6
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	dc06      	bgt.n	8008fc2 <__sflush_r+0xfe>
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fba:	81a3      	strh	r3, [r4, #12]
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	e78e      	b.n	8008ee0 <__sflush_r+0x1c>
 8008fc2:	4407      	add	r7, r0
 8008fc4:	eba8 0800 	sub.w	r8, r8, r0
 8008fc8:	e7e9      	b.n	8008f9e <__sflush_r+0xda>
 8008fca:	bf00      	nop
 8008fcc:	dfbffffe 	.word	0xdfbffffe

08008fd0 <_fflush_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	690b      	ldr	r3, [r1, #16]
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	b913      	cbnz	r3, 8008fe0 <_fflush_r+0x10>
 8008fda:	2500      	movs	r5, #0
 8008fdc:	4628      	mov	r0, r5
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	b118      	cbz	r0, 8008fea <_fflush_r+0x1a>
 8008fe2:	6a03      	ldr	r3, [r0, #32]
 8008fe4:	b90b      	cbnz	r3, 8008fea <_fflush_r+0x1a>
 8008fe6:	f7fe fa07 	bl	80073f8 <__sinit>
 8008fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0f3      	beq.n	8008fda <_fflush_r+0xa>
 8008ff2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ff4:	07d0      	lsls	r0, r2, #31
 8008ff6:	d404      	bmi.n	8009002 <_fflush_r+0x32>
 8008ff8:	0599      	lsls	r1, r3, #22
 8008ffa:	d402      	bmi.n	8009002 <_fflush_r+0x32>
 8008ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ffe:	f7fe fb11 	bl	8007624 <__retarget_lock_acquire_recursive>
 8009002:	4628      	mov	r0, r5
 8009004:	4621      	mov	r1, r4
 8009006:	f7ff ff5d 	bl	8008ec4 <__sflush_r>
 800900a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800900c:	07da      	lsls	r2, r3, #31
 800900e:	4605      	mov	r5, r0
 8009010:	d4e4      	bmi.n	8008fdc <_fflush_r+0xc>
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	059b      	lsls	r3, r3, #22
 8009016:	d4e1      	bmi.n	8008fdc <_fflush_r+0xc>
 8009018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800901a:	f7fe fb04 	bl	8007626 <__retarget_lock_release_recursive>
 800901e:	e7dd      	b.n	8008fdc <_fflush_r+0xc>

08009020 <memmove>:
 8009020:	4288      	cmp	r0, r1
 8009022:	b510      	push	{r4, lr}
 8009024:	eb01 0402 	add.w	r4, r1, r2
 8009028:	d902      	bls.n	8009030 <memmove+0x10>
 800902a:	4284      	cmp	r4, r0
 800902c:	4623      	mov	r3, r4
 800902e:	d807      	bhi.n	8009040 <memmove+0x20>
 8009030:	1e43      	subs	r3, r0, #1
 8009032:	42a1      	cmp	r1, r4
 8009034:	d008      	beq.n	8009048 <memmove+0x28>
 8009036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800903a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800903e:	e7f8      	b.n	8009032 <memmove+0x12>
 8009040:	4402      	add	r2, r0
 8009042:	4601      	mov	r1, r0
 8009044:	428a      	cmp	r2, r1
 8009046:	d100      	bne.n	800904a <memmove+0x2a>
 8009048:	bd10      	pop	{r4, pc}
 800904a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800904e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009052:	e7f7      	b.n	8009044 <memmove+0x24>

08009054 <_sbrk_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4d06      	ldr	r5, [pc, #24]	; (8009070 <_sbrk_r+0x1c>)
 8009058:	2300      	movs	r3, #0
 800905a:	4604      	mov	r4, r0
 800905c:	4608      	mov	r0, r1
 800905e:	602b      	str	r3, [r5, #0]
 8009060:	f7f8 fdb8 	bl	8001bd4 <_sbrk>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d102      	bne.n	800906e <_sbrk_r+0x1a>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	b103      	cbz	r3, 800906e <_sbrk_r+0x1a>
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	20000a64 	.word	0x20000a64

08009074 <memcpy>:
 8009074:	440a      	add	r2, r1
 8009076:	4291      	cmp	r1, r2
 8009078:	f100 33ff 	add.w	r3, r0, #4294967295
 800907c:	d100      	bne.n	8009080 <memcpy+0xc>
 800907e:	4770      	bx	lr
 8009080:	b510      	push	{r4, lr}
 8009082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800908a:	4291      	cmp	r1, r2
 800908c:	d1f9      	bne.n	8009082 <memcpy+0xe>
 800908e:	bd10      	pop	{r4, pc}

08009090 <__assert_func>:
 8009090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009092:	4614      	mov	r4, r2
 8009094:	461a      	mov	r2, r3
 8009096:	4b09      	ldr	r3, [pc, #36]	; (80090bc <__assert_func+0x2c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4605      	mov	r5, r0
 800909c:	68d8      	ldr	r0, [r3, #12]
 800909e:	b14c      	cbz	r4, 80090b4 <__assert_func+0x24>
 80090a0:	4b07      	ldr	r3, [pc, #28]	; (80090c0 <__assert_func+0x30>)
 80090a2:	9100      	str	r1, [sp, #0]
 80090a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090a8:	4906      	ldr	r1, [pc, #24]	; (80090c4 <__assert_func+0x34>)
 80090aa:	462b      	mov	r3, r5
 80090ac:	f000 f872 	bl	8009194 <fiprintf>
 80090b0:	f000 f882 	bl	80091b8 <abort>
 80090b4:	4b04      	ldr	r3, [pc, #16]	; (80090c8 <__assert_func+0x38>)
 80090b6:	461c      	mov	r4, r3
 80090b8:	e7f3      	b.n	80090a2 <__assert_func+0x12>
 80090ba:	bf00      	nop
 80090bc:	20000064 	.word	0x20000064
 80090c0:	08009997 	.word	0x08009997
 80090c4:	080099a4 	.word	0x080099a4
 80090c8:	080099d2 	.word	0x080099d2

080090cc <_calloc_r>:
 80090cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090ce:	fba1 2402 	umull	r2, r4, r1, r2
 80090d2:	b94c      	cbnz	r4, 80090e8 <_calloc_r+0x1c>
 80090d4:	4611      	mov	r1, r2
 80090d6:	9201      	str	r2, [sp, #4]
 80090d8:	f7ff f994 	bl	8008404 <_malloc_r>
 80090dc:	9a01      	ldr	r2, [sp, #4]
 80090de:	4605      	mov	r5, r0
 80090e0:	b930      	cbnz	r0, 80090f0 <_calloc_r+0x24>
 80090e2:	4628      	mov	r0, r5
 80090e4:	b003      	add	sp, #12
 80090e6:	bd30      	pop	{r4, r5, pc}
 80090e8:	220c      	movs	r2, #12
 80090ea:	6002      	str	r2, [r0, #0]
 80090ec:	2500      	movs	r5, #0
 80090ee:	e7f8      	b.n	80090e2 <_calloc_r+0x16>
 80090f0:	4621      	mov	r1, r4
 80090f2:	f7fe fa1a 	bl	800752a <memset>
 80090f6:	e7f4      	b.n	80090e2 <_calloc_r+0x16>

080090f8 <__ascii_mbtowc>:
 80090f8:	b082      	sub	sp, #8
 80090fa:	b901      	cbnz	r1, 80090fe <__ascii_mbtowc+0x6>
 80090fc:	a901      	add	r1, sp, #4
 80090fe:	b142      	cbz	r2, 8009112 <__ascii_mbtowc+0x1a>
 8009100:	b14b      	cbz	r3, 8009116 <__ascii_mbtowc+0x1e>
 8009102:	7813      	ldrb	r3, [r2, #0]
 8009104:	600b      	str	r3, [r1, #0]
 8009106:	7812      	ldrb	r2, [r2, #0]
 8009108:	1e10      	subs	r0, r2, #0
 800910a:	bf18      	it	ne
 800910c:	2001      	movne	r0, #1
 800910e:	b002      	add	sp, #8
 8009110:	4770      	bx	lr
 8009112:	4610      	mov	r0, r2
 8009114:	e7fb      	b.n	800910e <__ascii_mbtowc+0x16>
 8009116:	f06f 0001 	mvn.w	r0, #1
 800911a:	e7f8      	b.n	800910e <__ascii_mbtowc+0x16>

0800911c <_realloc_r>:
 800911c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009120:	4680      	mov	r8, r0
 8009122:	4614      	mov	r4, r2
 8009124:	460e      	mov	r6, r1
 8009126:	b921      	cbnz	r1, 8009132 <_realloc_r+0x16>
 8009128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800912c:	4611      	mov	r1, r2
 800912e:	f7ff b969 	b.w	8008404 <_malloc_r>
 8009132:	b92a      	cbnz	r2, 8009140 <_realloc_r+0x24>
 8009134:	f7ff f8f2 	bl	800831c <_free_r>
 8009138:	4625      	mov	r5, r4
 800913a:	4628      	mov	r0, r5
 800913c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009140:	f000 f841 	bl	80091c6 <_malloc_usable_size_r>
 8009144:	4284      	cmp	r4, r0
 8009146:	4607      	mov	r7, r0
 8009148:	d802      	bhi.n	8009150 <_realloc_r+0x34>
 800914a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800914e:	d812      	bhi.n	8009176 <_realloc_r+0x5a>
 8009150:	4621      	mov	r1, r4
 8009152:	4640      	mov	r0, r8
 8009154:	f7ff f956 	bl	8008404 <_malloc_r>
 8009158:	4605      	mov	r5, r0
 800915a:	2800      	cmp	r0, #0
 800915c:	d0ed      	beq.n	800913a <_realloc_r+0x1e>
 800915e:	42bc      	cmp	r4, r7
 8009160:	4622      	mov	r2, r4
 8009162:	4631      	mov	r1, r6
 8009164:	bf28      	it	cs
 8009166:	463a      	movcs	r2, r7
 8009168:	f7ff ff84 	bl	8009074 <memcpy>
 800916c:	4631      	mov	r1, r6
 800916e:	4640      	mov	r0, r8
 8009170:	f7ff f8d4 	bl	800831c <_free_r>
 8009174:	e7e1      	b.n	800913a <_realloc_r+0x1e>
 8009176:	4635      	mov	r5, r6
 8009178:	e7df      	b.n	800913a <_realloc_r+0x1e>

0800917a <__ascii_wctomb>:
 800917a:	b149      	cbz	r1, 8009190 <__ascii_wctomb+0x16>
 800917c:	2aff      	cmp	r2, #255	; 0xff
 800917e:	bf85      	ittet	hi
 8009180:	238a      	movhi	r3, #138	; 0x8a
 8009182:	6003      	strhi	r3, [r0, #0]
 8009184:	700a      	strbls	r2, [r1, #0]
 8009186:	f04f 30ff 	movhi.w	r0, #4294967295
 800918a:	bf98      	it	ls
 800918c:	2001      	movls	r0, #1
 800918e:	4770      	bx	lr
 8009190:	4608      	mov	r0, r1
 8009192:	4770      	bx	lr

08009194 <fiprintf>:
 8009194:	b40e      	push	{r1, r2, r3}
 8009196:	b503      	push	{r0, r1, lr}
 8009198:	4601      	mov	r1, r0
 800919a:	ab03      	add	r3, sp, #12
 800919c:	4805      	ldr	r0, [pc, #20]	; (80091b4 <fiprintf+0x20>)
 800919e:	f853 2b04 	ldr.w	r2, [r3], #4
 80091a2:	6800      	ldr	r0, [r0, #0]
 80091a4:	9301      	str	r3, [sp, #4]
 80091a6:	f000 f83f 	bl	8009228 <_vfiprintf_r>
 80091aa:	b002      	add	sp, #8
 80091ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80091b0:	b003      	add	sp, #12
 80091b2:	4770      	bx	lr
 80091b4:	20000064 	.word	0x20000064

080091b8 <abort>:
 80091b8:	b508      	push	{r3, lr}
 80091ba:	2006      	movs	r0, #6
 80091bc:	f000 fa0c 	bl	80095d8 <raise>
 80091c0:	2001      	movs	r0, #1
 80091c2:	f7f8 fc8f 	bl	8001ae4 <_exit>

080091c6 <_malloc_usable_size_r>:
 80091c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ca:	1f18      	subs	r0, r3, #4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bfbc      	itt	lt
 80091d0:	580b      	ldrlt	r3, [r1, r0]
 80091d2:	18c0      	addlt	r0, r0, r3
 80091d4:	4770      	bx	lr

080091d6 <__sfputc_r>:
 80091d6:	6893      	ldr	r3, [r2, #8]
 80091d8:	3b01      	subs	r3, #1
 80091da:	2b00      	cmp	r3, #0
 80091dc:	b410      	push	{r4}
 80091de:	6093      	str	r3, [r2, #8]
 80091e0:	da08      	bge.n	80091f4 <__sfputc_r+0x1e>
 80091e2:	6994      	ldr	r4, [r2, #24]
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	db01      	blt.n	80091ec <__sfputc_r+0x16>
 80091e8:	290a      	cmp	r1, #10
 80091ea:	d103      	bne.n	80091f4 <__sfputc_r+0x1e>
 80091ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091f0:	f000 b934 	b.w	800945c <__swbuf_r>
 80091f4:	6813      	ldr	r3, [r2, #0]
 80091f6:	1c58      	adds	r0, r3, #1
 80091f8:	6010      	str	r0, [r2, #0]
 80091fa:	7019      	strb	r1, [r3, #0]
 80091fc:	4608      	mov	r0, r1
 80091fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009202:	4770      	bx	lr

08009204 <__sfputs_r>:
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	4606      	mov	r6, r0
 8009208:	460f      	mov	r7, r1
 800920a:	4614      	mov	r4, r2
 800920c:	18d5      	adds	r5, r2, r3
 800920e:	42ac      	cmp	r4, r5
 8009210:	d101      	bne.n	8009216 <__sfputs_r+0x12>
 8009212:	2000      	movs	r0, #0
 8009214:	e007      	b.n	8009226 <__sfputs_r+0x22>
 8009216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800921a:	463a      	mov	r2, r7
 800921c:	4630      	mov	r0, r6
 800921e:	f7ff ffda 	bl	80091d6 <__sfputc_r>
 8009222:	1c43      	adds	r3, r0, #1
 8009224:	d1f3      	bne.n	800920e <__sfputs_r+0xa>
 8009226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009228 <_vfiprintf_r>:
 8009228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	460d      	mov	r5, r1
 800922e:	b09d      	sub	sp, #116	; 0x74
 8009230:	4614      	mov	r4, r2
 8009232:	4698      	mov	r8, r3
 8009234:	4606      	mov	r6, r0
 8009236:	b118      	cbz	r0, 8009240 <_vfiprintf_r+0x18>
 8009238:	6a03      	ldr	r3, [r0, #32]
 800923a:	b90b      	cbnz	r3, 8009240 <_vfiprintf_r+0x18>
 800923c:	f7fe f8dc 	bl	80073f8 <__sinit>
 8009240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009242:	07d9      	lsls	r1, r3, #31
 8009244:	d405      	bmi.n	8009252 <_vfiprintf_r+0x2a>
 8009246:	89ab      	ldrh	r3, [r5, #12]
 8009248:	059a      	lsls	r2, r3, #22
 800924a:	d402      	bmi.n	8009252 <_vfiprintf_r+0x2a>
 800924c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800924e:	f7fe f9e9 	bl	8007624 <__retarget_lock_acquire_recursive>
 8009252:	89ab      	ldrh	r3, [r5, #12]
 8009254:	071b      	lsls	r3, r3, #28
 8009256:	d501      	bpl.n	800925c <_vfiprintf_r+0x34>
 8009258:	692b      	ldr	r3, [r5, #16]
 800925a:	b99b      	cbnz	r3, 8009284 <_vfiprintf_r+0x5c>
 800925c:	4629      	mov	r1, r5
 800925e:	4630      	mov	r0, r6
 8009260:	f000 f93a 	bl	80094d8 <__swsetup_r>
 8009264:	b170      	cbz	r0, 8009284 <_vfiprintf_r+0x5c>
 8009266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009268:	07dc      	lsls	r4, r3, #31
 800926a:	d504      	bpl.n	8009276 <_vfiprintf_r+0x4e>
 800926c:	f04f 30ff 	mov.w	r0, #4294967295
 8009270:	b01d      	add	sp, #116	; 0x74
 8009272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009276:	89ab      	ldrh	r3, [r5, #12]
 8009278:	0598      	lsls	r0, r3, #22
 800927a:	d4f7      	bmi.n	800926c <_vfiprintf_r+0x44>
 800927c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800927e:	f7fe f9d2 	bl	8007626 <__retarget_lock_release_recursive>
 8009282:	e7f3      	b.n	800926c <_vfiprintf_r+0x44>
 8009284:	2300      	movs	r3, #0
 8009286:	9309      	str	r3, [sp, #36]	; 0x24
 8009288:	2320      	movs	r3, #32
 800928a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800928e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009292:	2330      	movs	r3, #48	; 0x30
 8009294:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009448 <_vfiprintf_r+0x220>
 8009298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800929c:	f04f 0901 	mov.w	r9, #1
 80092a0:	4623      	mov	r3, r4
 80092a2:	469a      	mov	sl, r3
 80092a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092a8:	b10a      	cbz	r2, 80092ae <_vfiprintf_r+0x86>
 80092aa:	2a25      	cmp	r2, #37	; 0x25
 80092ac:	d1f9      	bne.n	80092a2 <_vfiprintf_r+0x7a>
 80092ae:	ebba 0b04 	subs.w	fp, sl, r4
 80092b2:	d00b      	beq.n	80092cc <_vfiprintf_r+0xa4>
 80092b4:	465b      	mov	r3, fp
 80092b6:	4622      	mov	r2, r4
 80092b8:	4629      	mov	r1, r5
 80092ba:	4630      	mov	r0, r6
 80092bc:	f7ff ffa2 	bl	8009204 <__sfputs_r>
 80092c0:	3001      	adds	r0, #1
 80092c2:	f000 80a9 	beq.w	8009418 <_vfiprintf_r+0x1f0>
 80092c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092c8:	445a      	add	r2, fp
 80092ca:	9209      	str	r2, [sp, #36]	; 0x24
 80092cc:	f89a 3000 	ldrb.w	r3, [sl]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 80a1 	beq.w	8009418 <_vfiprintf_r+0x1f0>
 80092d6:	2300      	movs	r3, #0
 80092d8:	f04f 32ff 	mov.w	r2, #4294967295
 80092dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092e0:	f10a 0a01 	add.w	sl, sl, #1
 80092e4:	9304      	str	r3, [sp, #16]
 80092e6:	9307      	str	r3, [sp, #28]
 80092e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092ec:	931a      	str	r3, [sp, #104]	; 0x68
 80092ee:	4654      	mov	r4, sl
 80092f0:	2205      	movs	r2, #5
 80092f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f6:	4854      	ldr	r0, [pc, #336]	; (8009448 <_vfiprintf_r+0x220>)
 80092f8:	f7f6 ff8a 	bl	8000210 <memchr>
 80092fc:	9a04      	ldr	r2, [sp, #16]
 80092fe:	b9d8      	cbnz	r0, 8009338 <_vfiprintf_r+0x110>
 8009300:	06d1      	lsls	r1, r2, #27
 8009302:	bf44      	itt	mi
 8009304:	2320      	movmi	r3, #32
 8009306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800930a:	0713      	lsls	r3, r2, #28
 800930c:	bf44      	itt	mi
 800930e:	232b      	movmi	r3, #43	; 0x2b
 8009310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009314:	f89a 3000 	ldrb.w	r3, [sl]
 8009318:	2b2a      	cmp	r3, #42	; 0x2a
 800931a:	d015      	beq.n	8009348 <_vfiprintf_r+0x120>
 800931c:	9a07      	ldr	r2, [sp, #28]
 800931e:	4654      	mov	r4, sl
 8009320:	2000      	movs	r0, #0
 8009322:	f04f 0c0a 	mov.w	ip, #10
 8009326:	4621      	mov	r1, r4
 8009328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800932c:	3b30      	subs	r3, #48	; 0x30
 800932e:	2b09      	cmp	r3, #9
 8009330:	d94d      	bls.n	80093ce <_vfiprintf_r+0x1a6>
 8009332:	b1b0      	cbz	r0, 8009362 <_vfiprintf_r+0x13a>
 8009334:	9207      	str	r2, [sp, #28]
 8009336:	e014      	b.n	8009362 <_vfiprintf_r+0x13a>
 8009338:	eba0 0308 	sub.w	r3, r0, r8
 800933c:	fa09 f303 	lsl.w	r3, r9, r3
 8009340:	4313      	orrs	r3, r2
 8009342:	9304      	str	r3, [sp, #16]
 8009344:	46a2      	mov	sl, r4
 8009346:	e7d2      	b.n	80092ee <_vfiprintf_r+0xc6>
 8009348:	9b03      	ldr	r3, [sp, #12]
 800934a:	1d19      	adds	r1, r3, #4
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	9103      	str	r1, [sp, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	bfbb      	ittet	lt
 8009354:	425b      	neglt	r3, r3
 8009356:	f042 0202 	orrlt.w	r2, r2, #2
 800935a:	9307      	strge	r3, [sp, #28]
 800935c:	9307      	strlt	r3, [sp, #28]
 800935e:	bfb8      	it	lt
 8009360:	9204      	strlt	r2, [sp, #16]
 8009362:	7823      	ldrb	r3, [r4, #0]
 8009364:	2b2e      	cmp	r3, #46	; 0x2e
 8009366:	d10c      	bne.n	8009382 <_vfiprintf_r+0x15a>
 8009368:	7863      	ldrb	r3, [r4, #1]
 800936a:	2b2a      	cmp	r3, #42	; 0x2a
 800936c:	d134      	bne.n	80093d8 <_vfiprintf_r+0x1b0>
 800936e:	9b03      	ldr	r3, [sp, #12]
 8009370:	1d1a      	adds	r2, r3, #4
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	9203      	str	r2, [sp, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	bfb8      	it	lt
 800937a:	f04f 33ff 	movlt.w	r3, #4294967295
 800937e:	3402      	adds	r4, #2
 8009380:	9305      	str	r3, [sp, #20]
 8009382:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009458 <_vfiprintf_r+0x230>
 8009386:	7821      	ldrb	r1, [r4, #0]
 8009388:	2203      	movs	r2, #3
 800938a:	4650      	mov	r0, sl
 800938c:	f7f6 ff40 	bl	8000210 <memchr>
 8009390:	b138      	cbz	r0, 80093a2 <_vfiprintf_r+0x17a>
 8009392:	9b04      	ldr	r3, [sp, #16]
 8009394:	eba0 000a 	sub.w	r0, r0, sl
 8009398:	2240      	movs	r2, #64	; 0x40
 800939a:	4082      	lsls	r2, r0
 800939c:	4313      	orrs	r3, r2
 800939e:	3401      	adds	r4, #1
 80093a0:	9304      	str	r3, [sp, #16]
 80093a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a6:	4829      	ldr	r0, [pc, #164]	; (800944c <_vfiprintf_r+0x224>)
 80093a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093ac:	2206      	movs	r2, #6
 80093ae:	f7f6 ff2f 	bl	8000210 <memchr>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d03f      	beq.n	8009436 <_vfiprintf_r+0x20e>
 80093b6:	4b26      	ldr	r3, [pc, #152]	; (8009450 <_vfiprintf_r+0x228>)
 80093b8:	bb1b      	cbnz	r3, 8009402 <_vfiprintf_r+0x1da>
 80093ba:	9b03      	ldr	r3, [sp, #12]
 80093bc:	3307      	adds	r3, #7
 80093be:	f023 0307 	bic.w	r3, r3, #7
 80093c2:	3308      	adds	r3, #8
 80093c4:	9303      	str	r3, [sp, #12]
 80093c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c8:	443b      	add	r3, r7
 80093ca:	9309      	str	r3, [sp, #36]	; 0x24
 80093cc:	e768      	b.n	80092a0 <_vfiprintf_r+0x78>
 80093ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80093d2:	460c      	mov	r4, r1
 80093d4:	2001      	movs	r0, #1
 80093d6:	e7a6      	b.n	8009326 <_vfiprintf_r+0xfe>
 80093d8:	2300      	movs	r3, #0
 80093da:	3401      	adds	r4, #1
 80093dc:	9305      	str	r3, [sp, #20]
 80093de:	4619      	mov	r1, r3
 80093e0:	f04f 0c0a 	mov.w	ip, #10
 80093e4:	4620      	mov	r0, r4
 80093e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ea:	3a30      	subs	r2, #48	; 0x30
 80093ec:	2a09      	cmp	r2, #9
 80093ee:	d903      	bls.n	80093f8 <_vfiprintf_r+0x1d0>
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d0c6      	beq.n	8009382 <_vfiprintf_r+0x15a>
 80093f4:	9105      	str	r1, [sp, #20]
 80093f6:	e7c4      	b.n	8009382 <_vfiprintf_r+0x15a>
 80093f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80093fc:	4604      	mov	r4, r0
 80093fe:	2301      	movs	r3, #1
 8009400:	e7f0      	b.n	80093e4 <_vfiprintf_r+0x1bc>
 8009402:	ab03      	add	r3, sp, #12
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	462a      	mov	r2, r5
 8009408:	4b12      	ldr	r3, [pc, #72]	; (8009454 <_vfiprintf_r+0x22c>)
 800940a:	a904      	add	r1, sp, #16
 800940c:	4630      	mov	r0, r6
 800940e:	f7fd fbb3 	bl	8006b78 <_printf_float>
 8009412:	4607      	mov	r7, r0
 8009414:	1c78      	adds	r0, r7, #1
 8009416:	d1d6      	bne.n	80093c6 <_vfiprintf_r+0x19e>
 8009418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800941a:	07d9      	lsls	r1, r3, #31
 800941c:	d405      	bmi.n	800942a <_vfiprintf_r+0x202>
 800941e:	89ab      	ldrh	r3, [r5, #12]
 8009420:	059a      	lsls	r2, r3, #22
 8009422:	d402      	bmi.n	800942a <_vfiprintf_r+0x202>
 8009424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009426:	f7fe f8fe 	bl	8007626 <__retarget_lock_release_recursive>
 800942a:	89ab      	ldrh	r3, [r5, #12]
 800942c:	065b      	lsls	r3, r3, #25
 800942e:	f53f af1d 	bmi.w	800926c <_vfiprintf_r+0x44>
 8009432:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009434:	e71c      	b.n	8009270 <_vfiprintf_r+0x48>
 8009436:	ab03      	add	r3, sp, #12
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	462a      	mov	r2, r5
 800943c:	4b05      	ldr	r3, [pc, #20]	; (8009454 <_vfiprintf_r+0x22c>)
 800943e:	a904      	add	r1, sp, #16
 8009440:	4630      	mov	r0, r6
 8009442:	f7fd fe3d 	bl	80070c0 <_printf_i>
 8009446:	e7e4      	b.n	8009412 <_vfiprintf_r+0x1ea>
 8009448:	0800997c 	.word	0x0800997c
 800944c:	08009986 	.word	0x08009986
 8009450:	08006b79 	.word	0x08006b79
 8009454:	08009205 	.word	0x08009205
 8009458:	08009982 	.word	0x08009982

0800945c <__swbuf_r>:
 800945c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945e:	460e      	mov	r6, r1
 8009460:	4614      	mov	r4, r2
 8009462:	4605      	mov	r5, r0
 8009464:	b118      	cbz	r0, 800946e <__swbuf_r+0x12>
 8009466:	6a03      	ldr	r3, [r0, #32]
 8009468:	b90b      	cbnz	r3, 800946e <__swbuf_r+0x12>
 800946a:	f7fd ffc5 	bl	80073f8 <__sinit>
 800946e:	69a3      	ldr	r3, [r4, #24]
 8009470:	60a3      	str	r3, [r4, #8]
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	071a      	lsls	r2, r3, #28
 8009476:	d525      	bpl.n	80094c4 <__swbuf_r+0x68>
 8009478:	6923      	ldr	r3, [r4, #16]
 800947a:	b31b      	cbz	r3, 80094c4 <__swbuf_r+0x68>
 800947c:	6823      	ldr	r3, [r4, #0]
 800947e:	6922      	ldr	r2, [r4, #16]
 8009480:	1a98      	subs	r0, r3, r2
 8009482:	6963      	ldr	r3, [r4, #20]
 8009484:	b2f6      	uxtb	r6, r6
 8009486:	4283      	cmp	r3, r0
 8009488:	4637      	mov	r7, r6
 800948a:	dc04      	bgt.n	8009496 <__swbuf_r+0x3a>
 800948c:	4621      	mov	r1, r4
 800948e:	4628      	mov	r0, r5
 8009490:	f7ff fd9e 	bl	8008fd0 <_fflush_r>
 8009494:	b9e0      	cbnz	r0, 80094d0 <__swbuf_r+0x74>
 8009496:	68a3      	ldr	r3, [r4, #8]
 8009498:	3b01      	subs	r3, #1
 800949a:	60a3      	str	r3, [r4, #8]
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	1c5a      	adds	r2, r3, #1
 80094a0:	6022      	str	r2, [r4, #0]
 80094a2:	701e      	strb	r6, [r3, #0]
 80094a4:	6962      	ldr	r2, [r4, #20]
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d004      	beq.n	80094b6 <__swbuf_r+0x5a>
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	07db      	lsls	r3, r3, #31
 80094b0:	d506      	bpl.n	80094c0 <__swbuf_r+0x64>
 80094b2:	2e0a      	cmp	r6, #10
 80094b4:	d104      	bne.n	80094c0 <__swbuf_r+0x64>
 80094b6:	4621      	mov	r1, r4
 80094b8:	4628      	mov	r0, r5
 80094ba:	f7ff fd89 	bl	8008fd0 <_fflush_r>
 80094be:	b938      	cbnz	r0, 80094d0 <__swbuf_r+0x74>
 80094c0:	4638      	mov	r0, r7
 80094c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c4:	4621      	mov	r1, r4
 80094c6:	4628      	mov	r0, r5
 80094c8:	f000 f806 	bl	80094d8 <__swsetup_r>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d0d5      	beq.n	800947c <__swbuf_r+0x20>
 80094d0:	f04f 37ff 	mov.w	r7, #4294967295
 80094d4:	e7f4      	b.n	80094c0 <__swbuf_r+0x64>
	...

080094d8 <__swsetup_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4b2a      	ldr	r3, [pc, #168]	; (8009584 <__swsetup_r+0xac>)
 80094dc:	4605      	mov	r5, r0
 80094de:	6818      	ldr	r0, [r3, #0]
 80094e0:	460c      	mov	r4, r1
 80094e2:	b118      	cbz	r0, 80094ec <__swsetup_r+0x14>
 80094e4:	6a03      	ldr	r3, [r0, #32]
 80094e6:	b90b      	cbnz	r3, 80094ec <__swsetup_r+0x14>
 80094e8:	f7fd ff86 	bl	80073f8 <__sinit>
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094f2:	0718      	lsls	r0, r3, #28
 80094f4:	d422      	bmi.n	800953c <__swsetup_r+0x64>
 80094f6:	06d9      	lsls	r1, r3, #27
 80094f8:	d407      	bmi.n	800950a <__swsetup_r+0x32>
 80094fa:	2309      	movs	r3, #9
 80094fc:	602b      	str	r3, [r5, #0]
 80094fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009502:	81a3      	strh	r3, [r4, #12]
 8009504:	f04f 30ff 	mov.w	r0, #4294967295
 8009508:	e034      	b.n	8009574 <__swsetup_r+0x9c>
 800950a:	0758      	lsls	r0, r3, #29
 800950c:	d512      	bpl.n	8009534 <__swsetup_r+0x5c>
 800950e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009510:	b141      	cbz	r1, 8009524 <__swsetup_r+0x4c>
 8009512:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009516:	4299      	cmp	r1, r3
 8009518:	d002      	beq.n	8009520 <__swsetup_r+0x48>
 800951a:	4628      	mov	r0, r5
 800951c:	f7fe fefe 	bl	800831c <_free_r>
 8009520:	2300      	movs	r3, #0
 8009522:	6363      	str	r3, [r4, #52]	; 0x34
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800952a:	81a3      	strh	r3, [r4, #12]
 800952c:	2300      	movs	r3, #0
 800952e:	6063      	str	r3, [r4, #4]
 8009530:	6923      	ldr	r3, [r4, #16]
 8009532:	6023      	str	r3, [r4, #0]
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	f043 0308 	orr.w	r3, r3, #8
 800953a:	81a3      	strh	r3, [r4, #12]
 800953c:	6923      	ldr	r3, [r4, #16]
 800953e:	b94b      	cbnz	r3, 8009554 <__swsetup_r+0x7c>
 8009540:	89a3      	ldrh	r3, [r4, #12]
 8009542:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800954a:	d003      	beq.n	8009554 <__swsetup_r+0x7c>
 800954c:	4621      	mov	r1, r4
 800954e:	4628      	mov	r0, r5
 8009550:	f000 f884 	bl	800965c <__smakebuf_r>
 8009554:	89a0      	ldrh	r0, [r4, #12]
 8009556:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800955a:	f010 0301 	ands.w	r3, r0, #1
 800955e:	d00a      	beq.n	8009576 <__swsetup_r+0x9e>
 8009560:	2300      	movs	r3, #0
 8009562:	60a3      	str	r3, [r4, #8]
 8009564:	6963      	ldr	r3, [r4, #20]
 8009566:	425b      	negs	r3, r3
 8009568:	61a3      	str	r3, [r4, #24]
 800956a:	6923      	ldr	r3, [r4, #16]
 800956c:	b943      	cbnz	r3, 8009580 <__swsetup_r+0xa8>
 800956e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009572:	d1c4      	bne.n	80094fe <__swsetup_r+0x26>
 8009574:	bd38      	pop	{r3, r4, r5, pc}
 8009576:	0781      	lsls	r1, r0, #30
 8009578:	bf58      	it	pl
 800957a:	6963      	ldrpl	r3, [r4, #20]
 800957c:	60a3      	str	r3, [r4, #8]
 800957e:	e7f4      	b.n	800956a <__swsetup_r+0x92>
 8009580:	2000      	movs	r0, #0
 8009582:	e7f7      	b.n	8009574 <__swsetup_r+0x9c>
 8009584:	20000064 	.word	0x20000064

08009588 <_raise_r>:
 8009588:	291f      	cmp	r1, #31
 800958a:	b538      	push	{r3, r4, r5, lr}
 800958c:	4604      	mov	r4, r0
 800958e:	460d      	mov	r5, r1
 8009590:	d904      	bls.n	800959c <_raise_r+0x14>
 8009592:	2316      	movs	r3, #22
 8009594:	6003      	str	r3, [r0, #0]
 8009596:	f04f 30ff 	mov.w	r0, #4294967295
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800959e:	b112      	cbz	r2, 80095a6 <_raise_r+0x1e>
 80095a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095a4:	b94b      	cbnz	r3, 80095ba <_raise_r+0x32>
 80095a6:	4620      	mov	r0, r4
 80095a8:	f000 f830 	bl	800960c <_getpid_r>
 80095ac:	462a      	mov	r2, r5
 80095ae:	4601      	mov	r1, r0
 80095b0:	4620      	mov	r0, r4
 80095b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095b6:	f000 b817 	b.w	80095e8 <_kill_r>
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d00a      	beq.n	80095d4 <_raise_r+0x4c>
 80095be:	1c59      	adds	r1, r3, #1
 80095c0:	d103      	bne.n	80095ca <_raise_r+0x42>
 80095c2:	2316      	movs	r3, #22
 80095c4:	6003      	str	r3, [r0, #0]
 80095c6:	2001      	movs	r0, #1
 80095c8:	e7e7      	b.n	800959a <_raise_r+0x12>
 80095ca:	2400      	movs	r4, #0
 80095cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095d0:	4628      	mov	r0, r5
 80095d2:	4798      	blx	r3
 80095d4:	2000      	movs	r0, #0
 80095d6:	e7e0      	b.n	800959a <_raise_r+0x12>

080095d8 <raise>:
 80095d8:	4b02      	ldr	r3, [pc, #8]	; (80095e4 <raise+0xc>)
 80095da:	4601      	mov	r1, r0
 80095dc:	6818      	ldr	r0, [r3, #0]
 80095de:	f7ff bfd3 	b.w	8009588 <_raise_r>
 80095e2:	bf00      	nop
 80095e4:	20000064 	.word	0x20000064

080095e8 <_kill_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	4d07      	ldr	r5, [pc, #28]	; (8009608 <_kill_r+0x20>)
 80095ec:	2300      	movs	r3, #0
 80095ee:	4604      	mov	r4, r0
 80095f0:	4608      	mov	r0, r1
 80095f2:	4611      	mov	r1, r2
 80095f4:	602b      	str	r3, [r5, #0]
 80095f6:	f7f8 fa65 	bl	8001ac4 <_kill>
 80095fa:	1c43      	adds	r3, r0, #1
 80095fc:	d102      	bne.n	8009604 <_kill_r+0x1c>
 80095fe:	682b      	ldr	r3, [r5, #0]
 8009600:	b103      	cbz	r3, 8009604 <_kill_r+0x1c>
 8009602:	6023      	str	r3, [r4, #0]
 8009604:	bd38      	pop	{r3, r4, r5, pc}
 8009606:	bf00      	nop
 8009608:	20000a64 	.word	0x20000a64

0800960c <_getpid_r>:
 800960c:	f7f8 ba52 	b.w	8001ab4 <_getpid>

08009610 <__swhatbuf_r>:
 8009610:	b570      	push	{r4, r5, r6, lr}
 8009612:	460c      	mov	r4, r1
 8009614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009618:	2900      	cmp	r1, #0
 800961a:	b096      	sub	sp, #88	; 0x58
 800961c:	4615      	mov	r5, r2
 800961e:	461e      	mov	r6, r3
 8009620:	da0d      	bge.n	800963e <__swhatbuf_r+0x2e>
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009628:	f04f 0100 	mov.w	r1, #0
 800962c:	bf0c      	ite	eq
 800962e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009632:	2340      	movne	r3, #64	; 0x40
 8009634:	2000      	movs	r0, #0
 8009636:	6031      	str	r1, [r6, #0]
 8009638:	602b      	str	r3, [r5, #0]
 800963a:	b016      	add	sp, #88	; 0x58
 800963c:	bd70      	pop	{r4, r5, r6, pc}
 800963e:	466a      	mov	r2, sp
 8009640:	f000 f848 	bl	80096d4 <_fstat_r>
 8009644:	2800      	cmp	r0, #0
 8009646:	dbec      	blt.n	8009622 <__swhatbuf_r+0x12>
 8009648:	9901      	ldr	r1, [sp, #4]
 800964a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800964e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009652:	4259      	negs	r1, r3
 8009654:	4159      	adcs	r1, r3
 8009656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800965a:	e7eb      	b.n	8009634 <__swhatbuf_r+0x24>

0800965c <__smakebuf_r>:
 800965c:	898b      	ldrh	r3, [r1, #12]
 800965e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009660:	079d      	lsls	r5, r3, #30
 8009662:	4606      	mov	r6, r0
 8009664:	460c      	mov	r4, r1
 8009666:	d507      	bpl.n	8009678 <__smakebuf_r+0x1c>
 8009668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	6123      	str	r3, [r4, #16]
 8009670:	2301      	movs	r3, #1
 8009672:	6163      	str	r3, [r4, #20]
 8009674:	b002      	add	sp, #8
 8009676:	bd70      	pop	{r4, r5, r6, pc}
 8009678:	ab01      	add	r3, sp, #4
 800967a:	466a      	mov	r2, sp
 800967c:	f7ff ffc8 	bl	8009610 <__swhatbuf_r>
 8009680:	9900      	ldr	r1, [sp, #0]
 8009682:	4605      	mov	r5, r0
 8009684:	4630      	mov	r0, r6
 8009686:	f7fe febd 	bl	8008404 <_malloc_r>
 800968a:	b948      	cbnz	r0, 80096a0 <__smakebuf_r+0x44>
 800968c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009690:	059a      	lsls	r2, r3, #22
 8009692:	d4ef      	bmi.n	8009674 <__smakebuf_r+0x18>
 8009694:	f023 0303 	bic.w	r3, r3, #3
 8009698:	f043 0302 	orr.w	r3, r3, #2
 800969c:	81a3      	strh	r3, [r4, #12]
 800969e:	e7e3      	b.n	8009668 <__smakebuf_r+0xc>
 80096a0:	89a3      	ldrh	r3, [r4, #12]
 80096a2:	6020      	str	r0, [r4, #0]
 80096a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096a8:	81a3      	strh	r3, [r4, #12]
 80096aa:	9b00      	ldr	r3, [sp, #0]
 80096ac:	6163      	str	r3, [r4, #20]
 80096ae:	9b01      	ldr	r3, [sp, #4]
 80096b0:	6120      	str	r0, [r4, #16]
 80096b2:	b15b      	cbz	r3, 80096cc <__smakebuf_r+0x70>
 80096b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096b8:	4630      	mov	r0, r6
 80096ba:	f000 f81d 	bl	80096f8 <_isatty_r>
 80096be:	b128      	cbz	r0, 80096cc <__smakebuf_r+0x70>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	f023 0303 	bic.w	r3, r3, #3
 80096c6:	f043 0301 	orr.w	r3, r3, #1
 80096ca:	81a3      	strh	r3, [r4, #12]
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	431d      	orrs	r5, r3
 80096d0:	81a5      	strh	r5, [r4, #12]
 80096d2:	e7cf      	b.n	8009674 <__smakebuf_r+0x18>

080096d4 <_fstat_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4d07      	ldr	r5, [pc, #28]	; (80096f4 <_fstat_r+0x20>)
 80096d8:	2300      	movs	r3, #0
 80096da:	4604      	mov	r4, r0
 80096dc:	4608      	mov	r0, r1
 80096de:	4611      	mov	r1, r2
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	f7f8 fa4e 	bl	8001b82 <_fstat>
 80096e6:	1c43      	adds	r3, r0, #1
 80096e8:	d102      	bne.n	80096f0 <_fstat_r+0x1c>
 80096ea:	682b      	ldr	r3, [r5, #0]
 80096ec:	b103      	cbz	r3, 80096f0 <_fstat_r+0x1c>
 80096ee:	6023      	str	r3, [r4, #0]
 80096f0:	bd38      	pop	{r3, r4, r5, pc}
 80096f2:	bf00      	nop
 80096f4:	20000a64 	.word	0x20000a64

080096f8 <_isatty_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d06      	ldr	r5, [pc, #24]	; (8009714 <_isatty_r+0x1c>)
 80096fc:	2300      	movs	r3, #0
 80096fe:	4604      	mov	r4, r0
 8009700:	4608      	mov	r0, r1
 8009702:	602b      	str	r3, [r5, #0]
 8009704:	f7f8 fa4d 	bl	8001ba2 <_isatty>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d102      	bne.n	8009712 <_isatty_r+0x1a>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	b103      	cbz	r3, 8009712 <_isatty_r+0x1a>
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	20000a64 	.word	0x20000a64

08009718 <_init>:
 8009718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971a:	bf00      	nop
 800971c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971e:	bc08      	pop	{r3}
 8009720:	469e      	mov	lr, r3
 8009722:	4770      	bx	lr

08009724 <_fini>:
 8009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009726:	bf00      	nop
 8009728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800972a:	bc08      	pop	{r3}
 800972c:	469e      	mov	lr, r3
 800972e:	4770      	bx	lr
