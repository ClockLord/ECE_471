
ECE471_Hw7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08004278  08004278  00014278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a8  080044a8  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044b0  080044b0  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044b4  080044b4  000144b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  080044b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000f8  080045b0  000200f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000198  08004650  00020198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000007ec  20000238  080046f0  00020238  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a24  080046f0  00020a24  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 15 .debug_info   00010ed0  00000000  00000000  000202ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002286  00000000  00000000  0003117b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000cb8  00000000  00000000  00033408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000009c9  00000000  00000000  000340c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026b64  00000000  00000000  00034a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000fbf5  00000000  00000000  0005b5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ef13a  00000000  00000000  0006b1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003844  00000000  00000000  0015a31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  0015db60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000238 	.word	0x20000238
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004260 	.word	0x08004260

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000023c 	.word	0x2000023c
 8000204:	08004260 	.word	0x08004260

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b970 	b.w	8000524 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9e08      	ldr	r6, [sp, #32]
 8000262:	460d      	mov	r5, r1
 8000264:	4604      	mov	r4, r0
 8000266:	460f      	mov	r7, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14a      	bne.n	8000302 <__udivmoddi4+0xa6>
 800026c:	428a      	cmp	r2, r1
 800026e:	4694      	mov	ip, r2
 8000270:	d965      	bls.n	800033e <__udivmoddi4+0xe2>
 8000272:	fab2 f382 	clz	r3, r2
 8000276:	b143      	cbz	r3, 800028a <__udivmoddi4+0x2e>
 8000278:	fa02 fc03 	lsl.w	ip, r2, r3
 800027c:	f1c3 0220 	rsb	r2, r3, #32
 8000280:	409f      	lsls	r7, r3
 8000282:	fa20 f202 	lsr.w	r2, r0, r2
 8000286:	4317      	orrs	r7, r2
 8000288:	409c      	lsls	r4, r3
 800028a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028e:	fa1f f58c 	uxth.w	r5, ip
 8000292:	fbb7 f1fe 	udiv	r1, r7, lr
 8000296:	0c22      	lsrs	r2, r4, #16
 8000298:	fb0e 7711 	mls	r7, lr, r1, r7
 800029c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a0:	fb01 f005 	mul.w	r0, r1, r5
 80002a4:	4290      	cmp	r0, r2
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x62>
 80002a8:	eb1c 0202 	adds.w	r2, ip, r2
 80002ac:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b0:	f080 811c 	bcs.w	80004ec <__udivmoddi4+0x290>
 80002b4:	4290      	cmp	r0, r2
 80002b6:	f240 8119 	bls.w	80004ec <__udivmoddi4+0x290>
 80002ba:	3902      	subs	r1, #2
 80002bc:	4462      	add	r2, ip
 80002be:	1a12      	subs	r2, r2, r0
 80002c0:	b2a4      	uxth	r4, r4
 80002c2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	42a5      	cmp	r5, r4
 80002d4:	d90a      	bls.n	80002ec <__udivmoddi4+0x90>
 80002d6:	eb1c 0404 	adds.w	r4, ip, r4
 80002da:	f100 32ff 	add.w	r2, r0, #4294967295
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x294>
 80002e2:	42a5      	cmp	r5, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x294>
 80002e8:	4464      	add	r4, ip
 80002ea:	3802      	subs	r0, #2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0xa2>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xbc>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80ed 	beq.w	80004e6 <__udivmoddi4+0x28a>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d149      	bne.n	80003b4 <__udivmoddi4+0x158>
 8000320:	42ab      	cmp	r3, r5
 8000322:	d302      	bcc.n	800032a <__udivmoddi4+0xce>
 8000324:	4282      	cmp	r2, r0
 8000326:	f200 80f8 	bhi.w	800051a <__udivmoddi4+0x2be>
 800032a:	1a84      	subs	r4, r0, r2
 800032c:	eb65 0203 	sbc.w	r2, r5, r3
 8000330:	2001      	movs	r0, #1
 8000332:	4617      	mov	r7, r2
 8000334:	2e00      	cmp	r6, #0
 8000336:	d0e2      	beq.n	80002fe <__udivmoddi4+0xa2>
 8000338:	e9c6 4700 	strd	r4, r7, [r6]
 800033c:	e7df      	b.n	80002fe <__udivmoddi4+0xa2>
 800033e:	b902      	cbnz	r2, 8000342 <__udivmoddi4+0xe6>
 8000340:	deff      	udf	#255	; 0xff
 8000342:	fab2 f382 	clz	r3, r2
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x210>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f fe8c 	uxth.w	lr, ip
 8000356:	2101      	movs	r1, #1
 8000358:	fbb2 f5f7 	udiv	r5, r2, r7
 800035c:	fb07 2015 	mls	r0, r7, r5, r2
 8000360:	0c22      	lsrs	r2, r4, #16
 8000362:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000366:	fb0e f005 	mul.w	r0, lr, r5
 800036a:	4290      	cmp	r0, r2
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x124>
 800036e:	eb1c 0202 	adds.w	r2, ip, r2
 8000372:	f105 38ff 	add.w	r8, r5, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x122>
 8000378:	4290      	cmp	r0, r2
 800037a:	f200 80cb 	bhi.w	8000514 <__udivmoddi4+0x2b8>
 800037e:	4645      	mov	r5, r8
 8000380:	1a12      	subs	r2, r2, r0
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb2 f0f7 	udiv	r0, r2, r7
 8000388:	fb07 2210 	mls	r2, r7, r0, r2
 800038c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000390:	fb0e fe00 	mul.w	lr, lr, r0
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x14e>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x14c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80bb 	bhi.w	800051e <__udivmoddi4+0x2c2>
 80003a8:	4610      	mov	r0, r2
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x98>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa05 f401 	lsl.w	r4, r5, r1
 80003c6:	fa20 f307 	lsr.w	r3, r0, r7
 80003ca:	40fd      	lsrs	r5, r7
 80003cc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	fb09 5518 	mls	r5, r9, r8, r5
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e4:	fb08 f50e 	mul.w	r5, r8, lr
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	fa00 f001 	lsl.w	r0, r0, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b0>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2b4>
 8000400:	42a5      	cmp	r5, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2b4>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1b64      	subs	r4, r4, r5
 800040e:	b29d      	uxth	r5, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800041c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1da>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f103 35ff 	add.w	r5, r3, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2ac>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2ac>
 8000432:	3b02      	subs	r3, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043a:	fba3 9502 	umull	r9, r5, r3, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x29c>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x298>
 800044c:	b156      	cbz	r6, 8000464 <__udivmoddi4+0x208>
 800044e:	ebb0 0208 	subs.w	r2, r0, r8
 8000452:	eb64 040e 	sbc.w	r4, r4, lr
 8000456:	fa04 f707 	lsl.w	r7, r4, r7
 800045a:	40ca      	lsrs	r2, r1
 800045c:	40cc      	lsrs	r4, r1
 800045e:	4317      	orrs	r7, r2
 8000460:	e9c6 7400 	strd	r7, r4, [r6]
 8000464:	4618      	mov	r0, r3
 8000466:	2100      	movs	r1, #0
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	f1c3 0120 	rsb	r1, r3, #32
 8000470:	fa02 fc03 	lsl.w	ip, r2, r3
 8000474:	fa20 f201 	lsr.w	r2, r0, r1
 8000478:	fa25 f101 	lsr.w	r1, r5, r1
 800047c:	409d      	lsls	r5, r3
 800047e:	432a      	orrs	r2, r5
 8000480:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000484:	fa1f fe8c 	uxth.w	lr, ip
 8000488:	fbb1 f0f7 	udiv	r0, r1, r7
 800048c:	fb07 1510 	mls	r5, r7, r0, r1
 8000490:	0c11      	lsrs	r1, r2, #16
 8000492:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000496:	fb00 f50e 	mul.w	r5, r0, lr
 800049a:	428d      	cmp	r5, r1
 800049c:	fa04 f403 	lsl.w	r4, r4, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x258>
 80004a2:	eb1c 0101 	adds.w	r1, ip, r1
 80004a6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b0>
 80004ac:	428d      	cmp	r5, r1
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b0>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4461      	add	r1, ip
 80004b4:	1b49      	subs	r1, r1, r5
 80004b6:	b292      	uxth	r2, r2
 80004b8:	fbb1 f5f7 	udiv	r5, r1, r7
 80004bc:	fb07 1115 	mls	r1, r7, r5, r1
 80004c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c4:	fb05 f10e 	mul.w	r1, r5, lr
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x282>
 80004cc:	eb1c 0202 	adds.w	r2, ip, r2
 80004d0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2a8>
 80004d6:	4291      	cmp	r1, r2
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2a8>
 80004da:	3d02      	subs	r5, #2
 80004dc:	4462      	add	r2, ip
 80004de:	1a52      	subs	r2, r2, r1
 80004e0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0xfc>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xa2>
 80004ec:	4639      	mov	r1, r7
 80004ee:	e6e6      	b.n	80002be <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x90>
 80004f4:	4548      	cmp	r0, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f0>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3b01      	subs	r3, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f0>
 8000504:	4645      	mov	r5, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x282>
 8000508:	462b      	mov	r3, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1da>
 800050c:	4640      	mov	r0, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x258>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b0>
 8000514:	3d02      	subs	r5, #2
 8000516:	4462      	add	r2, ip
 8000518:	e732      	b.n	8000380 <__udivmoddi4+0x124>
 800051a:	4608      	mov	r0, r1
 800051c:	e70a      	b.n	8000334 <__udivmoddi4+0xd8>
 800051e:	4464      	add	r4, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e742      	b.n	80003aa <__udivmoddi4+0x14e>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <decodeMorse>:
		".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-",
		"...-", ".--", "-..-", "-.--", "--..", "-----", ".----", "..---", "...--", "....-",
		".....", "-....", "--...", "---..", "----.", ".-.-.-", "--..--", "..--.."};

//function takes in morse code and decodes it back into ASCII
char* decodeMorse(char* morseMessage){
 8000528:	b580      	push	{r7, lr}
 800052a:	b08c      	sub	sp, #48	; 0x30
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	 // Initialize variables for Morse code interpretation
	    char* decodedMessage = malloc(strlen(morseMessage) + 1);
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f7ff fe73 	bl	800021c <strlen>
 8000536:	4603      	mov	r3, r0
 8000538:	3301      	adds	r3, #1
 800053a:	4618      	mov	r0, r3
 800053c:	f003 fd90 	bl	8004060 <malloc>
 8000540:	4603      	mov	r3, r0
 8000542:	61bb      	str	r3, [r7, #24]
	    int decodedIndex = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	62fb      	str	r3, [r7, #44]	; 0x2c

	    int morseCharacterLength = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	62bb      	str	r3, [r7, #40]	; 0x28
	    char morseCharacter[10];  // Maximum length for a Morse character

	    for (int i = 0; morseMessage[i] != '\0'; i++) {
 800054c:	2300      	movs	r3, #0
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
 8000550:	e06f      	b.n	8000632 <decodeMorse+0x10a>
	        char symbol = morseMessage[i];
 8000552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	4413      	add	r3, r2
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	75fb      	strb	r3, [r7, #23]

	        if (symbol == '.') {
 800055c:	7dfb      	ldrb	r3, [r7, #23]
 800055e:	2b2e      	cmp	r3, #46	; 0x2e
 8000560:	d108      	bne.n	8000574 <decodeMorse+0x4c>
	            morseCharacter[morseCharacterLength++] = '.';
 8000562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000564:	1c5a      	adds	r2, r3, #1
 8000566:	62ba      	str	r2, [r7, #40]	; 0x28
 8000568:	3330      	adds	r3, #48	; 0x30
 800056a:	443b      	add	r3, r7
 800056c:	222e      	movs	r2, #46	; 0x2e
 800056e:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000572:	e05b      	b.n	800062c <decodeMorse+0x104>
	        } else if (symbol == '-') {
 8000574:	7dfb      	ldrb	r3, [r7, #23]
 8000576:	2b2d      	cmp	r3, #45	; 0x2d
 8000578:	d108      	bne.n	800058c <decodeMorse+0x64>
	            morseCharacter[morseCharacterLength++] = '-';
 800057a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800057c:	1c5a      	adds	r2, r3, #1
 800057e:	62ba      	str	r2, [r7, #40]	; 0x28
 8000580:	3330      	adds	r3, #48	; 0x30
 8000582:	443b      	add	r3, r7
 8000584:	222d      	movs	r2, #45	; 0x2d
 8000586:	f803 2c24 	strb.w	r2, [r3, #-36]
 800058a:	e04f      	b.n	800062c <decodeMorse+0x104>
	        } else if (symbol == ' ') {
 800058c:	7dfb      	ldrb	r3, [r7, #23]
 800058e:	2b20      	cmp	r3, #32
 8000590:	d14c      	bne.n	800062c <decodeMorse+0x104>
	            if (morseCharacterLength > 0) {
 8000592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000594:	2b00      	cmp	r3, #0
 8000596:	dd41      	ble.n	800061c <decodeMorse+0xf4>
	                // End of a Morse character, find the corresponding character
	                morseCharacter[morseCharacterLength] = '\0';
 8000598:	f107 020c 	add.w	r2, r7, #12
 800059c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800059e:	4413      	add	r3, r2
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
	                int matchFound = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
	                for (int j = 0; j < 36; j++) {  // 26 letters, 10 digits
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
 80005ac:	e025      	b.n	80005fa <decodeMorse+0xd2>
	                    if (strcmp(morseCharacter, morseCode[j]) == 0) {
 80005ae:	4a29      	ldr	r2, [pc, #164]	; (8000654 <decodeMorse+0x12c>)
 80005b0:	69fb      	ldr	r3, [r7, #28]
 80005b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	4611      	mov	r1, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe23 	bl	8000208 <strcmp>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d115      	bne.n	80005f4 <decodeMorse+0xcc>
	                        decodedMessage[decodedIndex++] = (j < 26) ? ('A' + j) : ('0' + j - 26);
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	2b19      	cmp	r3, #25
 80005cc:	dc04      	bgt.n	80005d8 <decodeMorse+0xb0>
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	3341      	adds	r3, #65	; 0x41
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	e003      	b.n	80005e0 <decodeMorse+0xb8>
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	3316      	adds	r3, #22
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005e2:	1c51      	adds	r1, r2, #1
 80005e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80005e6:	4611      	mov	r1, r2
 80005e8:	69ba      	ldr	r2, [r7, #24]
 80005ea:	440a      	add	r2, r1
 80005ec:	7013      	strb	r3, [r2, #0]
	                        matchFound = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	623b      	str	r3, [r7, #32]
	                        break;
 80005f2:	e005      	b.n	8000600 <decodeMorse+0xd8>
	                for (int j = 0; j < 36; j++) {  // 26 letters, 10 digits
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	3301      	adds	r3, #1
 80005f8:	61fb      	str	r3, [r7, #28]
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	2b23      	cmp	r3, #35	; 0x23
 80005fe:	ddd6      	ble.n	80005ae <decodeMorse+0x86>
	                    }
	                }

	                if (!matchFound) {
 8000600:	6a3b      	ldr	r3, [r7, #32]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d107      	bne.n	8000616 <decodeMorse+0xee>
	                    // Handle unknown Morse character
	                    decodedMessage[decodedIndex++] = '?';
 8000606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800060c:	461a      	mov	r2, r3
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	4413      	add	r3, r2
 8000612:	223f      	movs	r2, #63	; 0x3f
 8000614:	701a      	strb	r2, [r3, #0]
	                }

	                morseCharacterLength = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	62bb      	str	r3, [r7, #40]	; 0x28
 800061a:	e007      	b.n	800062c <decodeMorse+0x104>
	            } else {
	                // Space represents the gap between words
	                decodedMessage[decodedIndex++] = ' ';
 800061c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000622:	461a      	mov	r2, r3
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	4413      	add	r3, r2
 8000628:	2220      	movs	r2, #32
 800062a:	701a      	strb	r2, [r3, #0]
	    for (int i = 0; morseMessage[i] != '\0'; i++) {
 800062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062e:	3301      	adds	r3, #1
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
 8000632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	4413      	add	r3, r2
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d189      	bne.n	8000552 <decodeMorse+0x2a>
	            }
	        }
	    }

	    decodedMessage[decodedIndex] = '\0';  // Null-terminate the decoded message
 800063e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000640:	69ba      	ldr	r2, [r7, #24]
 8000642:	4413      	add	r3, r2
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
	    return decodedMessage;
 8000648:	69bb      	ldr	r3, [r7, #24]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3730      	adds	r7, #48	; 0x30
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000

08000658 <codeMorse>:

//function takes in ASCII and codes it into morse code
char* codeMorse(char* asciiMessage) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	 int length = strlen(asciiMessage);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff fddb 	bl	800021c <strlen>
 8000666:	4603      	mov	r3, r0
 8000668:	61fb      	str	r3, [r7, #28]
	    char* morseMessage = malloc((length * 5) + 1); // Maximum size for ASCII to Morse
 800066a:	69fa      	ldr	r2, [r7, #28]
 800066c:	4613      	mov	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	3301      	adds	r3, #1
 8000674:	4618      	mov	r0, r3
 8000676:	f003 fcf3 	bl	8004060 <malloc>
 800067a:	4603      	mov	r3, r0
 800067c:	61bb      	str	r3, [r7, #24]

	    if (morseMessage == NULL) {
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d101      	bne.n	8000688 <codeMorse+0x30>
	        return NULL; // Memory allocation error
 8000684:	2300      	movs	r3, #0
 8000686:	e082      	b.n	800078e <codeMorse+0x136>
	    }

	    int index = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24

	    for (int i = 0; i < length; i++) {
 800068c:	2300      	movs	r3, #0
 800068e:	623b      	str	r3, [r7, #32]
 8000690:	e073      	b.n	800077a <codeMorse+0x122>
	        char c = toupper(asciiMessage[i]);
 8000692:	6a3b      	ldr	r3, [r7, #32]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	4413      	add	r3, r2
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	75fb      	strb	r3, [r7, #23]
 800069c:	7dfb      	ldrb	r3, [r7, #23]
 800069e:	3301      	adds	r3, #1
 80006a0:	4a3d      	ldr	r2, [pc, #244]	; (8000798 <codeMorse+0x140>)
 80006a2:	4413      	add	r3, r2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	f003 0303 	and.w	r3, r3, #3
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d102      	bne.n	80006b4 <codeMorse+0x5c>
 80006ae:	7dfb      	ldrb	r3, [r7, #23]
 80006b0:	3b20      	subs	r3, #32
 80006b2:	e000      	b.n	80006b6 <codeMorse+0x5e>
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	75bb      	strb	r3, [r7, #22]

	        if (isalpha(c)) {
 80006b8:	7dbb      	ldrb	r3, [r7, #22]
 80006ba:	3301      	adds	r3, #1
 80006bc:	4a36      	ldr	r2, [pc, #216]	; (8000798 <codeMorse+0x140>)
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	f003 0303 	and.w	r3, r3, #3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d019      	beq.n	80006fe <codeMorse+0xa6>
	            int morseIndex = c - 'A';
 80006ca:	7dbb      	ldrb	r3, [r7, #22]
 80006cc:	3b41      	subs	r3, #65	; 0x41
 80006ce:	60fb      	str	r3, [r7, #12]
	            strcpy(&morseMessage[index], morseCode[morseIndex]);
 80006d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d2:	69ba      	ldr	r2, [r7, #24]
 80006d4:	441a      	add	r2, r3
 80006d6:	4931      	ldr	r1, [pc, #196]	; (800079c <codeMorse+0x144>)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006de:	4619      	mov	r1, r3
 80006e0:	4610      	mov	r0, r2
 80006e2:	f003 fdb5 	bl	8004250 <strcpy>
	            index += strlen(morseCode[morseIndex]);
 80006e6:	4a2d      	ldr	r2, [pc, #180]	; (800079c <codeMorse+0x144>)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd94 	bl	800021c <strlen>
 80006f4:	4602      	mov	r2, r0
 80006f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f8:	4413      	add	r3, r2
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
 80006fc:	e02d      	b.n	800075a <codeMorse+0x102>
	        } else if (isdigit(c)) {
 80006fe:	7dbb      	ldrb	r3, [r7, #22]
 8000700:	3301      	adds	r3, #1
 8000702:	4a25      	ldr	r2, [pc, #148]	; (8000798 <codeMorse+0x140>)
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	2b00      	cmp	r3, #0
 800070e:	d019      	beq.n	8000744 <codeMorse+0xec>
	            int morseIndex = c - '0' + 26; // Offset for digits
 8000710:	7dbb      	ldrb	r3, [r7, #22]
 8000712:	3b16      	subs	r3, #22
 8000714:	613b      	str	r3, [r7, #16]
	            strcpy(&morseMessage[index], morseCode[morseIndex]);
 8000716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000718:	69ba      	ldr	r2, [r7, #24]
 800071a:	441a      	add	r2, r3
 800071c:	491f      	ldr	r1, [pc, #124]	; (800079c <codeMorse+0x144>)
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000724:	4619      	mov	r1, r3
 8000726:	4610      	mov	r0, r2
 8000728:	f003 fd92 	bl	8004250 <strcpy>
	            index += strlen(morseCode[morseIndex]);
 800072c:	4a1b      	ldr	r2, [pc, #108]	; (800079c <codeMorse+0x144>)
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fd71 	bl	800021c <strlen>
 800073a:	4602      	mov	r2, r0
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	4413      	add	r3, r2
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
 8000742:	e00a      	b.n	800075a <codeMorse+0x102>
	        } else if (c == ' ') {
 8000744:	7dbb      	ldrb	r3, [r7, #22]
 8000746:	2b20      	cmp	r3, #32
 8000748:	d107      	bne.n	800075a <codeMorse+0x102>
	            morseMessage[index++] = ' '; // Space character
 800074a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	627a      	str	r2, [r7, #36]	; 0x24
 8000750:	461a      	mov	r2, r3
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	4413      	add	r3, r2
 8000756:	2220      	movs	r2, #32
 8000758:	701a      	strb	r2, [r3, #0]
	        }
	        if (i < length - 1) {
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3b01      	subs	r3, #1
 800075e:	6a3a      	ldr	r2, [r7, #32]
 8000760:	429a      	cmp	r2, r3
 8000762:	da07      	bge.n	8000774 <codeMorse+0x11c>
	            morseMessage[index++] = ' '; // Inter-element gap
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	1c5a      	adds	r2, r3, #1
 8000768:	627a      	str	r2, [r7, #36]	; 0x24
 800076a:	461a      	mov	r2, r3
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	4413      	add	r3, r2
 8000770:	2220      	movs	r2, #32
 8000772:	701a      	strb	r2, [r3, #0]
	    for (int i = 0; i < length; i++) {
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	3301      	adds	r3, #1
 8000778:	623b      	str	r3, [r7, #32]
 800077a:	6a3a      	ldr	r2, [r7, #32]
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	429a      	cmp	r2, r3
 8000780:	db87      	blt.n	8000692 <codeMorse+0x3a>
	        }
	    }

	    morseMessage[index] = '\0'; // Null-terminate the string
 8000782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000784:	69ba      	ldr	r2, [r7, #24]
 8000786:	4413      	add	r3, r2
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
	    return morseMessage;
 800078c:	69bb      	ldr	r3, [r7, #24]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3728      	adds	r7, #40	; 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	080043a4 	.word	0x080043a4
 800079c:	20000000 	.word	0x20000000

080007a0 <morseCodeBlink>:
void UART3_Print(const char* str) {
    HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}

//function blinks an led in morse code
void morseCodeBlink(char* morseCode){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

	int dotCount =0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]

	 for (int i = 0; morseCode[i] != '\0'; i++) {
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	e03f      	b.n	8000832 <morseCodeBlink+0x92>
	        char symbol = morseCode[i];
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	4413      	add	r3, r2
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	73fb      	strb	r3, [r7, #15]

	        if (symbol == ' ') {
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2b20      	cmp	r3, #32
 80007c0:	d104      	bne.n	80007cc <morseCodeBlink+0x2c>
	        	 HAL_Delay(600);  // Adjust as needed fo
 80007c2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80007c6:	f000 fce5 	bl	8001194 <HAL_Delay>
 80007ca:	e01a      	b.n	8000802 <morseCodeBlink+0x62>

	        } else if (symbol == '-') {
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	2b2d      	cmp	r3, #45	; 0x2d
 80007d0:	d111      	bne.n	80007f6 <morseCodeBlink+0x56>
	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // Turn the LED on (replace with your LED control function)
 80007d2:	2201      	movs	r2, #1
 80007d4:	2101      	movs	r1, #1
 80007d6:	481c      	ldr	r0, [pc, #112]	; (8000848 <morseCodeBlink+0xa8>)
 80007d8:	f001 fad0 	bl	8001d7c <HAL_GPIO_WritePin>
	        	HAL_Delay(300);  // LED on time (adjust as needed)
 80007dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007e0:	f000 fcd8 	bl	8001194 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Turn the LED off
 80007e4:	2200      	movs	r2, #0
 80007e6:	2101      	movs	r1, #1
 80007e8:	4817      	ldr	r0, [pc, #92]	; (8000848 <morseCodeBlink+0xa8>)
 80007ea:	f001 fac7 	bl	8001d7c <HAL_GPIO_WritePin>
				HAL_Delay(100);  // Gap between dots (adjust as needed)
 80007ee:	2064      	movs	r0, #100	; 0x64
 80007f0:	f000 fcd0 	bl	8001194 <HAL_Delay>
 80007f4:	e005      	b.n	8000802 <morseCodeBlink+0x62>
	        } else if (symbol == '.') {
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	2b2e      	cmp	r3, #46	; 0x2e
 80007fa:	d102      	bne.n	8000802 <morseCodeBlink+0x62>
	        	dotCount ++;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	3301      	adds	r3, #1
 8000800:	617b      	str	r3, [r7, #20]
	        }
	        if(dotCount>=2){
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	2b01      	cmp	r3, #1
 8000806:	dd11      	ble.n	800082c <morseCodeBlink+0x8c>
	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2101      	movs	r1, #1
 800080c:	480e      	ldr	r0, [pc, #56]	; (8000848 <morseCodeBlink+0xa8>)
 800080e:	f001 fab5 	bl	8001d7c <HAL_GPIO_WritePin>
	        	HAL_Delay(100);  // 100ms for a dot
 8000812:	2064      	movs	r0, #100	; 0x64
 8000814:	f000 fcbe 	bl	8001194 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2101      	movs	r1, #1
 800081c:	480a      	ldr	r0, [pc, #40]	; (8000848 <morseCodeBlink+0xa8>)
 800081e:	f001 faad 	bl	8001d7c <HAL_GPIO_WritePin>
	        	HAL_Delay(100);  // Gap for a dot
 8000822:	2064      	movs	r0, #100	; 0x64
 8000824:	f000 fcb6 	bl	8001194 <HAL_Delay>
	        	dotCount=0;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
	 for (int i = 0; morseCode[i] != '\0'; i++) {
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	3301      	adds	r3, #1
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	4413      	add	r3, r2
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1b9      	bne.n	80007b2 <morseCodeBlink+0x12>
	        }
	    }

}
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40020400 	.word	0x40020400

0800084c <main>:




int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char* asciiMessage = "S O S";
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <main+0x64>)
 8000854:	60fb      	str	r3, [r7, #12]
	char* morseEncodedMessage = codeMorse(asciiMessage);
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f7ff fefe 	bl	8000658 <codeMorse>
 800085c:	60b8      	str	r0, [r7, #8]

//	printf("Encoded: ");
//	printf(morseEncodedMessage);
//	printf("\n");

	char* morseMessage = "... --- ...";
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <main+0x68>)
 8000860:	607b      	str	r3, [r7, #4]
	char* decodedMessage = decodeMorse(morseMessage);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff fe60 	bl	8000528 <decodeMorse>
 8000868:	6038      	str	r0, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086a:	f000 fc36 	bl	80010da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086e:	f000 f827 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000872:	f000 f939 	bl	8000ae8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000876:	f000 f88b 	bl	8000990 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800087a:	f000 f8d7 	bl	8000a2c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800087e:	f000 f905 	bl	8000a8c <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    morseCodeBlink(morseEncodedMessage);
 8000882:	68b8      	ldr	r0, [r7, #8]
 8000884:	f7ff ff8c 	bl	80007a0 <morseCodeBlink>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8000888:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088c:	480a      	ldr	r0, [pc, #40]	; (80008b8 <main+0x6c>)
 800088e:	f001 fa5d 	bl	8001d4c <HAL_GPIO_ReadPin>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	d105      	bne.n	80008a4 <main+0x58>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //green
 8000898:	2201      	movs	r2, #1
 800089a:	2101      	movs	r1, #1
 800089c:	4807      	ldr	r0, [pc, #28]	; (80008bc <main+0x70>)
 800089e:	f001 fa6d 	bl	8001d7c <HAL_GPIO_WritePin>
 80008a2:	e7ee      	b.n	8000882 <main+0x36>
		  //UART3_Print(morseEncodedMessage);


	  }
	  else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //green
 80008a4:	2200      	movs	r2, #0
 80008a6:	2101      	movs	r1, #1
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <main+0x70>)
 80008aa:	f001 fa67 	bl	8001d7c <HAL_GPIO_WritePin>
	    morseCodeBlink(morseEncodedMessage);
 80008ae:	e7e8      	b.n	8000882 <main+0x36>
 80008b0:	08004378 	.word	0x08004378
 80008b4:	08004380 	.word	0x08004380
 80008b8:	40020800 	.word	0x40020800
 80008bc:	40020400 	.word	0x40020400

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b094      	sub	sp, #80	; 0x50
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	2230      	movs	r2, #48	; 0x30
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f003 fc7a 	bl	80041c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008e4:	f001 fbac 	bl	8002040 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	4b27      	ldr	r3, [pc, #156]	; (8000988 <SystemClock_Config+0xc8>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	4a26      	ldr	r2, [pc, #152]	; (8000988 <SystemClock_Config+0xc8>)
 80008ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f2:	6413      	str	r3, [r2, #64]	; 0x40
 80008f4:	4b24      	ldr	r3, [pc, #144]	; (8000988 <SystemClock_Config+0xc8>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <SystemClock_Config+0xcc>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000908:	4a20      	ldr	r2, [pc, #128]	; (800098c <SystemClock_Config+0xcc>)
 800090a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <SystemClock_Config+0xcc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000920:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000930:	2304      	movs	r3, #4
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000934:	2348      	movs	r3, #72	; 0x48
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800093c:	2303      	movs	r3, #3
 800093e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fb8b 	bl	8002060 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000950:	f000 f96c 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2302      	movs	r3, #2
 800095a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2102      	movs	r1, #2
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fe19 	bl	80025a8 <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800097c:	f000 f956 	bl	8000c2c <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3750      	adds	r7, #80	; 0x50
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_ETH_Init+0x84>)
 8000996:	4a20      	ldr	r2, [pc, #128]	; (8000a18 <MX_ETH_Init+0x88>)
 8000998:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <MX_ETH_Init+0x8c>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <MX_ETH_Init+0x8c>)
 80009a2:	2280      	movs	r2, #128	; 0x80
 80009a4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_ETH_Init+0x8c>)
 80009a8:	22e1      	movs	r2, #225	; 0xe1
 80009aa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_ETH_Init+0x8c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_ETH_Init+0x8c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_ETH_Init+0x8c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_ETH_Init+0x84>)
 80009c0:	4a16      	ldr	r2, [pc, #88]	; (8000a1c <MX_ETH_Init+0x8c>)
 80009c2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_ETH_Init+0x84>)
 80009c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009ca:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_ETH_Init+0x84>)
 80009ce:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <MX_ETH_Init+0x90>)
 80009d0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_ETH_Init+0x84>)
 80009d4:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <MX_ETH_Init+0x94>)
 80009d6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_ETH_Init+0x84>)
 80009da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009de:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <MX_ETH_Init+0x84>)
 80009e2:	f000 fce1 	bl	80013a8 <HAL_ETH_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009ec:	f000 f91e 	bl	8000c2c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009f0:	2238      	movs	r2, #56	; 0x38
 80009f2:	2100      	movs	r1, #0
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_ETH_Init+0x98>)
 80009f6:	f003 fbe7 	bl	80041c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_ETH_Init+0x98>)
 80009fc:	2221      	movs	r2, #33	; 0x21
 80009fe:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_ETH_Init+0x98>)
 8000a02:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a06:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <MX_ETH_Init+0x98>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000028c 	.word	0x2000028c
 8000a18:	40028000 	.word	0x40028000
 8000a1c:	200008cc 	.word	0x200008cc
 8000a20:	20000198 	.word	0x20000198
 8000a24:	200000f8 	.word	0x200000f8
 8000a28:	20000254 	.word	0x20000254

08000a2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_USART3_UART_Init+0x58>)
 8000a32:	4a15      	ldr	r2, [pc, #84]	; (8000a88 <MX_USART3_UART_Init+0x5c>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_USART3_UART_Init+0x58>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART3_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_USART3_UART_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART3_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USART3_UART_Init+0x58>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART3_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USART3_UART_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USART3_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USART3_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USART3_UART_Init+0x58>)
 8000a70:	f002 fbb0 	bl	80031d4 <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a7a:	f000 f8d7 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000033c 	.word	0x2000033c
 8000a88:	40004800 	.word	0x40004800

08000a8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9a:	2206      	movs	r2, #6
 8000a9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad0:	f001 f96d 	bl	8001dae <HAL_PCD_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ada:	f000 f8a7 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200003c4 	.word	0x200003c4

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	4b47      	ldr	r3, [pc, #284]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a46      	ldr	r2, [pc, #280]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b44      	ldr	r3, [pc, #272]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	61bb      	str	r3, [r7, #24]
 8000b14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	4b41      	ldr	r3, [pc, #260]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a40      	ldr	r2, [pc, #256]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b3e      	ldr	r3, [pc, #248]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b3b      	ldr	r3, [pc, #236]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a3a      	ldr	r2, [pc, #232]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b38      	ldr	r3, [pc, #224]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b35      	ldr	r3, [pc, #212]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a34      	ldr	r2, [pc, #208]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5e:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a2e      	ldr	r2, [pc, #184]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0308 	and.w	r3, r3, #8
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a28      	ldr	r2, [pc, #160]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <MX_GPIO_Init+0x134>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b94:	4822      	ldr	r0, [pc, #136]	; (8000c20 <MX_GPIO_Init+0x138>)
 8000b96:	f001 f8f1 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2140      	movs	r1, #64	; 0x40
 8000b9e:	4821      	ldr	r0, [pc, #132]	; (8000c24 <MX_GPIO_Init+0x13c>)
 8000ba0:	f001 f8ec 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000baa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481b      	ldr	r0, [pc, #108]	; (8000c28 <MX_GPIO_Init+0x140>)
 8000bbc:	f000 ff1a 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bc0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4811      	ldr	r0, [pc, #68]	; (8000c20 <MX_GPIO_Init+0x138>)
 8000bda:	f000 ff0b 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bde:	2340      	movs	r3, #64	; 0x40
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <MX_GPIO_Init+0x13c>)
 8000bf6:	f000 fefd 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_GPIO_Init+0x13c>)
 8000c0e:	f000 fef1 	bl	80019f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c12:	bf00      	nop
 8000c14:	3730      	adds	r7, #48	; 0x30
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020400 	.word	0x40020400
 8000c24:	40021800 	.word	0x40021800
 8000c28:	40020800 	.word	0x40020800

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>
	...

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_MspInit+0x44>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <HAL_MspInit+0x44>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_MspInit+0x44>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_MspInit+0x44>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_MspInit+0x44>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_MspInit+0x44>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800

08000c80 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08e      	sub	sp, #56	; 0x38
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a4e      	ldr	r2, [pc, #312]	; (8000dd8 <HAL_ETH_MspInit+0x158>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	f040 8096 	bne.w	8000dd0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ca4:	4b4d      	ldr	r3, [pc, #308]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a4c      	ldr	r2, [pc, #304]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000caa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb0:	4b4a      	ldr	r3, [pc, #296]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb8:	623b      	str	r3, [r7, #32]
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	4b47      	ldr	r3, [pc, #284]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	4a46      	ldr	r2, [pc, #280]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc8:	4b44      	ldr	r3, [pc, #272]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	4b41      	ldr	r3, [pc, #260]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	4a40      	ldr	r2, [pc, #256]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000cde:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce0:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ce8:	61bb      	str	r3, [r7, #24]
 8000cea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cec:	4b3b      	ldr	r3, [pc, #236]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	4a3a      	ldr	r2, [pc, #232]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf8:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b35      	ldr	r3, [pc, #212]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	4a34      	ldr	r2, [pc, #208]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d10:	4b32      	ldr	r3, [pc, #200]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a2e      	ldr	r2, [pc, #184]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d34:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a28      	ldr	r2, [pc, #160]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d4c:	2332      	movs	r3, #50	; 0x32
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5c:	230b      	movs	r3, #11
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	481e      	ldr	r0, [pc, #120]	; (8000de0 <HAL_ETH_MspInit+0x160>)
 8000d68:	f000 fe44 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d6c:	2386      	movs	r3, #134	; 0x86
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7c:	230b      	movs	r3, #11
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	4817      	ldr	r0, [pc, #92]	; (8000de4 <HAL_ETH_MspInit+0x164>)
 8000d88:	f000 fe34 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d9e:	230b      	movs	r3, #11
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da6:	4619      	mov	r1, r3
 8000da8:	480f      	ldr	r0, [pc, #60]	; (8000de8 <HAL_ETH_MspInit+0x168>)
 8000daa:	f000 fe23 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc0:	230b      	movs	r3, #11
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4808      	ldr	r0, [pc, #32]	; (8000dec <HAL_ETH_MspInit+0x16c>)
 8000dcc:	f000 fe12 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3738      	adds	r7, #56	; 0x38
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40028000 	.word	0x40028000
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40020400 	.word	0x40020400
 8000dec:	40021800 	.word	0x40021800

08000df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0aa      	sub	sp, #168	; 0xa8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	2284      	movs	r2, #132	; 0x84
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 f9d9 	bl	80041c8 <memset>
  if(huart->Instance==USART3)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a22      	ldr	r2, [pc, #136]	; (8000ea4 <HAL_UART_MspInit+0xb4>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d13c      	bne.n	8000e9a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 fde0 	bl	80029f4 <HAL_RCCEx_PeriphCLKConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e3a:	f7ff fef7 	bl	8000c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <HAL_UART_MspInit+0xb8>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a19      	ldr	r2, [pc, #100]	; (8000ea8 <HAL_UART_MspInit+0xb8>)
 8000e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_UART_MspInit+0xb8>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_UART_MspInit+0xb8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a13      	ldr	r2, [pc, #76]	; (8000ea8 <HAL_UART_MspInit+0xb8>)
 8000e5c:	f043 0308 	orr.w	r3, r3, #8
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_UART_MspInit+0xb8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <HAL_UART_MspInit+0xbc>)
 8000e96:	f000 fdad 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	37a8      	adds	r7, #168	; 0xa8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40004800 	.word	0x40004800
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020c00 	.word	0x40020c00

08000eb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0ac      	sub	sp, #176	; 0xb0
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec8:	f107 0318 	add.w	r3, r7, #24
 8000ecc:	2284      	movs	r2, #132	; 0x84
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f003 f979 	bl	80041c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ede:	d159      	bne.n	8000f94 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ee0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ee4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eec:	f107 0318 	add.w	r3, r7, #24
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 fd7f 	bl	80029f4 <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000efc:	f7ff fe96 	bl	8000c2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	4a25      	ldr	r2, [pc, #148]	; (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0c:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f18:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f32:	230a      	movs	r3, #10
 8000f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <HAL_PCD_MspInit+0xf0>)
 8000f40:	f000 fd58 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <HAL_PCD_MspInit+0xf0>)
 8000f60:	f000 fd48 	bl	80019f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f68:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f6e:	6353      	str	r3, [r2, #52]	; 0x34
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f86:	6453      	str	r3, [r2, #68]	; 0x44
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	37b0      	adds	r7, #176	; 0xb0
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff0:	f000 f8b0 	bl	8001154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d207      	bcs.n	8001038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001028:	f003 f8e6 	bl	80041f8 <__errno>
 800102c:	4603      	mov	r3, r0
 800102e:	220c      	movs	r2, #12
 8001030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	e009      	b.n	800104c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <_sbrk+0x64>)
 8001048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20050000 	.word	0x20050000
 8001058:	00000400 	.word	0x00000400
 800105c:	200008d4 	.word	0x200008d4
 8001060:	20000a28 	.word	0x20000a28

08001064 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800108e:	490e      	ldr	r1, [pc, #56]	; (80010c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001090:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a4:	4c0b      	ldr	r4, [pc, #44]	; (80010d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010b2:	f7ff ffd7 	bl	8001064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b6:	f003 f8a5 	bl	8004204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ba:	f7ff fbc7 	bl	800084c <main>
  bx  lr    
 80010be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c8:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 80010cc:	080044b8 	.word	0x080044b8
  ldr r2, =_sbss
 80010d0:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80010d4:	20000a24 	.word	0x20000a24

080010d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC_IRQHandler>

080010da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010de:	2003      	movs	r0, #3
 80010e0:	f000 f92e 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f000 f805 	bl	80010f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ea:	f7ff fda5 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x54>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x58>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110a:	fbb3 f3f1 	udiv	r3, r3, r1
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f93b 	bl	800138e <HAL_SYSTICK_Config>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e00e      	b.n	8001140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d80a      	bhi.n	800113e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001128:	2200      	movs	r2, #0
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f000 f911 	bl	8001356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <HAL_InitTick+0x5c>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	e000      	b.n	8001140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000009c 	.word	0x2000009c
 800114c:	200000a4 	.word	0x200000a4
 8001150:	200000a0 	.word	0x200000a0

08001154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x20>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x24>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <HAL_IncTick+0x24>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200000a4 	.word	0x200000a4
 8001178:	200008d8 	.word	0x200008d8

0800117c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return uwTick;
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <HAL_GetTick+0x14>)
 8001182:	681b      	ldr	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	200008d8 	.word	0x200008d8

08001194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800119c:	f7ff ffee 	bl	800117c <HAL_GetTick>
 80011a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ac:	d005      	beq.n	80011ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_Delay+0x44>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ba:	bf00      	nop
 80011bc:	f7ff ffde 	bl	800117c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d8f7      	bhi.n	80011bc <HAL_Delay+0x28>
  {
  }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200000a4 	.word	0x200000a4

080011dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <__NVIC_SetPriorityGrouping+0x40>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	4313      	orrs	r3, r2
 8001208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120a:	4a04      	ldr	r2, [pc, #16]	; (800121c <__NVIC_SetPriorityGrouping+0x40>)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	60d3      	str	r3, [r2, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00
 8001220:	05fa0000 	.word	0x05fa0000

08001224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <__NVIC_GetPriorityGrouping+0x18>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	f003 0307 	and.w	r3, r3, #7
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	; (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	; (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	; 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f7ff ff8e 	bl	8001240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff47 	bl	80011dc <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff5c 	bl	8001224 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff8e 	bl	8001294 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5d 	bl	8001240 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffb0 	bl	80012fc <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e06a      	b.n	8001490 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d106      	bne.n	80013d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2223      	movs	r2, #35	; 0x23
 80013c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fc57 	bl	8000c80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <HAL_ETH_Init+0xf0>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a30      	ldr	r2, [pc, #192]	; (8001498 <HAL_ETH_Init+0xf0>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <HAL_ETH_Init+0xf0>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013ea:	4b2c      	ldr	r3, [pc, #176]	; (800149c <HAL_ETH_Init+0xf4>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4a2b      	ldr	r2, [pc, #172]	; (800149c <HAL_ETH_Init+0xf4>)
 80013f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013f4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <HAL_ETH_Init+0xf4>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	4927      	ldr	r1, [pc, #156]	; (800149c <HAL_ETH_Init+0xf4>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001404:	4b25      	ldr	r3, [pc, #148]	; (800149c <HAL_ETH_Init+0xf4>)
 8001406:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800141e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001420:	f7ff feac 	bl	800117c <HAL_GetTick>
 8001424:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001426:	e011      	b.n	800144c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001428:	f7ff fea8 	bl	800117c <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001436:	d909      	bls.n	800144c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2204      	movs	r2, #4
 800143c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	22e0      	movs	r2, #224	; 0xe0
 8001444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e021      	b.n	8001490 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1e4      	bne.n	8001428 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f958 	bl	8001714 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f9ff 	bl	8001868 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 fa55 	bl	800191a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	461a      	mov	r2, r3
 8001476:	2100      	movs	r1, #0
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f9bd 	bl	80017f8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2210      	movs	r2, #16
 800148a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40013800 	.word	0x40013800

080014a0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4b51      	ldr	r3, [pc, #324]	; (80015fc <ETH_SetMACConfig+0x15c>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	7c1b      	ldrb	r3, [r3, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <ETH_SetMACConfig+0x28>
 80014c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014c6:	e000      	b.n	80014ca <ETH_SetMACConfig+0x2a>
 80014c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	7c5b      	ldrb	r3, [r3, #17]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <ETH_SetMACConfig+0x38>
 80014d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d6:	e000      	b.n	80014da <ETH_SetMACConfig+0x3a>
 80014d8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014da:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	7fdb      	ldrb	r3, [r3, #31]
 80014e6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80014e8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	7f92      	ldrb	r2, [r2, #30]
 80014f4:	2a00      	cmp	r2, #0
 80014f6:	d102      	bne.n	80014fe <ETH_SetMACConfig+0x5e>
 80014f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fc:	e000      	b.n	8001500 <ETH_SetMACConfig+0x60>
 80014fe:	2200      	movs	r2, #0
                        macconf->Speed |
 8001500:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	7f1b      	ldrb	r3, [r3, #28]
 8001506:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001508:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800150e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	791b      	ldrb	r3, [r3, #4]
 8001514:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001516:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800151e:	2a00      	cmp	r2, #0
 8001520:	d102      	bne.n	8001528 <ETH_SetMACConfig+0x88>
 8001522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001526:	e000      	b.n	800152a <ETH_SetMACConfig+0x8a>
 8001528:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800152a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	7bdb      	ldrb	r3, [r3, #15]
 8001530:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001532:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001538:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001540:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001542:	4313      	orrs	r3, r2
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff fe1a 	bl	8001194 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001586:	2a00      	cmp	r2, #0
 8001588:	d101      	bne.n	800158e <ETH_SetMACConfig+0xee>
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	e000      	b.n	8001590 <ETH_SetMACConfig+0xf0>
 800158e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001590:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001596:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800159e:	2a01      	cmp	r2, #1
 80015a0:	d101      	bne.n	80015a6 <ETH_SetMACConfig+0x106>
 80015a2:	2208      	movs	r2, #8
 80015a4:	e000      	b.n	80015a8 <ETH_SetMACConfig+0x108>
 80015a6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80015b0:	2a01      	cmp	r2, #1
 80015b2:	d101      	bne.n	80015b8 <ETH_SetMACConfig+0x118>
 80015b4:	2204      	movs	r2, #4
 80015b6:	e000      	b.n	80015ba <ETH_SetMACConfig+0x11a>
 80015b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80015c2:	2a01      	cmp	r2, #1
 80015c4:	d101      	bne.n	80015ca <ETH_SetMACConfig+0x12a>
 80015c6:	2202      	movs	r2, #2
 80015c8:	e000      	b.n	80015cc <ETH_SetMACConfig+0x12c>
 80015ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015cc:	4313      	orrs	r3, r2
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff fdd5 	bl	8001194 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	619a      	str	r2, [r3, #24]
}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	ff20810f 	.word	0xff20810f

08001600 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <ETH_SetDMAConfig+0x110>)
 800161a:	4013      	ands	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	7b1b      	ldrb	r3, [r3, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d102      	bne.n	800162c <ETH_SetDMAConfig+0x2c>
 8001626:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800162a:	e000      	b.n	800162e <ETH_SetDMAConfig+0x2e>
 800162c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	7b5b      	ldrb	r3, [r3, #13]
 8001632:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001634:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	7f52      	ldrb	r2, [r2, #29]
 800163a:	2a00      	cmp	r2, #0
 800163c:	d102      	bne.n	8001644 <ETH_SetDMAConfig+0x44>
 800163e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001642:	e000      	b.n	8001646 <ETH_SetDMAConfig+0x46>
 8001644:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001646:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	7b9b      	ldrb	r3, [r3, #14]
 800164c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800164e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001654:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	7f1b      	ldrb	r3, [r3, #28]
 800165a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800165c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	7f9b      	ldrb	r3, [r3, #30]
 8001662:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001664:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800166a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001672:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001674:	4313      	orrs	r3, r2
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001684:	461a      	mov	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001696:	2001      	movs	r0, #1
 8001698:	f7ff fd7c 	bl	8001194 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a4:	461a      	mov	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	791b      	ldrb	r3, [r3, #4]
 80016ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff fd4d 	bl	8001194 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001702:	461a      	mov	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	f8de3f23 	.word	0xf8de3f23

08001714 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0a6      	sub	sp, #152	; 0x98
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800171c:	2301      	movs	r3, #1
 800171e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001722:	2301      	movs	r3, #1
 8001724:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001728:	2300      	movs	r3, #0
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001732:	2301      	movs	r3, #1
 8001734:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800173e:	2301      	movs	r3, #1
 8001740:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001750:	2300      	movs	r3, #0
 8001752:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800175a:	2300      	movs	r3, #0
 800175c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001776:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800177a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800177c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001780:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001788:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800178c:	4619      	mov	r1, r3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fe86 	bl	80014a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001794:	2301      	movs	r3, #1
 8001796:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001798:	2301      	movs	r3, #1
 800179a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800179c:	2301      	movs	r3, #1
 800179e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80017d6:	2301      	movs	r3, #1
 80017d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ff08 	bl	8001600 <ETH_SetDMAConfig>
}
 80017f0:	bf00      	nop
 80017f2:	3798      	adds	r7, #152	; 0x98
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3305      	adds	r3, #5
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	3204      	adds	r2, #4
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	4313      	orrs	r3, r2
 8001814:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <ETH_MACAddressConfig+0x68>)
 800181a:	4413      	add	r3, r2
 800181c:	461a      	mov	r2, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3303      	adds	r3, #3
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	061a      	lsls	r2, r3, #24
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3302      	adds	r3, #2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3301      	adds	r3, #1
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	4313      	orrs	r3, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <ETH_MACAddressConfig+0x6c>)
 800184a:	4413      	add	r3, r2
 800184c:	461a      	mov	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	6013      	str	r3, [r2, #0]
}
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40028040 	.word	0x40028040
 8001864:	40028044 	.word	0x40028044

08001868 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e03e      	b.n	80018f4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68d9      	ldr	r1, [r3, #12]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2200      	movs	r2, #0
 8001892:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	3206      	adds	r2, #6
 80018a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d80c      	bhi.n	80018d8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68d9      	ldr	r1, [r3, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	461a      	mov	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	e004      	b.n	80018e2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	461a      	mov	r2, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3301      	adds	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d9bd      	bls.n	8001876 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190c:	611a      	str	r2, [r3, #16]
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800191a:	b480      	push	{r7}
 800191c:	b085      	sub	sp, #20
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e046      	b.n	80019b6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6919      	ldr	r1, [r3, #16]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001964:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800196c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	3212      	adds	r2, #18
 8001982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d80c      	bhi.n	80019a6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6919      	ldr	r1, [r3, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	440b      	add	r3, r1
 800199e:	461a      	mov	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	e004      	b.n	80019b0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d9b5      	bls.n	8001928 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691a      	ldr	r2, [r3, #16]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e6:	60da      	str	r2, [r3, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e175      	b.n	8001d00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f040 8164 	bne.w	8001cfa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d005      	beq.n	8001a4a <HAL_GPIO_Init+0x56>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d130      	bne.n	8001aac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 0201 	and.w	r2, r3, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d017      	beq.n	8001ae8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d123      	bne.n	8001b3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	69b9      	ldr	r1, [r7, #24]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80be 	beq.w	8001cfa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	4b66      	ldr	r3, [pc, #408]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	4a65      	ldr	r2, [pc, #404]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b88:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8a:	4b63      	ldr	r3, [pc, #396]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b96:	4a61      	ldr	r2, [pc, #388]	; (8001d1c <HAL_GPIO_Init+0x328>)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	220f      	movs	r2, #15
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a58      	ldr	r2, [pc, #352]	; (8001d20 <HAL_GPIO_Init+0x32c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d037      	beq.n	8001c32 <HAL_GPIO_Init+0x23e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a57      	ldr	r2, [pc, #348]	; (8001d24 <HAL_GPIO_Init+0x330>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d031      	beq.n	8001c2e <HAL_GPIO_Init+0x23a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a56      	ldr	r2, [pc, #344]	; (8001d28 <HAL_GPIO_Init+0x334>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d02b      	beq.n	8001c2a <HAL_GPIO_Init+0x236>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a55      	ldr	r2, [pc, #340]	; (8001d2c <HAL_GPIO_Init+0x338>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d025      	beq.n	8001c26 <HAL_GPIO_Init+0x232>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a54      	ldr	r2, [pc, #336]	; (8001d30 <HAL_GPIO_Init+0x33c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d01f      	beq.n	8001c22 <HAL_GPIO_Init+0x22e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a53      	ldr	r2, [pc, #332]	; (8001d34 <HAL_GPIO_Init+0x340>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d019      	beq.n	8001c1e <HAL_GPIO_Init+0x22a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a52      	ldr	r2, [pc, #328]	; (8001d38 <HAL_GPIO_Init+0x344>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_GPIO_Init+0x226>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a51      	ldr	r2, [pc, #324]	; (8001d3c <HAL_GPIO_Init+0x348>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00d      	beq.n	8001c16 <HAL_GPIO_Init+0x222>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a50      	ldr	r2, [pc, #320]	; (8001d40 <HAL_GPIO_Init+0x34c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <HAL_GPIO_Init+0x21e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4f      	ldr	r2, [pc, #316]	; (8001d44 <HAL_GPIO_Init+0x350>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_GPIO_Init+0x21a>
 8001c0a:	2309      	movs	r3, #9
 8001c0c:	e012      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c0e:	230a      	movs	r3, #10
 8001c10:	e010      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c12:	2308      	movs	r3, #8
 8001c14:	e00e      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c16:	2307      	movs	r3, #7
 8001c18:	e00c      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c1a:	2306      	movs	r3, #6
 8001c1c:	e00a      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c1e:	2305      	movs	r3, #5
 8001c20:	e008      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c22:	2304      	movs	r3, #4
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c26:	2303      	movs	r3, #3
 8001c28:	e004      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e002      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c32:	2300      	movs	r3, #0
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	f002 0203 	and.w	r2, r2, #3
 8001c3a:	0092      	lsls	r2, r2, #2
 8001c3c:	4093      	lsls	r3, r2
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c44:	4935      	ldr	r1, [pc, #212]	; (8001d1c <HAL_GPIO_Init+0x328>)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c76:	4a34      	ldr	r2, [pc, #208]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c7c:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca0:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ca6:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cca:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b0f      	cmp	r3, #15
 8001d04:	f67f ae86 	bls.w	8001a14 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40013800 	.word	0x40013800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40020400 	.word	0x40020400
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	40020c00 	.word	0x40020c00
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40021400 	.word	0x40021400
 8001d38:	40021800 	.word	0x40021800
 8001d3c:	40021c00 	.word	0x40021c00
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40022400 	.word	0x40022400
 8001d48:	40013c00 	.word	0x40013c00

08001d4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	887b      	ldrh	r3, [r7, #2]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e001      	b.n	8001d6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d8c:	787b      	ldrb	r3, [r7, #1]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d98:	e003      	b.n	8001da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	041a      	lsls	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	619a      	str	r2, [r3, #24]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db0:	b08f      	sub	sp, #60	; 0x3c
 8001db2:	af0a      	add	r7, sp, #40	; 0x28
 8001db4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e116      	b.n	8001fee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff f868 	bl	8000eb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2203      	movs	r2, #3
 8001de4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f001 fe92 	bl	8003b28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	687e      	ldr	r6, [r7, #4]
 8001e0c:	466d      	mov	r5, sp
 8001e0e:	f106 0410 	add.w	r4, r6, #16
 8001e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e22:	1d33      	adds	r3, r6, #4
 8001e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e26:	6838      	ldr	r0, [r7, #0]
 8001e28:	f001 fe26 	bl	8003a78 <USB_CoreInit>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2202      	movs	r2, #2
 8001e36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e0d7      	b.n	8001fee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f001 fe80 	bl	8003b4a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]
 8001e4e:	e04a      	b.n	8001ee6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	333d      	adds	r3, #61	; 0x3d
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	333c      	adds	r3, #60	; 0x3c
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	b298      	uxth	r0, r3
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	3344      	adds	r3, #68	; 0x44
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3340      	adds	r3, #64	; 0x40
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	3348      	adds	r3, #72	; 0x48
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	334c      	adds	r3, #76	; 0x4c
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	3354      	adds	r3, #84	; 0x54
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d3af      	bcc.n	8001e50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	e044      	b.n	8001f80 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f4e:	7bfa      	ldrb	r2, [r7, #15]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d3b5      	bcc.n	8001ef6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	687e      	ldr	r6, [r7, #4]
 8001f92:	466d      	mov	r5, sp
 8001f94:	f106 0410 	add.w	r4, r6, #16
 8001f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fa4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fa8:	1d33      	adds	r3, r6, #4
 8001faa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fac:	6838      	ldr	r0, [r7, #0]
 8001fae:	f001 fe19 	bl	8003be4 <USB_DevInit>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e014      	b.n	8001fee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d102      	bne.n	8001fe2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f80b 	bl	8001ff8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 ffd7 	bl	8003f9a <USB_DevDisconnect>

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001ff8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_PCDEx_ActivateLPM+0x44>)
 8002028:	4313      	orrs	r3, r2
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	10000003 	.word	0x10000003

08002040 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800204a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40007000 	.word	0x40007000

08002060 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002068:	2300      	movs	r3, #0
 800206a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e291      	b.n	800259a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8087 	beq.w	8002192 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002084:	4b96      	ldr	r3, [pc, #600]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b04      	cmp	r3, #4
 800208e:	d00c      	beq.n	80020aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002090:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b08      	cmp	r3, #8
 800209a:	d112      	bne.n	80020c2 <HAL_RCC_OscConfig+0x62>
 800209c:	4b90      	ldr	r3, [pc, #576]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a8:	d10b      	bne.n	80020c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020aa:	4b8d      	ldr	r3, [pc, #564]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d06c      	beq.n	8002190 <HAL_RCC_OscConfig+0x130>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d168      	bne.n	8002190 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e26b      	b.n	800259a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x7a>
 80020cc:	4b84      	ldr	r3, [pc, #528]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a83      	ldr	r2, [pc, #524]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	e02e      	b.n	8002138 <HAL_RCC_OscConfig+0xd8>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x9c>
 80020e2:	4b7f      	ldr	r3, [pc, #508]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a7e      	ldr	r2, [pc, #504]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80020e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b7c      	ldr	r3, [pc, #496]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a7b      	ldr	r2, [pc, #492]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80020f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e01d      	b.n	8002138 <HAL_RCC_OscConfig+0xd8>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0xc0>
 8002106:	4b76      	ldr	r3, [pc, #472]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a75      	ldr	r2, [pc, #468]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 800210c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b73      	ldr	r3, [pc, #460]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a72      	ldr	r2, [pc, #456]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e00b      	b.n	8002138 <HAL_RCC_OscConfig+0xd8>
 8002120:	4b6f      	ldr	r3, [pc, #444]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a6e      	ldr	r2, [pc, #440]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 8002126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b6c      	ldr	r3, [pc, #432]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a6b      	ldr	r2, [pc, #428]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 8002132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d013      	beq.n	8002168 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7ff f81c 	bl	800117c <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002148:	f7ff f818 	bl	800117c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e21f      	b.n	800259a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b61      	ldr	r3, [pc, #388]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0xe8>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7ff f808 	bl	800117c <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7ff f804 	bl	800117c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e20b      	b.n	800259a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	4b57      	ldr	r3, [pc, #348]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x110>
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d069      	beq.n	8002272 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800219e:	4b50      	ldr	r3, [pc, #320]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021aa:	4b4d      	ldr	r3, [pc, #308]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d11c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x190>
 80021b6:	4b4a      	ldr	r3, [pc, #296]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d116      	bne.n	80021f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c2:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_RCC_OscConfig+0x17a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d001      	beq.n	80021da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e1df      	b.n	800259a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	4b41      	ldr	r3, [pc, #260]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	493d      	ldr	r1, [pc, #244]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	e040      	b.n	8002272 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d023      	beq.n	8002240 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f8:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a38      	ldr	r2, [pc, #224]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7fe ffba 	bl	800117c <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220c:	f7fe ffb6 	bl	800117c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e1bd      	b.n	800259a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221e:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222a:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4929      	ldr	r1, [pc, #164]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
 800223e:	e018      	b.n	8002272 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7fe ff96 	bl	800117c <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002254:	f7fe ff92 	bl	800117c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e199      	b.n	800259a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002266:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d038      	beq.n	80022f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d019      	beq.n	80022ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002286:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 8002288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800228a:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002292:	f7fe ff73 	bl	800117c <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229a:	f7fe ff6f 	bl	800117c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e176      	b.n	800259a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80022ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x23a>
 80022b8:	e01a      	b.n	80022f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80022bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022be:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <HAL_RCC_OscConfig+0x280>)
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7fe ff59 	bl	800117c <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ce:	f7fe ff55 	bl	800117c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d903      	bls.n	80022e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e15c      	b.n	800259a <HAL_RCC_OscConfig+0x53a>
 80022e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e4:	4b91      	ldr	r3, [pc, #580]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80022e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1ee      	bne.n	80022ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80a4 	beq.w	8002446 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fe:	4b8b      	ldr	r3, [pc, #556]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10d      	bne.n	8002326 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b88      	ldr	r3, [pc, #544]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	4a87      	ldr	r2, [pc, #540]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002314:	6413      	str	r3, [r2, #64]	; 0x40
 8002316:	4b85      	ldr	r3, [pc, #532]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002322:	2301      	movs	r3, #1
 8002324:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002326:	4b82      	ldr	r3, [pc, #520]	; (8002530 <HAL_RCC_OscConfig+0x4d0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d118      	bne.n	8002364 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002332:	4b7f      	ldr	r3, [pc, #508]	; (8002530 <HAL_RCC_OscConfig+0x4d0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a7e      	ldr	r2, [pc, #504]	; (8002530 <HAL_RCC_OscConfig+0x4d0>)
 8002338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233e:	f7fe ff1d 	bl	800117c <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002346:	f7fe ff19 	bl	800117c <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b64      	cmp	r3, #100	; 0x64
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e120      	b.n	800259a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002358:	4b75      	ldr	r3, [pc, #468]	; (8002530 <HAL_RCC_OscConfig+0x4d0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x31a>
 800236c:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	4a6e      	ldr	r2, [pc, #440]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6713      	str	r3, [r2, #112]	; 0x70
 8002378:	e02d      	b.n	80023d6 <HAL_RCC_OscConfig+0x376>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x33c>
 8002382:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	4a69      	ldr	r2, [pc, #420]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	6713      	str	r3, [r2, #112]	; 0x70
 800238e:	4b67      	ldr	r3, [pc, #412]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	4a66      	ldr	r2, [pc, #408]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	6713      	str	r3, [r2, #112]	; 0x70
 800239a:	e01c      	b.n	80023d6 <HAL_RCC_OscConfig+0x376>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d10c      	bne.n	80023be <HAL_RCC_OscConfig+0x35e>
 80023a4:	4b61      	ldr	r3, [pc, #388]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	4a60      	ldr	r2, [pc, #384]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	6713      	str	r3, [r2, #112]	; 0x70
 80023b0:	4b5e      	ldr	r3, [pc, #376]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	4a5d      	ldr	r2, [pc, #372]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6713      	str	r3, [r2, #112]	; 0x70
 80023bc:	e00b      	b.n	80023d6 <HAL_RCC_OscConfig+0x376>
 80023be:	4b5b      	ldr	r3, [pc, #364]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	4a5a      	ldr	r2, [pc, #360]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ca:	4b58      	ldr	r3, [pc, #352]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	4a57      	ldr	r2, [pc, #348]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80023d0:	f023 0304 	bic.w	r3, r3, #4
 80023d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d015      	beq.n	800240a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023de:	f7fe fecd 	bl	800117c <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7fe fec9 	bl	800117c <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0ce      	b.n	800259a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fc:	4b4b      	ldr	r3, [pc, #300]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ee      	beq.n	80023e6 <HAL_RCC_OscConfig+0x386>
 8002408:	e014      	b.n	8002434 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240a:	f7fe feb7 	bl	800117c <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe feb3 	bl	800117c <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0b8      	b.n	800259a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002428:	4b40      	ldr	r3, [pc, #256]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ee      	bne.n	8002412 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002434:	7dfb      	ldrb	r3, [r7, #23]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d105      	bne.n	8002446 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243a:	4b3c      	ldr	r3, [pc, #240]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a3b      	ldr	r2, [pc, #236]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 8002440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80a4 	beq.w	8002598 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002450:	4b36      	ldr	r3, [pc, #216]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d06b      	beq.n	8002534 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d149      	bne.n	80024f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	4b31      	ldr	r3, [pc, #196]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a30      	ldr	r2, [pc, #192]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 800246a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800246e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fe84 	bl	800117c <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe fe80 	bl	800117c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e087      	b.n	800259a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248a:	4b28      	ldr	r3, [pc, #160]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	019b      	lsls	r3, r3, #6
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	085b      	lsrs	r3, r3, #1
 80024ae:	3b01      	subs	r3, #1
 80024b0:	041b      	lsls	r3, r3, #16
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	061b      	lsls	r3, r3, #24
 80024ba:	4313      	orrs	r3, r2
 80024bc:	4a1b      	ldr	r2, [pc, #108]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80024be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a18      	ldr	r2, [pc, #96]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80024ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe fe54 	bl	800117c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d8:	f7fe fe50 	bl	800117c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e057      	b.n	800259a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x478>
 80024f6:	e04f      	b.n	8002598 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0b      	ldr	r2, [pc, #44]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 80024fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7fe fe3a 	bl	800117c <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250c:	f7fe fe36 	bl	800117c <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e03d      	b.n	800259a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	4b03      	ldr	r3, [pc, #12]	; (800252c <HAL_RCC_OscConfig+0x4cc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x4ac>
 800252a:	e035      	b.n	8002598 <HAL_RCC_OscConfig+0x538>
 800252c:	40023800 	.word	0x40023800
 8002530:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_RCC_OscConfig+0x544>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d028      	beq.n	8002594 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d121      	bne.n	8002594 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d11a      	bne.n	8002594 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002564:	4013      	ands	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800256a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800256c:	4293      	cmp	r3, r2
 800256e:	d111      	bne.n	8002594 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	085b      	lsrs	r3, r3, #1
 800257c:	3b01      	subs	r3, #1
 800257e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d107      	bne.n	8002594 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800

080025a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0d0      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c0:	4b6a      	ldr	r3, [pc, #424]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d910      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ce:	4b67      	ldr	r3, [pc, #412]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 020f 	bic.w	r2, r3, #15
 80025d6:	4965      	ldr	r1, [pc, #404]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b63      	ldr	r3, [pc, #396]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0b8      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d020      	beq.n	800263e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002608:	4b59      	ldr	r3, [pc, #356]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a58      	ldr	r2, [pc, #352]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800260e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002620:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a52      	ldr	r2, [pc, #328]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 8002626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800262a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262c:	4b50      	ldr	r3, [pc, #320]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	494d      	ldr	r1, [pc, #308]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d040      	beq.n	80026cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d115      	bne.n	800268a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e07f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266a:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e073      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267a:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e06b      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268a:	4b39      	ldr	r3, [pc, #228]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f023 0203 	bic.w	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4936      	ldr	r1, [pc, #216]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	4313      	orrs	r3, r2
 800269a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800269c:	f7fe fd6e 	bl	800117c <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	e00a      	b.n	80026ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a4:	f7fe fd6a 	bl	800117c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e053      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 020c 	and.w	r2, r3, #12
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d1eb      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d210      	bcs.n	80026fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b24      	ldr	r3, [pc, #144]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 020f 	bic.w	r2, r3, #15
 80026e2:	4922      	ldr	r1, [pc, #136]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e032      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4916      	ldr	r1, [pc, #88]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	490e      	ldr	r1, [pc, #56]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800273a:	f000 f821 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 800273e:	4602      	mov	r2, r0
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	490a      	ldr	r1, [pc, #40]	; (8002774 <HAL_RCC_ClockConfig+0x1cc>)
 800274c:	5ccb      	ldrb	r3, [r1, r3]
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <HAL_RCC_ClockConfig+0x1d0>)
 8002754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_ClockConfig+0x1d4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fcca 	bl	80010f4 <HAL_InitTick>

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023c00 	.word	0x40023c00
 8002770:	40023800 	.word	0x40023800
 8002774:	0800438c 	.word	0x0800438c
 8002778:	2000009c 	.word	0x2000009c
 800277c:	200000a0 	.word	0x200000a0

08002780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002784:	b094      	sub	sp, #80	; 0x50
 8002786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	647b      	str	r3, [r7, #68]	; 0x44
 800278c:	2300      	movs	r3, #0
 800278e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002790:	2300      	movs	r3, #0
 8002792:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002798:	4b79      	ldr	r3, [pc, #484]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d00d      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x40>
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	f200 80e1 	bhi.w	800296c <HAL_RCC_GetSysClockFreq+0x1ec>
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x34>
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_GetSysClockFreq+0x3a>
 80027b2:	e0db      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027b4:	4b73      	ldr	r3, [pc, #460]	; (8002984 <HAL_RCC_GetSysClockFreq+0x204>)
 80027b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027b8:	e0db      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ba:	4b73      	ldr	r3, [pc, #460]	; (8002988 <HAL_RCC_GetSysClockFreq+0x208>)
 80027bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027be:	e0d8      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c0:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027c8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027ca:	4b6d      	ldr	r3, [pc, #436]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d063      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d6:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	099b      	lsrs	r3, r3, #6
 80027dc:	2200      	movs	r2, #0
 80027de:	63bb      	str	r3, [r7, #56]	; 0x38
 80027e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ea:	2300      	movs	r3, #0
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
 80027ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027f2:	4622      	mov	r2, r4
 80027f4:	462b      	mov	r3, r5
 80027f6:	f04f 0000 	mov.w	r0, #0
 80027fa:	f04f 0100 	mov.w	r1, #0
 80027fe:	0159      	lsls	r1, r3, #5
 8002800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002804:	0150      	lsls	r0, r2, #5
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4621      	mov	r1, r4
 800280c:	1a51      	subs	r1, r2, r1
 800280e:	6139      	str	r1, [r7, #16]
 8002810:	4629      	mov	r1, r5
 8002812:	eb63 0301 	sbc.w	r3, r3, r1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002824:	4659      	mov	r1, fp
 8002826:	018b      	lsls	r3, r1, #6
 8002828:	4651      	mov	r1, sl
 800282a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800282e:	4651      	mov	r1, sl
 8002830:	018a      	lsls	r2, r1, #6
 8002832:	4651      	mov	r1, sl
 8002834:	ebb2 0801 	subs.w	r8, r2, r1
 8002838:	4659      	mov	r1, fp
 800283a:	eb63 0901 	sbc.w	r9, r3, r1
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800284a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800284e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002852:	4690      	mov	r8, r2
 8002854:	4699      	mov	r9, r3
 8002856:	4623      	mov	r3, r4
 8002858:	eb18 0303 	adds.w	r3, r8, r3
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	462b      	mov	r3, r5
 8002860:	eb49 0303 	adc.w	r3, r9, r3
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002872:	4629      	mov	r1, r5
 8002874:	024b      	lsls	r3, r1, #9
 8002876:	4621      	mov	r1, r4
 8002878:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800287c:	4621      	mov	r1, r4
 800287e:	024a      	lsls	r2, r1, #9
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002886:	2200      	movs	r2, #0
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
 800288a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800288c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002890:	f7fd fccc 	bl	800022c <__aeabi_uldivmod>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4613      	mov	r3, r2
 800289a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800289c:	e058      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289e:	4b38      	ldr	r3, [pc, #224]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	099b      	lsrs	r3, r3, #6
 80028a4:	2200      	movs	r2, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	4611      	mov	r1, r2
 80028aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028ae:	623b      	str	r3, [r7, #32]
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
 80028b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028b8:	4642      	mov	r2, r8
 80028ba:	464b      	mov	r3, r9
 80028bc:	f04f 0000 	mov.w	r0, #0
 80028c0:	f04f 0100 	mov.w	r1, #0
 80028c4:	0159      	lsls	r1, r3, #5
 80028c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ca:	0150      	lsls	r0, r2, #5
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4641      	mov	r1, r8
 80028d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80028d6:	4649      	mov	r1, r9
 80028d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028f0:	ebb2 040a 	subs.w	r4, r2, sl
 80028f4:	eb63 050b 	sbc.w	r5, r3, fp
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	00eb      	lsls	r3, r5, #3
 8002902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002906:	00e2      	lsls	r2, r4, #3
 8002908:	4614      	mov	r4, r2
 800290a:	461d      	mov	r5, r3
 800290c:	4643      	mov	r3, r8
 800290e:	18e3      	adds	r3, r4, r3
 8002910:	603b      	str	r3, [r7, #0]
 8002912:	464b      	mov	r3, r9
 8002914:	eb45 0303 	adc.w	r3, r5, r3
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002926:	4629      	mov	r1, r5
 8002928:	028b      	lsls	r3, r1, #10
 800292a:	4621      	mov	r1, r4
 800292c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002930:	4621      	mov	r1, r4
 8002932:	028a      	lsls	r2, r1, #10
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800293a:	2200      	movs	r2, #0
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	61fa      	str	r2, [r7, #28]
 8002940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002944:	f7fd fc72 	bl	800022c <__aeabi_uldivmod>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4613      	mov	r3, r2
 800294e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	0c1b      	lsrs	r3, r3, #16
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	3301      	adds	r3, #1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002960:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800296a:	e002      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetSysClockFreq+0x204>)
 800296e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002974:	4618      	mov	r0, r3
 8002976:	3750      	adds	r7, #80	; 0x50
 8002978:	46bd      	mov	sp, r7
 800297a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	00f42400 	.word	0x00f42400
 8002988:	007a1200 	.word	0x007a1200

0800298c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	2000009c 	.word	0x2000009c

080029a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029a8:	f7ff fff0 	bl	800298c <HAL_RCC_GetHCLKFreq>
 80029ac:	4602      	mov	r2, r0
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	0a9b      	lsrs	r3, r3, #10
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	4903      	ldr	r1, [pc, #12]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ba:	5ccb      	ldrb	r3, [r1, r3]
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40023800 	.word	0x40023800
 80029c8:	0800439c 	.word	0x0800439c

080029cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029d0:	f7ff ffdc 	bl	800298c <HAL_RCC_GetHCLKFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	0b5b      	lsrs	r3, r3, #13
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	4903      	ldr	r1, [pc, #12]	; (80029f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e2:	5ccb      	ldrb	r3, [r1, r3]
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40023800 	.word	0x40023800
 80029f0:	0800439c 	.word	0x0800439c

080029f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d012      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a1c:	4b69      	ldr	r3, [pc, #420]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4a68      	ldr	r2, [pc, #416]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a26:	6093      	str	r3, [r2, #8]
 8002a28:	4b66      	ldr	r3, [pc, #408]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a30:	4964      	ldr	r1, [pc, #400]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d017      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a4e:	4b5d      	ldr	r3, [pc, #372]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	4959      	ldr	r1, [pc, #356]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d017      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a8a:	4b4e      	ldr	r3, [pc, #312]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	494a      	ldr	r1, [pc, #296]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aa8:	d101      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 808b 	beq.w	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ad8:	4b3a      	ldr	r3, [pc, #232]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	4a39      	ldr	r2, [pc, #228]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae4:	4b37      	ldr	r3, [pc, #220]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002af0:	4b35      	ldr	r3, [pc, #212]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a34      	ldr	r2, [pc, #208]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afc:	f7fe fb3e 	bl	800117c <HAL_GetTick>
 8002b00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b04:	f7fe fb3a 	bl	800117c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e357      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b16:	4b2c      	ldr	r3, [pc, #176]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b22:	4b28      	ldr	r3, [pc, #160]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d035      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d02e      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b40:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	4a1a      	ldr	r2, [pc, #104]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b62:	4a18      	ldr	r2, [pc, #96]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b68:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d114      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe fb02 	bl	800117c <HAL_GetTick>
 8002b78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fafe 	bl	800117c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e319      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ee      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002baa:	d111      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bba:	400b      	ands	r3, r1
 8002bbc:	4901      	ldr	r1, [pc, #4]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40007000 	.word	0x40007000
 8002bcc:	0ffffcff 	.word	0x0ffffcff
 8002bd0:	4baa      	ldr	r3, [pc, #680]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4aa9      	ldr	r2, [pc, #676]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bda:	6093      	str	r3, [r2, #8]
 8002bdc:	4ba7      	ldr	r3, [pc, #668]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be8:	49a4      	ldr	r1, [pc, #656]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d010      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bfa:	4ba0      	ldr	r3, [pc, #640]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c00:	4a9e      	ldr	r2, [pc, #632]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c0a:	4b9c      	ldr	r3, [pc, #624]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	4999      	ldr	r1, [pc, #612]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c28:	4b94      	ldr	r3, [pc, #592]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c36:	4991      	ldr	r1, [pc, #580]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c4a:	4b8c      	ldr	r3, [pc, #560]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c58:	4988      	ldr	r1, [pc, #544]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c6c:	4b83      	ldr	r3, [pc, #524]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c7a:	4980      	ldr	r1, [pc, #512]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c8e:	4b7b      	ldr	r3, [pc, #492]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	4977      	ldr	r1, [pc, #476]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cb0:	4b72      	ldr	r3, [pc, #456]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	f023 0203 	bic.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	496f      	ldr	r1, [pc, #444]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cd2:	4b6a      	ldr	r3, [pc, #424]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	f023 020c 	bic.w	r2, r3, #12
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce0:	4966      	ldr	r1, [pc, #408]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cf4:	4b61      	ldr	r3, [pc, #388]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	495e      	ldr	r1, [pc, #376]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d16:	4b59      	ldr	r3, [pc, #356]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d24:	4955      	ldr	r1, [pc, #340]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d38:	4b50      	ldr	r3, [pc, #320]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	494d      	ldr	r1, [pc, #308]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d5a:	4b48      	ldr	r3, [pc, #288]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	4944      	ldr	r1, [pc, #272]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d7c:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8a:	493c      	ldr	r1, [pc, #240]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d9e:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dac:	4933      	ldr	r1, [pc, #204]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002dc0:	4b2e      	ldr	r3, [pc, #184]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dce:	492b      	ldr	r1, [pc, #172]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d011      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002de2:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df0:	4922      	ldr	r1, [pc, #136]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e00:	d101      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e02:	2301      	movs	r3, #1
 8002e04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e12:	2301      	movs	r3, #1
 8002e14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e22:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e30:	4912      	ldr	r1, [pc, #72]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00b      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e44:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e54:	4909      	ldr	r1, [pc, #36]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d006      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80d9 	beq.w	8003022 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e70:	4b02      	ldr	r3, [pc, #8]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a01      	ldr	r2, [pc, #4]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e7a:	e001      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e82:	f7fe f97b 	bl	800117c <HAL_GetTick>
 8002e86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e88:	e008      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e8a:	f7fe f977 	bl	800117c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b64      	cmp	r3, #100	; 0x64
 8002e96:	d901      	bls.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e194      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e9c:	4b6c      	ldr	r3, [pc, #432]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f0      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d021      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d11d      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ebc:	4b64      	ldr	r3, [pc, #400]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002eca:	4b61      	ldr	r3, [pc, #388]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed0:	0e1b      	lsrs	r3, r3, #24
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	019a      	lsls	r2, r3, #6
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	061b      	lsls	r3, r3, #24
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	071b      	lsls	r3, r3, #28
 8002ef0:	4957      	ldr	r1, [pc, #348]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d02e      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f22:	d129      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f24:	4b4a      	ldr	r3, [pc, #296]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2a:	0c1b      	lsrs	r3, r3, #16
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f32:	4b47      	ldr	r3, [pc, #284]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f38:	0f1b      	lsrs	r3, r3, #28
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	019a      	lsls	r2, r3, #6
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	041b      	lsls	r3, r3, #16
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	431a      	orrs	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	071b      	lsls	r3, r3, #28
 8002f58:	493d      	ldr	r1, [pc, #244]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f60:	4b3b      	ldr	r3, [pc, #236]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f66:	f023 021f 	bic.w	r2, r3, #31
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	4937      	ldr	r1, [pc, #220]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01d      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f84:	4b32      	ldr	r3, [pc, #200]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f8a:	0e1b      	lsrs	r3, r3, #24
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f92:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f98:	0f1b      	lsrs	r3, r3, #28
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	019a      	lsls	r2, r3, #6
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	041b      	lsls	r3, r3, #16
 8002fac:	431a      	orrs	r2, r3
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	061b      	lsls	r3, r3, #24
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	071b      	lsls	r3, r3, #28
 8002fb8:	4925      	ldr	r1, [pc, #148]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d011      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	019a      	lsls	r2, r3, #6
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	041b      	lsls	r3, r3, #16
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	061b      	lsls	r3, r3, #24
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	071b      	lsls	r3, r3, #28
 8002fe8:	4919      	ldr	r1, [pc, #100]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ff0:	4b17      	ldr	r3, [pc, #92]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a16      	ldr	r2, [pc, #88]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ff6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffc:	f7fe f8be 	bl	800117c <HAL_GetTick>
 8003000:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003004:	f7fe f8ba 	bl	800117c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	; 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e0d7      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003016:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2b01      	cmp	r3, #1
 8003026:	f040 80cd 	bne.w	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a08      	ldr	r2, [pc, #32]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003036:	f7fe f8a1 	bl	800117c <HAL_GetTick>
 800303a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800303c:	e00a      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800303e:	f7fe f89d 	bl	800117c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b64      	cmp	r3, #100	; 0x64
 800304a:	d903      	bls.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e0ba      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003050:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003054:	4b5e      	ldr	r3, [pc, #376]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800305c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003060:	d0ed      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800307e:	2b00      	cmp	r3, #0
 8003080:	d02e      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d12a      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800308a:	4b51      	ldr	r3, [pc, #324]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800308c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003098:	4b4d      	ldr	r3, [pc, #308]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	0f1b      	lsrs	r3, r3, #28
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	019a      	lsls	r2, r3, #6
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	041b      	lsls	r3, r3, #16
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	061b      	lsls	r3, r3, #24
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	071b      	lsls	r3, r3, #28
 80030be:	4944      	ldr	r1, [pc, #272]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030c6:	4b42      	ldr	r3, [pc, #264]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	3b01      	subs	r3, #1
 80030d6:	021b      	lsls	r3, r3, #8
 80030d8:	493d      	ldr	r1, [pc, #244]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d022      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030f4:	d11d      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030f6:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	0e1b      	lsrs	r3, r3, #24
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003104:	4b32      	ldr	r3, [pc, #200]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	0f1b      	lsrs	r3, r3, #28
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	019a      	lsls	r2, r3, #6
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	041b      	lsls	r3, r3, #16
 800311e:	431a      	orrs	r2, r3
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	061b      	lsls	r3, r3, #24
 8003124:	431a      	orrs	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	071b      	lsls	r3, r3, #28
 800312a:	4929      	ldr	r1, [pc, #164]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d028      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800313e:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003144:	0e1b      	lsrs	r3, r3, #24
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800314c:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	0c1b      	lsrs	r3, r3, #16
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	019a      	lsls	r2, r3, #6
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	041b      	lsls	r3, r3, #16
 8003164:	431a      	orrs	r2, r3
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	061b      	lsls	r3, r3, #24
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	071b      	lsls	r3, r3, #28
 8003172:	4917      	ldr	r1, [pc, #92]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800317c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003180:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	4911      	ldr	r1, [pc, #68]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003190:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0e      	ldr	r2, [pc, #56]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800319c:	f7fd ffee 	bl	800117c <HAL_GetTick>
 80031a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031a4:	f7fd ffea 	bl	800117c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	; 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e007      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c2:	d1ef      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3720      	adds	r7, #32
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800

080031d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e040      	b.n	8003268 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd fdfa 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2224      	movs	r2, #36	; 0x24
 8003200:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f82c 	bl	8003270 <UART_SetConfig>
 8003218:	4603      	mov	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e022      	b.n	8003268 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fa84 	bl	8003738 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800323e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800324e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fb0b 	bl	800387c <UART_CheckIdleState>
 8003266:	4603      	mov	r3, r0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4ba6      	ldr	r3, [pc, #664]	; (8003534 <UART_SetConfig+0x2c4>)
 800329c:	4013      	ands	r3, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	6979      	ldr	r1, [r7, #20]
 80032a4:	430b      	orrs	r3, r1
 80032a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	430a      	orrs	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a94      	ldr	r2, [pc, #592]	; (8003538 <UART_SetConfig+0x2c8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d120      	bne.n	800332e <UART_SetConfig+0xbe>
 80032ec:	4b93      	ldr	r3, [pc, #588]	; (800353c <UART_SetConfig+0x2cc>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d816      	bhi.n	8003328 <UART_SetConfig+0xb8>
 80032fa:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <UART_SetConfig+0x90>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	08003311 	.word	0x08003311
 8003304:	0800331d 	.word	0x0800331d
 8003308:	08003317 	.word	0x08003317
 800330c:	08003323 	.word	0x08003323
 8003310:	2301      	movs	r3, #1
 8003312:	77fb      	strb	r3, [r7, #31]
 8003314:	e150      	b.n	80035b8 <UART_SetConfig+0x348>
 8003316:	2302      	movs	r3, #2
 8003318:	77fb      	strb	r3, [r7, #31]
 800331a:	e14d      	b.n	80035b8 <UART_SetConfig+0x348>
 800331c:	2304      	movs	r3, #4
 800331e:	77fb      	strb	r3, [r7, #31]
 8003320:	e14a      	b.n	80035b8 <UART_SetConfig+0x348>
 8003322:	2308      	movs	r3, #8
 8003324:	77fb      	strb	r3, [r7, #31]
 8003326:	e147      	b.n	80035b8 <UART_SetConfig+0x348>
 8003328:	2310      	movs	r3, #16
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e144      	b.n	80035b8 <UART_SetConfig+0x348>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a83      	ldr	r2, [pc, #524]	; (8003540 <UART_SetConfig+0x2d0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d132      	bne.n	800339e <UART_SetConfig+0x12e>
 8003338:	4b80      	ldr	r3, [pc, #512]	; (800353c <UART_SetConfig+0x2cc>)
 800333a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b0c      	cmp	r3, #12
 8003344:	d828      	bhi.n	8003398 <UART_SetConfig+0x128>
 8003346:	a201      	add	r2, pc, #4	; (adr r2, 800334c <UART_SetConfig+0xdc>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	08003381 	.word	0x08003381
 8003350:	08003399 	.word	0x08003399
 8003354:	08003399 	.word	0x08003399
 8003358:	08003399 	.word	0x08003399
 800335c:	0800338d 	.word	0x0800338d
 8003360:	08003399 	.word	0x08003399
 8003364:	08003399 	.word	0x08003399
 8003368:	08003399 	.word	0x08003399
 800336c:	08003387 	.word	0x08003387
 8003370:	08003399 	.word	0x08003399
 8003374:	08003399 	.word	0x08003399
 8003378:	08003399 	.word	0x08003399
 800337c:	08003393 	.word	0x08003393
 8003380:	2300      	movs	r3, #0
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	e118      	b.n	80035b8 <UART_SetConfig+0x348>
 8003386:	2302      	movs	r3, #2
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	e115      	b.n	80035b8 <UART_SetConfig+0x348>
 800338c:	2304      	movs	r3, #4
 800338e:	77fb      	strb	r3, [r7, #31]
 8003390:	e112      	b.n	80035b8 <UART_SetConfig+0x348>
 8003392:	2308      	movs	r3, #8
 8003394:	77fb      	strb	r3, [r7, #31]
 8003396:	e10f      	b.n	80035b8 <UART_SetConfig+0x348>
 8003398:	2310      	movs	r3, #16
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	e10c      	b.n	80035b8 <UART_SetConfig+0x348>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a68      	ldr	r2, [pc, #416]	; (8003544 <UART_SetConfig+0x2d4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d120      	bne.n	80033ea <UART_SetConfig+0x17a>
 80033a8:	4b64      	ldr	r3, [pc, #400]	; (800353c <UART_SetConfig+0x2cc>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033b2:	2b30      	cmp	r3, #48	; 0x30
 80033b4:	d013      	beq.n	80033de <UART_SetConfig+0x16e>
 80033b6:	2b30      	cmp	r3, #48	; 0x30
 80033b8:	d814      	bhi.n	80033e4 <UART_SetConfig+0x174>
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d009      	beq.n	80033d2 <UART_SetConfig+0x162>
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d810      	bhi.n	80033e4 <UART_SetConfig+0x174>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <UART_SetConfig+0x15c>
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d006      	beq.n	80033d8 <UART_SetConfig+0x168>
 80033ca:	e00b      	b.n	80033e4 <UART_SetConfig+0x174>
 80033cc:	2300      	movs	r3, #0
 80033ce:	77fb      	strb	r3, [r7, #31]
 80033d0:	e0f2      	b.n	80035b8 <UART_SetConfig+0x348>
 80033d2:	2302      	movs	r3, #2
 80033d4:	77fb      	strb	r3, [r7, #31]
 80033d6:	e0ef      	b.n	80035b8 <UART_SetConfig+0x348>
 80033d8:	2304      	movs	r3, #4
 80033da:	77fb      	strb	r3, [r7, #31]
 80033dc:	e0ec      	b.n	80035b8 <UART_SetConfig+0x348>
 80033de:	2308      	movs	r3, #8
 80033e0:	77fb      	strb	r3, [r7, #31]
 80033e2:	e0e9      	b.n	80035b8 <UART_SetConfig+0x348>
 80033e4:	2310      	movs	r3, #16
 80033e6:	77fb      	strb	r3, [r7, #31]
 80033e8:	e0e6      	b.n	80035b8 <UART_SetConfig+0x348>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a56      	ldr	r2, [pc, #344]	; (8003548 <UART_SetConfig+0x2d8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d120      	bne.n	8003436 <UART_SetConfig+0x1c6>
 80033f4:	4b51      	ldr	r3, [pc, #324]	; (800353c <UART_SetConfig+0x2cc>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003400:	d013      	beq.n	800342a <UART_SetConfig+0x1ba>
 8003402:	2bc0      	cmp	r3, #192	; 0xc0
 8003404:	d814      	bhi.n	8003430 <UART_SetConfig+0x1c0>
 8003406:	2b80      	cmp	r3, #128	; 0x80
 8003408:	d009      	beq.n	800341e <UART_SetConfig+0x1ae>
 800340a:	2b80      	cmp	r3, #128	; 0x80
 800340c:	d810      	bhi.n	8003430 <UART_SetConfig+0x1c0>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <UART_SetConfig+0x1a8>
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d006      	beq.n	8003424 <UART_SetConfig+0x1b4>
 8003416:	e00b      	b.n	8003430 <UART_SetConfig+0x1c0>
 8003418:	2300      	movs	r3, #0
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e0cc      	b.n	80035b8 <UART_SetConfig+0x348>
 800341e:	2302      	movs	r3, #2
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e0c9      	b.n	80035b8 <UART_SetConfig+0x348>
 8003424:	2304      	movs	r3, #4
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e0c6      	b.n	80035b8 <UART_SetConfig+0x348>
 800342a:	2308      	movs	r3, #8
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e0c3      	b.n	80035b8 <UART_SetConfig+0x348>
 8003430:	2310      	movs	r3, #16
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e0c0      	b.n	80035b8 <UART_SetConfig+0x348>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a44      	ldr	r2, [pc, #272]	; (800354c <UART_SetConfig+0x2dc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d125      	bne.n	800348c <UART_SetConfig+0x21c>
 8003440:	4b3e      	ldr	r3, [pc, #248]	; (800353c <UART_SetConfig+0x2cc>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800344e:	d017      	beq.n	8003480 <UART_SetConfig+0x210>
 8003450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003454:	d817      	bhi.n	8003486 <UART_SetConfig+0x216>
 8003456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800345a:	d00b      	beq.n	8003474 <UART_SetConfig+0x204>
 800345c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003460:	d811      	bhi.n	8003486 <UART_SetConfig+0x216>
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <UART_SetConfig+0x1fe>
 8003466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346a:	d006      	beq.n	800347a <UART_SetConfig+0x20a>
 800346c:	e00b      	b.n	8003486 <UART_SetConfig+0x216>
 800346e:	2300      	movs	r3, #0
 8003470:	77fb      	strb	r3, [r7, #31]
 8003472:	e0a1      	b.n	80035b8 <UART_SetConfig+0x348>
 8003474:	2302      	movs	r3, #2
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e09e      	b.n	80035b8 <UART_SetConfig+0x348>
 800347a:	2304      	movs	r3, #4
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	e09b      	b.n	80035b8 <UART_SetConfig+0x348>
 8003480:	2308      	movs	r3, #8
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e098      	b.n	80035b8 <UART_SetConfig+0x348>
 8003486:	2310      	movs	r3, #16
 8003488:	77fb      	strb	r3, [r7, #31]
 800348a:	e095      	b.n	80035b8 <UART_SetConfig+0x348>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a2f      	ldr	r2, [pc, #188]	; (8003550 <UART_SetConfig+0x2e0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d125      	bne.n	80034e2 <UART_SetConfig+0x272>
 8003496:	4b29      	ldr	r3, [pc, #164]	; (800353c <UART_SetConfig+0x2cc>)
 8003498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034a4:	d017      	beq.n	80034d6 <UART_SetConfig+0x266>
 80034a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034aa:	d817      	bhi.n	80034dc <UART_SetConfig+0x26c>
 80034ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b0:	d00b      	beq.n	80034ca <UART_SetConfig+0x25a>
 80034b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b6:	d811      	bhi.n	80034dc <UART_SetConfig+0x26c>
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <UART_SetConfig+0x254>
 80034bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c0:	d006      	beq.n	80034d0 <UART_SetConfig+0x260>
 80034c2:	e00b      	b.n	80034dc <UART_SetConfig+0x26c>
 80034c4:	2301      	movs	r3, #1
 80034c6:	77fb      	strb	r3, [r7, #31]
 80034c8:	e076      	b.n	80035b8 <UART_SetConfig+0x348>
 80034ca:	2302      	movs	r3, #2
 80034cc:	77fb      	strb	r3, [r7, #31]
 80034ce:	e073      	b.n	80035b8 <UART_SetConfig+0x348>
 80034d0:	2304      	movs	r3, #4
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	e070      	b.n	80035b8 <UART_SetConfig+0x348>
 80034d6:	2308      	movs	r3, #8
 80034d8:	77fb      	strb	r3, [r7, #31]
 80034da:	e06d      	b.n	80035b8 <UART_SetConfig+0x348>
 80034dc:	2310      	movs	r3, #16
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e06a      	b.n	80035b8 <UART_SetConfig+0x348>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <UART_SetConfig+0x2e4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d138      	bne.n	800355e <UART_SetConfig+0x2ee>
 80034ec:	4b13      	ldr	r3, [pc, #76]	; (800353c <UART_SetConfig+0x2cc>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80034f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034fa:	d017      	beq.n	800352c <UART_SetConfig+0x2bc>
 80034fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003500:	d82a      	bhi.n	8003558 <UART_SetConfig+0x2e8>
 8003502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003506:	d00b      	beq.n	8003520 <UART_SetConfig+0x2b0>
 8003508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800350c:	d824      	bhi.n	8003558 <UART_SetConfig+0x2e8>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <UART_SetConfig+0x2aa>
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003516:	d006      	beq.n	8003526 <UART_SetConfig+0x2b6>
 8003518:	e01e      	b.n	8003558 <UART_SetConfig+0x2e8>
 800351a:	2300      	movs	r3, #0
 800351c:	77fb      	strb	r3, [r7, #31]
 800351e:	e04b      	b.n	80035b8 <UART_SetConfig+0x348>
 8003520:	2302      	movs	r3, #2
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e048      	b.n	80035b8 <UART_SetConfig+0x348>
 8003526:	2304      	movs	r3, #4
 8003528:	77fb      	strb	r3, [r7, #31]
 800352a:	e045      	b.n	80035b8 <UART_SetConfig+0x348>
 800352c:	2308      	movs	r3, #8
 800352e:	77fb      	strb	r3, [r7, #31]
 8003530:	e042      	b.n	80035b8 <UART_SetConfig+0x348>
 8003532:	bf00      	nop
 8003534:	efff69f3 	.word	0xefff69f3
 8003538:	40011000 	.word	0x40011000
 800353c:	40023800 	.word	0x40023800
 8003540:	40004400 	.word	0x40004400
 8003544:	40004800 	.word	0x40004800
 8003548:	40004c00 	.word	0x40004c00
 800354c:	40005000 	.word	0x40005000
 8003550:	40011400 	.word	0x40011400
 8003554:	40007800 	.word	0x40007800
 8003558:	2310      	movs	r3, #16
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e02c      	b.n	80035b8 <UART_SetConfig+0x348>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a72      	ldr	r2, [pc, #456]	; (800372c <UART_SetConfig+0x4bc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d125      	bne.n	80035b4 <UART_SetConfig+0x344>
 8003568:	4b71      	ldr	r3, [pc, #452]	; (8003730 <UART_SetConfig+0x4c0>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003572:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003576:	d017      	beq.n	80035a8 <UART_SetConfig+0x338>
 8003578:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800357c:	d817      	bhi.n	80035ae <UART_SetConfig+0x33e>
 800357e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003582:	d00b      	beq.n	800359c <UART_SetConfig+0x32c>
 8003584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003588:	d811      	bhi.n	80035ae <UART_SetConfig+0x33e>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <UART_SetConfig+0x326>
 800358e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003592:	d006      	beq.n	80035a2 <UART_SetConfig+0x332>
 8003594:	e00b      	b.n	80035ae <UART_SetConfig+0x33e>
 8003596:	2300      	movs	r3, #0
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e00d      	b.n	80035b8 <UART_SetConfig+0x348>
 800359c:	2302      	movs	r3, #2
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e00a      	b.n	80035b8 <UART_SetConfig+0x348>
 80035a2:	2304      	movs	r3, #4
 80035a4:	77fb      	strb	r3, [r7, #31]
 80035a6:	e007      	b.n	80035b8 <UART_SetConfig+0x348>
 80035a8:	2308      	movs	r3, #8
 80035aa:	77fb      	strb	r3, [r7, #31]
 80035ac:	e004      	b.n	80035b8 <UART_SetConfig+0x348>
 80035ae:	2310      	movs	r3, #16
 80035b0:	77fb      	strb	r3, [r7, #31]
 80035b2:	e001      	b.n	80035b8 <UART_SetConfig+0x348>
 80035b4:	2310      	movs	r3, #16
 80035b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c0:	d15b      	bne.n	800367a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80035c2:	7ffb      	ldrb	r3, [r7, #31]
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d828      	bhi.n	800361a <UART_SetConfig+0x3aa>
 80035c8:	a201      	add	r2, pc, #4	; (adr r2, 80035d0 <UART_SetConfig+0x360>)
 80035ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ce:	bf00      	nop
 80035d0:	080035f5 	.word	0x080035f5
 80035d4:	080035fd 	.word	0x080035fd
 80035d8:	08003605 	.word	0x08003605
 80035dc:	0800361b 	.word	0x0800361b
 80035e0:	0800360b 	.word	0x0800360b
 80035e4:	0800361b 	.word	0x0800361b
 80035e8:	0800361b 	.word	0x0800361b
 80035ec:	0800361b 	.word	0x0800361b
 80035f0:	08003613 	.word	0x08003613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f4:	f7ff f9d6 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 80035f8:	61b8      	str	r0, [r7, #24]
        break;
 80035fa:	e013      	b.n	8003624 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035fc:	f7ff f9e6 	bl	80029cc <HAL_RCC_GetPCLK2Freq>
 8003600:	61b8      	str	r0, [r7, #24]
        break;
 8003602:	e00f      	b.n	8003624 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003604:	4b4b      	ldr	r3, [pc, #300]	; (8003734 <UART_SetConfig+0x4c4>)
 8003606:	61bb      	str	r3, [r7, #24]
        break;
 8003608:	e00c      	b.n	8003624 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800360a:	f7ff f8b9 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 800360e:	61b8      	str	r0, [r7, #24]
        break;
 8003610:	e008      	b.n	8003624 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003616:	61bb      	str	r3, [r7, #24]
        break;
 8003618:	e004      	b.n	8003624 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	77bb      	strb	r3, [r7, #30]
        break;
 8003622:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d074      	beq.n	8003714 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	005a      	lsls	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	441a      	add	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b0f      	cmp	r3, #15
 8003644:	d916      	bls.n	8003674 <UART_SetConfig+0x404>
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364c:	d212      	bcs.n	8003674 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	b29b      	uxth	r3, r3
 8003652:	f023 030f 	bic.w	r3, r3, #15
 8003656:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	085b      	lsrs	r3, r3, #1
 800365c:	b29b      	uxth	r3, r3
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	b29a      	uxth	r2, r3
 8003664:	89fb      	ldrh	r3, [r7, #14]
 8003666:	4313      	orrs	r3, r2
 8003668:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	89fa      	ldrh	r2, [r7, #14]
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	e04f      	b.n	8003714 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	77bb      	strb	r3, [r7, #30]
 8003678:	e04c      	b.n	8003714 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800367a:	7ffb      	ldrb	r3, [r7, #31]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d828      	bhi.n	80036d2 <UART_SetConfig+0x462>
 8003680:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <UART_SetConfig+0x418>)
 8003682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003686:	bf00      	nop
 8003688:	080036ad 	.word	0x080036ad
 800368c:	080036b5 	.word	0x080036b5
 8003690:	080036bd 	.word	0x080036bd
 8003694:	080036d3 	.word	0x080036d3
 8003698:	080036c3 	.word	0x080036c3
 800369c:	080036d3 	.word	0x080036d3
 80036a0:	080036d3 	.word	0x080036d3
 80036a4:	080036d3 	.word	0x080036d3
 80036a8:	080036cb 	.word	0x080036cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ac:	f7ff f97a 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 80036b0:	61b8      	str	r0, [r7, #24]
        break;
 80036b2:	e013      	b.n	80036dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036b4:	f7ff f98a 	bl	80029cc <HAL_RCC_GetPCLK2Freq>
 80036b8:	61b8      	str	r0, [r7, #24]
        break;
 80036ba:	e00f      	b.n	80036dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036bc:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <UART_SetConfig+0x4c4>)
 80036be:	61bb      	str	r3, [r7, #24]
        break;
 80036c0:	e00c      	b.n	80036dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036c2:	f7ff f85d 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 80036c6:	61b8      	str	r0, [r7, #24]
        break;
 80036c8:	e008      	b.n	80036dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ce:	61bb      	str	r3, [r7, #24]
        break;
 80036d0:	e004      	b.n	80036dc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	77bb      	strb	r3, [r7, #30]
        break;
 80036da:	bf00      	nop
    }

    if (pclk != 0U)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d018      	beq.n	8003714 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	085a      	lsrs	r2, r3, #1
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	441a      	add	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b0f      	cmp	r3, #15
 80036fa:	d909      	bls.n	8003710 <UART_SetConfig+0x4a0>
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003702:	d205      	bcs.n	8003710 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	b29a      	uxth	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	e001      	b.n	8003714 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003720:	7fbb      	ldrb	r3, [r7, #30]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40007c00 	.word	0x40007c00
 8003730:	40023800 	.word	0x40023800
 8003734:	00f42400 	.word	0x00f42400

08003738 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01a      	beq.n	800384e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003836:	d10a      	bne.n	800384e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	605a      	str	r2, [r3, #4]
  }
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af02      	add	r7, sp, #8
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800388c:	f7fd fc76 	bl	800117c <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b08      	cmp	r3, #8
 800389e:	d10e      	bne.n	80038be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f81b 	bl	80038ea <UART_WaitOnFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e011      	b.n	80038e2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b09c      	sub	sp, #112	; 0x70
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	603b      	str	r3, [r7, #0]
 80038f6:	4613      	mov	r3, r2
 80038f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038fa:	e0a7      	b.n	8003a4c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003902:	f000 80a3 	beq.w	8003a4c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003906:	f7fd fc39 	bl	800117c <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003912:	429a      	cmp	r2, r3
 8003914:	d302      	bcc.n	800391c <UART_WaitOnFlagUntilTimeout+0x32>
 8003916:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003918:	2b00      	cmp	r3, #0
 800391a:	d13f      	bne.n	800399c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800392a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003930:	667b      	str	r3, [r7, #100]	; 0x64
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800393a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800393c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003940:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003942:	e841 2300 	strex	r3, r2, [r1]
 8003946:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1e6      	bne.n	800391c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3308      	adds	r3, #8
 8003954:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003958:	e853 3f00 	ldrex	r3, [r3]
 800395c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800395e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	663b      	str	r3, [r7, #96]	; 0x60
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3308      	adds	r3, #8
 800396c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800396e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003970:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003974:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800397c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e5      	bne.n	800394e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e068      	b.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d050      	beq.n	8003a4c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b8:	d148      	bne.n	8003a4c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e2:	637b      	str	r3, [r7, #52]	; 0x34
 80039e4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e6      	bne.n	80039c4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3308      	adds	r3, #8
 80039fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	613b      	str	r3, [r7, #16]
   return(result);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3308      	adds	r3, #8
 8003a14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a16:	623a      	str	r2, [r7, #32]
 8003a18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	69f9      	ldr	r1, [r7, #28]
 8003a1c:	6a3a      	ldr	r2, [r7, #32]
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e5      	bne.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e010      	b.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4013      	ands	r3, r2
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	f43f af48 	beq.w	80038fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3770      	adds	r7, #112	; 0x70
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a78:	b084      	sub	sp, #16
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	f107 001c 	add.w	r0, r7, #28
 8003a86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d120      	bne.n	8003ad2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <USB_CoreInit+0xac>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d105      	bne.n	8003ac6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa96 	bl	8003ff8 <USB_CoreReset>
 8003acc:	4603      	mov	r3, r0
 8003ace:	73fb      	strb	r3, [r7, #15]
 8003ad0:	e010      	b.n	8003af4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fa8a 	bl	8003ff8 <USB_CoreReset>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d10b      	bne.n	8003b12 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f043 0206 	orr.w	r2, r3, #6
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f043 0220 	orr.w	r2, r3, #32
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b1e:	b004      	add	sp, #16
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	ffbdffbf 	.word	0xffbdffbf

08003b28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f023 0201 	bic.w	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	460b      	mov	r3, r1
 8003b54:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d115      	bne.n	8003b98 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b78:	2001      	movs	r0, #1
 8003b7a:	f7fd fb0b 	bl	8001194 <HAL_Delay>
      ms++;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3301      	adds	r3, #1
 8003b82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fa29 	bl	8003fdc <USB_GetMode>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d01e      	beq.n	8003bce <USB_SetCurrentMode+0x84>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b31      	cmp	r3, #49	; 0x31
 8003b94:	d9f0      	bls.n	8003b78 <USB_SetCurrentMode+0x2e>
 8003b96:	e01a      	b.n	8003bce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d115      	bne.n	8003bca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003baa:	2001      	movs	r0, #1
 8003bac:	f7fd faf2 	bl	8001194 <HAL_Delay>
      ms++;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fa10 	bl	8003fdc <USB_GetMode>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <USB_SetCurrentMode+0x84>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b31      	cmp	r3, #49	; 0x31
 8003bc6:	d9f0      	bls.n	8003baa <USB_SetCurrentMode+0x60>
 8003bc8:	e001      	b.n	8003bce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e005      	b.n	8003bda <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b32      	cmp	r3, #50	; 0x32
 8003bd2:	d101      	bne.n	8003bd8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003be4:	b084      	sub	sp, #16
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b086      	sub	sp, #24
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	e009      	b.n	8003c18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	3340      	adds	r3, #64	; 0x40
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	2200      	movs	r2, #0
 8003c10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	3301      	adds	r3, #1
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b0e      	cmp	r3, #14
 8003c1c:	d9f2      	bls.n	8003c04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d11c      	bne.n	8003c5e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c32:	f043 0302 	orr.w	r3, r3, #2
 8003c36:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	e005      	b.n	8003c6a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c70:	461a      	mov	r2, r3
 8003c72:	2300      	movs	r3, #0
 8003c74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c84:	461a      	mov	r2, r3
 8003c86:	680b      	ldr	r3, [r1, #0]
 8003c88:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d10c      	bne.n	8003caa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d104      	bne.n	8003ca0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c96:	2100      	movs	r1, #0
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f965 	bl	8003f68 <USB_SetDevSpeed>
 8003c9e:	e008      	b.n	8003cb2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f960 	bl	8003f68 <USB_SetDevSpeed>
 8003ca8:	e003      	b.n	8003cb2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003caa:	2103      	movs	r1, #3
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f95b 	bl	8003f68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003cb2:	2110      	movs	r1, #16
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f8f3 	bl	8003ea0 <USB_FlushTxFifo>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f91f 	bl	8003f08 <USB_FlushRxFifo>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2300      	movs	r3, #0
 8003cde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2300      	movs	r3, #0
 8003cea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	e043      	b.n	8003d86 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d14:	d118      	bne.n	8003d48 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	e013      	b.n	8003d5a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e008      	b.n	8003d5a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d54:	461a      	mov	r2, r3
 8003d56:	2300      	movs	r3, #0
 8003d58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d66:	461a      	mov	r2, r3
 8003d68:	2300      	movs	r3, #0
 8003d6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	3301      	adds	r3, #1
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d3b7      	bcc.n	8003cfe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	e043      	b.n	8003e1c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003daa:	d118      	bne.n	8003dde <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10a      	bne.n	8003dc8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e013      	b.n	8003df0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	e008      	b.n	8003df0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dea:	461a      	mov	r2, r3
 8003dec:	2300      	movs	r3, #0
 8003dee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2300      	movs	r3, #0
 8003e00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d3b7      	bcc.n	8003d94 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003e44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f043 0210 	orr.w	r2, r3, #16
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	4b0e      	ldr	r3, [pc, #56]	; (8003e98 <USB_DevInit+0x2b4>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	f043 0208 	orr.w	r2, r3, #8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d105      	bne.n	8003e88 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699a      	ldr	r2, [r3, #24]
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <USB_DevInit+0x2b8>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e94:	b004      	add	sp, #16
 8003e96:	4770      	bx	lr
 8003e98:	803c3800 	.word	0x803c3800
 8003e9c:	40000004 	.word	0x40000004

08003ea0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <USB_FlushTxFifo+0x64>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d901      	bls.n	8003ec0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e01b      	b.n	8003ef8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	daf2      	bge.n	8003eae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	019b      	lsls	r3, r3, #6
 8003ed0:	f043 0220 	orr.w	r2, r3, #32
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	3301      	adds	r3, #1
 8003edc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a08      	ldr	r2, [pc, #32]	; (8003f04 <USB_FlushTxFifo+0x64>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e006      	b.n	8003ef8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d0f0      	beq.n	8003ed8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	00030d40 	.word	0x00030d40

08003f08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	3301      	adds	r3, #1
 8003f18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4a11      	ldr	r2, [pc, #68]	; (8003f64 <USB_FlushRxFifo+0x5c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e018      	b.n	8003f58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	daf2      	bge.n	8003f14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2210      	movs	r2, #16
 8003f36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <USB_FlushRxFifo+0x5c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e006      	b.n	8003f58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d0f0      	beq.n	8003f38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	00030d40 	.word	0x00030d40

08003f68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	68f9      	ldr	r1, [r7, #12]
 8003f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b085      	sub	sp, #20
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003fb4:	f023 0303 	bic.w	r3, r3, #3
 8003fb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fc8:	f043 0302 	orr.w	r3, r3, #2
 8003fcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3301      	adds	r3, #1
 8004008:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a13      	ldr	r2, [pc, #76]	; (800405c <USB_CoreReset+0x64>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e01b      	b.n	800404e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	daf2      	bge.n	8004004 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f043 0201 	orr.w	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3301      	adds	r3, #1
 8004032:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4a09      	ldr	r2, [pc, #36]	; (800405c <USB_CoreReset+0x64>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d901      	bls.n	8004040 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e006      	b.n	800404e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b01      	cmp	r3, #1
 800404a:	d0f0      	beq.n	800402e <USB_CoreReset+0x36>

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	00030d40 	.word	0x00030d40

08004060 <malloc>:
 8004060:	4b02      	ldr	r3, [pc, #8]	; (800406c <malloc+0xc>)
 8004062:	4601      	mov	r1, r0
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	f000 b823 	b.w	80040b0 <_malloc_r>
 800406a:	bf00      	nop
 800406c:	200000f4 	.word	0x200000f4

08004070 <sbrk_aligned>:
 8004070:	b570      	push	{r4, r5, r6, lr}
 8004072:	4e0e      	ldr	r6, [pc, #56]	; (80040ac <sbrk_aligned+0x3c>)
 8004074:	460c      	mov	r4, r1
 8004076:	6831      	ldr	r1, [r6, #0]
 8004078:	4605      	mov	r5, r0
 800407a:	b911      	cbnz	r1, 8004082 <sbrk_aligned+0x12>
 800407c:	f000 f8ac 	bl	80041d8 <_sbrk_r>
 8004080:	6030      	str	r0, [r6, #0]
 8004082:	4621      	mov	r1, r4
 8004084:	4628      	mov	r0, r5
 8004086:	f000 f8a7 	bl	80041d8 <_sbrk_r>
 800408a:	1c43      	adds	r3, r0, #1
 800408c:	d00a      	beq.n	80040a4 <sbrk_aligned+0x34>
 800408e:	1cc4      	adds	r4, r0, #3
 8004090:	f024 0403 	bic.w	r4, r4, #3
 8004094:	42a0      	cmp	r0, r4
 8004096:	d007      	beq.n	80040a8 <sbrk_aligned+0x38>
 8004098:	1a21      	subs	r1, r4, r0
 800409a:	4628      	mov	r0, r5
 800409c:	f000 f89c 	bl	80041d8 <_sbrk_r>
 80040a0:	3001      	adds	r0, #1
 80040a2:	d101      	bne.n	80040a8 <sbrk_aligned+0x38>
 80040a4:	f04f 34ff 	mov.w	r4, #4294967295
 80040a8:	4620      	mov	r0, r4
 80040aa:	bd70      	pop	{r4, r5, r6, pc}
 80040ac:	200008e0 	.word	0x200008e0

080040b0 <_malloc_r>:
 80040b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040b4:	1ccd      	adds	r5, r1, #3
 80040b6:	f025 0503 	bic.w	r5, r5, #3
 80040ba:	3508      	adds	r5, #8
 80040bc:	2d0c      	cmp	r5, #12
 80040be:	bf38      	it	cc
 80040c0:	250c      	movcc	r5, #12
 80040c2:	2d00      	cmp	r5, #0
 80040c4:	4607      	mov	r7, r0
 80040c6:	db01      	blt.n	80040cc <_malloc_r+0x1c>
 80040c8:	42a9      	cmp	r1, r5
 80040ca:	d905      	bls.n	80040d8 <_malloc_r+0x28>
 80040cc:	230c      	movs	r3, #12
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	2600      	movs	r6, #0
 80040d2:	4630      	mov	r0, r6
 80040d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80041ac <_malloc_r+0xfc>
 80040dc:	f000 f868 	bl	80041b0 <__malloc_lock>
 80040e0:	f8d8 3000 	ldr.w	r3, [r8]
 80040e4:	461c      	mov	r4, r3
 80040e6:	bb5c      	cbnz	r4, 8004140 <_malloc_r+0x90>
 80040e8:	4629      	mov	r1, r5
 80040ea:	4638      	mov	r0, r7
 80040ec:	f7ff ffc0 	bl	8004070 <sbrk_aligned>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	4604      	mov	r4, r0
 80040f4:	d155      	bne.n	80041a2 <_malloc_r+0xf2>
 80040f6:	f8d8 4000 	ldr.w	r4, [r8]
 80040fa:	4626      	mov	r6, r4
 80040fc:	2e00      	cmp	r6, #0
 80040fe:	d145      	bne.n	800418c <_malloc_r+0xdc>
 8004100:	2c00      	cmp	r4, #0
 8004102:	d048      	beq.n	8004196 <_malloc_r+0xe6>
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	4631      	mov	r1, r6
 8004108:	4638      	mov	r0, r7
 800410a:	eb04 0903 	add.w	r9, r4, r3
 800410e:	f000 f863 	bl	80041d8 <_sbrk_r>
 8004112:	4581      	cmp	r9, r0
 8004114:	d13f      	bne.n	8004196 <_malloc_r+0xe6>
 8004116:	6821      	ldr	r1, [r4, #0]
 8004118:	1a6d      	subs	r5, r5, r1
 800411a:	4629      	mov	r1, r5
 800411c:	4638      	mov	r0, r7
 800411e:	f7ff ffa7 	bl	8004070 <sbrk_aligned>
 8004122:	3001      	adds	r0, #1
 8004124:	d037      	beq.n	8004196 <_malloc_r+0xe6>
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	442b      	add	r3, r5
 800412a:	6023      	str	r3, [r4, #0]
 800412c:	f8d8 3000 	ldr.w	r3, [r8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d038      	beq.n	80041a6 <_malloc_r+0xf6>
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	42a2      	cmp	r2, r4
 8004138:	d12b      	bne.n	8004192 <_malloc_r+0xe2>
 800413a:	2200      	movs	r2, #0
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	e00f      	b.n	8004160 <_malloc_r+0xb0>
 8004140:	6822      	ldr	r2, [r4, #0]
 8004142:	1b52      	subs	r2, r2, r5
 8004144:	d41f      	bmi.n	8004186 <_malloc_r+0xd6>
 8004146:	2a0b      	cmp	r2, #11
 8004148:	d917      	bls.n	800417a <_malloc_r+0xca>
 800414a:	1961      	adds	r1, r4, r5
 800414c:	42a3      	cmp	r3, r4
 800414e:	6025      	str	r5, [r4, #0]
 8004150:	bf18      	it	ne
 8004152:	6059      	strne	r1, [r3, #4]
 8004154:	6863      	ldr	r3, [r4, #4]
 8004156:	bf08      	it	eq
 8004158:	f8c8 1000 	streq.w	r1, [r8]
 800415c:	5162      	str	r2, [r4, r5]
 800415e:	604b      	str	r3, [r1, #4]
 8004160:	4638      	mov	r0, r7
 8004162:	f104 060b 	add.w	r6, r4, #11
 8004166:	f000 f829 	bl	80041bc <__malloc_unlock>
 800416a:	f026 0607 	bic.w	r6, r6, #7
 800416e:	1d23      	adds	r3, r4, #4
 8004170:	1af2      	subs	r2, r6, r3
 8004172:	d0ae      	beq.n	80040d2 <_malloc_r+0x22>
 8004174:	1b9b      	subs	r3, r3, r6
 8004176:	50a3      	str	r3, [r4, r2]
 8004178:	e7ab      	b.n	80040d2 <_malloc_r+0x22>
 800417a:	42a3      	cmp	r3, r4
 800417c:	6862      	ldr	r2, [r4, #4]
 800417e:	d1dd      	bne.n	800413c <_malloc_r+0x8c>
 8004180:	f8c8 2000 	str.w	r2, [r8]
 8004184:	e7ec      	b.n	8004160 <_malloc_r+0xb0>
 8004186:	4623      	mov	r3, r4
 8004188:	6864      	ldr	r4, [r4, #4]
 800418a:	e7ac      	b.n	80040e6 <_malloc_r+0x36>
 800418c:	4634      	mov	r4, r6
 800418e:	6876      	ldr	r6, [r6, #4]
 8004190:	e7b4      	b.n	80040fc <_malloc_r+0x4c>
 8004192:	4613      	mov	r3, r2
 8004194:	e7cc      	b.n	8004130 <_malloc_r+0x80>
 8004196:	230c      	movs	r3, #12
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	4638      	mov	r0, r7
 800419c:	f000 f80e 	bl	80041bc <__malloc_unlock>
 80041a0:	e797      	b.n	80040d2 <_malloc_r+0x22>
 80041a2:	6025      	str	r5, [r4, #0]
 80041a4:	e7dc      	b.n	8004160 <_malloc_r+0xb0>
 80041a6:	605b      	str	r3, [r3, #4]
 80041a8:	deff      	udf	#255	; 0xff
 80041aa:	bf00      	nop
 80041ac:	200008dc 	.word	0x200008dc

080041b0 <__malloc_lock>:
 80041b0:	4801      	ldr	r0, [pc, #4]	; (80041b8 <__malloc_lock+0x8>)
 80041b2:	f000 b84b 	b.w	800424c <__retarget_lock_acquire_recursive>
 80041b6:	bf00      	nop
 80041b8:	20000a20 	.word	0x20000a20

080041bc <__malloc_unlock>:
 80041bc:	4801      	ldr	r0, [pc, #4]	; (80041c4 <__malloc_unlock+0x8>)
 80041be:	f000 b846 	b.w	800424e <__retarget_lock_release_recursive>
 80041c2:	bf00      	nop
 80041c4:	20000a20 	.word	0x20000a20

080041c8 <memset>:
 80041c8:	4402      	add	r2, r0
 80041ca:	4603      	mov	r3, r0
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d100      	bne.n	80041d2 <memset+0xa>
 80041d0:	4770      	bx	lr
 80041d2:	f803 1b01 	strb.w	r1, [r3], #1
 80041d6:	e7f9      	b.n	80041cc <memset+0x4>

080041d8 <_sbrk_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4d06      	ldr	r5, [pc, #24]	; (80041f4 <_sbrk_r+0x1c>)
 80041dc:	2300      	movs	r3, #0
 80041de:	4604      	mov	r4, r0
 80041e0:	4608      	mov	r0, r1
 80041e2:	602b      	str	r3, [r5, #0]
 80041e4:	f7fc ff08 	bl	8000ff8 <_sbrk>
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	d102      	bne.n	80041f2 <_sbrk_r+0x1a>
 80041ec:	682b      	ldr	r3, [r5, #0]
 80041ee:	b103      	cbz	r3, 80041f2 <_sbrk_r+0x1a>
 80041f0:	6023      	str	r3, [r4, #0]
 80041f2:	bd38      	pop	{r3, r4, r5, pc}
 80041f4:	20000a1c 	.word	0x20000a1c

080041f8 <__errno>:
 80041f8:	4b01      	ldr	r3, [pc, #4]	; (8004200 <__errno+0x8>)
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	200000f4 	.word	0x200000f4

08004204 <__libc_init_array>:
 8004204:	b570      	push	{r4, r5, r6, lr}
 8004206:	4d0d      	ldr	r5, [pc, #52]	; (800423c <__libc_init_array+0x38>)
 8004208:	4c0d      	ldr	r4, [pc, #52]	; (8004240 <__libc_init_array+0x3c>)
 800420a:	1b64      	subs	r4, r4, r5
 800420c:	10a4      	asrs	r4, r4, #2
 800420e:	2600      	movs	r6, #0
 8004210:	42a6      	cmp	r6, r4
 8004212:	d109      	bne.n	8004228 <__libc_init_array+0x24>
 8004214:	4d0b      	ldr	r5, [pc, #44]	; (8004244 <__libc_init_array+0x40>)
 8004216:	4c0c      	ldr	r4, [pc, #48]	; (8004248 <__libc_init_array+0x44>)
 8004218:	f000 f822 	bl	8004260 <_init>
 800421c:	1b64      	subs	r4, r4, r5
 800421e:	10a4      	asrs	r4, r4, #2
 8004220:	2600      	movs	r6, #0
 8004222:	42a6      	cmp	r6, r4
 8004224:	d105      	bne.n	8004232 <__libc_init_array+0x2e>
 8004226:	bd70      	pop	{r4, r5, r6, pc}
 8004228:	f855 3b04 	ldr.w	r3, [r5], #4
 800422c:	4798      	blx	r3
 800422e:	3601      	adds	r6, #1
 8004230:	e7ee      	b.n	8004210 <__libc_init_array+0xc>
 8004232:	f855 3b04 	ldr.w	r3, [r5], #4
 8004236:	4798      	blx	r3
 8004238:	3601      	adds	r6, #1
 800423a:	e7f2      	b.n	8004222 <__libc_init_array+0x1e>
 800423c:	080044b0 	.word	0x080044b0
 8004240:	080044b0 	.word	0x080044b0
 8004244:	080044b0 	.word	0x080044b0
 8004248:	080044b4 	.word	0x080044b4

0800424c <__retarget_lock_acquire_recursive>:
 800424c:	4770      	bx	lr

0800424e <__retarget_lock_release_recursive>:
 800424e:	4770      	bx	lr

08004250 <strcpy>:
 8004250:	4603      	mov	r3, r0
 8004252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004256:	f803 2b01 	strb.w	r2, [r3], #1
 800425a:	2a00      	cmp	r2, #0
 800425c:	d1f9      	bne.n	8004252 <strcpy+0x2>
 800425e:	4770      	bx	lr

08004260 <_init>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	bf00      	nop
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr

0800426c <_fini>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	bf00      	nop
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr
