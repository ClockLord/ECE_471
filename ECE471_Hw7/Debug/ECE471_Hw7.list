
ECE471_Hw7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007768  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08007938  08007938  00017938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bf4  08007bf4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08007bf4  08007bf4  00017bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bfc  08007bfc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bfc  08007bfc  00017bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c00  08007c00  00017c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08007c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000ac  08007cb0  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000014c  08007d50  0002014c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000047d4  200001ec  08007df0  000201ec  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200049c0  08007df0  000249c0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001da21  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003e16  00000000  00000000  0003dc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001878  00000000  00000000  00041a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000130d  00000000  00000000  00043310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000299b6  00000000  00000000  0004461d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001cfd3  00000000  00000000  0006dfd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00101ddc  00000000  00000000  0008afa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006814  00000000  00000000  0018cd84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  00193598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007920 	.word	0x08007920

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	08007920 	.word	0x08007920

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4a07      	ldr	r2, [pc, #28]	; (8000548 <vApplicationGetIdleTaskMemory+0x2c>)
 800052c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	4a06      	ldr	r2, [pc, #24]	; (800054c <vApplicationGetIdleTaskMemory+0x30>)
 8000532:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000208 	.word	0x20000208
 800054c:	2000025c 	.word	0x2000025c

08000550 <codeMorse>:
		".....", "-....", "--...", "---..", "----.", ".-.-.-", "--..--", "..--.."};

//function takes in morse code and decodes it back into ASCII

//function takes in ASCII and codes it into morse code
char* codeMorse(char* asciiMessage) {
 8000550:	b580      	push	{r7, lr}
 8000552:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000556:	af00      	add	r7, sp, #0
 8000558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800055c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000560:	6018      	str	r0, [r3, #0]

	    // Define a string to store the Morse code message.
	    char morseMessage[500]; // You can adjust the size based on your input size.

	    // Initialize the Morse message as an empty string.
	    strcpy(morseMessage, "");
 8000562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000566:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]

	    // Iterate through each character in the input ASCII message.
	    for (int i = 0; asciiMessage[i] != '\0'; i++) {
 800056e:	2300      	movs	r3, #0
 8000570:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000574:	e08d      	b.n	8000692 <codeMorse+0x142>
	        // Convert the character to uppercase (ignore the case).
	        char c = toupper(asciiMessage[i]);
 8000576:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800057a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800057e:	f5a2 7201 	sub.w	r2, r2, #516	; 0x204
 8000582:	6812      	ldr	r2, [r2, #0]
 8000584:	4413      	add	r3, r2
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 800058c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8000590:	3301      	adds	r3, #1
 8000592:	4a49      	ldr	r2, [pc, #292]	; (80006b8 <codeMorse+0x168>)
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	f003 0303 	and.w	r3, r3, #3
 800059c:	2b02      	cmp	r3, #2
 800059e:	d103      	bne.n	80005a8 <codeMorse+0x58>
 80005a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80005a4:	3b20      	subs	r3, #32
 80005a6:	e001      	b.n	80005ac <codeMorse+0x5c>
 80005a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80005ac:	f887 31fe 	strb.w	r3, [r7, #510]	; 0x1fe

	        // Check if the character is within the specified characters.
	        if ((c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '.' || c == ',' || c == '?') {
 80005b0:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 80005b4:	2b40      	cmp	r3, #64	; 0x40
 80005b6:	d903      	bls.n	80005c0 <codeMorse+0x70>
 80005b8:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 80005bc:	2b5a      	cmp	r3, #90	; 0x5a
 80005be:	d913      	bls.n	80005e8 <codeMorse+0x98>
 80005c0:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 80005c4:	2b2f      	cmp	r3, #47	; 0x2f
 80005c6:	d903      	bls.n	80005d0 <codeMorse+0x80>
 80005c8:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 80005cc:	2b39      	cmp	r3, #57	; 0x39
 80005ce:	d90b      	bls.n	80005e8 <codeMorse+0x98>
 80005d0:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 80005d4:	2b2e      	cmp	r3, #46	; 0x2e
 80005d6:	d007      	beq.n	80005e8 <codeMorse+0x98>
 80005d8:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 80005dc:	2b2c      	cmp	r3, #44	; 0x2c
 80005de:	d003      	beq.n	80005e8 <codeMorse+0x98>
 80005e0:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 80005e4:	2b3f      	cmp	r3, #63	; 0x3f
 80005e6:	d14f      	bne.n	8000688 <codeMorse+0x138>
	            // Find the index of the character in the morseCode array.
	            int index = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	            if (c >= 'A' && c <= 'Z') {
 80005ee:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 80005f2:	2b40      	cmp	r3, #64	; 0x40
 80005f4:	d909      	bls.n	800060a <codeMorse+0xba>
 80005f6:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 80005fa:	2b5a      	cmp	r3, #90	; 0x5a
 80005fc:	d805      	bhi.n	800060a <codeMorse+0xba>
	                index = c - 'A';
 80005fe:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 8000602:	3b41      	subs	r3, #65	; 0x41
 8000604:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8000608:	e024      	b.n	8000654 <codeMorse+0x104>
	            } else if (c >= '0' && c <= '9') {
 800060a:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 800060e:	2b2f      	cmp	r3, #47	; 0x2f
 8000610:	d909      	bls.n	8000626 <codeMorse+0xd6>
 8000612:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 8000616:	2b39      	cmp	r3, #57	; 0x39
 8000618:	d805      	bhi.n	8000626 <codeMorse+0xd6>
	                index = c - '0' + 26;
 800061a:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 800061e:	3b16      	subs	r3, #22
 8000620:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8000624:	e016      	b.n	8000654 <codeMorse+0x104>
	            } else if (c == '.') {
 8000626:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 800062a:	2b2e      	cmp	r3, #46	; 0x2e
 800062c:	d103      	bne.n	8000636 <codeMorse+0xe6>
	                index = 36;
 800062e:	2324      	movs	r3, #36	; 0x24
 8000630:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8000634:	e00e      	b.n	8000654 <codeMorse+0x104>
	            } else if (c == ',') {
 8000636:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 800063a:	2b2c      	cmp	r3, #44	; 0x2c
 800063c:	d103      	bne.n	8000646 <codeMorse+0xf6>
	                index = 37;
 800063e:	2325      	movs	r3, #37	; 0x25
 8000640:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8000644:	e006      	b.n	8000654 <codeMorse+0x104>
	            } else if (c == '?') {
 8000646:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 800064a:	2b3f      	cmp	r3, #63	; 0x3f
 800064c:	d102      	bne.n	8000654 <codeMorse+0x104>
	                index = 38;
 800064e:	2326      	movs	r3, #38	; 0x26
 8000650:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	            }

	            // Append the Morse code for the character to the morseMessage string.
	            strcat(morseMessage, morseCode[index]);
 8000654:	4a19      	ldr	r2, [pc, #100]	; (80006bc <codeMorse+0x16c>)
 8000656:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800065a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	4611      	mov	r1, r2
 8000664:	4618      	mov	r0, r3
 8000666:	f007 f919 	bl	800789c <strcat>
	            strcat(morseMessage, " "); // Separate Morse code for different characters.
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fdce 	bl	8000210 <strlen>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	4413      	add	r3, r2
 800067e:	4910      	ldr	r1, [pc, #64]	; (80006c0 <codeMorse+0x170>)
 8000680:	461a      	mov	r2, r3
 8000682:	460b      	mov	r3, r1
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	8013      	strh	r3, [r2, #0]
	    for (int i = 0; asciiMessage[i] != '\0'; i++) {
 8000688:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800068c:	3301      	adds	r3, #1
 800068e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000692:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000696:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800069a:	f5a2 7201 	sub.w	r2, r2, #516	; 0x204
 800069e:	6812      	ldr	r2, [r2, #0]
 80006a0:	4413      	add	r3, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f47f af66 	bne.w	8000576 <codeMorse+0x26>
	        }
	    }

	    // Return the Morse code message.
	    return morseMessage;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	08007af0 	.word	0x08007af0
 80006bc:	20000000 	.word	0x20000000
 80006c0:	08007a38 	.word	0x08007a38

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b5b0      	push	{r4, r5, r7, lr}
 80006c6:	b09a      	sub	sp, #104	; 0x68
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 fe48 	bl	800135e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f86b 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 f9ad 	bl	8000a30 <MX_GPIO_Init>
  MX_ETH_Init();
 80006d6:	f000 f8cf 	bl	8000878 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006da:	f000 f94b 	bl	8000974 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006de:	f000 f979 	bl	80009d4 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80006e2:	f000 f917 	bl	8000914 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2026      	movs	r0, #38	; 0x26
 80006ec:	f000 ff40 	bl	8001570 <HAL_NVIC_SetPriority>

  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006f0:	2026      	movs	r0, #38	; 0x26
 80006f2:	f000 ff59 	bl	80015a8 <HAL_NVIC_EnableIRQ>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of MorseData */
  osMessageQStaticDef(MorseData, 50, uint16_t, MorseDataBuffer, &MorseDataControlBlock);
 80006f6:	4b24      	ldr	r3, [pc, #144]	; (8000788 <main+0xc4>)
 80006f8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80006fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MorseDataHandle = osMessageCreate(osMessageQ(MorseData), NULL);
 8000702:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f004 feb2 	bl	8005472 <osMessageCreate>
 800070e:	4603      	mov	r3, r0
 8000710:	4a1e      	ldr	r2, [pc, #120]	; (800078c <main+0xc8>)
 8000712:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 128);
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <main+0xcc>)
 8000716:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800071a:	461d      	mov	r5, r3
 800071c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000720:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000728:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f004 fe3f 	bl	80053b2 <osThreadCreate>
 8000734:	4603      	mov	r3, r0
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <main+0xd0>)
 8000738:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartRead */
  osThreadDef(UartRead, Read, osPriorityHigh, 0, 128);
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <main+0xd4>)
 800073c:	f107 0420 	add.w	r4, r7, #32
 8000740:	461d      	mov	r5, r3
 8000742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000746:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800074a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UartReadHandle = osThreadCreate(osThread(UartRead), NULL);
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f004 fe2c 	bl	80053b2 <osThreadCreate>
 800075a:	4603      	mov	r3, r0
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <main+0xd8>)
 800075e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendUart */
  osThreadDef(SendUart, Send, osPriorityAboveNormal, 0, 128);
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <main+0xdc>)
 8000762:	1d3c      	adds	r4, r7, #4
 8000764:	461d      	mov	r5, r3
 8000766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800076e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SendUartHandle = osThreadCreate(osThread(SendUart), NULL);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f004 fe1b 	bl	80053b2 <osThreadCreate>
 800077c:	4603      	mov	r3, r0
 800077e:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <main+0xe0>)
 8000780:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000782:	f004 fe0f 	bl	80053a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000786:	e7fe      	b.n	8000786 <main+0xc2>
 8000788:	08007a3c 	.word	0x08007a3c
 800078c:	20000b6c 	.word	0x20000b6c
 8000790:	08007a58 	.word	0x08007a58
 8000794:	20000b60 	.word	0x20000b60
 8000798:	08007a80 	.word	0x08007a80
 800079c:	20000b64 	.word	0x20000b64
 80007a0:	08007aa8 	.word	0x08007aa8
 80007a4:	20000b68 	.word	0x20000b68

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	2230      	movs	r2, #48	; 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f007 f868 	bl	800788c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007cc:	f001 fdc0 	bl	8002350 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	4b27      	ldr	r3, [pc, #156]	; (8000870 <SystemClock_Config+0xc8>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a26      	ldr	r2, [pc, #152]	; (8000870 <SystemClock_Config+0xc8>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b24      	ldr	r3, [pc, #144]	; (8000870 <SystemClock_Config+0xc8>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <SystemClock_Config+0xcc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f0:	4a20      	ldr	r2, [pc, #128]	; (8000874 <SystemClock_Config+0xcc>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <SystemClock_Config+0xcc>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000808:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080e:	2302      	movs	r3, #2
 8000810:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000818:	2304      	movs	r3, #4
 800081a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800081c:	2348      	movs	r3, #72	; 0x48
 800081e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000824:	2303      	movs	r3, #3
 8000826:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0320 	add.w	r3, r7, #32
 800082c:	4618      	mov	r0, r3
 800082e:	f001 fd9f 	bl	8002370 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000838:	f000 fa75 	bl	8000d26 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	2102      	movs	r1, #2
 8000858:	4618      	mov	r0, r3
 800085a:	f002 f82d 	bl	80028b8 <HAL_RCC_ClockConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000864:	f000 fa5f 	bl	8000d26 <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	3750      	adds	r7, #80	; 0x50
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000

08000878 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_ETH_Init+0x84>)
 800087e:	4a20      	ldr	r2, [pc, #128]	; (8000900 <MX_ETH_Init+0x88>)
 8000880:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000882:	4b20      	ldr	r3, [pc, #128]	; (8000904 <MX_ETH_Init+0x8c>)
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <MX_ETH_Init+0x8c>)
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_ETH_Init+0x8c>)
 8000890:	22e1      	movs	r2, #225	; 0xe1
 8000892:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_ETH_Init+0x8c>)
 8000896:	2200      	movs	r2, #0
 8000898:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_ETH_Init+0x8c>)
 800089c:	2200      	movs	r2, #0
 800089e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_ETH_Init+0x8c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_ETH_Init+0x84>)
 80008a8:	4a16      	ldr	r2, [pc, #88]	; (8000904 <MX_ETH_Init+0x8c>)
 80008aa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_ETH_Init+0x84>)
 80008ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008b2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_ETH_Init+0x84>)
 80008b6:	4a14      	ldr	r2, [pc, #80]	; (8000908 <MX_ETH_Init+0x90>)
 80008b8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_ETH_Init+0x84>)
 80008bc:	4a13      	ldr	r2, [pc, #76]	; (800090c <MX_ETH_Init+0x94>)
 80008be:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_ETH_Init+0x84>)
 80008c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008c6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <MX_ETH_Init+0x84>)
 80008ca:	f000 ff0d 	bl	80016e8 <HAL_ETH_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008d4:	f000 fa27 	bl	8000d26 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008d8:	2238      	movs	r2, #56	; 0x38
 80008da:	2100      	movs	r1, #0
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <MX_ETH_Init+0x98>)
 80008de:	f006 ffd5 	bl	800788c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_ETH_Init+0x98>)
 80008e4:	2221      	movs	r2, #33	; 0x21
 80008e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_ETH_Init+0x98>)
 80008ea:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80008ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <MX_ETH_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000498 	.word	0x20000498
 8000900:	40028000 	.word	0x40028000
 8000904:	20000c1c 	.word	0x20000c1c
 8000908:	2000014c 	.word	0x2000014c
 800090c:	200000ac 	.word	0x200000ac
 8000910:	20000460 	.word	0x20000460

08000914 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USART2_UART_Init+0x58>)
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <MX_USART2_UART_Init+0x5c>)
 800091c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000920:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_USART2_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART2_UART_Init+0x58>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART2_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000958:	f003 f8d6 	bl	8003b08 <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 f9e0 	bl	8000d26 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000548 	.word	0x20000548
 8000970:	40004400 	.word	0x40004400

08000974 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_USART3_UART_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <MX_USART3_UART_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_USART3_UART_Init+0x58>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART3_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_USART3_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART3_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART3_UART_Init+0x58>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009b8:	f003 f8a6 	bl	8003b08 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 f9b0 	bl	8000d26 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200005d0 	.word	0x200005d0
 80009d0:	40004800 	.word	0x40004800

080009d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	2206      	movs	r2, #6
 80009e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a18:	f001 fb51 	bl	80020be <HAL_PCD_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a22:	f000 f980 	bl	8000d26 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000658 	.word	0x20000658

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	4b47      	ldr	r3, [pc, #284]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a46      	ldr	r2, [pc, #280]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b44      	ldr	r3, [pc, #272]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	61bb      	str	r3, [r7, #24]
 8000a5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5e:	4b41      	ldr	r3, [pc, #260]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a40      	ldr	r2, [pc, #256]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b3e      	ldr	r3, [pc, #248]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b3b      	ldr	r3, [pc, #236]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a3a      	ldr	r2, [pc, #232]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b38      	ldr	r3, [pc, #224]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4b35      	ldr	r3, [pc, #212]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a34      	ldr	r2, [pc, #208]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b32      	ldr	r3, [pc, #200]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a2e      	ldr	r2, [pc, #184]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b2c      	ldr	r3, [pc, #176]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a28      	ldr	r2, [pc, #160]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <MX_GPIO_Init+0x134>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000adc:	4822      	ldr	r0, [pc, #136]	; (8000b68 <MX_GPIO_Init+0x138>)
 8000ade:	f001 fad5 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2140      	movs	r1, #64	; 0x40
 8000ae6:	4821      	ldr	r0, [pc, #132]	; (8000b6c <MX_GPIO_Init+0x13c>)
 8000ae8:	f001 fad0 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	481b      	ldr	r0, [pc, #108]	; (8000b70 <MX_GPIO_Init+0x140>)
 8000b04:	f001 f916 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b08:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4811      	ldr	r0, [pc, #68]	; (8000b68 <MX_GPIO_Init+0x138>)
 8000b22:	f001 f907 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b26:	2340      	movs	r3, #64	; 0x40
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MX_GPIO_Init+0x13c>)
 8000b3e:	f001 f8f9 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_GPIO_Init+0x13c>)
 8000b56:	f001 f8ed 	bl	8001d34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3730      	adds	r7, #48	; 0x30
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	40020800 	.word	0x40020800

08000b74 <morseCodeBlink>:
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
void morseCodeBlink(char* morseCode){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	int dotCount =0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
	for (int i = 0; morseCode[i] != '\0'; i++)  {
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	e03f      	b.n	8000c06 <morseCodeBlink+0x92>
	        char symbol = morseCode[i];
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	73fb      	strb	r3, [r7, #15]

	        if (symbol == ' ') {
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	2b20      	cmp	r3, #32
 8000b94:	d104      	bne.n	8000ba0 <morseCodeBlink+0x2c>
	        	 osDelay(600);  // Adjust as needed fo
 8000b96:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000b9a:	f004 fc56 	bl	800544a <osDelay>
 8000b9e:	e01a      	b.n	8000bd6 <morseCodeBlink+0x62>

	        } else if (symbol == '-') {
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	2b2d      	cmp	r3, #45	; 0x2d
 8000ba4:	d111      	bne.n	8000bca <morseCodeBlink+0x56>
	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);  // Turn the LED on (replace with your LED control function)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	481c      	ldr	r0, [pc, #112]	; (8000c1c <morseCodeBlink+0xa8>)
 8000bac:	f001 fa6e 	bl	800208c <HAL_GPIO_WritePin>
	        	osDelay(300);  // LED on time (adjust as needed)
 8000bb0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bb4:	f004 fc49 	bl	800544a <osDelay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);  // Turn the LED off
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2180      	movs	r1, #128	; 0x80
 8000bbc:	4817      	ldr	r0, [pc, #92]	; (8000c1c <morseCodeBlink+0xa8>)
 8000bbe:	f001 fa65 	bl	800208c <HAL_GPIO_WritePin>
				osDelay(100);  // Gap between dots (adjust as needed)
 8000bc2:	2064      	movs	r0, #100	; 0x64
 8000bc4:	f004 fc41 	bl	800544a <osDelay>
 8000bc8:	e005      	b.n	8000bd6 <morseCodeBlink+0x62>
	        } else if (symbol == '.') {
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8000bce:	d102      	bne.n	8000bd6 <morseCodeBlink+0x62>
	        	dotCount++;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]
	        }	//for some reason quick blinks happen to often this fixes it
	        if(dotCount>=2){
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	dd11      	ble.n	8000c00 <morseCodeBlink+0x8c>
	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2180      	movs	r1, #128	; 0x80
 8000be0:	480e      	ldr	r0, [pc, #56]	; (8000c1c <morseCodeBlink+0xa8>)
 8000be2:	f001 fa53 	bl	800208c <HAL_GPIO_WritePin>
				osDelay(100);  // 100ms for a dot
 8000be6:	2064      	movs	r0, #100	; 0x64
 8000be8:	f004 fc2f 	bl	800544a <osDelay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	480a      	ldr	r0, [pc, #40]	; (8000c1c <morseCodeBlink+0xa8>)
 8000bf2:	f001 fa4b 	bl	800208c <HAL_GPIO_WritePin>
				osDelay(100);  // Gap for a dot
 8000bf6:	2064      	movs	r0, #100	; 0x64
 8000bf8:	f004 fc27 	bl	800544a <osDelay>
	        	dotCount=0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
	for (int i = 0; morseCode[i] != '\0'; i++)  {
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	3301      	adds	r3, #1
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d1b9      	bne.n	8000b86 <morseCodeBlink+0x12>
	        }
	    }

}
 8000c12:	bf00      	nop
 8000c14:	bf00      	nop
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40020400 	.word	0x40020400

08000c20 <StartDefaultTask>:
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  char* receivedMessage = NULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
	  osEvent messageEvent = osMessageGet(MorseDataBuffer, osWaitForever);
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	4904      	ldr	r1, [pc, #16]	; (8000c48 <StartDefaultTask+0x28>)
 8000c36:	4618      	mov	r0, r3
 8000c38:	f004 fc84 	bl	8005544 <osMessageGet>
	  receivedMessage = messageEvent.value.p;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	617b      	str	r3, [r7, #20]
	  morseCodeBlink(receivedMessage);
 8000c40:	6978      	ldr	r0, [r7, #20]
 8000c42:	f7ff ff97 	bl	8000b74 <morseCodeBlink>
  {
 8000c46:	e7ef      	b.n	8000c28 <StartDefaultTask+0x8>
 8000c48:	20000b70 	.word	0x20000b70

08000c4c <Read>:
*/

//
/* USER CODE END Header_Read */
void Read(void const * argument)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  {
	//read from uart2



	char received_char = received_data;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <Read+0x50>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	73fb      	strb	r3, [r7, #15]
	char* encodedMessage = codeMorse(&received_char);
 8000c5a:	f107 030f 	add.w	r3, r7, #15
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fc76 	bl	8000550 <codeMorse>
 8000c64:	6178      	str	r0, [r7, #20]
	osStatus status = osMessagePut(MorseDataBuffer, encodedMessage, osWaitForever); //send encoded message to the queue
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <Read+0x54>)
 8000c70:	f004 fc28 	bl	80054c4 <osMessagePut>
 8000c74:	6138      	str	r0, [r7, #16]

 if (status == osOK)
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d105      	bne.n	8000c88 <Read+0x3c>
   {
		 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2101      	movs	r1, #1
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <Read+0x58>)
 8000c82:	f001 fa03 	bl	800208c <HAL_GPIO_WritePin>
 8000c86:	e004      	b.n	8000c92 <Read+0x46>
    }
	    else
	    {	    	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <Read+0x58>)
 8000c8e:	f001 f9fd 	bl	800208c <HAL_GPIO_WritePin>
	      // Message sending failed
	      // You can handle this situation accordingly, e.g., log an error, retry, or take other actions.
	    }
	osDelay(10);
 8000c92:	200a      	movs	r0, #10
 8000c94:	f004 fbd9 	bl	800544a <osDelay>
  {
 8000c98:	e7dc      	b.n	8000c54 <Read+0x8>
 8000c9a:	bf00      	nop
 8000c9c:	2000045c 	.word	0x2000045c
 8000ca0:	20000b70 	.word	0x20000b70
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <Send>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Send */
void Send(void const * argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Send */

  /* Infinite loop */
  for(;;)
  {
	  char* message = "... --- ...";
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <Send+0x54>)
 8000cb2:	60fb      	str	r3, [r7, #12]
      //HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
      HAL_StatusTypeDef status;

      status = HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f7ff faab 	bl	8000210 <strlen>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	68f9      	ldr	r1, [r7, #12]
 8000cc4:	480e      	ldr	r0, [pc, #56]	; (8000d00 <Send+0x58>)
 8000cc6:	f002 ff6d 	bl	8003ba4 <HAL_UART_Transmit>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	72fb      	strb	r3, [r7, #11]

      if (status == HAL_OK) {
 8000cce:	7afb      	ldrb	r3, [r7, #11]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d105      	bne.n	8000ce0 <Send+0x38>
         //green led on
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	480a      	ldr	r0, [pc, #40]	; (8000d04 <Send+0x5c>)
 8000cda:	f001 f9d7 	bl	800208c <HAL_GPIO_WritePin>
 8000cde:	e008      	b.n	8000cf2 <Send+0x4a>

      } else if (status == HAL_TIMEOUT) {
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d105      	bne.n	8000cf2 <Send+0x4a>
         //red led on
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <Send+0x5c>)
 8000cee:	f001 f9cd 	bl	800208c <HAL_GPIO_WritePin>
      }

    osDelay(1);
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f004 fba9 	bl	800544a <osDelay>
  {
 8000cf8:	e7da      	b.n	8000cb0 <Send+0x8>
 8000cfa:	bf00      	nop
 8000cfc:	08007ac4 	.word	0x08007ac4
 8000d00:	200005d0 	.word	0x200005d0
 8000d04:	40020400 	.word	0x40020400

08000d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d18:	d101      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1a:	f000 fb2d 	bl	8001378 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2a:	b672      	cpsid	i
}
 8000d2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <Error_Handler+0x8>

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	210f      	movs	r1, #15
 8000d6a:	f06f 0001 	mvn.w	r0, #1
 8000d6e:	f000 fbff 	bl	8001570 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a4e      	ldr	r2, [pc, #312]	; (8000ed8 <HAL_ETH_MspInit+0x158>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	f040 8096 	bne.w	8000ed0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000da4:	4b4d      	ldr	r3, [pc, #308]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	4a4c      	ldr	r2, [pc, #304]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000daa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dae:	6313      	str	r3, [r2, #48]	; 0x30
 8000db0:	4b4a      	ldr	r3, [pc, #296]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db8:	623b      	str	r3, [r7, #32]
 8000dba:	6a3b      	ldr	r3, [r7, #32]
 8000dbc:	4b47      	ldr	r3, [pc, #284]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	4a46      	ldr	r2, [pc, #280]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000dc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc8:	4b44      	ldr	r3, [pc, #272]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	4b41      	ldr	r3, [pc, #260]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a40      	ldr	r2, [pc, #256]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000dda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
 8000de0:	4b3e      	ldr	r3, [pc, #248]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000de8:	61bb      	str	r3, [r7, #24]
 8000dea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dec:	4b3b      	ldr	r3, [pc, #236]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	4a3a      	ldr	r2, [pc, #232]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	6313      	str	r3, [r2, #48]	; 0x30
 8000df8:	4b38      	ldr	r3, [pc, #224]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	4b35      	ldr	r3, [pc, #212]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	4a34      	ldr	r2, [pc, #208]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e10:	4b32      	ldr	r3, [pc, #200]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	4a2e      	ldr	r2, [pc, #184]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	6313      	str	r3, [r2, #48]	; 0x30
 8000e28:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e34:	4b29      	ldr	r3, [pc, #164]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a28      	ldr	r2, [pc, #160]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e4c:	2332      	movs	r3, #50	; 0x32
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5c:	230b      	movs	r3, #11
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	481e      	ldr	r0, [pc, #120]	; (8000ee0 <HAL_ETH_MspInit+0x160>)
 8000e68:	f000 ff64 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e6c:	2386      	movs	r3, #134	; 0x86
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e7c:	230b      	movs	r3, #11
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <HAL_ETH_MspInit+0x164>)
 8000e88:	f000 ff54 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9e:	230b      	movs	r3, #11
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <HAL_ETH_MspInit+0x168>)
 8000eaa:	f000 ff43 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000eae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec0:	230b      	movs	r3, #11
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4808      	ldr	r0, [pc, #32]	; (8000eec <HAL_ETH_MspInit+0x16c>)
 8000ecc:	f000 ff32 	bl	8001d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3738      	adds	r7, #56	; 0x38
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40028000 	.word	0x40028000
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	40021800 	.word	0x40021800

08000ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ae      	sub	sp, #184	; 0xb8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f08:	f107 0320 	add.w	r3, r7, #32
 8000f0c:	2284      	movs	r2, #132	; 0x84
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f006 fcbb 	bl	800788c <memset>
  if(huart->Instance==USART2)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a57      	ldr	r2, [pc, #348]	; (8001078 <HAL_UART_MspInit+0x188>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d164      	bne.n	8000fea <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f28:	f107 0320 	add.w	r3, r7, #32
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 ff1b 	bl	8002d68 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f38:	f7ff fef5 	bl	8000d26 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3c:	4b4f      	ldr	r3, [pc, #316]	; (800107c <HAL_UART_MspInit+0x18c>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a4e      	ldr	r2, [pc, #312]	; (800107c <HAL_UART_MspInit+0x18c>)
 8000f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
 8000f48:	4b4c      	ldr	r3, [pc, #304]	; (800107c <HAL_UART_MspInit+0x18c>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b49      	ldr	r3, [pc, #292]	; (800107c <HAL_UART_MspInit+0x18c>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a48      	ldr	r2, [pc, #288]	; (800107c <HAL_UART_MspInit+0x18c>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f60:	4b46      	ldr	r3, [pc, #280]	; (800107c <HAL_UART_MspInit+0x18c>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6c:	4b43      	ldr	r3, [pc, #268]	; (800107c <HAL_UART_MspInit+0x18c>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a42      	ldr	r2, [pc, #264]	; (800107c <HAL_UART_MspInit+0x18c>)
 8000f72:	f043 0308 	orr.w	r3, r3, #8
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b40      	ldr	r3, [pc, #256]	; (800107c <HAL_UART_MspInit+0x18c>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f84:	2308      	movs	r3, #8
 8000f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4835      	ldr	r0, [pc, #212]	; (8001080 <HAL_UART_MspInit+0x190>)
 8000faa:	f000 fec3 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fae:	2320      	movs	r3, #32
 8000fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	482c      	ldr	r0, [pc, #176]	; (8001084 <HAL_UART_MspInit+0x194>)
 8000fd4:	f000 feae 	bl	8001d34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2105      	movs	r1, #5
 8000fdc:	2026      	movs	r0, #38	; 0x26
 8000fde:	f000 fac7 	bl	8001570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fe2:	2026      	movs	r0, #38	; 0x26
 8000fe4:	f000 fae0 	bl	80015a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fe8:	e041      	b.n	800106e <HAL_UART_MspInit+0x17e>
  else if(huart->Instance==USART3)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a26      	ldr	r2, [pc, #152]	; (8001088 <HAL_UART_MspInit+0x198>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d13c      	bne.n	800106e <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	4618      	mov	r0, r3
 8001004:	f001 feb0 	bl	8002d68 <HAL_RCCEx_PeriphCLKConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_UART_MspInit+0x122>
      Error_Handler();
 800100e:	f7ff fe8a 	bl	8000d26 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_UART_MspInit+0x18c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_UART_MspInit+0x18c>)
 8001018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800101c:	6413      	str	r3, [r2, #64]	; 0x40
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_UART_MspInit+0x18c>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_UART_MspInit+0x18c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a13      	ldr	r2, [pc, #76]	; (800107c <HAL_UART_MspInit+0x18c>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_UART_MspInit+0x18c>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001042:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800105c:	2307      	movs	r3, #7
 800105e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001062:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001066:	4619      	mov	r1, r3
 8001068:	4806      	ldr	r0, [pc, #24]	; (8001084 <HAL_UART_MspInit+0x194>)
 800106a:	f000 fe63 	bl	8001d34 <HAL_GPIO_Init>
}
 800106e:	bf00      	nop
 8001070:	37b8      	adds	r7, #184	; 0xb8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40004400 	.word	0x40004400
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020c00 	.word	0x40020c00
 8001088:	40004800 	.word	0x40004800

0800108c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0ac      	sub	sp, #176	; 0xb0
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	2284      	movs	r2, #132	; 0x84
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f006 fbed 	bl	800788c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ba:	d159      	bne.n	8001170 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80010bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fe4b 	bl	8002d68 <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80010d8:	f7ff fe25 	bl	8000d26 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <HAL_PCD_MspInit+0xec>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	4a25      	ldr	r2, [pc, #148]	; (8001178 <HAL_PCD_MspInit+0xec>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6313      	str	r3, [r2, #48]	; 0x30
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <HAL_PCD_MspInit+0xec>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010f4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800110e:	230a      	movs	r3, #10
 8001110:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001118:	4619      	mov	r1, r3
 800111a:	4818      	ldr	r0, [pc, #96]	; (800117c <HAL_PCD_MspInit+0xf0>)
 800111c:	f000 fe0a 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001138:	4619      	mov	r1, r3
 800113a:	4810      	ldr	r0, [pc, #64]	; (800117c <HAL_PCD_MspInit+0xf0>)
 800113c:	f000 fdfa 	bl	8001d34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_PCD_MspInit+0xec>)
 8001142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <HAL_PCD_MspInit+0xec>)
 8001146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800114a:	6353      	str	r3, [r2, #52]	; 0x34
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_PCD_MspInit+0xec>)
 800114e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <HAL_PCD_MspInit+0xec>)
 800115a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_PCD_MspInit+0xec>)
 800115e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001162:	6453      	str	r3, [r2, #68]	; 0x44
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <HAL_PCD_MspInit+0xec>)
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	37b0      	adds	r7, #176	; 0xb0
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	40020000 	.word	0x40020000

08001180 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	; 0x38
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001190:	4b34      	ldr	r3, [pc, #208]	; (8001264 <HAL_InitTick+0xe4>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	4a33      	ldr	r2, [pc, #204]	; (8001264 <HAL_InitTick+0xe4>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6413      	str	r3, [r2, #64]	; 0x40
 800119c:	4b31      	ldr	r3, [pc, #196]	; (8001264 <HAL_InitTick+0xe4>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a8:	f107 0210 	add.w	r2, r7, #16
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 fda6 	bl	8002d04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d103      	bne.n	80011ca <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011c2:	f001 fd77 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 80011c6:	6378      	str	r0, [r7, #52]	; 0x34
 80011c8:	e004      	b.n	80011d4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011ca:	f001 fd73 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 80011ce:	4603      	mov	r3, r0
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d6:	4a24      	ldr	r2, [pc, #144]	; (8001268 <HAL_InitTick+0xe8>)
 80011d8:	fba2 2303 	umull	r2, r3, r2, r3
 80011dc:	0c9b      	lsrs	r3, r3, #18
 80011de:	3b01      	subs	r3, #1
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80011e2:	4b22      	ldr	r3, [pc, #136]	; (800126c <HAL_InitTick+0xec>)
 80011e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_InitTick+0xec>)
 80011ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011f0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80011f2:	4a1e      	ldr	r2, [pc, #120]	; (800126c <HAL_InitTick+0xec>)
 80011f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <HAL_InitTick+0xec>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_InitTick+0xec>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_InitTick+0xec>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800120a:	4818      	ldr	r0, [pc, #96]	; (800126c <HAL_InitTick+0xec>)
 800120c:	f002 f99c 	bl	8003548 <HAL_TIM_Base_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001216:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800121a:	2b00      	cmp	r3, #0
 800121c:	d11b      	bne.n	8001256 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800121e:	4813      	ldr	r0, [pc, #76]	; (800126c <HAL_InitTick+0xec>)
 8001220:	f002 f9f4 	bl	800360c <HAL_TIM_Base_Start_IT>
 8001224:	4603      	mov	r3, r0
 8001226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800122a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800122e:	2b00      	cmp	r3, #0
 8001230:	d111      	bne.n	8001256 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001232:	201c      	movs	r0, #28
 8001234:	f000 f9b8 	bl	80015a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b0f      	cmp	r3, #15
 800123c:	d808      	bhi.n	8001250 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800123e:	2200      	movs	r2, #0
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	201c      	movs	r0, #28
 8001244:	f000 f994 	bl	8001570 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001248:	4a09      	ldr	r2, [pc, #36]	; (8001270 <HAL_InitTick+0xf0>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e002      	b.n	8001256 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001256:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800125a:	4618      	mov	r0, r3
 800125c:	3738      	adds	r7, #56	; 0x38
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	431bde83 	.word	0x431bde83
 800126c:	20000c24 	.word	0x20000c24
 8001270:	200000a0 	.word	0x200000a0

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <NMI_Handler+0x4>

0800127a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <MemManage_Handler+0x4>

08001286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <BusFault_Handler+0x4>

0800128c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <UsageFault_Handler+0x4>

08001292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <TIM2_IRQHandler+0x10>)
 80012a6:	f002 fa29 	bl	80036fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000c24 	.word	0x20000c24

080012b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	 if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)) {
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <USART2_IRQHandler+0x30>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	f003 0320 	and.w	r3, r3, #32
 80012c4:	2b20      	cmp	r3, #32
 80012c6:	d106      	bne.n	80012d6 <USART2_IRQHandler+0x22>

		 uint8_t received_data;
	     HAL_UART_Receive(&huart2, &received_data, 1, HAL_MAX_DELAY); // Receive 1 byte
 80012c8:	1df9      	adds	r1, r7, #7
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	2201      	movs	r2, #1
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <USART2_IRQHandler+0x30>)
 80012d2:	f002 fcea 	bl	8003caa <HAL_UART_Receive>
	        // Process the received_data here       // For example, print it to another UART or do something else with it
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012d6:	4803      	ldr	r0, [pc, #12]	; (80012e4 <USART2_IRQHandler+0x30>)
 80012d8:	f002 fdac 	bl	8003e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000548 	.word	0x20000548

080012e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <SystemInit+0x20>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <SystemInit+0x20>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001344 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001312:	490e      	ldr	r1, [pc, #56]	; (800134c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001328:	4c0b      	ldr	r4, [pc, #44]	; (8001358 <LoopFillZerobss+0x26>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001336:	f7ff ffd7 	bl	80012e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133a:	f006 fabf 	bl	80078bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133e:	f7ff f9c1 	bl	80006c4 <main>
  bx  lr    
 8001342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001344:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001350:	08007c04 	.word	0x08007c04
  ldr r2, =_sbss
 8001354:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001358:	200049c0 	.word	0x200049c0

0800135c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC_IRQHandler>

0800135e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001362:	2003      	movs	r0, #3
 8001364:	f000 f8f9 	bl	800155a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001368:	200f      	movs	r0, #15
 800136a:	f7ff ff09 	bl	8001180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136e:	f7ff fcdf 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	200000a4 	.word	0x200000a4
 800139c:	20000c70 	.word	0x20000c70

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000c70 	.word	0x20000c70

080013b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff ffee 	bl	80013a0 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d005      	beq.n	80013de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_Delay+0x44>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013de:	bf00      	nop
 80013e0:	f7ff ffde 	bl	80013a0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8f7      	bhi.n	80013e0 <HAL_Delay+0x28>
  {
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200000a4 	.word	0x200000a4

08001400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <__NVIC_SetPriorityGrouping+0x40>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 800142a:	4313      	orrs	r3, r2
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x40>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00
 8001444:	05fa0000 	.word	0x05fa0000

08001448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db0b      	blt.n	800148e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4907      	ldr	r1, [pc, #28]	; (800149c <__NVIC_EnableIRQ+0x38>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100

080014a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	; (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
         );
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ff4c 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001582:	f7ff ff61 	bl	8001448 <__NVIC_GetPriorityGrouping>
 8001586:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	6978      	ldr	r0, [r7, #20]
 800158e:	f7ff ffb1 	bl	80014f4 <NVIC_EncodePriority>
 8001592:	4602      	mov	r2, r0
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff80 	bl	80014a0 <__NVIC_SetPriority>
}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff54 	bl	8001464 <__NVIC_EnableIRQ>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015d2:	f7ff fee5 	bl	80013a0 <HAL_GetTick>
 80015d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d008      	beq.n	80015f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e052      	b.n	800169c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0216 	bic.w	r2, r2, #22
 8001604:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001614:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	2b00      	cmp	r3, #0
 800161c:	d103      	bne.n	8001626 <HAL_DMA_Abort+0x62>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001622:	2b00      	cmp	r3, #0
 8001624:	d007      	beq.n	8001636 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0208 	bic.w	r2, r2, #8
 8001634:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0201 	bic.w	r2, r2, #1
 8001644:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001646:	e013      	b.n	8001670 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001648:	f7ff feaa 	bl	80013a0 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b05      	cmp	r3, #5
 8001654:	d90c      	bls.n	8001670 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2220      	movs	r2, #32
 800165a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2203      	movs	r2, #3
 8001660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e015      	b.n	800169c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1e4      	bne.n	8001648 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001682:	223f      	movs	r2, #63	; 0x3f
 8001684:	409a      	lsls	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d004      	beq.n	80016c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2280      	movs	r2, #128	; 0x80
 80016bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e00c      	b.n	80016dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2205      	movs	r2, #5
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0201 	bic.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e06a      	b.n	80017d0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001700:	2b00      	cmp	r3, #0
 8001702:	d106      	bne.n	8001712 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2223      	movs	r2, #35	; 0x23
 8001708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fb37 	bl	8000d80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <HAL_ETH_Init+0xf0>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	4a30      	ldr	r2, [pc, #192]	; (80017d8 <HAL_ETH_Init+0xf0>)
 8001718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171c:	6453      	str	r3, [r2, #68]	; 0x44
 800171e:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <HAL_ETH_Init+0xf0>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800172a:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <HAL_ETH_Init+0xf4>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a2b      	ldr	r2, [pc, #172]	; (80017dc <HAL_ETH_Init+0xf4>)
 8001730:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001734:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <HAL_ETH_Init+0xf4>)
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	4927      	ldr	r1, [pc, #156]	; (80017dc <HAL_ETH_Init+0xf4>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001744:	4b25      	ldr	r3, [pc, #148]	; (80017dc <HAL_ETH_Init+0xf4>)
 8001746:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800175e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001760:	f7ff fe1e 	bl	80013a0 <HAL_GetTick>
 8001764:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001766:	e011      	b.n	800178c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001768:	f7ff fe1a 	bl	80013a0 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001776:	d909      	bls.n	800178c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2204      	movs	r2, #4
 800177c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	22e0      	movs	r2, #224	; 0xe0
 8001784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e021      	b.n	80017d0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1e4      	bne.n	8001768 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f958 	bl	8001a54 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f9ff 	bl	8001ba8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 fa55 	bl	8001c5a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	461a      	mov	r2, r3
 80017b6:	2100      	movs	r1, #0
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 f9bd 	bl	8001b38 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2210      	movs	r2, #16
 80017ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40013800 	.word	0x40013800

080017e0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4b51      	ldr	r3, [pc, #324]	; (800193c <ETH_SetMACConfig+0x15c>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	7c1b      	ldrb	r3, [r3, #16]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <ETH_SetMACConfig+0x28>
 8001802:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001806:	e000      	b.n	800180a <ETH_SetMACConfig+0x2a>
 8001808:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	7c5b      	ldrb	r3, [r3, #17]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d102      	bne.n	8001818 <ETH_SetMACConfig+0x38>
 8001812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001816:	e000      	b.n	800181a <ETH_SetMACConfig+0x3a>
 8001818:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800181a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001820:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	7fdb      	ldrb	r3, [r3, #31]
 8001826:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001828:	431a      	orrs	r2, r3
                        macconf->Speed |
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800182e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	7f92      	ldrb	r2, [r2, #30]
 8001834:	2a00      	cmp	r2, #0
 8001836:	d102      	bne.n	800183e <ETH_SetMACConfig+0x5e>
 8001838:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800183c:	e000      	b.n	8001840 <ETH_SetMACConfig+0x60>
 800183e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001840:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	7f1b      	ldrb	r3, [r3, #28]
 8001846:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001848:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800184e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	791b      	ldrb	r3, [r3, #4]
 8001854:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001856:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800185e:	2a00      	cmp	r2, #0
 8001860:	d102      	bne.n	8001868 <ETH_SetMACConfig+0x88>
 8001862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001866:	e000      	b.n	800186a <ETH_SetMACConfig+0x8a>
 8001868:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800186a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	7bdb      	ldrb	r3, [r3, #15]
 8001870:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001872:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001878:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001880:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001882:	4313      	orrs	r3, r2
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800189a:	2001      	movs	r0, #1
 800189c:	f7ff fd8c 	bl	80013b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80018b6:	4013      	ands	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018be:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d101      	bne.n	80018ce <ETH_SetMACConfig+0xee>
 80018ca:	2280      	movs	r2, #128	; 0x80
 80018cc:	e000      	b.n	80018d0 <ETH_SetMACConfig+0xf0>
 80018ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018d0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80018d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80018de:	2a01      	cmp	r2, #1
 80018e0:	d101      	bne.n	80018e6 <ETH_SetMACConfig+0x106>
 80018e2:	2208      	movs	r2, #8
 80018e4:	e000      	b.n	80018e8 <ETH_SetMACConfig+0x108>
 80018e6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80018e8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80018f0:	2a01      	cmp	r2, #1
 80018f2:	d101      	bne.n	80018f8 <ETH_SetMACConfig+0x118>
 80018f4:	2204      	movs	r2, #4
 80018f6:	e000      	b.n	80018fa <ETH_SetMACConfig+0x11a>
 80018f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001902:	2a01      	cmp	r2, #1
 8001904:	d101      	bne.n	800190a <ETH_SetMACConfig+0x12a>
 8001906:	2202      	movs	r2, #2
 8001908:	e000      	b.n	800190c <ETH_SetMACConfig+0x12c>
 800190a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800190c:	4313      	orrs	r3, r2
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4313      	orrs	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff fd47 	bl	80013b8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	619a      	str	r2, [r3, #24]
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	ff20810f 	.word	0xff20810f

08001940 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4b3d      	ldr	r3, [pc, #244]	; (8001a50 <ETH_SetDMAConfig+0x110>)
 800195a:	4013      	ands	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	7b1b      	ldrb	r3, [r3, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <ETH_SetDMAConfig+0x2c>
 8001966:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800196a:	e000      	b.n	800196e <ETH_SetDMAConfig+0x2e>
 800196c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	7b5b      	ldrb	r3, [r3, #13]
 8001972:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001974:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	7f52      	ldrb	r2, [r2, #29]
 800197a:	2a00      	cmp	r2, #0
 800197c:	d102      	bne.n	8001984 <ETH_SetDMAConfig+0x44>
 800197e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001982:	e000      	b.n	8001986 <ETH_SetDMAConfig+0x46>
 8001984:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001986:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	7b9b      	ldrb	r3, [r3, #14]
 800198c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800198e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001994:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	7f1b      	ldrb	r3, [r3, #28]
 800199a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800199c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	7f9b      	ldrb	r3, [r3, #30]
 80019a2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80019a4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80019aa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019b2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80019b4:	4313      	orrs	r3, r2
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c4:	461a      	mov	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7ff fcee 	bl	80013b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e4:	461a      	mov	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	791b      	ldrb	r3, [r3, #4]
 80019ee:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019f4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80019fa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a00:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a08:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001a0a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a12:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a18:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a26:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff fcbf 	bl	80013b8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a42:	461a      	mov	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	f8de3f23 	.word	0xf8de3f23

08001a54 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b0a6      	sub	sp, #152	; 0x98
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001a62:	2301      	movs	r3, #1
 8001a64:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a72:	2301      	movs	r3, #1
 8001a74:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a90:	2300      	movs	r3, #0
 8001a92:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ab6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aba:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001abc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ac8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001acc:	4619      	mov	r1, r3
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fe86 	bl	80017e0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001adc:	2301      	movs	r3, #1
 8001ade:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001af6:	2300      	movs	r3, #0
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b00:	2301      	movs	r3, #1
 8001b02:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b08:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b0e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b14:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001b16:	2301      	movs	r3, #1
 8001b18:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	4619      	mov	r1, r3
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ff08 	bl	8001940 <ETH_SetDMAConfig>
}
 8001b30:	bf00      	nop
 8001b32:	3798      	adds	r7, #152	; 0x98
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3305      	adds	r3, #5
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	3204      	adds	r2, #4
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <ETH_MACAddressConfig+0x68>)
 8001b5a:	4413      	add	r3, r2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3303      	adds	r3, #3
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	061a      	lsls	r2, r3, #24
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3301      	adds	r3, #1
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <ETH_MACAddressConfig+0x6c>)
 8001b8a:	4413      	add	r3, r2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	6013      	str	r3, [r2, #0]
}
 8001b92:	bf00      	nop
 8001b94:	371c      	adds	r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40028040 	.word	0x40028040
 8001ba4:	40028044 	.word	0x40028044

08001ba8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	e03e      	b.n	8001c34 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68d9      	ldr	r1, [r3, #12]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	3206      	adds	r2, #6
 8001be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d80c      	bhi.n	8001c18 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68d9      	ldr	r1, [r3, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	440b      	add	r3, r1
 8001c10:	461a      	mov	r2, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	e004      	b.n	8001c22 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3301      	adds	r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d9bd      	bls.n	8001bb6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4c:	611a      	str	r2, [r3, #16]
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	e046      	b.n	8001cf6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6919      	ldr	r1, [r3, #16]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2200      	movs	r2, #0
 8001c84:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ca4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001cac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	3212      	adds	r2, #18
 8001cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d80c      	bhi.n	8001ce6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6919      	ldr	r1, [r3, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	440b      	add	r3, r1
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	e004      	b.n	8001cf0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d9b5      	bls.n	8001c68 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d26:	60da      	str	r2, [r3, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	e175      	b.n	8002040 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	f040 8164 	bne.w	800203a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d005      	beq.n	8001d8a <HAL_GPIO_Init+0x56>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d130      	bne.n	8001dec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 0201 	and.w	r2, r3, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d017      	beq.n	8001e28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d123      	bne.n	8001e7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	08da      	lsrs	r2, r3, #3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3208      	adds	r2, #8
 8001e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	08da      	lsrs	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3208      	adds	r2, #8
 8001e76:	69b9      	ldr	r1, [r7, #24]
 8001e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0203 	and.w	r2, r3, #3
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80be 	beq.w	800203a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	4b66      	ldr	r3, [pc, #408]	; (8002058 <HAL_GPIO_Init+0x324>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a65      	ldr	r2, [pc, #404]	; (8002058 <HAL_GPIO_Init+0x324>)
 8001ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	4b63      	ldr	r3, [pc, #396]	; (8002058 <HAL_GPIO_Init+0x324>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ed6:	4a61      	ldr	r2, [pc, #388]	; (800205c <HAL_GPIO_Init+0x328>)
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	089b      	lsrs	r3, r3, #2
 8001edc:	3302      	adds	r3, #2
 8001ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	220f      	movs	r2, #15
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a58      	ldr	r2, [pc, #352]	; (8002060 <HAL_GPIO_Init+0x32c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d037      	beq.n	8001f72 <HAL_GPIO_Init+0x23e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a57      	ldr	r2, [pc, #348]	; (8002064 <HAL_GPIO_Init+0x330>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d031      	beq.n	8001f6e <HAL_GPIO_Init+0x23a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a56      	ldr	r2, [pc, #344]	; (8002068 <HAL_GPIO_Init+0x334>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d02b      	beq.n	8001f6a <HAL_GPIO_Init+0x236>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a55      	ldr	r2, [pc, #340]	; (800206c <HAL_GPIO_Init+0x338>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d025      	beq.n	8001f66 <HAL_GPIO_Init+0x232>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a54      	ldr	r2, [pc, #336]	; (8002070 <HAL_GPIO_Init+0x33c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d01f      	beq.n	8001f62 <HAL_GPIO_Init+0x22e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a53      	ldr	r2, [pc, #332]	; (8002074 <HAL_GPIO_Init+0x340>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d019      	beq.n	8001f5e <HAL_GPIO_Init+0x22a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a52      	ldr	r2, [pc, #328]	; (8002078 <HAL_GPIO_Init+0x344>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <HAL_GPIO_Init+0x226>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a51      	ldr	r2, [pc, #324]	; (800207c <HAL_GPIO_Init+0x348>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00d      	beq.n	8001f56 <HAL_GPIO_Init+0x222>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a50      	ldr	r2, [pc, #320]	; (8002080 <HAL_GPIO_Init+0x34c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d007      	beq.n	8001f52 <HAL_GPIO_Init+0x21e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4f      	ldr	r2, [pc, #316]	; (8002084 <HAL_GPIO_Init+0x350>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_GPIO_Init+0x21a>
 8001f4a:	2309      	movs	r3, #9
 8001f4c:	e012      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f4e:	230a      	movs	r3, #10
 8001f50:	e010      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f52:	2308      	movs	r3, #8
 8001f54:	e00e      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f56:	2307      	movs	r3, #7
 8001f58:	e00c      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f5a:	2306      	movs	r3, #6
 8001f5c:	e00a      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f5e:	2305      	movs	r3, #5
 8001f60:	e008      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f62:	2304      	movs	r3, #4
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f66:	2303      	movs	r3, #3
 8001f68:	e004      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e002      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f72:	2300      	movs	r3, #0
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	f002 0203 	and.w	r2, r2, #3
 8001f7a:	0092      	lsls	r2, r2, #2
 8001f7c:	4093      	lsls	r3, r2
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f84:	4935      	ldr	r1, [pc, #212]	; (800205c <HAL_GPIO_Init+0x328>)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f92:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <HAL_GPIO_Init+0x354>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fb6:	4a34      	ldr	r2, [pc, #208]	; (8002088 <HAL_GPIO_Init+0x354>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fbc:	4b32      	ldr	r3, [pc, #200]	; (8002088 <HAL_GPIO_Init+0x354>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe0:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_GPIO_Init+0x354>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fe6:	4b28      	ldr	r3, [pc, #160]	; (8002088 <HAL_GPIO_Init+0x354>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800200a:	4a1f      	ldr	r2, [pc, #124]	; (8002088 <HAL_GPIO_Init+0x354>)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_GPIO_Init+0x354>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <HAL_GPIO_Init+0x354>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3301      	adds	r3, #1
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b0f      	cmp	r3, #15
 8002044:	f67f ae86 	bls.w	8001d54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40013800 	.word	0x40013800
 8002060:	40020000 	.word	0x40020000
 8002064:	40020400 	.word	0x40020400
 8002068:	40020800 	.word	0x40020800
 800206c:	40020c00 	.word	0x40020c00
 8002070:	40021000 	.word	0x40021000
 8002074:	40021400 	.word	0x40021400
 8002078:	40021800 	.word	0x40021800
 800207c:	40021c00 	.word	0x40021c00
 8002080:	40022000 	.word	0x40022000
 8002084:	40022400 	.word	0x40022400
 8002088:	40013c00 	.word	0x40013c00

0800208c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
 8002098:	4613      	mov	r3, r2
 800209a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800209c:	787b      	ldrb	r3, [r7, #1]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020a8:	e003      	b.n	80020b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020aa:	887b      	ldrh	r3, [r7, #2]
 80020ac:	041a      	lsls	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	619a      	str	r2, [r3, #24]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c0:	b08f      	sub	sp, #60	; 0x3c
 80020c2:	af0a      	add	r7, sp, #40	; 0x28
 80020c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e116      	b.n	80022fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe ffce 	bl	800108c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2203      	movs	r2, #3
 80020f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f002 fe82 	bl	8004e18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	687e      	ldr	r6, [r7, #4]
 800211c:	466d      	mov	r5, sp
 800211e:	f106 0410 	add.w	r4, r6, #16
 8002122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800212a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800212e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002132:	1d33      	adds	r3, r6, #4
 8002134:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002136:	6838      	ldr	r0, [r7, #0]
 8002138:	f002 fe16 	bl	8004d68 <USB_CoreInit>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2202      	movs	r2, #2
 8002146:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0d7      	b.n	80022fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f002 fe70 	bl	8004e3a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	e04a      	b.n	80021f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	333d      	adds	r3, #61	; 0x3d
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	333c      	adds	r3, #60	; 0x3c
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	b298      	uxth	r0, r3
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3344      	adds	r3, #68	; 0x44
 800219c:	4602      	mov	r2, r0
 800219e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	3340      	adds	r3, #64	; 0x40
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3348      	adds	r3, #72	; 0x48
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	334c      	adds	r3, #76	; 0x4c
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	3354      	adds	r3, #84	; 0x54
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	3301      	adds	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d3af      	bcc.n	8002160 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	e044      	b.n	8002290 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	3301      	adds	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	429a      	cmp	r2, r3
 8002298:	d3b5      	bcc.n	8002206 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	687e      	ldr	r6, [r7, #4]
 80022a2:	466d      	mov	r5, sp
 80022a4:	f106 0410 	add.w	r4, r6, #16
 80022a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80022b8:	1d33      	adds	r3, r6, #4
 80022ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022bc:	6838      	ldr	r0, [r7, #0]
 80022be:	f002 fe09 	bl	8004ed4 <USB_DevInit>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e014      	b.n	80022fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d102      	bne.n	80022f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f80b 	bl	8002308 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 ffc7 	bl	800528a <USB_DevDisconnect>

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002308 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_PCDEx_ActivateLPM+0x44>)
 8002338:	4313      	orrs	r3, r2
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	10000003 	.word	0x10000003

08002350 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800235a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235e:	6013      	str	r3, [r2, #0]
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40007000 	.word	0x40007000

08002370 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002378:	2300      	movs	r3, #0
 800237a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e291      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8087 	beq.w	80024a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002394:	4b96      	ldr	r3, [pc, #600]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b04      	cmp	r3, #4
 800239e:	d00c      	beq.n	80023ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a0:	4b93      	ldr	r3, [pc, #588]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d112      	bne.n	80023d2 <HAL_RCC_OscConfig+0x62>
 80023ac:	4b90      	ldr	r3, [pc, #576]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b8:	d10b      	bne.n	80023d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ba:	4b8d      	ldr	r3, [pc, #564]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d06c      	beq.n	80024a0 <HAL_RCC_OscConfig+0x130>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d168      	bne.n	80024a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e26b      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023da:	d106      	bne.n	80023ea <HAL_RCC_OscConfig+0x7a>
 80023dc:	4b84      	ldr	r3, [pc, #528]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a83      	ldr	r2, [pc, #524]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	e02e      	b.n	8002448 <HAL_RCC_OscConfig+0xd8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x9c>
 80023f2:	4b7f      	ldr	r3, [pc, #508]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7e      	ldr	r2, [pc, #504]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b7c      	ldr	r3, [pc, #496]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a7b      	ldr	r2, [pc, #492]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e01d      	b.n	8002448 <HAL_RCC_OscConfig+0xd8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0xc0>
 8002416:	4b76      	ldr	r3, [pc, #472]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a75      	ldr	r2, [pc, #468]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800241c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	4b73      	ldr	r3, [pc, #460]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a72      	ldr	r2, [pc, #456]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e00b      	b.n	8002448 <HAL_RCC_OscConfig+0xd8>
 8002430:	4b6f      	ldr	r3, [pc, #444]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a6e      	ldr	r2, [pc, #440]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b6c      	ldr	r3, [pc, #432]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a6b      	ldr	r2, [pc, #428]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe ffa6 	bl	80013a0 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7fe ffa2 	bl	80013a0 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e21f      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b61      	ldr	r3, [pc, #388]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0xe8>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe ff92 	bl	80013a0 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7fe ff8e 	bl	80013a0 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	; 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e20b      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	4b57      	ldr	r3, [pc, #348]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x110>
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d069      	beq.n	8002582 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ae:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ba:	4b4d      	ldr	r3, [pc, #308]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d11c      	bne.n	8002500 <HAL_RCC_OscConfig+0x190>
 80024c6:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d116      	bne.n	8002500 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_RCC_OscConfig+0x17a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e1df      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ea:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	493d      	ldr	r1, [pc, #244]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	e040      	b.n	8002582 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d023      	beq.n	8002550 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002508:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a38      	ldr	r2, [pc, #224]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe ff44 	bl	80013a0 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251c:	f7fe ff40 	bl	80013a0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1bd      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252e:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253a:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4929      	ldr	r1, [pc, #164]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
 800254e:	e018      	b.n	8002582 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002550:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a26      	ldr	r2, [pc, #152]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe ff20 	bl	80013a0 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002564:	f7fe ff1c 	bl	80013a0 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e199      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d038      	beq.n	8002600 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d019      	beq.n	80025ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002596:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800259a:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a2:	f7fe fefd 	bl	80013a0 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025aa:	f7fe fef9 	bl	80013a0 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e176      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80025be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x23a>
 80025c8:	e01a      	b.n	8002600 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80025cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ce:	4a08      	ldr	r2, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x280>)
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d6:	f7fe fee3 	bl	80013a0 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025de:	f7fe fedf 	bl	80013a0 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d903      	bls.n	80025f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e15c      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
 80025f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f4:	4b91      	ldr	r3, [pc, #580]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ee      	bne.n	80025de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80a4 	beq.w	8002756 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260e:	4b8b      	ldr	r3, [pc, #556]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10d      	bne.n	8002636 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	4b88      	ldr	r3, [pc, #544]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a87      	ldr	r2, [pc, #540]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b85      	ldr	r3, [pc, #532]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002636:	4b82      	ldr	r3, [pc, #520]	; (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d118      	bne.n	8002674 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002642:	4b7f      	ldr	r3, [pc, #508]	; (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a7e      	ldr	r2, [pc, #504]	; (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264e:	f7fe fea7 	bl	80013a0 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002656:	f7fe fea3 	bl	80013a0 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b64      	cmp	r3, #100	; 0x64
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e120      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002668:	4b75      	ldr	r3, [pc, #468]	; (8002840 <HAL_RCC_OscConfig+0x4d0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x31a>
 800267c:	4b6f      	ldr	r3, [pc, #444]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	4a6e      	ldr	r2, [pc, #440]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6713      	str	r3, [r2, #112]	; 0x70
 8002688:	e02d      	b.n	80026e6 <HAL_RCC_OscConfig+0x376>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x33c>
 8002692:	4b6a      	ldr	r3, [pc, #424]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	4a69      	ldr	r2, [pc, #420]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6713      	str	r3, [r2, #112]	; 0x70
 800269e:	4b67      	ldr	r3, [pc, #412]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	4a66      	ldr	r2, [pc, #408]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	6713      	str	r3, [r2, #112]	; 0x70
 80026aa:	e01c      	b.n	80026e6 <HAL_RCC_OscConfig+0x376>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b05      	cmp	r3, #5
 80026b2:	d10c      	bne.n	80026ce <HAL_RCC_OscConfig+0x35e>
 80026b4:	4b61      	ldr	r3, [pc, #388]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	4a60      	ldr	r2, [pc, #384]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026ba:	f043 0304 	orr.w	r3, r3, #4
 80026be:	6713      	str	r3, [r2, #112]	; 0x70
 80026c0:	4b5e      	ldr	r3, [pc, #376]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	4a5d      	ldr	r2, [pc, #372]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6713      	str	r3, [r2, #112]	; 0x70
 80026cc:	e00b      	b.n	80026e6 <HAL_RCC_OscConfig+0x376>
 80026ce:	4b5b      	ldr	r3, [pc, #364]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a5a      	ldr	r2, [pc, #360]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
 80026da:	4b58      	ldr	r3, [pc, #352]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	4a57      	ldr	r2, [pc, #348]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80026e0:	f023 0304 	bic.w	r3, r3, #4
 80026e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d015      	beq.n	800271a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7fe fe57 	bl	80013a0 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7fe fe53 	bl	80013a0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	; 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e0ce      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	4b4b      	ldr	r3, [pc, #300]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0ee      	beq.n	80026f6 <HAL_RCC_OscConfig+0x386>
 8002718:	e014      	b.n	8002744 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271a:	f7fe fe41 	bl	80013a0 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002720:	e00a      	b.n	8002738 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7fe fe3d 	bl	80013a0 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e0b8      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002738:	4b40      	ldr	r3, [pc, #256]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1ee      	bne.n	8002722 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002744:	7dfb      	ldrb	r3, [r7, #23]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d105      	bne.n	8002756 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274a:	4b3c      	ldr	r3, [pc, #240]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a3b      	ldr	r2, [pc, #236]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80a4 	beq.w	80028a8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002760:	4b36      	ldr	r3, [pc, #216]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b08      	cmp	r3, #8
 800276a:	d06b      	beq.n	8002844 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d149      	bne.n	8002808 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002774:	4b31      	ldr	r3, [pc, #196]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a30      	ldr	r2, [pc, #192]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800277a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800277e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7fe fe0e 	bl	80013a0 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002788:	f7fe fe0a 	bl	80013a0 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e087      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	4b28      	ldr	r3, [pc, #160]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	019b      	lsls	r3, r3, #6
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	085b      	lsrs	r3, r3, #1
 80027be:	3b01      	subs	r3, #1
 80027c0:	041b      	lsls	r3, r3, #16
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	4313      	orrs	r3, r2
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80027ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a18      	ldr	r2, [pc, #96]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80027da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fdde 	bl	80013a0 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fe fdda 	bl	80013a0 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e057      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x478>
 8002806:	e04f      	b.n	80028a8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0b      	ldr	r2, [pc, #44]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 800280e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fdc4 	bl	80013a0 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe fdc0 	bl	80013a0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e03d      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_RCC_OscConfig+0x4cc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x4ac>
 800283a:	e035      	b.n	80028a8 <HAL_RCC_OscConfig+0x538>
 800283c:	40023800 	.word	0x40023800
 8002840:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_OscConfig+0x544>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d028      	beq.n	80028a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d121      	bne.n	80028a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d11a      	bne.n	80028a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002874:	4013      	ands	r3, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800287a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800287c:	4293      	cmp	r3, r2
 800287e:	d111      	bne.n	80028a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	3b01      	subs	r3, #1
 800288e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800

080028b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0d0      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d910      	bls.n	8002900 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b67      	ldr	r3, [pc, #412]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 020f 	bic.w	r2, r3, #15
 80028e6:	4965      	ldr	r1, [pc, #404]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 800291e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002922:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800293a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	494d      	ldr	r1, [pc, #308]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d040      	beq.n	80029dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d115      	bne.n	800299a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e073      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06b      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4936      	ldr	r1, [pc, #216]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ac:	f7fe fcf8 	bl	80013a0 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f7fe fcf4 	bl	80013a0 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e053      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 020c 	and.w	r2, r3, #12
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1eb      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029dc:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d210      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 020f 	bic.w	r2, r3, #15
 80029f2:	4922      	ldr	r1, [pc, #136]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4916      	ldr	r1, [pc, #88]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	490e      	ldr	r1, [pc, #56]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a4a:	f000 f821 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	490a      	ldr	r1, [pc, #40]	; (8002a84 <HAL_RCC_ClockConfig+0x1cc>)
 8002a5c:	5ccb      	ldrb	r3, [r1, r3]
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1d0>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1d4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fb88 	bl	8001180 <HAL_InitTick>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023c00 	.word	0x40023c00
 8002a80:	40023800 	.word	0x40023800
 8002a84:	08007ad8 	.word	0x08007ad8
 8002a88:	2000009c 	.word	0x2000009c
 8002a8c:	200000a0 	.word	0x200000a0

08002a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a94:	b094      	sub	sp, #80	; 0x50
 8002a96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa8:	4b79      	ldr	r3, [pc, #484]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 030c 	and.w	r3, r3, #12
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	f200 80e1 	bhi.w	8002c7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x3a>
 8002ac2:	e0db      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4b73      	ldr	r3, [pc, #460]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ac6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ac8:	e0db      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aca:	4b73      	ldr	r3, [pc, #460]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x208>)
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ace:	e0d8      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad0:	4b6f      	ldr	r3, [pc, #444]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ada:	4b6d      	ldr	r3, [pc, #436]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d063      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae6:	4b6a      	ldr	r3, [pc, #424]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	2200      	movs	r2, #0
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002af0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af8:	633b      	str	r3, [r7, #48]	; 0x30
 8002afa:	2300      	movs	r3, #0
 8002afc:	637b      	str	r3, [r7, #52]	; 0x34
 8002afe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b02:	4622      	mov	r2, r4
 8002b04:	462b      	mov	r3, r5
 8002b06:	f04f 0000 	mov.w	r0, #0
 8002b0a:	f04f 0100 	mov.w	r1, #0
 8002b0e:	0159      	lsls	r1, r3, #5
 8002b10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b14:	0150      	lsls	r0, r2, #5
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	1a51      	subs	r1, r2, r1
 8002b1e:	6139      	str	r1, [r7, #16]
 8002b20:	4629      	mov	r1, r5
 8002b22:	eb63 0301 	sbc.w	r3, r3, r1
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b34:	4659      	mov	r1, fp
 8002b36:	018b      	lsls	r3, r1, #6
 8002b38:	4651      	mov	r1, sl
 8002b3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b3e:	4651      	mov	r1, sl
 8002b40:	018a      	lsls	r2, r1, #6
 8002b42:	4651      	mov	r1, sl
 8002b44:	ebb2 0801 	subs.w	r8, r2, r1
 8002b48:	4659      	mov	r1, fp
 8002b4a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b62:	4690      	mov	r8, r2
 8002b64:	4699      	mov	r9, r3
 8002b66:	4623      	mov	r3, r4
 8002b68:	eb18 0303 	adds.w	r3, r8, r3
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	462b      	mov	r3, r5
 8002b70:	eb49 0303 	adc.w	r3, r9, r3
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b82:	4629      	mov	r1, r5
 8002b84:	024b      	lsls	r3, r1, #9
 8002b86:	4621      	mov	r1, r4
 8002b88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	024a      	lsls	r2, r1, #9
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b96:	2200      	movs	r2, #0
 8002b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ba0:	f7fd fb3e 	bl	8000220 <__aeabi_uldivmod>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4613      	mov	r3, r2
 8002baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bac:	e058      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bae:	4b38      	ldr	r3, [pc, #224]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	4611      	mov	r1, r2
 8002bba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bbe:	623b      	str	r3, [r7, #32]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bc8:	4642      	mov	r2, r8
 8002bca:	464b      	mov	r3, r9
 8002bcc:	f04f 0000 	mov.w	r0, #0
 8002bd0:	f04f 0100 	mov.w	r1, #0
 8002bd4:	0159      	lsls	r1, r3, #5
 8002bd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bda:	0150      	lsls	r0, r2, #5
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4641      	mov	r1, r8
 8002be2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002be6:	4649      	mov	r1, r9
 8002be8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c00:	ebb2 040a 	subs.w	r4, r2, sl
 8002c04:	eb63 050b 	sbc.w	r5, r3, fp
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	00eb      	lsls	r3, r5, #3
 8002c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c16:	00e2      	lsls	r2, r4, #3
 8002c18:	4614      	mov	r4, r2
 8002c1a:	461d      	mov	r5, r3
 8002c1c:	4643      	mov	r3, r8
 8002c1e:	18e3      	adds	r3, r4, r3
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	464b      	mov	r3, r9
 8002c24:	eb45 0303 	adc.w	r3, r5, r3
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c36:	4629      	mov	r1, r5
 8002c38:	028b      	lsls	r3, r1, #10
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c40:	4621      	mov	r1, r4
 8002c42:	028a      	lsls	r2, r1, #10
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	61fa      	str	r2, [r7, #28]
 8002c50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c54:	f7fd fae4 	bl	8000220 <__aeabi_uldivmod>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002c70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c7a:	e002      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3750      	adds	r7, #80	; 0x50
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	00f42400 	.word	0x00f42400
 8002c98:	007a1200 	.word	0x007a1200

08002c9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	2000009c 	.word	0x2000009c

08002cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cb8:	f7ff fff0 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	0a9b      	lsrs	r3, r3, #10
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4903      	ldr	r1, [pc, #12]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	08007ae8 	.word	0x08007ae8

08002cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ce0:	f7ff ffdc 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	0b5b      	lsrs	r3, r3, #13
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4903      	ldr	r1, [pc, #12]	; (8002d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	08007ae8 	.word	0x08007ae8

08002d04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	220f      	movs	r2, #15
 8002d12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_RCC_GetClockConfig+0x5c>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0203 	and.w	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <HAL_RCC_GetClockConfig+0x5c>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <HAL_RCC_GetClockConfig+0x5c>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_GetClockConfig+0x5c>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	08db      	lsrs	r3, r3, #3
 8002d3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_RCC_GetClockConfig+0x60>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 020f 	and.w	r2, r3, #15
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	601a      	str	r2, [r3, #0]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40023c00 	.word	0x40023c00

08002d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d012      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d90:	4b69      	ldr	r3, [pc, #420]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	4a68      	ldr	r2, [pc, #416]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d9a:	6093      	str	r3, [r2, #8]
 8002d9c:	4b66      	ldr	r3, [pc, #408]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da4:	4964      	ldr	r1, [pc, #400]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002db2:	2301      	movs	r3, #1
 8002db4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d017      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dc2:	4b5d      	ldr	r3, [pc, #372]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd0:	4959      	ldr	r1, [pc, #356]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002de0:	d101      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002de2:	2301      	movs	r3, #1
 8002de4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002dee:	2301      	movs	r3, #1
 8002df0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d017      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dfe:	4b4e      	ldr	r3, [pc, #312]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	494a      	ldr	r1, [pc, #296]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 808b 	beq.w	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e4c:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	4a39      	ldr	r2, [pc, #228]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e56:	6413      	str	r3, [r2, #64]	; 0x40
 8002e58:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e64:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a34      	ldr	r2, [pc, #208]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e70:	f7fe fa96 	bl	80013a0 <HAL_GetTick>
 8002e74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e78:	f7fe fa92 	bl	80013a0 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e357      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e8a:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e96:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d035      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d02e      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002eb4:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ebc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eca:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	4a1a      	ldr	r2, [pc, #104]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ed6:	4a18      	ldr	r2, [pc, #96]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002edc:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d114      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fa5a 	bl	80013a0 <HAL_GetTick>
 8002eec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eee:	e00a      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef0:	f7fe fa56 	bl	80013a0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e319      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0ee      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f1e:	d111      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f2e:	400b      	ands	r3, r1
 8002f30:	4901      	ldr	r1, [pc, #4]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
 8002f36:	e00b      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	40007000 	.word	0x40007000
 8002f40:	0ffffcff 	.word	0x0ffffcff
 8002f44:	4baa      	ldr	r3, [pc, #680]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4aa9      	ldr	r2, [pc, #676]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f4e:	6093      	str	r3, [r2, #8]
 8002f50:	4ba7      	ldr	r3, [pc, #668]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5c:	49a4      	ldr	r1, [pc, #656]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d010      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f6e:	4ba0      	ldr	r3, [pc, #640]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f74:	4a9e      	ldr	r2, [pc, #632]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f7e:	4b9c      	ldr	r3, [pc, #624]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	4999      	ldr	r1, [pc, #612]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f9c:	4b94      	ldr	r3, [pc, #592]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002faa:	4991      	ldr	r1, [pc, #580]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fbe:	4b8c      	ldr	r3, [pc, #560]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fcc:	4988      	ldr	r1, [pc, #544]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fe0:	4b83      	ldr	r3, [pc, #524]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fee:	4980      	ldr	r1, [pc, #512]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003002:	4b7b      	ldr	r3, [pc, #492]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003008:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	4977      	ldr	r1, [pc, #476]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003024:	4b72      	ldr	r3, [pc, #456]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302a:	f023 0203 	bic.w	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	496f      	ldr	r1, [pc, #444]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003046:	4b6a      	ldr	r3, [pc, #424]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304c:	f023 020c 	bic.w	r2, r3, #12
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003054:	4966      	ldr	r1, [pc, #408]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00a      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003068:	4b61      	ldr	r3, [pc, #388]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003076:	495e      	ldr	r1, [pc, #376]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800308a:	4b59      	ldr	r3, [pc, #356]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003090:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003098:	4955      	ldr	r1, [pc, #340]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030ac:	4b50      	ldr	r3, [pc, #320]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	494d      	ldr	r1, [pc, #308]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00a      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80030ce:	4b48      	ldr	r3, [pc, #288]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	4944      	ldr	r1, [pc, #272]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00a      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80030f0:	4b3f      	ldr	r3, [pc, #252]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fe:	493c      	ldr	r1, [pc, #240]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003112:	4b37      	ldr	r3, [pc, #220]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003118:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003120:	4933      	ldr	r1, [pc, #204]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003134:	4b2e      	ldr	r3, [pc, #184]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003142:	492b      	ldr	r1, [pc, #172]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d011      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003156:	4b26      	ldr	r3, [pc, #152]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003164:	4922      	ldr	r1, [pc, #136]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003174:	d101      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003176:	2301      	movs	r3, #1
 8003178:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003186:	2301      	movs	r3, #1
 8003188:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003196:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a4:	4912      	ldr	r1, [pc, #72]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00b      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031b8:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031c8:	4909      	ldr	r1, [pc, #36]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d006      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80d9 	beq.w	8003396 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031e4:	4b02      	ldr	r3, [pc, #8]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a01      	ldr	r2, [pc, #4]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031ee:	e001      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80031f0:	40023800 	.word	0x40023800
 80031f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f6:	f7fe f8d3 	bl	80013a0 <HAL_GetTick>
 80031fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031fe:	f7fe f8cf 	bl	80013a0 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b64      	cmp	r3, #100	; 0x64
 800320a:	d901      	bls.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e194      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003210:	4b6c      	ldr	r3, [pc, #432]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f0      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d021      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11d      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003230:	4b64      	ldr	r3, [pc, #400]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003236:	0c1b      	lsrs	r3, r3, #16
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800323e:	4b61      	ldr	r3, [pc, #388]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003244:	0e1b      	lsrs	r3, r3, #24
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	019a      	lsls	r2, r3, #6
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	431a      	orrs	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	061b      	lsls	r3, r3, #24
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	071b      	lsls	r3, r3, #28
 8003264:	4957      	ldr	r1, [pc, #348]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d004      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800328a:	2b00      	cmp	r3, #0
 800328c:	d02e      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003296:	d129      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003298:	4b4a      	ldr	r3, [pc, #296]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800329a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800329e:	0c1b      	lsrs	r3, r3, #16
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032a6:	4b47      	ldr	r3, [pc, #284]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ac:	0f1b      	lsrs	r3, r3, #28
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	019a      	lsls	r2, r3, #6
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	041b      	lsls	r3, r3, #16
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	061b      	lsls	r3, r3, #24
 80032c6:	431a      	orrs	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	071b      	lsls	r3, r3, #28
 80032cc:	493d      	ldr	r1, [pc, #244]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032d4:	4b3b      	ldr	r3, [pc, #236]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032da:	f023 021f 	bic.w	r2, r3, #31
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	3b01      	subs	r3, #1
 80032e4:	4937      	ldr	r1, [pc, #220]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01d      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032f8:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032fe:	0e1b      	lsrs	r3, r3, #24
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003306:	4b2f      	ldr	r3, [pc, #188]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800330c:	0f1b      	lsrs	r3, r3, #28
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	019a      	lsls	r2, r3, #6
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	431a      	orrs	r2, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	431a      	orrs	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	071b      	lsls	r3, r3, #28
 800332c:	4925      	ldr	r1, [pc, #148]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d011      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	019a      	lsls	r2, r3, #6
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	041b      	lsls	r3, r3, #16
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	061b      	lsls	r3, r3, #24
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	071b      	lsls	r3, r3, #28
 800335c:	4919      	ldr	r1, [pc, #100]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003364:	4b17      	ldr	r3, [pc, #92]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a16      	ldr	r2, [pc, #88]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800336a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800336e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003370:	f7fe f816 	bl	80013a0 <HAL_GetTick>
 8003374:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003378:	f7fe f812 	bl	80013a0 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e0d7      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800338a:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b01      	cmp	r3, #1
 800339a:	f040 80cd 	bne.w	8003538 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033aa:	f7fd fff9 	bl	80013a0 <HAL_GetTick>
 80033ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033b0:	e00a      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033b2:	f7fd fff5 	bl	80013a0 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b64      	cmp	r3, #100	; 0x64
 80033be:	d903      	bls.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e0ba      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80033c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033c8:	4b5e      	ldr	r3, [pc, #376]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033d4:	d0ed      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x682>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d02e      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d12a      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033fe:	4b51      	ldr	r3, [pc, #324]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800340c:	4b4d      	ldr	r3, [pc, #308]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	0f1b      	lsrs	r3, r3, #28
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	019a      	lsls	r2, r3, #6
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	041b      	lsls	r3, r3, #16
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	061b      	lsls	r3, r3, #24
 800342c:	431a      	orrs	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	071b      	lsls	r3, r3, #28
 8003432:	4944      	ldr	r1, [pc, #272]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800343a:	4b42      	ldr	r3, [pc, #264]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800343c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003440:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	3b01      	subs	r3, #1
 800344a:	021b      	lsls	r3, r3, #8
 800344c:	493d      	ldr	r1, [pc, #244]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d022      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003468:	d11d      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800346a:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003470:	0e1b      	lsrs	r3, r3, #24
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003478:	4b32      	ldr	r3, [pc, #200]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	0f1b      	lsrs	r3, r3, #28
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	019a      	lsls	r2, r3, #6
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	431a      	orrs	r2, r3
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	061b      	lsls	r3, r3, #24
 8003498:	431a      	orrs	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	071b      	lsls	r3, r3, #28
 800349e:	4929      	ldr	r1, [pc, #164]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d028      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	0e1b      	lsrs	r3, r3, #24
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034c0:	4b20      	ldr	r3, [pc, #128]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	0c1b      	lsrs	r3, r3, #16
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	019a      	lsls	r2, r3, #6
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	041b      	lsls	r3, r3, #16
 80034d8:	431a      	orrs	r2, r3
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	071b      	lsls	r3, r3, #28
 80034e6:	4917      	ldr	r1, [pc, #92]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	4911      	ldr	r1, [pc, #68]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800350a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003510:	f7fd ff46 	bl	80013a0 <HAL_GetTick>
 8003514:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003516:	e008      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003518:	f7fd ff42 	bl	80013a0 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e007      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003536:	d1ef      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800

08003548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e049      	b.n	80035ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f841 	bl	80035f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	4619      	mov	r1, r3
 8003586:	4610      	mov	r0, r2
 8003588:	f000 fa00 	bl	800398c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d001      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e054      	b.n	80036ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a26      	ldr	r2, [pc, #152]	; (80036dc <HAL_TIM_Base_Start_IT+0xd0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d022      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x80>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364e:	d01d      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x80>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a22      	ldr	r2, [pc, #136]	; (80036e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d018      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x80>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a21      	ldr	r2, [pc, #132]	; (80036e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d013      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x80>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1f      	ldr	r2, [pc, #124]	; (80036e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00e      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x80>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1e      	ldr	r2, [pc, #120]	; (80036ec <HAL_TIM_Base_Start_IT+0xe0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d009      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x80>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x80>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d115      	bne.n	80036b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <HAL_TIM_Base_Start_IT+0xec>)
 8003694:	4013      	ands	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b06      	cmp	r3, #6
 800369c:	d015      	beq.n	80036ca <HAL_TIM_Base_Start_IT+0xbe>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a4:	d011      	beq.n	80036ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0201 	orr.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b6:	e008      	b.n	80036ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	e000      	b.n	80036cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40010000 	.word	0x40010000
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40000800 	.word	0x40000800
 80036e8:	40000c00 	.word	0x40000c00
 80036ec:	40010400 	.word	0x40010400
 80036f0:	40014000 	.word	0x40014000
 80036f4:	40001800 	.word	0x40001800
 80036f8:	00010007 	.word	0x00010007

080036fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b02      	cmp	r3, #2
 8003710:	d122      	bne.n	8003758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b02      	cmp	r3, #2
 800371e:	d11b      	bne.n	8003758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0202 	mvn.w	r2, #2
 8003728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f905 	bl	800394e <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f8f7 	bl	800393a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f908 	bl	8003962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b04      	cmp	r3, #4
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b04      	cmp	r3, #4
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0204 	mvn.w	r2, #4
 800377c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f8db 	bl	800394e <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8cd 	bl	800393a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f8de 	bl	8003962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d122      	bne.n	8003800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d11b      	bne.n	8003800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0208 	mvn.w	r2, #8
 80037d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2204      	movs	r2, #4
 80037d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f8b1 	bl	800394e <HAL_TIM_IC_CaptureCallback>
 80037ec:	e005      	b.n	80037fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f8a3 	bl	800393a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f8b4 	bl	8003962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b10      	cmp	r3, #16
 800380c:	d122      	bne.n	8003854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b10      	cmp	r3, #16
 800381a:	d11b      	bne.n	8003854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0210 	mvn.w	r2, #16
 8003824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2208      	movs	r2, #8
 800382a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f887 	bl	800394e <HAL_TIM_IC_CaptureCallback>
 8003840:	e005      	b.n	800384e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f879 	bl	800393a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f88a 	bl	8003962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d10e      	bne.n	8003880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d107      	bne.n	8003880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0201 	mvn.w	r2, #1
 8003878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd fa44 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	2b80      	cmp	r3, #128	; 0x80
 800388c:	d10e      	bne.n	80038ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	2b80      	cmp	r3, #128	; 0x80
 800389a:	d107      	bne.n	80038ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f91a 	bl	8003ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ba:	d10e      	bne.n	80038da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b80      	cmp	r3, #128	; 0x80
 80038c8:	d107      	bne.n	80038da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f90d 	bl	8003af4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d10e      	bne.n	8003906 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f2:	2b40      	cmp	r3, #64	; 0x40
 80038f4:	d107      	bne.n	8003906 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f838 	bl	8003976 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b20      	cmp	r3, #32
 8003912:	d10e      	bne.n	8003932 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b20      	cmp	r3, #32
 8003920:	d107      	bne.n	8003932 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f06f 0220 	mvn.w	r2, #32
 800392a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f8cd 	bl	8003acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
	...

0800398c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a40      	ldr	r2, [pc, #256]	; (8003aa0 <TIM_Base_SetConfig+0x114>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d013      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039aa:	d00f      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a3d      	ldr	r2, [pc, #244]	; (8003aa4 <TIM_Base_SetConfig+0x118>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00b      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a3c      	ldr	r2, [pc, #240]	; (8003aa8 <TIM_Base_SetConfig+0x11c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d007      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a3b      	ldr	r2, [pc, #236]	; (8003aac <TIM_Base_SetConfig+0x120>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a3a      	ldr	r2, [pc, #232]	; (8003ab0 <TIM_Base_SetConfig+0x124>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d108      	bne.n	80039de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a2f      	ldr	r2, [pc, #188]	; (8003aa0 <TIM_Base_SetConfig+0x114>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d02b      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ec:	d027      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2c      	ldr	r2, [pc, #176]	; (8003aa4 <TIM_Base_SetConfig+0x118>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d023      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a2b      	ldr	r2, [pc, #172]	; (8003aa8 <TIM_Base_SetConfig+0x11c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01f      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a2a      	ldr	r2, [pc, #168]	; (8003aac <TIM_Base_SetConfig+0x120>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01b      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a29      	ldr	r2, [pc, #164]	; (8003ab0 <TIM_Base_SetConfig+0x124>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d017      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a28      	ldr	r2, [pc, #160]	; (8003ab4 <TIM_Base_SetConfig+0x128>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a27      	ldr	r2, [pc, #156]	; (8003ab8 <TIM_Base_SetConfig+0x12c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00f      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a26      	ldr	r2, [pc, #152]	; (8003abc <TIM_Base_SetConfig+0x130>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00b      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a25      	ldr	r2, [pc, #148]	; (8003ac0 <TIM_Base_SetConfig+0x134>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d007      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a24      	ldr	r2, [pc, #144]	; (8003ac4 <TIM_Base_SetConfig+0x138>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d003      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a23      	ldr	r2, [pc, #140]	; (8003ac8 <TIM_Base_SetConfig+0x13c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d108      	bne.n	8003a50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <TIM_Base_SetConfig+0x114>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d003      	beq.n	8003a84 <TIM_Base_SetConfig+0xf8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <TIM_Base_SetConfig+0x124>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d103      	bne.n	8003a8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	615a      	str	r2, [r3, #20]
}
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	40000c00 	.word	0x40000c00
 8003ab0:	40010400 	.word	0x40010400
 8003ab4:	40014000 	.word	0x40014000
 8003ab8:	40014400 	.word	0x40014400
 8003abc:	40014800 	.word	0x40014800
 8003ac0:	40001800 	.word	0x40001800
 8003ac4:	40001c00 	.word	0x40001c00
 8003ac8:	40002000 	.word	0x40002000

08003acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e040      	b.n	8003b9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd f9e0 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2224      	movs	r2, #36	; 0x24
 8003b34:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fc66 	bl	8004418 <UART_SetConfig>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e022      	b.n	8003b9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 febe 	bl	80048e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 ff45 	bl	8004a24 <UART_CheckIdleState>
 8003b9a:	4603      	mov	r3, r0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d171      	bne.n	8003ca0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_UART_Transmit+0x24>
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e06a      	b.n	8003ca2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2221      	movs	r2, #33	; 0x21
 8003bd8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bda:	f7fd fbe1 	bl	80013a0 <HAL_GetTick>
 8003bde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	88fa      	ldrh	r2, [r7, #6]
 8003be4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	88fa      	ldrh	r2, [r7, #6]
 8003bec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf8:	d108      	bne.n	8003c0c <HAL_UART_Transmit+0x68>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d104      	bne.n	8003c0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	e003      	b.n	8003c14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c14:	e02c      	b.n	8003c70 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2180      	movs	r1, #128	; 0x80
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 ff36 	bl	8004a92 <UART_WaitOnFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e038      	b.n	8003ca2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	3302      	adds	r3, #2
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	e007      	b.n	8003c5e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	781a      	ldrb	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1cc      	bne.n	8003c16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2200      	movs	r2, #0
 8003c84:	2140      	movs	r1, #64	; 0x40
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 ff03 	bl	8004a92 <UART_WaitOnFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e005      	b.n	8003ca2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e000      	b.n	8003ca2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003ca0:	2302      	movs	r3, #2
  }
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3720      	adds	r7, #32
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b08a      	sub	sp, #40	; 0x28
 8003cae:	af02      	add	r7, sp, #8
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	f040 80b1 	bne.w	8003e28 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_UART_Receive+0x28>
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e0a9      	b.n	8003e2a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2222      	movs	r2, #34	; 0x22
 8003ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cec:	f7fd fb58 	bl	80013a0 <HAL_GetTick>
 8003cf0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	88fa      	ldrh	r2, [r7, #6]
 8003cf6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0a:	d10e      	bne.n	8003d2a <HAL_UART_Receive+0x80>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d105      	bne.n	8003d20 <HAL_UART_Receive+0x76>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d1e:	e02d      	b.n	8003d7c <HAL_UART_Receive+0xd2>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	22ff      	movs	r2, #255	; 0xff
 8003d24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d28:	e028      	b.n	8003d7c <HAL_UART_Receive+0xd2>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10d      	bne.n	8003d4e <HAL_UART_Receive+0xa4>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d104      	bne.n	8003d44 <HAL_UART_Receive+0x9a>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	22ff      	movs	r2, #255	; 0xff
 8003d3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d42:	e01b      	b.n	8003d7c <HAL_UART_Receive+0xd2>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	227f      	movs	r2, #127	; 0x7f
 8003d48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d4c:	e016      	b.n	8003d7c <HAL_UART_Receive+0xd2>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d56:	d10d      	bne.n	8003d74 <HAL_UART_Receive+0xca>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <HAL_UART_Receive+0xc0>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	227f      	movs	r2, #127	; 0x7f
 8003d64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d68:	e008      	b.n	8003d7c <HAL_UART_Receive+0xd2>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	223f      	movs	r2, #63	; 0x3f
 8003d6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d72:	e003      	b.n	8003d7c <HAL_UART_Receive+0xd2>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d82:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8c:	d108      	bne.n	8003da0 <HAL_UART_Receive+0xf6>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d104      	bne.n	8003da0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	e003      	b.n	8003da8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003da8:	e032      	b.n	8003e10 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2200      	movs	r2, #0
 8003db2:	2120      	movs	r1, #32
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fe6c 	bl	8004a92 <UART_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e032      	b.n	8003e2a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10c      	bne.n	8003de4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	8a7b      	ldrh	r3, [r7, #18]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	3302      	adds	r3, #2
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	e00c      	b.n	8003dfe <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	8a7b      	ldrh	r3, [r7, #18]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	4013      	ands	r3, r2
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1c6      	bne.n	8003daa <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	e000      	b.n	8003e2a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
  }
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3720      	adds	r7, #32
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b0ba      	sub	sp, #232	; 0xe8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e62:	4013      	ands	r3, r2
 8003e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003e68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d115      	bne.n	8003e9c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e74:	f003 0320 	and.w	r3, r3, #32
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00f      	beq.n	8003e9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d009      	beq.n	8003e9c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8297 	beq.w	80043c0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	4798      	blx	r3
      }
      return;
 8003e9a:	e291      	b.n	80043c0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8117 	beq.w	80040d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003eb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003eb6:	4b85      	ldr	r3, [pc, #532]	; (80040cc <HAL_UART_IRQHandler+0x298>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 810a 	beq.w	80040d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d011      	beq.n	8003ef0 <HAL_UART_IRQHandler+0xbc>
 8003ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00b      	beq.n	8003ef0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2201      	movs	r2, #1
 8003ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee6:	f043 0201 	orr.w	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d011      	beq.n	8003f20 <HAL_UART_IRQHandler+0xec>
 8003efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00b      	beq.n	8003f20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f16:	f043 0204 	orr.w	r2, r3, #4
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d011      	beq.n	8003f50 <HAL_UART_IRQHandler+0x11c>
 8003f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00b      	beq.n	8003f50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f46:	f043 0202 	orr.w	r2, r3, #2
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d017      	beq.n	8003f8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d105      	bne.n	8003f74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00b      	beq.n	8003f8c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2208      	movs	r2, #8
 8003f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f82:	f043 0208 	orr.w	r2, r3, #8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d012      	beq.n	8003fbe <HAL_UART_IRQHandler+0x18a>
 8003f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00c      	beq.n	8003fbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb4:	f043 0220 	orr.w	r2, r3, #32
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 81fd 	beq.w	80043c4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d005      	beq.n	8004016 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800400a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800400e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004012:	2b00      	cmp	r3, #0
 8004014:	d04f      	beq.n	80040b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fe01 	bl	8004c1e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004026:	2b40      	cmp	r3, #64	; 0x40
 8004028:	d141      	bne.n	80040ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3308      	adds	r3, #8
 8004030:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3308      	adds	r3, #8
 8004052:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004056:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800405a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004062:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800406e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1d9      	bne.n	800402a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407a:	2b00      	cmp	r3, #0
 800407c:	d013      	beq.n	80040a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004082:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <HAL_UART_IRQHandler+0x29c>)
 8004084:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408a:	4618      	mov	r0, r3
 800408c:	f7fd fb0a 	bl	80016a4 <HAL_DMA_Abort_IT>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d017      	beq.n	80040c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040a0:	4610      	mov	r0, r2
 80040a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a4:	e00f      	b.n	80040c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f9a0 	bl	80043ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	e00b      	b.n	80040c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f99c 	bl	80043ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b4:	e007      	b.n	80040c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f998 	bl	80043ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80040c4:	e17e      	b.n	80043c4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c6:	bf00      	nop
    return;
 80040c8:	e17c      	b.n	80043c4 <HAL_UART_IRQHandler+0x590>
 80040ca:	bf00      	nop
 80040cc:	04000120 	.word	0x04000120
 80040d0:	08004ce7 	.word	0x08004ce7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d8:	2b01      	cmp	r3, #1
 80040da:	f040 814c 	bne.w	8004376 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8145 	beq.w	8004376 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 813e 	beq.w	8004376 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2210      	movs	r2, #16
 8004100:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	f040 80b6 	bne.w	800427e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800411e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8150 	beq.w	80043c8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800412e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004132:	429a      	cmp	r2, r3
 8004134:	f080 8148 	bcs.w	80043c8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800413e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800414c:	f000 8086 	beq.w	800425c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004164:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800417a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800417e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004186:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1da      	bne.n	8004150 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3308      	adds	r3, #8
 80041a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3308      	adds	r3, #8
 80041ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e1      	bne.n	800419a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3308      	adds	r3, #8
 80041dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3308      	adds	r3, #8
 80041f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004200:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e3      	bne.n	80041d6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800422a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800422c:	f023 0310 	bic.w	r3, r3, #16
 8004230:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800423e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004240:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004244:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004246:	e841 2300 	strex	r3, r2, [r1]
 800424a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800424c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1e4      	bne.n	800421c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004256:	4618      	mov	r0, r3
 8004258:	f7fd f9b4 	bl	80015c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800426e:	b29b      	uxth	r3, r3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	b29b      	uxth	r3, r3
 8004274:	4619      	mov	r1, r3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f8c2 	bl	8004400 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800427c:	e0a4      	b.n	80043c8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800428a:	b29b      	uxth	r3, r3
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8096 	beq.w	80043cc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80042a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 8091 	beq.w	80043cc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042cc:	647b      	str	r3, [r7, #68]	; 0x44
 80042ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e4      	bne.n	80042aa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3308      	adds	r3, #8
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	623b      	str	r3, [r7, #32]
   return(result);
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	f023 0301 	bic.w	r3, r3, #1
 80042f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3308      	adds	r3, #8
 8004300:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004304:	633a      	str	r2, [r7, #48]	; 0x30
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800430a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e3      	bne.n	80042e0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	60fb      	str	r3, [r7, #12]
   return(result);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f023 0310 	bic.w	r3, r3, #16
 8004340:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800434e:	61fb      	str	r3, [r7, #28]
 8004350:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	69b9      	ldr	r1, [r7, #24]
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	617b      	str	r3, [r7, #20]
   return(result);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e4      	bne.n	800432c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800436c:	4619      	mov	r1, r3
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f846 	bl	8004400 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004374:	e02a      	b.n	80043cc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00e      	beq.n	80043a0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01c      	beq.n	80043d0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	4798      	blx	r3
    }
    return;
 800439e:	e017      	b.n	80043d0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d012      	beq.n	80043d2 <HAL_UART_IRQHandler+0x59e>
 80043ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00c      	beq.n	80043d2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fcaa 	bl	8004d12 <UART_EndTransmit_IT>
    return;
 80043be:	e008      	b.n	80043d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80043c0:	bf00      	nop
 80043c2:	e006      	b.n	80043d2 <HAL_UART_IRQHandler+0x59e>
    return;
 80043c4:	bf00      	nop
 80043c6:	e004      	b.n	80043d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80043c8:	bf00      	nop
 80043ca:	e002      	b.n	80043d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80043cc:	bf00      	nop
 80043ce:	e000      	b.n	80043d2 <HAL_UART_IRQHandler+0x59e>
    return;
 80043d0:	bf00      	nop
  }

}
 80043d2:	37e8      	adds	r7, #232	; 0xe8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4ba6      	ldr	r3, [pc, #664]	; (80046dc <UART_SetConfig+0x2c4>)
 8004444:	4013      	ands	r3, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	6979      	ldr	r1, [r7, #20]
 800444c:	430b      	orrs	r3, r1
 800444e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	430a      	orrs	r2, r1
 8004488:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a94      	ldr	r2, [pc, #592]	; (80046e0 <UART_SetConfig+0x2c8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d120      	bne.n	80044d6 <UART_SetConfig+0xbe>
 8004494:	4b93      	ldr	r3, [pc, #588]	; (80046e4 <UART_SetConfig+0x2cc>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d816      	bhi.n	80044d0 <UART_SetConfig+0xb8>
 80044a2:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <UART_SetConfig+0x90>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044c5 	.word	0x080044c5
 80044b0:	080044bf 	.word	0x080044bf
 80044b4:	080044cb 	.word	0x080044cb
 80044b8:	2301      	movs	r3, #1
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e150      	b.n	8004760 <UART_SetConfig+0x348>
 80044be:	2302      	movs	r3, #2
 80044c0:	77fb      	strb	r3, [r7, #31]
 80044c2:	e14d      	b.n	8004760 <UART_SetConfig+0x348>
 80044c4:	2304      	movs	r3, #4
 80044c6:	77fb      	strb	r3, [r7, #31]
 80044c8:	e14a      	b.n	8004760 <UART_SetConfig+0x348>
 80044ca:	2308      	movs	r3, #8
 80044cc:	77fb      	strb	r3, [r7, #31]
 80044ce:	e147      	b.n	8004760 <UART_SetConfig+0x348>
 80044d0:	2310      	movs	r3, #16
 80044d2:	77fb      	strb	r3, [r7, #31]
 80044d4:	e144      	b.n	8004760 <UART_SetConfig+0x348>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a83      	ldr	r2, [pc, #524]	; (80046e8 <UART_SetConfig+0x2d0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d132      	bne.n	8004546 <UART_SetConfig+0x12e>
 80044e0:	4b80      	ldr	r3, [pc, #512]	; (80046e4 <UART_SetConfig+0x2cc>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b0c      	cmp	r3, #12
 80044ec:	d828      	bhi.n	8004540 <UART_SetConfig+0x128>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0xdc>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004529 	.word	0x08004529
 80044f8:	08004541 	.word	0x08004541
 80044fc:	08004541 	.word	0x08004541
 8004500:	08004541 	.word	0x08004541
 8004504:	08004535 	.word	0x08004535
 8004508:	08004541 	.word	0x08004541
 800450c:	08004541 	.word	0x08004541
 8004510:	08004541 	.word	0x08004541
 8004514:	0800452f 	.word	0x0800452f
 8004518:	08004541 	.word	0x08004541
 800451c:	08004541 	.word	0x08004541
 8004520:	08004541 	.word	0x08004541
 8004524:	0800453b 	.word	0x0800453b
 8004528:	2300      	movs	r3, #0
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e118      	b.n	8004760 <UART_SetConfig+0x348>
 800452e:	2302      	movs	r3, #2
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e115      	b.n	8004760 <UART_SetConfig+0x348>
 8004534:	2304      	movs	r3, #4
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e112      	b.n	8004760 <UART_SetConfig+0x348>
 800453a:	2308      	movs	r3, #8
 800453c:	77fb      	strb	r3, [r7, #31]
 800453e:	e10f      	b.n	8004760 <UART_SetConfig+0x348>
 8004540:	2310      	movs	r3, #16
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e10c      	b.n	8004760 <UART_SetConfig+0x348>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a68      	ldr	r2, [pc, #416]	; (80046ec <UART_SetConfig+0x2d4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d120      	bne.n	8004592 <UART_SetConfig+0x17a>
 8004550:	4b64      	ldr	r3, [pc, #400]	; (80046e4 <UART_SetConfig+0x2cc>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800455a:	2b30      	cmp	r3, #48	; 0x30
 800455c:	d013      	beq.n	8004586 <UART_SetConfig+0x16e>
 800455e:	2b30      	cmp	r3, #48	; 0x30
 8004560:	d814      	bhi.n	800458c <UART_SetConfig+0x174>
 8004562:	2b20      	cmp	r3, #32
 8004564:	d009      	beq.n	800457a <UART_SetConfig+0x162>
 8004566:	2b20      	cmp	r3, #32
 8004568:	d810      	bhi.n	800458c <UART_SetConfig+0x174>
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <UART_SetConfig+0x15c>
 800456e:	2b10      	cmp	r3, #16
 8004570:	d006      	beq.n	8004580 <UART_SetConfig+0x168>
 8004572:	e00b      	b.n	800458c <UART_SetConfig+0x174>
 8004574:	2300      	movs	r3, #0
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e0f2      	b.n	8004760 <UART_SetConfig+0x348>
 800457a:	2302      	movs	r3, #2
 800457c:	77fb      	strb	r3, [r7, #31]
 800457e:	e0ef      	b.n	8004760 <UART_SetConfig+0x348>
 8004580:	2304      	movs	r3, #4
 8004582:	77fb      	strb	r3, [r7, #31]
 8004584:	e0ec      	b.n	8004760 <UART_SetConfig+0x348>
 8004586:	2308      	movs	r3, #8
 8004588:	77fb      	strb	r3, [r7, #31]
 800458a:	e0e9      	b.n	8004760 <UART_SetConfig+0x348>
 800458c:	2310      	movs	r3, #16
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e0e6      	b.n	8004760 <UART_SetConfig+0x348>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a56      	ldr	r2, [pc, #344]	; (80046f0 <UART_SetConfig+0x2d8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d120      	bne.n	80045de <UART_SetConfig+0x1c6>
 800459c:	4b51      	ldr	r3, [pc, #324]	; (80046e4 <UART_SetConfig+0x2cc>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045a6:	2bc0      	cmp	r3, #192	; 0xc0
 80045a8:	d013      	beq.n	80045d2 <UART_SetConfig+0x1ba>
 80045aa:	2bc0      	cmp	r3, #192	; 0xc0
 80045ac:	d814      	bhi.n	80045d8 <UART_SetConfig+0x1c0>
 80045ae:	2b80      	cmp	r3, #128	; 0x80
 80045b0:	d009      	beq.n	80045c6 <UART_SetConfig+0x1ae>
 80045b2:	2b80      	cmp	r3, #128	; 0x80
 80045b4:	d810      	bhi.n	80045d8 <UART_SetConfig+0x1c0>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <UART_SetConfig+0x1a8>
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d006      	beq.n	80045cc <UART_SetConfig+0x1b4>
 80045be:	e00b      	b.n	80045d8 <UART_SetConfig+0x1c0>
 80045c0:	2300      	movs	r3, #0
 80045c2:	77fb      	strb	r3, [r7, #31]
 80045c4:	e0cc      	b.n	8004760 <UART_SetConfig+0x348>
 80045c6:	2302      	movs	r3, #2
 80045c8:	77fb      	strb	r3, [r7, #31]
 80045ca:	e0c9      	b.n	8004760 <UART_SetConfig+0x348>
 80045cc:	2304      	movs	r3, #4
 80045ce:	77fb      	strb	r3, [r7, #31]
 80045d0:	e0c6      	b.n	8004760 <UART_SetConfig+0x348>
 80045d2:	2308      	movs	r3, #8
 80045d4:	77fb      	strb	r3, [r7, #31]
 80045d6:	e0c3      	b.n	8004760 <UART_SetConfig+0x348>
 80045d8:	2310      	movs	r3, #16
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e0c0      	b.n	8004760 <UART_SetConfig+0x348>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a44      	ldr	r2, [pc, #272]	; (80046f4 <UART_SetConfig+0x2dc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d125      	bne.n	8004634 <UART_SetConfig+0x21c>
 80045e8:	4b3e      	ldr	r3, [pc, #248]	; (80046e4 <UART_SetConfig+0x2cc>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045f6:	d017      	beq.n	8004628 <UART_SetConfig+0x210>
 80045f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045fc:	d817      	bhi.n	800462e <UART_SetConfig+0x216>
 80045fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004602:	d00b      	beq.n	800461c <UART_SetConfig+0x204>
 8004604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004608:	d811      	bhi.n	800462e <UART_SetConfig+0x216>
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <UART_SetConfig+0x1fe>
 800460e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004612:	d006      	beq.n	8004622 <UART_SetConfig+0x20a>
 8004614:	e00b      	b.n	800462e <UART_SetConfig+0x216>
 8004616:	2300      	movs	r3, #0
 8004618:	77fb      	strb	r3, [r7, #31]
 800461a:	e0a1      	b.n	8004760 <UART_SetConfig+0x348>
 800461c:	2302      	movs	r3, #2
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e09e      	b.n	8004760 <UART_SetConfig+0x348>
 8004622:	2304      	movs	r3, #4
 8004624:	77fb      	strb	r3, [r7, #31]
 8004626:	e09b      	b.n	8004760 <UART_SetConfig+0x348>
 8004628:	2308      	movs	r3, #8
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e098      	b.n	8004760 <UART_SetConfig+0x348>
 800462e:	2310      	movs	r3, #16
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e095      	b.n	8004760 <UART_SetConfig+0x348>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a2f      	ldr	r2, [pc, #188]	; (80046f8 <UART_SetConfig+0x2e0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d125      	bne.n	800468a <UART_SetConfig+0x272>
 800463e:	4b29      	ldr	r3, [pc, #164]	; (80046e4 <UART_SetConfig+0x2cc>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004644:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004648:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800464c:	d017      	beq.n	800467e <UART_SetConfig+0x266>
 800464e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004652:	d817      	bhi.n	8004684 <UART_SetConfig+0x26c>
 8004654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004658:	d00b      	beq.n	8004672 <UART_SetConfig+0x25a>
 800465a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800465e:	d811      	bhi.n	8004684 <UART_SetConfig+0x26c>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <UART_SetConfig+0x254>
 8004664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004668:	d006      	beq.n	8004678 <UART_SetConfig+0x260>
 800466a:	e00b      	b.n	8004684 <UART_SetConfig+0x26c>
 800466c:	2301      	movs	r3, #1
 800466e:	77fb      	strb	r3, [r7, #31]
 8004670:	e076      	b.n	8004760 <UART_SetConfig+0x348>
 8004672:	2302      	movs	r3, #2
 8004674:	77fb      	strb	r3, [r7, #31]
 8004676:	e073      	b.n	8004760 <UART_SetConfig+0x348>
 8004678:	2304      	movs	r3, #4
 800467a:	77fb      	strb	r3, [r7, #31]
 800467c:	e070      	b.n	8004760 <UART_SetConfig+0x348>
 800467e:	2308      	movs	r3, #8
 8004680:	77fb      	strb	r3, [r7, #31]
 8004682:	e06d      	b.n	8004760 <UART_SetConfig+0x348>
 8004684:	2310      	movs	r3, #16
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	e06a      	b.n	8004760 <UART_SetConfig+0x348>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a1b      	ldr	r2, [pc, #108]	; (80046fc <UART_SetConfig+0x2e4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d138      	bne.n	8004706 <UART_SetConfig+0x2ee>
 8004694:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <UART_SetConfig+0x2cc>)
 8004696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800469e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046a2:	d017      	beq.n	80046d4 <UART_SetConfig+0x2bc>
 80046a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046a8:	d82a      	bhi.n	8004700 <UART_SetConfig+0x2e8>
 80046aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ae:	d00b      	beq.n	80046c8 <UART_SetConfig+0x2b0>
 80046b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b4:	d824      	bhi.n	8004700 <UART_SetConfig+0x2e8>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <UART_SetConfig+0x2aa>
 80046ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046be:	d006      	beq.n	80046ce <UART_SetConfig+0x2b6>
 80046c0:	e01e      	b.n	8004700 <UART_SetConfig+0x2e8>
 80046c2:	2300      	movs	r3, #0
 80046c4:	77fb      	strb	r3, [r7, #31]
 80046c6:	e04b      	b.n	8004760 <UART_SetConfig+0x348>
 80046c8:	2302      	movs	r3, #2
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e048      	b.n	8004760 <UART_SetConfig+0x348>
 80046ce:	2304      	movs	r3, #4
 80046d0:	77fb      	strb	r3, [r7, #31]
 80046d2:	e045      	b.n	8004760 <UART_SetConfig+0x348>
 80046d4:	2308      	movs	r3, #8
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e042      	b.n	8004760 <UART_SetConfig+0x348>
 80046da:	bf00      	nop
 80046dc:	efff69f3 	.word	0xefff69f3
 80046e0:	40011000 	.word	0x40011000
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40004400 	.word	0x40004400
 80046ec:	40004800 	.word	0x40004800
 80046f0:	40004c00 	.word	0x40004c00
 80046f4:	40005000 	.word	0x40005000
 80046f8:	40011400 	.word	0x40011400
 80046fc:	40007800 	.word	0x40007800
 8004700:	2310      	movs	r3, #16
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e02c      	b.n	8004760 <UART_SetConfig+0x348>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a72      	ldr	r2, [pc, #456]	; (80048d4 <UART_SetConfig+0x4bc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d125      	bne.n	800475c <UART_SetConfig+0x344>
 8004710:	4b71      	ldr	r3, [pc, #452]	; (80048d8 <UART_SetConfig+0x4c0>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800471a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800471e:	d017      	beq.n	8004750 <UART_SetConfig+0x338>
 8004720:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004724:	d817      	bhi.n	8004756 <UART_SetConfig+0x33e>
 8004726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800472a:	d00b      	beq.n	8004744 <UART_SetConfig+0x32c>
 800472c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004730:	d811      	bhi.n	8004756 <UART_SetConfig+0x33e>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <UART_SetConfig+0x326>
 8004736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800473a:	d006      	beq.n	800474a <UART_SetConfig+0x332>
 800473c:	e00b      	b.n	8004756 <UART_SetConfig+0x33e>
 800473e:	2300      	movs	r3, #0
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	e00d      	b.n	8004760 <UART_SetConfig+0x348>
 8004744:	2302      	movs	r3, #2
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e00a      	b.n	8004760 <UART_SetConfig+0x348>
 800474a:	2304      	movs	r3, #4
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e007      	b.n	8004760 <UART_SetConfig+0x348>
 8004750:	2308      	movs	r3, #8
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	e004      	b.n	8004760 <UART_SetConfig+0x348>
 8004756:	2310      	movs	r3, #16
 8004758:	77fb      	strb	r3, [r7, #31]
 800475a:	e001      	b.n	8004760 <UART_SetConfig+0x348>
 800475c:	2310      	movs	r3, #16
 800475e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004768:	d15b      	bne.n	8004822 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800476a:	7ffb      	ldrb	r3, [r7, #31]
 800476c:	2b08      	cmp	r3, #8
 800476e:	d828      	bhi.n	80047c2 <UART_SetConfig+0x3aa>
 8004770:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <UART_SetConfig+0x360>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	0800479d 	.word	0x0800479d
 800477c:	080047a5 	.word	0x080047a5
 8004780:	080047ad 	.word	0x080047ad
 8004784:	080047c3 	.word	0x080047c3
 8004788:	080047b3 	.word	0x080047b3
 800478c:	080047c3 	.word	0x080047c3
 8004790:	080047c3 	.word	0x080047c3
 8004794:	080047c3 	.word	0x080047c3
 8004798:	080047bb 	.word	0x080047bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800479c:	f7fe fa8a 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 80047a0:	61b8      	str	r0, [r7, #24]
        break;
 80047a2:	e013      	b.n	80047cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047a4:	f7fe fa9a 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 80047a8:	61b8      	str	r0, [r7, #24]
        break;
 80047aa:	e00f      	b.n	80047cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047ac:	4b4b      	ldr	r3, [pc, #300]	; (80048dc <UART_SetConfig+0x4c4>)
 80047ae:	61bb      	str	r3, [r7, #24]
        break;
 80047b0:	e00c      	b.n	80047cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b2:	f7fe f96d 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 80047b6:	61b8      	str	r0, [r7, #24]
        break;
 80047b8:	e008      	b.n	80047cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047be:	61bb      	str	r3, [r7, #24]
        break;
 80047c0:	e004      	b.n	80047cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	77bb      	strb	r3, [r7, #30]
        break;
 80047ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d074      	beq.n	80048bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	005a      	lsls	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	441a      	add	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b0f      	cmp	r3, #15
 80047ec:	d916      	bls.n	800481c <UART_SetConfig+0x404>
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f4:	d212      	bcs.n	800481c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f023 030f 	bic.w	r3, r3, #15
 80047fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	085b      	lsrs	r3, r3, #1
 8004804:	b29b      	uxth	r3, r3
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	b29a      	uxth	r2, r3
 800480c:	89fb      	ldrh	r3, [r7, #14]
 800480e:	4313      	orrs	r3, r2
 8004810:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	89fa      	ldrh	r2, [r7, #14]
 8004818:	60da      	str	r2, [r3, #12]
 800481a:	e04f      	b.n	80048bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	77bb      	strb	r3, [r7, #30]
 8004820:	e04c      	b.n	80048bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004822:	7ffb      	ldrb	r3, [r7, #31]
 8004824:	2b08      	cmp	r3, #8
 8004826:	d828      	bhi.n	800487a <UART_SetConfig+0x462>
 8004828:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <UART_SetConfig+0x418>)
 800482a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482e:	bf00      	nop
 8004830:	08004855 	.word	0x08004855
 8004834:	0800485d 	.word	0x0800485d
 8004838:	08004865 	.word	0x08004865
 800483c:	0800487b 	.word	0x0800487b
 8004840:	0800486b 	.word	0x0800486b
 8004844:	0800487b 	.word	0x0800487b
 8004848:	0800487b 	.word	0x0800487b
 800484c:	0800487b 	.word	0x0800487b
 8004850:	08004873 	.word	0x08004873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004854:	f7fe fa2e 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8004858:	61b8      	str	r0, [r7, #24]
        break;
 800485a:	e013      	b.n	8004884 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800485c:	f7fe fa3e 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 8004860:	61b8      	str	r0, [r7, #24]
        break;
 8004862:	e00f      	b.n	8004884 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004864:	4b1d      	ldr	r3, [pc, #116]	; (80048dc <UART_SetConfig+0x4c4>)
 8004866:	61bb      	str	r3, [r7, #24]
        break;
 8004868:	e00c      	b.n	8004884 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800486a:	f7fe f911 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 800486e:	61b8      	str	r0, [r7, #24]
        break;
 8004870:	e008      	b.n	8004884 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004876:	61bb      	str	r3, [r7, #24]
        break;
 8004878:	e004      	b.n	8004884 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	77bb      	strb	r3, [r7, #30]
        break;
 8004882:	bf00      	nop
    }

    if (pclk != 0U)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d018      	beq.n	80048bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	085a      	lsrs	r2, r3, #1
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	441a      	add	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b0f      	cmp	r3, #15
 80048a2:	d909      	bls.n	80048b8 <UART_SetConfig+0x4a0>
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048aa:	d205      	bcs.n	80048b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60da      	str	r2, [r3, #12]
 80048b6:	e001      	b.n	80048bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3720      	adds	r7, #32
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40007c00 	.word	0x40007c00
 80048d8:	40023800 	.word	0x40023800
 80048dc:	00f42400 	.word	0x00f42400

080048e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01a      	beq.n	80049f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049de:	d10a      	bne.n	80049f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	605a      	str	r2, [r3, #4]
  }
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a34:	f7fc fcb4 	bl	80013a0 <HAL_GetTick>
 8004a38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d10e      	bne.n	8004a66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f81b 	bl	8004a92 <UART_WaitOnFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e011      	b.n	8004a8a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b09c      	sub	sp, #112	; 0x70
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	603b      	str	r3, [r7, #0]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa2:	e0a7      	b.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aaa:	f000 80a3 	beq.w	8004bf4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aae:	f7fc fc77 	bl	80013a0 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d302      	bcc.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d13f      	bne.n	8004b44 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ad8:	667b      	str	r3, [r7, #100]	; 0x64
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ae4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ae8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e6      	bne.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3308      	adds	r3, #8
 8004afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3308      	adds	r3, #8
 8004b14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b16:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e5      	bne.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e068      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d050      	beq.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b60:	d148      	bne.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b6a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b8c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e6      	bne.n	8004b6c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	613b      	str	r3, [r7, #16]
   return(result);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3308      	adds	r3, #8
 8004bbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bbe:	623a      	str	r2, [r7, #32]
 8004bc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc2:	69f9      	ldr	r1, [r7, #28]
 8004bc4:	6a3a      	ldr	r2, [r7, #32]
 8004bc6:	e841 2300 	strex	r3, r2, [r1]
 8004bca:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1e5      	bne.n	8004b9e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e010      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69da      	ldr	r2, [r3, #28]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	bf0c      	ite	eq
 8004c04:	2301      	moveq	r3, #1
 8004c06:	2300      	movne	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	f43f af48 	beq.w	8004aa4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3770      	adds	r7, #112	; 0x70
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b095      	sub	sp, #84	; 0x54
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c44:	643b      	str	r3, [r7, #64]	; 0x40
 8004c46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e6      	bne.n	8004c26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f023 0301 	bic.w	r3, r3, #1
 8004c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3308      	adds	r3, #8
 8004c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c80:	e841 2300 	strex	r3, r2, [r1]
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e5      	bne.n	8004c58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d118      	bne.n	8004cc6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f023 0310 	bic.w	r3, r3, #16
 8004ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6979      	ldr	r1, [r7, #20]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e6      	bne.n	8004c94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004cda:	bf00      	nop
 8004cdc:	3754      	adds	r7, #84	; 0x54
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f7ff fb71 	bl	80043ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d0a:	bf00      	nop
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b088      	sub	sp, #32
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6979      	ldr	r1, [r7, #20]
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	613b      	str	r3, [r7, #16]
   return(result);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e6      	bne.n	8004d1a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff fb3d 	bl	80043d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d5e:	bf00      	nop
 8004d60:	3720      	adds	r7, #32
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d68:	b084      	sub	sp, #16
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	f107 001c 	add.w	r0, r7, #28
 8004d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d120      	bne.n	8004dc2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	4b20      	ldr	r3, [pc, #128]	; (8004e14 <USB_CoreInit+0xac>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d105      	bne.n	8004db6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fa96 	bl	80052e8 <USB_CoreReset>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	73fb      	strb	r3, [r7, #15]
 8004dc0:	e010      	b.n	8004de4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fa8a 	bl	80052e8 <USB_CoreReset>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d10b      	bne.n	8004e02 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f043 0206 	orr.w	r2, r3, #6
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f043 0220 	orr.w	r2, r3, #32
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e0e:	b004      	add	sp, #16
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	ffbdffbf 	.word	0xffbdffbf

08004e18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f023 0201 	bic.w	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	460b      	mov	r3, r1
 8004e44:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e56:	78fb      	ldrb	r3, [r7, #3]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d115      	bne.n	8004e88 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e68:	2001      	movs	r0, #1
 8004e6a:	f7fc faa5 	bl	80013b8 <HAL_Delay>
      ms++;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3301      	adds	r3, #1
 8004e72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fa29 	bl	80052cc <USB_GetMode>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d01e      	beq.n	8004ebe <USB_SetCurrentMode+0x84>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b31      	cmp	r3, #49	; 0x31
 8004e84:	d9f0      	bls.n	8004e68 <USB_SetCurrentMode+0x2e>
 8004e86:	e01a      	b.n	8004ebe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d115      	bne.n	8004eba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e9a:	2001      	movs	r0, #1
 8004e9c:	f7fc fa8c 	bl	80013b8 <HAL_Delay>
      ms++;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fa10 	bl	80052cc <USB_GetMode>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <USB_SetCurrentMode+0x84>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b31      	cmp	r3, #49	; 0x31
 8004eb6:	d9f0      	bls.n	8004e9a <USB_SetCurrentMode+0x60>
 8004eb8:	e001      	b.n	8004ebe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e005      	b.n	8004eca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2b32      	cmp	r3, #50	; 0x32
 8004ec2:	d101      	bne.n	8004ec8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b086      	sub	sp, #24
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004eee:	2300      	movs	r3, #0
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	e009      	b.n	8004f08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	3340      	adds	r3, #64	; 0x40
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	2200      	movs	r2, #0
 8004f00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	3301      	adds	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	2b0e      	cmp	r3, #14
 8004f0c:	d9f2      	bls.n	8004ef4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d11c      	bne.n	8004f4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f22:	f043 0302 	orr.w	r3, r3, #2
 8004f26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	e005      	b.n	8004f5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f60:	461a      	mov	r2, r3
 8004f62:	2300      	movs	r3, #0
 8004f64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f74:	461a      	mov	r2, r3
 8004f76:	680b      	ldr	r3, [r1, #0]
 8004f78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d10c      	bne.n	8004f9a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d104      	bne.n	8004f90 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f86:	2100      	movs	r1, #0
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f965 	bl	8005258 <USB_SetDevSpeed>
 8004f8e:	e008      	b.n	8004fa2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f90:	2101      	movs	r1, #1
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f960 	bl	8005258 <USB_SetDevSpeed>
 8004f98:	e003      	b.n	8004fa2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f9a:	2103      	movs	r1, #3
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f95b 	bl	8005258 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fa2:	2110      	movs	r1, #16
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f8f3 	bl	8005190 <USB_FlushTxFifo>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f91f 	bl	80051f8 <USB_FlushRxFifo>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2300      	movs	r3, #0
 8004fce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2300      	movs	r3, #0
 8004fda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	e043      	b.n	8005076 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005004:	d118      	bne.n	8005038 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005018:	461a      	mov	r2, r3
 800501a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	e013      	b.n	800504a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502e:	461a      	mov	r2, r3
 8005030:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	e008      	b.n	800504a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005044:	461a      	mov	r2, r3
 8005046:	2300      	movs	r3, #0
 8005048:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	461a      	mov	r2, r3
 8005058:	2300      	movs	r3, #0
 800505a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005068:	461a      	mov	r2, r3
 800506a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800506e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	3301      	adds	r3, #1
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	429a      	cmp	r2, r3
 800507c:	d3b7      	bcc.n	8004fee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	e043      	b.n	800510c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800509a:	d118      	bne.n	80050ce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ae:	461a      	mov	r2, r3
 80050b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	e013      	b.n	80050e0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c4:	461a      	mov	r2, r3
 80050c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	e008      	b.n	80050e0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050da:	461a      	mov	r2, r3
 80050dc:	2300      	movs	r3, #0
 80050de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	461a      	mov	r2, r3
 80050ee:	2300      	movs	r3, #0
 80050f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fe:	461a      	mov	r2, r3
 8005100:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005104:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	3301      	adds	r3, #1
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	429a      	cmp	r2, r3
 8005112:	d3b7      	bcc.n	8005084 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005126:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005134:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	2b00      	cmp	r3, #0
 800513a:	d105      	bne.n	8005148 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	f043 0210 	orr.w	r2, r3, #16
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	4b0e      	ldr	r3, [pc, #56]	; (8005188 <USB_DevInit+0x2b4>)
 800514e:	4313      	orrs	r3, r2
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005156:	2b00      	cmp	r3, #0
 8005158:	d005      	beq.n	8005166 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f043 0208 	orr.w	r2, r3, #8
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d105      	bne.n	8005178 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699a      	ldr	r2, [r3, #24]
 8005170:	4b06      	ldr	r3, [pc, #24]	; (800518c <USB_DevInit+0x2b8>)
 8005172:	4313      	orrs	r3, r2
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005178:	7dfb      	ldrb	r3, [r7, #23]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005184:	b004      	add	sp, #16
 8005186:	4770      	bx	lr
 8005188:	803c3800 	.word	0x803c3800
 800518c:	40000004 	.word	0x40000004

08005190 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3301      	adds	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a13      	ldr	r2, [pc, #76]	; (80051f4 <USB_FlushTxFifo+0x64>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d901      	bls.n	80051b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e01b      	b.n	80051e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	daf2      	bge.n	800519e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	019b      	lsls	r3, r3, #6
 80051c0:	f043 0220 	orr.w	r2, r3, #32
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3301      	adds	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4a08      	ldr	r2, [pc, #32]	; (80051f4 <USB_FlushTxFifo+0x64>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e006      	b.n	80051e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d0f0      	beq.n	80051c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	00030d40 	.word	0x00030d40

080051f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3301      	adds	r3, #1
 8005208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4a11      	ldr	r2, [pc, #68]	; (8005254 <USB_FlushRxFifo+0x5c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d901      	bls.n	8005216 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e018      	b.n	8005248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	daf2      	bge.n	8005204 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2210      	movs	r2, #16
 8005226:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3301      	adds	r3, #1
 800522c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4a08      	ldr	r2, [pc, #32]	; (8005254 <USB_FlushRxFifo+0x5c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e006      	b.n	8005248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	2b10      	cmp	r3, #16
 8005244:	d0f0      	beq.n	8005228 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	00030d40 	.word	0x00030d40

08005258 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005278:	4313      	orrs	r3, r2
 800527a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800528a:	b480      	push	{r7}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052a4:	f023 0303 	bic.w	r3, r3, #3
 80052a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b8:	f043 0302 	orr.w	r3, r3, #2
 80052bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	f003 0301 	and.w	r3, r3, #1
}
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3301      	adds	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4a13      	ldr	r2, [pc, #76]	; (800534c <USB_CoreReset+0x64>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d901      	bls.n	8005306 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e01b      	b.n	800533e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	daf2      	bge.n	80052f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f043 0201 	orr.w	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3301      	adds	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4a09      	ldr	r2, [pc, #36]	; (800534c <USB_CoreReset+0x64>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d901      	bls.n	8005330 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e006      	b.n	800533e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b01      	cmp	r3, #1
 800533a:	d0f0      	beq.n	800531e <USB_CoreReset+0x36>

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	00030d40 	.word	0x00030d40

08005350 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800535e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005362:	2b84      	cmp	r3, #132	; 0x84
 8005364:	d005      	beq.n	8005372 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005366:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	3303      	adds	r3, #3
 8005370:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005372:	68fb      	ldr	r3, [r7, #12]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005386:	f3ef 8305 	mrs	r3, IPSR
 800538a:	607b      	str	r3, [r7, #4]
  return(result);
 800538c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800538e:	2b00      	cmp	r3, #0
 8005390:	bf14      	ite	ne
 8005392:	2301      	movne	r3, #1
 8005394:	2300      	moveq	r3, #0
 8005396:	b2db      	uxtb	r3, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80053a8:	f001 f936 	bl	8006618 <vTaskStartScheduler>
  
  return osOK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80053b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b4:	b089      	sub	sp, #36	; 0x24
 80053b6:	af04      	add	r7, sp, #16
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d020      	beq.n	8005406 <osThreadCreate+0x54>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01c      	beq.n	8005406 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685c      	ldr	r4, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691e      	ldr	r6, [r3, #16]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff ffb6 	bl	8005350 <makeFreeRtosPriority>
 80053e4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053ee:	9202      	str	r2, [sp, #8]
 80053f0:	9301      	str	r3, [sp, #4]
 80053f2:	9100      	str	r1, [sp, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	4632      	mov	r2, r6
 80053f8:	4629      	mov	r1, r5
 80053fa:	4620      	mov	r0, r4
 80053fc:	f000 ff3a 	bl	8006274 <xTaskCreateStatic>
 8005400:	4603      	mov	r3, r0
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	e01c      	b.n	8005440 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685c      	ldr	r4, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005412:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff ff98 	bl	8005350 <makeFreeRtosPriority>
 8005420:	4602      	mov	r2, r0
 8005422:	f107 030c 	add.w	r3, r7, #12
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	9200      	str	r2, [sp, #0]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	4632      	mov	r2, r6
 800542e:	4629      	mov	r1, r5
 8005430:	4620      	mov	r0, r4
 8005432:	f000 ff82 	bl	800633a <xTaskCreate>
 8005436:	4603      	mov	r3, r0
 8005438:	2b01      	cmp	r3, #1
 800543a:	d001      	beq.n	8005440 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	e000      	b.n	8005442 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005440:	68fb      	ldr	r3, [r7, #12]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800544a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <osDelay+0x16>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	e000      	b.n	8005462 <osDelay+0x18>
 8005460:	2301      	movs	r3, #1
 8005462:	4618      	mov	r0, r3
 8005464:	f001 f8a2 	bl	80065ac <vTaskDelay>
  
  return osOK;
 8005468:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005472:	b590      	push	{r4, r7, lr}
 8005474:	b085      	sub	sp, #20
 8005476:	af02      	add	r7, sp, #8
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d011      	beq.n	80054a8 <osMessageCreate+0x36>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00d      	beq.n	80054a8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6818      	ldr	r0, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6859      	ldr	r1, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	2400      	movs	r4, #0
 800549e:	9400      	str	r4, [sp, #0]
 80054a0:	f000 f9e2 	bl	8005868 <xQueueGenericCreateStatic>
 80054a4:	4603      	mov	r3, r0
 80054a6:	e008      	b.n	80054ba <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	4619      	mov	r1, r3
 80054b4:	f000 fa5a 	bl	800596c <xQueueGenericCreate>
 80054b8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd90      	pop	{r4, r7, pc}
	...

080054c4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80054d0:	2300      	movs	r3, #0
 80054d2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <osMessagePut+0x1e>
    ticks = 1;
 80054de:	2301      	movs	r3, #1
 80054e0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80054e2:	f7ff ff4d 	bl	8005380 <inHandlerMode>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d018      	beq.n	800551e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80054ec:	f107 0210 	add.w	r2, r7, #16
 80054f0:	f107 0108 	add.w	r1, r7, #8
 80054f4:	2300      	movs	r3, #0
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 fba0 	bl	8005c3c <xQueueGenericSendFromISR>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d001      	beq.n	8005506 <osMessagePut+0x42>
      return osErrorOS;
 8005502:	23ff      	movs	r3, #255	; 0xff
 8005504:	e018      	b.n	8005538 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d014      	beq.n	8005536 <osMessagePut+0x72>
 800550c:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <osMessagePut+0x7c>)
 800550e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	e00b      	b.n	8005536 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800551e:	f107 0108 	add.w	r1, r7, #8
 8005522:	2300      	movs	r3, #0
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 fa82 	bl	8005a30 <xQueueGenericSend>
 800552c:	4603      	mov	r3, r0
 800552e:	2b01      	cmp	r3, #1
 8005530:	d001      	beq.n	8005536 <osMessagePut+0x72>
      return osErrorOS;
 8005532:	23ff      	movs	r3, #255	; 0xff
 8005534:	e000      	b.n	8005538 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005544:	b590      	push	{r4, r7, lr}
 8005546:	b08b      	sub	sp, #44	; 0x2c
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800555e:	2380      	movs	r3, #128	; 0x80
 8005560:	617b      	str	r3, [r7, #20]
    return event;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	461c      	mov	r4, r3
 8005566:	f107 0314 	add.w	r3, r7, #20
 800556a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800556e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005572:	e054      	b.n	800561e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005574:	2300      	movs	r3, #0
 8005576:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005582:	d103      	bne.n	800558c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005584:	f04f 33ff 	mov.w	r3, #4294967295
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
 800558a:	e009      	b.n	80055a0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d006      	beq.n	80055a0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <osMessageGet+0x5c>
      ticks = 1;
 800559c:	2301      	movs	r3, #1
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80055a0:	f7ff feee 	bl	8005380 <inHandlerMode>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d01c      	beq.n	80055e4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80055aa:	f107 0220 	add.w	r2, r7, #32
 80055ae:	f107 0314 	add.w	r3, r7, #20
 80055b2:	3304      	adds	r3, #4
 80055b4:	4619      	mov	r1, r3
 80055b6:	68b8      	ldr	r0, [r7, #8]
 80055b8:	f000 fcc6 	bl	8005f48 <xQueueReceiveFromISR>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d102      	bne.n	80055c8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80055c2:	2310      	movs	r3, #16
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e001      	b.n	80055cc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d01d      	beq.n	800560e <osMessageGet+0xca>
 80055d2:	4b15      	ldr	r3, [pc, #84]	; (8005628 <osMessageGet+0xe4>)
 80055d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	e014      	b.n	800560e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80055e4:	f107 0314 	add.w	r3, r7, #20
 80055e8:	3304      	adds	r3, #4
 80055ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ec:	4619      	mov	r1, r3
 80055ee:	68b8      	ldr	r0, [r7, #8]
 80055f0:	f000 fbc4 	bl	8005d7c <xQueueReceive>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d102      	bne.n	8005600 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80055fa:	2310      	movs	r3, #16
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	e006      	b.n	800560e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <osMessageGet+0xc6>
 8005606:	2300      	movs	r3, #0
 8005608:	e000      	b.n	800560c <osMessageGet+0xc8>
 800560a:	2340      	movs	r3, #64	; 0x40
 800560c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	461c      	mov	r4, r3
 8005612:	f107 0314 	add.w	r3, r7, #20
 8005616:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800561a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	372c      	adds	r7, #44	; 0x2c
 8005622:	46bd      	mov	sp, r7
 8005624:	bd90      	pop	{r4, r7, pc}
 8005626:	bf00      	nop
 8005628:	e000ed04 	.word	0xe000ed04

0800562c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f103 0208 	add.w	r2, r3, #8
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f04f 32ff 	mov.w	r2, #4294967295
 8005644:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f103 0208 	add.w	r2, r3, #8
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f103 0208 	add.w	r2, r3, #8
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005686:	b480      	push	{r7}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	601a      	str	r2, [r3, #0]
}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d103      	bne.n	80056ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	e00c      	b.n	8005708 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	3308      	adds	r3, #8
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e002      	b.n	80056fc <vListInsert+0x2e>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	429a      	cmp	r2, r3
 8005706:	d2f6      	bcs.n	80056f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	601a      	str	r2, [r3, #0]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6892      	ldr	r2, [r2, #8]
 8005756:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6852      	ldr	r2, [r2, #4]
 8005760:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	429a      	cmp	r2, r3
 800576a:	d103      	bne.n	8005774 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	1e5a      	subs	r2, r3, #1
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10c      	bne.n	80057c2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	b672      	cpsid	i
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	b662      	cpsie	i
 80057bc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80057c2:	f001 fd53 	bl	800726c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057d2:	fb01 f303 	mul.w	r3, r1, r3
 80057d6:	441a      	add	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	3b01      	subs	r3, #1
 80057f4:	68f9      	ldr	r1, [r7, #12]
 80057f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057f8:	fb01 f303 	mul.w	r3, r1, r3
 80057fc:	441a      	add	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	22ff      	movs	r2, #255	; 0xff
 8005806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	22ff      	movs	r2, #255	; 0xff
 800580e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d114      	bne.n	8005842 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01a      	beq.n	8005856 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3310      	adds	r3, #16
 8005824:	4618      	mov	r0, r3
 8005826:	f001 f945 	bl	8006ab4 <xTaskRemoveFromEventList>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d012      	beq.n	8005856 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <xQueueGenericReset+0xd0>)
 8005832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	e009      	b.n	8005856 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	3310      	adds	r3, #16
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff fef0 	bl	800562c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3324      	adds	r3, #36	; 0x24
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff feeb 	bl	800562c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005856:	f001 fd3d 	bl	80072d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800585a:	2301      	movs	r3, #1
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	e000ed04 	.word	0xe000ed04

08005868 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08e      	sub	sp, #56	; 0x38
 800586c:	af02      	add	r7, sp, #8
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10c      	bne.n	8005896 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	b672      	cpsid	i
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	b662      	cpsie	i
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10c      	bne.n	80058b6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	b672      	cpsid	i
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	b662      	cpsie	i
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <xQueueGenericCreateStatic+0x5a>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <xQueueGenericCreateStatic+0x5e>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <xQueueGenericCreateStatic+0x60>
 80058c6:	2300      	movs	r3, #0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10c      	bne.n	80058e6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	b672      	cpsid	i
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	b662      	cpsie	i
 80058e0:	623b      	str	r3, [r7, #32]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d102      	bne.n	80058f2 <xQueueGenericCreateStatic+0x8a>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <xQueueGenericCreateStatic+0x8e>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <xQueueGenericCreateStatic+0x90>
 80058f6:	2300      	movs	r3, #0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10c      	bne.n	8005916 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	b672      	cpsid	i
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	b662      	cpsie	i
 8005910:	61fb      	str	r3, [r7, #28]
}
 8005912:	bf00      	nop
 8005914:	e7fe      	b.n	8005914 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005916:	2348      	movs	r3, #72	; 0x48
 8005918:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2b48      	cmp	r3, #72	; 0x48
 800591e:	d00c      	beq.n	800593a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	b672      	cpsid	i
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	b662      	cpsie	i
 8005934:	61bb      	str	r3, [r7, #24]
}
 8005936:	bf00      	nop
 8005938:	e7fe      	b.n	8005938 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800593a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00d      	beq.n	8005962 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800594e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	4613      	mov	r3, r2
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f847 	bl	80059f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005964:	4618      	mov	r0, r3
 8005966:	3730      	adds	r7, #48	; 0x30
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08a      	sub	sp, #40	; 0x28
 8005970:	af02      	add	r7, sp, #8
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	4613      	mov	r3, r2
 8005978:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10c      	bne.n	800599a <xQueueGenericCreate+0x2e>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	b672      	cpsid	i
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	b662      	cpsie	i
 8005994:	613b      	str	r3, [r7, #16]
}
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]
 80059a4:	e004      	b.n	80059b0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	3348      	adds	r3, #72	; 0x48
 80059b4:	4618      	mov	r0, r3
 80059b6:	f001 fd85 	bl	80074c4 <pvPortMalloc>
 80059ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d011      	beq.n	80059e6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	3348      	adds	r3, #72	; 0x48
 80059ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059d4:	79fa      	ldrb	r2, [r7, #7]
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	4613      	mov	r3, r2
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f805 	bl	80059f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059e6:	69bb      	ldr	r3, [r7, #24]
	}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3720      	adds	r7, #32
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d103      	bne.n	8005a0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	e002      	b.n	8005a12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a1e:	2101      	movs	r1, #1
 8005a20:	69b8      	ldr	r0, [r7, #24]
 8005a22:	f7ff feb7 	bl	8005794 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a26:	bf00      	nop
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08e      	sub	sp, #56	; 0x38
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10c      	bne.n	8005a66 <xQueueGenericSend+0x36>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	b672      	cpsid	i
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	b662      	cpsie	i
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d103      	bne.n	8005a74 <xQueueGenericSend+0x44>
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <xQueueGenericSend+0x48>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <xQueueGenericSend+0x4a>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10c      	bne.n	8005a98 <xQueueGenericSend+0x68>
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	b672      	cpsid	i
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	b662      	cpsie	i
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d103      	bne.n	8005aa6 <xQueueGenericSend+0x76>
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <xQueueGenericSend+0x7a>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <xQueueGenericSend+0x7c>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10c      	bne.n	8005aca <xQueueGenericSend+0x9a>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	b672      	cpsid	i
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	b662      	cpsie	i
 8005ac4:	623b      	str	r3, [r7, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aca:	f001 f9b7 	bl	8006e3c <xTaskGetSchedulerState>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <xQueueGenericSend+0xaa>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <xQueueGenericSend+0xae>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <xQueueGenericSend+0xb0>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10c      	bne.n	8005afe <xQueueGenericSend+0xce>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	b672      	cpsid	i
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	b662      	cpsie	i
 8005af8:	61fb      	str	r3, [r7, #28]
}
 8005afa:	bf00      	nop
 8005afc:	e7fe      	b.n	8005afc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005afe:	f001 fbb5 	bl	800726c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d302      	bcc.n	8005b14 <xQueueGenericSend+0xe4>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d129      	bne.n	8005b68 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b1a:	f000 fa9b 	bl	8006054 <prvCopyDataToQueue>
 8005b1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d010      	beq.n	8005b4a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	3324      	adds	r3, #36	; 0x24
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 ffc1 	bl	8006ab4 <xTaskRemoveFromEventList>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d013      	beq.n	8005b60 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b38:	4b3f      	ldr	r3, [pc, #252]	; (8005c38 <xQueueGenericSend+0x208>)
 8005b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	e00a      	b.n	8005b60 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b50:	4b39      	ldr	r3, [pc, #228]	; (8005c38 <xQueueGenericSend+0x208>)
 8005b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b60:	f001 fbb8 	bl	80072d4 <vPortExitCritical>
				return pdPASS;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e063      	b.n	8005c30 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d103      	bne.n	8005b76 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b6e:	f001 fbb1 	bl	80072d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e05c      	b.n	8005c30 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b7c:	f107 0314 	add.w	r3, r7, #20
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fffb 	bl	8006b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b86:	2301      	movs	r3, #1
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b8a:	f001 fba3 	bl	80072d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b8e:	f000 fda7 	bl	80066e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b92:	f001 fb6b 	bl	800726c <vPortEnterCritical>
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b9c:	b25b      	sxtb	r3, r3
 8005b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba2:	d103      	bne.n	8005bac <xQueueGenericSend+0x17c>
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bb2:	b25b      	sxtb	r3, r3
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d103      	bne.n	8005bc2 <xQueueGenericSend+0x192>
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bc2:	f001 fb87 	bl	80072d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bc6:	1d3a      	adds	r2, r7, #4
 8005bc8:	f107 0314 	add.w	r3, r7, #20
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 ffea 	bl	8006ba8 <xTaskCheckForTimeOut>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d124      	bne.n	8005c24 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bdc:	f000 fb32 	bl	8006244 <prvIsQueueFull>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d018      	beq.n	8005c18 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	3310      	adds	r3, #16
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	4611      	mov	r1, r2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 ff3a 	bl	8006a68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bf6:	f000 fabd 	bl	8006174 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005bfa:	f000 fd7f 	bl	80066fc <xTaskResumeAll>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f47f af7c 	bne.w	8005afe <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005c06:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <xQueueGenericSend+0x208>)
 8005c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	e772      	b.n	8005afe <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c1a:	f000 faab 	bl	8006174 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c1e:	f000 fd6d 	bl	80066fc <xTaskResumeAll>
 8005c22:	e76c      	b.n	8005afe <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c26:	f000 faa5 	bl	8006174 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c2a:	f000 fd67 	bl	80066fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3738      	adds	r7, #56	; 0x38
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08e      	sub	sp, #56	; 0x38
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10c      	bne.n	8005c6e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	b672      	cpsid	i
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	b662      	cpsie	i
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c6a:	bf00      	nop
 8005c6c:	e7fe      	b.n	8005c6c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d103      	bne.n	8005c7c <xQueueGenericSendFromISR+0x40>
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <xQueueGenericSendFromISR+0x44>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <xQueueGenericSendFromISR+0x46>
 8005c80:	2300      	movs	r3, #0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10c      	bne.n	8005ca0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8a:	b672      	cpsid	i
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	b662      	cpsie	i
 8005c9a:	623b      	str	r3, [r7, #32]
}
 8005c9c:	bf00      	nop
 8005c9e:	e7fe      	b.n	8005c9e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d103      	bne.n	8005cae <xQueueGenericSendFromISR+0x72>
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <xQueueGenericSendFromISR+0x76>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <xQueueGenericSendFromISR+0x78>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10c      	bne.n	8005cd2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	b672      	cpsid	i
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	b662      	cpsie	i
 8005ccc:	61fb      	str	r3, [r7, #28]
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cd2:	f001 fbb3 	bl	800743c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005cd6:	f3ef 8211 	mrs	r2, BASEPRI
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	b672      	cpsid	i
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	b662      	cpsie	i
 8005cee:	61ba      	str	r2, [r7, #24]
 8005cf0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d302      	bcc.n	8005d08 <xQueueGenericSendFromISR+0xcc>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d12c      	bne.n	8005d62 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d18:	f000 f99c 	bl	8006054 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d1c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d112      	bne.n	8005d4c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d016      	beq.n	8005d5c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	3324      	adds	r3, #36	; 0x24
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 febe 	bl	8006ab4 <xTaskRemoveFromEventList>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00e      	beq.n	8005d5c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00b      	beq.n	8005d5c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	e007      	b.n	8005d5c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d50:	3301      	adds	r3, #1
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	b25a      	sxtb	r2, r3
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005d60:	e001      	b.n	8005d66 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d62:	2300      	movs	r3, #0
 8005d64:	637b      	str	r3, [r7, #52]	; 0x34
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3738      	adds	r7, #56	; 0x38
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08c      	sub	sp, #48	; 0x30
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10c      	bne.n	8005db0 <xQueueReceive+0x34>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	b672      	cpsid	i
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	b662      	cpsie	i
 8005daa:	623b      	str	r3, [r7, #32]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <xQueueReceive+0x42>
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <xQueueReceive+0x46>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <xQueueReceive+0x48>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10c      	bne.n	8005de2 <xQueueReceive+0x66>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	b672      	cpsid	i
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	b662      	cpsie	i
 8005ddc:	61fb      	str	r3, [r7, #28]
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005de2:	f001 f82b 	bl	8006e3c <xTaskGetSchedulerState>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d102      	bne.n	8005df2 <xQueueReceive+0x76>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <xQueueReceive+0x7a>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <xQueueReceive+0x7c>
 8005df6:	2300      	movs	r3, #0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10c      	bne.n	8005e16 <xQueueReceive+0x9a>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	b672      	cpsid	i
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	b662      	cpsie	i
 8005e10:	61bb      	str	r3, [r7, #24]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e16:	f001 fa29 	bl	800726c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01f      	beq.n	8005e66 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e2a:	f000 f97d 	bl	8006128 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	1e5a      	subs	r2, r3, #1
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00f      	beq.n	8005e5e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	3310      	adds	r3, #16
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fe36 	bl	8006ab4 <xTaskRemoveFromEventList>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e4e:	4b3d      	ldr	r3, [pc, #244]	; (8005f44 <xQueueReceive+0x1c8>)
 8005e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e5e:	f001 fa39 	bl	80072d4 <vPortExitCritical>
				return pdPASS;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e069      	b.n	8005f3a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d103      	bne.n	8005e74 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e6c:	f001 fa32 	bl	80072d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e70:	2300      	movs	r3, #0
 8005e72:	e062      	b.n	8005f3a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e7a:	f107 0310 	add.w	r3, r7, #16
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fe7c 	bl	8006b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e88:	f001 fa24 	bl	80072d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e8c:	f000 fc28 	bl	80066e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e90:	f001 f9ec 	bl	800726c <vPortEnterCritical>
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e9a:	b25b      	sxtb	r3, r3
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d103      	bne.n	8005eaa <xQueueReceive+0x12e>
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eb0:	b25b      	sxtb	r3, r3
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb6:	d103      	bne.n	8005ec0 <xQueueReceive+0x144>
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ec0:	f001 fa08 	bl	80072d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ec4:	1d3a      	adds	r2, r7, #4
 8005ec6:	f107 0310 	add.w	r3, r7, #16
 8005eca:	4611      	mov	r1, r2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fe6b 	bl	8006ba8 <xTaskCheckForTimeOut>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d123      	bne.n	8005f20 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eda:	f000 f99d 	bl	8006218 <prvIsQueueEmpty>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d017      	beq.n	8005f14 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee6:	3324      	adds	r3, #36	; 0x24
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	4611      	mov	r1, r2
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fdbb 	bl	8006a68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ef4:	f000 f93e 	bl	8006174 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ef8:	f000 fc00 	bl	80066fc <xTaskResumeAll>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d189      	bne.n	8005e16 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005f02:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <xQueueReceive+0x1c8>)
 8005f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	e780      	b.n	8005e16 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f16:	f000 f92d 	bl	8006174 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f1a:	f000 fbef 	bl	80066fc <xTaskResumeAll>
 8005f1e:	e77a      	b.n	8005e16 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f22:	f000 f927 	bl	8006174 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f26:	f000 fbe9 	bl	80066fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f2c:	f000 f974 	bl	8006218 <prvIsQueueEmpty>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f43f af6f 	beq.w	8005e16 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3730      	adds	r7, #48	; 0x30
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	e000ed04 	.word	0xe000ed04

08005f48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08e      	sub	sp, #56	; 0x38
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10c      	bne.n	8005f78 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	b672      	cpsid	i
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	b662      	cpsie	i
 8005f72:	623b      	str	r3, [r7, #32]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d103      	bne.n	8005f86 <xQueueReceiveFromISR+0x3e>
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <xQueueReceiveFromISR+0x42>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <xQueueReceiveFromISR+0x44>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10c      	bne.n	8005faa <xQueueReceiveFromISR+0x62>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	b672      	cpsid	i
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	b662      	cpsie	i
 8005fa4:	61fb      	str	r3, [r7, #28]
}
 8005fa6:	bf00      	nop
 8005fa8:	e7fe      	b.n	8005fa8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005faa:	f001 fa47 	bl	800743c <vPortValidateInterruptPriority>
	__asm volatile
 8005fae:	f3ef 8211 	mrs	r2, BASEPRI
 8005fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb6:	b672      	cpsid	i
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	b662      	cpsie	i
 8005fc6:	61ba      	str	r2, [r7, #24]
 8005fc8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005fca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d02f      	beq.n	800603a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fe4:	68b9      	ldr	r1, [r7, #8]
 8005fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fe8:	f000 f89e 	bl	8006128 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	1e5a      	subs	r2, r3, #1
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005ff4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffc:	d112      	bne.n	8006024 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d016      	beq.n	8006034 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	3310      	adds	r3, #16
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fd52 	bl	8006ab4 <xTaskRemoveFromEventList>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00e      	beq.n	8006034 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00b      	beq.n	8006034 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e007      	b.n	8006034 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006028:	3301      	adds	r3, #1
 800602a:	b2db      	uxtb	r3, r3
 800602c:	b25a      	sxtb	r2, r3
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006034:	2301      	movs	r3, #1
 8006036:	637b      	str	r3, [r7, #52]	; 0x34
 8006038:	e001      	b.n	800603e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800603a:	2300      	movs	r3, #0
 800603c:	637b      	str	r3, [r7, #52]	; 0x34
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f383 8811 	msr	BASEPRI, r3
}
 8006048:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800604a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800604c:	4618      	mov	r0, r3
 800604e:	3738      	adds	r7, #56	; 0x38
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10d      	bne.n	800608e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d14d      	bne.n	8006116 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fefa 	bl	8006e78 <xTaskPriorityDisinherit>
 8006084:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	609a      	str	r2, [r3, #8]
 800608c:	e043      	b.n	8006116 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d119      	bne.n	80060c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6858      	ldr	r0, [r3, #4]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609c:	461a      	mov	r2, r3
 800609e:	68b9      	ldr	r1, [r7, #8]
 80060a0:	f001 fc30 	bl	8007904 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	441a      	add	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d32b      	bcc.n	8006116 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	605a      	str	r2, [r3, #4]
 80060c6:	e026      	b.n	8006116 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	68d8      	ldr	r0, [r3, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d0:	461a      	mov	r2, r3
 80060d2:	68b9      	ldr	r1, [r7, #8]
 80060d4:	f001 fc16 	bl	8007904 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	425b      	negs	r3, r3
 80060e2:	441a      	add	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d207      	bcs.n	8006104 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	425b      	negs	r3, r3
 80060fe:	441a      	add	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b02      	cmp	r3, #2
 8006108:	d105      	bne.n	8006116 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	3b01      	subs	r3, #1
 8006114:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800611e:	697b      	ldr	r3, [r7, #20]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	2b00      	cmp	r3, #0
 8006138:	d018      	beq.n	800616c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	441a      	add	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	429a      	cmp	r2, r3
 8006152:	d303      	bcc.n	800615c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68d9      	ldr	r1, [r3, #12]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	461a      	mov	r2, r3
 8006166:	6838      	ldr	r0, [r7, #0]
 8006168:	f001 fbcc 	bl	8007904 <memcpy>
	}
}
 800616c:	bf00      	nop
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800617c:	f001 f876 	bl	800726c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006186:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006188:	e011      	b.n	80061ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	2b00      	cmp	r3, #0
 8006190:	d012      	beq.n	80061b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	3324      	adds	r3, #36	; 0x24
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fc8c 	bl	8006ab4 <xTaskRemoveFromEventList>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80061a2:	f000 fd67 	bl	8006c74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	dce9      	bgt.n	800618a <prvUnlockQueue+0x16>
 80061b6:	e000      	b.n	80061ba <prvUnlockQueue+0x46>
					break;
 80061b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	22ff      	movs	r2, #255	; 0xff
 80061be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80061c2:	f001 f887 	bl	80072d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061c6:	f001 f851 	bl	800726c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061d2:	e011      	b.n	80061f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d012      	beq.n	8006202 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3310      	adds	r3, #16
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 fc67 	bl	8006ab4 <xTaskRemoveFromEventList>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061ec:	f000 fd42 	bl	8006c74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061f0:	7bbb      	ldrb	r3, [r7, #14]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	dce9      	bgt.n	80061d4 <prvUnlockQueue+0x60>
 8006200:	e000      	b.n	8006204 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006202:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	22ff      	movs	r2, #255	; 0xff
 8006208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800620c:	f001 f862 	bl	80072d4 <vPortExitCritical>
}
 8006210:	bf00      	nop
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006220:	f001 f824 	bl	800726c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	d102      	bne.n	8006232 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800622c:	2301      	movs	r3, #1
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	e001      	b.n	8006236 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006232:	2300      	movs	r3, #0
 8006234:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006236:	f001 f84d 	bl	80072d4 <vPortExitCritical>

	return xReturn;
 800623a:	68fb      	ldr	r3, [r7, #12]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800624c:	f001 f80e 	bl	800726c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006258:	429a      	cmp	r2, r3
 800625a:	d102      	bne.n	8006262 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800625c:	2301      	movs	r3, #1
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	e001      	b.n	8006266 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006262:	2300      	movs	r3, #0
 8006264:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006266:	f001 f835 	bl	80072d4 <vPortExitCritical>

	return xReturn;
 800626a:	68fb      	ldr	r3, [r7, #12]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08e      	sub	sp, #56	; 0x38
 8006278:	af04      	add	r7, sp, #16
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10c      	bne.n	80062a2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	b672      	cpsid	i
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	b662      	cpsie	i
 800629c:	623b      	str	r3, [r7, #32]
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10c      	bne.n	80062c2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	b672      	cpsid	i
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	b662      	cpsie	i
 80062bc:	61fb      	str	r3, [r7, #28]
}
 80062be:	bf00      	nop
 80062c0:	e7fe      	b.n	80062c0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062c2:	2354      	movs	r3, #84	; 0x54
 80062c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	2b54      	cmp	r3, #84	; 0x54
 80062ca:	d00c      	beq.n	80062e6 <xTaskCreateStatic+0x72>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	b672      	cpsid	i
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	b662      	cpsie	i
 80062e0:	61bb      	str	r3, [r7, #24]
}
 80062e2:	bf00      	nop
 80062e4:	e7fe      	b.n	80062e4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d01e      	beq.n	800632c <xTaskCreateStatic+0xb8>
 80062ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01b      	beq.n	800632c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	2202      	movs	r2, #2
 8006302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006306:	2300      	movs	r3, #0
 8006308:	9303      	str	r3, [sp, #12]
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	9302      	str	r3, [sp, #8]
 800630e:	f107 0314 	add.w	r3, r7, #20
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	68b9      	ldr	r1, [r7, #8]
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 f850 	bl	80063c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006326:	f000 f8d7 	bl	80064d8 <prvAddNewTaskToReadyList>
 800632a:	e001      	b.n	8006330 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800632c:	2300      	movs	r3, #0
 800632e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006330:	697b      	ldr	r3, [r7, #20]
	}
 8006332:	4618      	mov	r0, r3
 8006334:	3728      	adds	r7, #40	; 0x28
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800633a:	b580      	push	{r7, lr}
 800633c:	b08c      	sub	sp, #48	; 0x30
 800633e:	af04      	add	r7, sp, #16
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	603b      	str	r3, [r7, #0]
 8006346:	4613      	mov	r3, r2
 8006348:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800634a:	88fb      	ldrh	r3, [r7, #6]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4618      	mov	r0, r3
 8006350:	f001 f8b8 	bl	80074c4 <pvPortMalloc>
 8006354:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00e      	beq.n	800637a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800635c:	2054      	movs	r0, #84	; 0x54
 800635e:	f001 f8b1 	bl	80074c4 <pvPortMalloc>
 8006362:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	631a      	str	r2, [r3, #48]	; 0x30
 8006370:	e005      	b.n	800637e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006372:	6978      	ldr	r0, [r7, #20]
 8006374:	f001 f970 	bl	8007658 <vPortFree>
 8006378:	e001      	b.n	800637e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800637a:	2300      	movs	r3, #0
 800637c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d017      	beq.n	80063b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800638c:	88fa      	ldrh	r2, [r7, #6]
 800638e:	2300      	movs	r3, #0
 8006390:	9303      	str	r3, [sp, #12]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	9302      	str	r3, [sp, #8]
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 f80e 	bl	80063c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063a8:	69f8      	ldr	r0, [r7, #28]
 80063aa:	f000 f895 	bl	80064d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80063ae:	2301      	movs	r3, #1
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	e002      	b.n	80063ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063b4:	f04f 33ff 	mov.w	r3, #4294967295
 80063b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063ba:	69bb      	ldr	r3, [r7, #24]
	}
 80063bc:	4618      	mov	r0, r3
 80063be:	3720      	adds	r7, #32
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80063dc:	440b      	add	r3, r1
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f023 0307 	bic.w	r3, r3, #7
 80063ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00c      	beq.n	8006410 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	b672      	cpsid	i
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	b662      	cpsie	i
 800640a:	617b      	str	r3, [r7, #20]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d01f      	beq.n	8006456 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006416:	2300      	movs	r3, #0
 8006418:	61fb      	str	r3, [r7, #28]
 800641a:	e012      	b.n	8006442 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	4413      	add	r3, r2
 8006422:	7819      	ldrb	r1, [r3, #0]
 8006424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	4413      	add	r3, r2
 800642a:	3334      	adds	r3, #52	; 0x34
 800642c:	460a      	mov	r2, r1
 800642e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d006      	beq.n	800644a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	3301      	adds	r3, #1
 8006440:	61fb      	str	r3, [r7, #28]
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	2b0f      	cmp	r3, #15
 8006446:	d9e9      	bls.n	800641c <prvInitialiseNewTask+0x58>
 8006448:	e000      	b.n	800644c <prvInitialiseNewTask+0x88>
			{
				break;
 800644a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006454:	e003      	b.n	800645e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	2b06      	cmp	r3, #6
 8006462:	d901      	bls.n	8006468 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006464:	2306      	movs	r3, #6
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800646c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006472:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	2200      	movs	r2, #0
 8006478:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	3304      	adds	r3, #4
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff f8f4 	bl	800566c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	3318      	adds	r3, #24
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff f8ef 	bl	800566c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006492:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	f1c3 0207 	rsb	r2, r3, #7
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	2200      	movs	r2, #0
 80064a8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	68f9      	ldr	r1, [r7, #12]
 80064b6:	69b8      	ldr	r0, [r7, #24]
 80064b8:	f000 fdce 	bl	8007058 <pxPortInitialiseStack>
 80064bc:	4602      	mov	r2, r0
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064ce:	bf00      	nop
 80064d0:	3720      	adds	r7, #32
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064e0:	f000 fec4 	bl	800726c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064e4:	4b2a      	ldr	r3, [pc, #168]	; (8006590 <prvAddNewTaskToReadyList+0xb8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3301      	adds	r3, #1
 80064ea:	4a29      	ldr	r2, [pc, #164]	; (8006590 <prvAddNewTaskToReadyList+0xb8>)
 80064ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064ee:	4b29      	ldr	r3, [pc, #164]	; (8006594 <prvAddNewTaskToReadyList+0xbc>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064f6:	4a27      	ldr	r2, [pc, #156]	; (8006594 <prvAddNewTaskToReadyList+0xbc>)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064fc:	4b24      	ldr	r3, [pc, #144]	; (8006590 <prvAddNewTaskToReadyList+0xb8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d110      	bne.n	8006526 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006504:	f000 fbda 	bl	8006cbc <prvInitialiseTaskLists>
 8006508:	e00d      	b.n	8006526 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800650a:	4b23      	ldr	r3, [pc, #140]	; (8006598 <prvAddNewTaskToReadyList+0xc0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d109      	bne.n	8006526 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006512:	4b20      	ldr	r3, [pc, #128]	; (8006594 <prvAddNewTaskToReadyList+0xbc>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	429a      	cmp	r2, r3
 800651e:	d802      	bhi.n	8006526 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006520:	4a1c      	ldr	r2, [pc, #112]	; (8006594 <prvAddNewTaskToReadyList+0xbc>)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006526:	4b1d      	ldr	r3, [pc, #116]	; (800659c <prvAddNewTaskToReadyList+0xc4>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3301      	adds	r3, #1
 800652c:	4a1b      	ldr	r2, [pc, #108]	; (800659c <prvAddNewTaskToReadyList+0xc4>)
 800652e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	2201      	movs	r2, #1
 8006536:	409a      	lsls	r2, r3
 8006538:	4b19      	ldr	r3, [pc, #100]	; (80065a0 <prvAddNewTaskToReadyList+0xc8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4313      	orrs	r3, r2
 800653e:	4a18      	ldr	r2, [pc, #96]	; (80065a0 <prvAddNewTaskToReadyList+0xc8>)
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4a15      	ldr	r2, [pc, #84]	; (80065a4 <prvAddNewTaskToReadyList+0xcc>)
 8006550:	441a      	add	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	3304      	adds	r3, #4
 8006556:	4619      	mov	r1, r3
 8006558:	4610      	mov	r0, r2
 800655a:	f7ff f894 	bl	8005686 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800655e:	f000 feb9 	bl	80072d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006562:	4b0d      	ldr	r3, [pc, #52]	; (8006598 <prvAddNewTaskToReadyList+0xc0>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00e      	beq.n	8006588 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800656a:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <prvAddNewTaskToReadyList+0xbc>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	429a      	cmp	r2, r3
 8006576:	d207      	bcs.n	8006588 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006578:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <prvAddNewTaskToReadyList+0xd0>)
 800657a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006588:	bf00      	nop
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20000d74 	.word	0x20000d74
 8006594:	20000c74 	.word	0x20000c74
 8006598:	20000d80 	.word	0x20000d80
 800659c:	20000d90 	.word	0x20000d90
 80065a0:	20000d7c 	.word	0x20000d7c
 80065a4:	20000c78 	.word	0x20000c78
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d019      	beq.n	80065f2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065be:	4b14      	ldr	r3, [pc, #80]	; (8006610 <vTaskDelay+0x64>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00c      	beq.n	80065e0 <vTaskDelay+0x34>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ca:	b672      	cpsid	i
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	b662      	cpsie	i
 80065da:	60bb      	str	r3, [r7, #8]
}
 80065dc:	bf00      	nop
 80065de:	e7fe      	b.n	80065de <vTaskDelay+0x32>
			vTaskSuspendAll();
 80065e0:	f000 f87e 	bl	80066e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065e4:	2100      	movs	r1, #0
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fcd0 	bl	8006f8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065ec:	f000 f886 	bl	80066fc <xTaskResumeAll>
 80065f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d107      	bne.n	8006608 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80065f8:	4b06      	ldr	r3, [pc, #24]	; (8006614 <vTaskDelay+0x68>)
 80065fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006608:	bf00      	nop
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20000d9c 	.word	0x20000d9c
 8006614:	e000ed04 	.word	0xe000ed04

08006618 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08a      	sub	sp, #40	; 0x28
 800661c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800661e:	2300      	movs	r3, #0
 8006620:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006622:	2300      	movs	r3, #0
 8006624:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006626:	463a      	mov	r2, r7
 8006628:	1d39      	adds	r1, r7, #4
 800662a:	f107 0308 	add.w	r3, r7, #8
 800662e:	4618      	mov	r0, r3
 8006630:	f7f9 ff74 	bl	800051c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	9202      	str	r2, [sp, #8]
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	2300      	movs	r3, #0
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	2300      	movs	r3, #0
 8006644:	460a      	mov	r2, r1
 8006646:	4920      	ldr	r1, [pc, #128]	; (80066c8 <vTaskStartScheduler+0xb0>)
 8006648:	4820      	ldr	r0, [pc, #128]	; (80066cc <vTaskStartScheduler+0xb4>)
 800664a:	f7ff fe13 	bl	8006274 <xTaskCreateStatic>
 800664e:	4603      	mov	r3, r0
 8006650:	4a1f      	ldr	r2, [pc, #124]	; (80066d0 <vTaskStartScheduler+0xb8>)
 8006652:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006654:	4b1e      	ldr	r3, [pc, #120]	; (80066d0 <vTaskStartScheduler+0xb8>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800665c:	2301      	movs	r3, #1
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	e001      	b.n	8006666 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d118      	bne.n	800669e <vTaskStartScheduler+0x86>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	b672      	cpsid	i
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	b662      	cpsie	i
 8006680:	613b      	str	r3, [r7, #16]
}
 8006682:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006684:	4b13      	ldr	r3, [pc, #76]	; (80066d4 <vTaskStartScheduler+0xbc>)
 8006686:	f04f 32ff 	mov.w	r2, #4294967295
 800668a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800668c:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <vTaskStartScheduler+0xc0>)
 800668e:	2201      	movs	r2, #1
 8006690:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006692:	4b12      	ldr	r3, [pc, #72]	; (80066dc <vTaskStartScheduler+0xc4>)
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006698:	f000 fd6a 	bl	8007170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800669c:	e010      	b.n	80066c0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a4:	d10c      	bne.n	80066c0 <vTaskStartScheduler+0xa8>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	b672      	cpsid	i
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	b662      	cpsie	i
 80066ba:	60fb      	str	r3, [r7, #12]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <vTaskStartScheduler+0xa6>
}
 80066c0:	bf00      	nop
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	08007ad0 	.word	0x08007ad0
 80066cc:	08006c8d 	.word	0x08006c8d
 80066d0:	20000d98 	.word	0x20000d98
 80066d4:	20000d94 	.word	0x20000d94
 80066d8:	20000d80 	.word	0x20000d80
 80066dc:	20000d78 	.word	0x20000d78

080066e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80066e4:	4b04      	ldr	r3, [pc, #16]	; (80066f8 <vTaskSuspendAll+0x18>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3301      	adds	r3, #1
 80066ea:	4a03      	ldr	r2, [pc, #12]	; (80066f8 <vTaskSuspendAll+0x18>)
 80066ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80066ee:	bf00      	nop
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	20000d9c 	.word	0x20000d9c

080066fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006706:	2300      	movs	r3, #0
 8006708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800670a:	4b42      	ldr	r3, [pc, #264]	; (8006814 <xTaskResumeAll+0x118>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10c      	bne.n	800672c <xTaskResumeAll+0x30>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	b672      	cpsid	i
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	b662      	cpsie	i
 8006726:	603b      	str	r3, [r7, #0]
}
 8006728:	bf00      	nop
 800672a:	e7fe      	b.n	800672a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800672c:	f000 fd9e 	bl	800726c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006730:	4b38      	ldr	r3, [pc, #224]	; (8006814 <xTaskResumeAll+0x118>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3b01      	subs	r3, #1
 8006736:	4a37      	ldr	r2, [pc, #220]	; (8006814 <xTaskResumeAll+0x118>)
 8006738:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800673a:	4b36      	ldr	r3, [pc, #216]	; (8006814 <xTaskResumeAll+0x118>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d161      	bne.n	8006806 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006742:	4b35      	ldr	r3, [pc, #212]	; (8006818 <xTaskResumeAll+0x11c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d05d      	beq.n	8006806 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800674a:	e02e      	b.n	80067aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800674c:	4b33      	ldr	r3, [pc, #204]	; (800681c <xTaskResumeAll+0x120>)
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	3318      	adds	r3, #24
 8006758:	4618      	mov	r0, r3
 800675a:	f7fe fff1 	bl	8005740 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3304      	adds	r3, #4
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe ffec 	bl	8005740 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	2201      	movs	r2, #1
 800676e:	409a      	lsls	r2, r3
 8006770:	4b2b      	ldr	r3, [pc, #172]	; (8006820 <xTaskResumeAll+0x124>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4313      	orrs	r3, r2
 8006776:	4a2a      	ldr	r2, [pc, #168]	; (8006820 <xTaskResumeAll+0x124>)
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4a27      	ldr	r2, [pc, #156]	; (8006824 <xTaskResumeAll+0x128>)
 8006788:	441a      	add	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3304      	adds	r3, #4
 800678e:	4619      	mov	r1, r3
 8006790:	4610      	mov	r0, r2
 8006792:	f7fe ff78 	bl	8005686 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679a:	4b23      	ldr	r3, [pc, #140]	; (8006828 <xTaskResumeAll+0x12c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d302      	bcc.n	80067aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80067a4:	4b21      	ldr	r3, [pc, #132]	; (800682c <xTaskResumeAll+0x130>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067aa:	4b1c      	ldr	r3, [pc, #112]	; (800681c <xTaskResumeAll+0x120>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1cc      	bne.n	800674c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067b8:	f000 fb20 	bl	8006dfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80067bc:	4b1c      	ldr	r3, [pc, #112]	; (8006830 <xTaskResumeAll+0x134>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d010      	beq.n	80067ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067c8:	f000 f836 	bl	8006838 <xTaskIncrementTick>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80067d2:	4b16      	ldr	r3, [pc, #88]	; (800682c <xTaskResumeAll+0x130>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3b01      	subs	r3, #1
 80067dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1f1      	bne.n	80067c8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80067e4:	4b12      	ldr	r3, [pc, #72]	; (8006830 <xTaskResumeAll+0x134>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067ea:	4b10      	ldr	r3, [pc, #64]	; (800682c <xTaskResumeAll+0x130>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067f2:	2301      	movs	r3, #1
 80067f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067f6:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <xTaskResumeAll+0x138>)
 80067f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006806:	f000 fd65 	bl	80072d4 <vPortExitCritical>

	return xAlreadyYielded;
 800680a:	68bb      	ldr	r3, [r7, #8]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	20000d9c 	.word	0x20000d9c
 8006818:	20000d74 	.word	0x20000d74
 800681c:	20000d34 	.word	0x20000d34
 8006820:	20000d7c 	.word	0x20000d7c
 8006824:	20000c78 	.word	0x20000c78
 8006828:	20000c74 	.word	0x20000c74
 800682c:	20000d88 	.word	0x20000d88
 8006830:	20000d84 	.word	0x20000d84
 8006834:	e000ed04 	.word	0xe000ed04

08006838 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800683e:	2300      	movs	r3, #0
 8006840:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006842:	4b4f      	ldr	r3, [pc, #316]	; (8006980 <xTaskIncrementTick+0x148>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	f040 808a 	bne.w	8006960 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800684c:	4b4d      	ldr	r3, [pc, #308]	; (8006984 <xTaskIncrementTick+0x14c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3301      	adds	r3, #1
 8006852:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006854:	4a4b      	ldr	r2, [pc, #300]	; (8006984 <xTaskIncrementTick+0x14c>)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d122      	bne.n	80068a6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006860:	4b49      	ldr	r3, [pc, #292]	; (8006988 <xTaskIncrementTick+0x150>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00c      	beq.n	8006884 <xTaskIncrementTick+0x4c>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	b672      	cpsid	i
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	b662      	cpsie	i
 800687e:	603b      	str	r3, [r7, #0]
}
 8006880:	bf00      	nop
 8006882:	e7fe      	b.n	8006882 <xTaskIncrementTick+0x4a>
 8006884:	4b40      	ldr	r3, [pc, #256]	; (8006988 <xTaskIncrementTick+0x150>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	4b40      	ldr	r3, [pc, #256]	; (800698c <xTaskIncrementTick+0x154>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a3e      	ldr	r2, [pc, #248]	; (8006988 <xTaskIncrementTick+0x150>)
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	4a3e      	ldr	r2, [pc, #248]	; (800698c <xTaskIncrementTick+0x154>)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	4b3d      	ldr	r3, [pc, #244]	; (8006990 <xTaskIncrementTick+0x158>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3301      	adds	r3, #1
 800689e:	4a3c      	ldr	r2, [pc, #240]	; (8006990 <xTaskIncrementTick+0x158>)
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	f000 faab 	bl	8006dfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068a6:	4b3b      	ldr	r3, [pc, #236]	; (8006994 <xTaskIncrementTick+0x15c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d348      	bcc.n	8006942 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068b0:	4b35      	ldr	r3, [pc, #212]	; (8006988 <xTaskIncrementTick+0x150>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d104      	bne.n	80068c4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ba:	4b36      	ldr	r3, [pc, #216]	; (8006994 <xTaskIncrementTick+0x15c>)
 80068bc:	f04f 32ff 	mov.w	r2, #4294967295
 80068c0:	601a      	str	r2, [r3, #0]
					break;
 80068c2:	e03e      	b.n	8006942 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c4:	4b30      	ldr	r3, [pc, #192]	; (8006988 <xTaskIncrementTick+0x150>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d203      	bcs.n	80068e4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068dc:	4a2d      	ldr	r2, [pc, #180]	; (8006994 <xTaskIncrementTick+0x15c>)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068e2:	e02e      	b.n	8006942 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	3304      	adds	r3, #4
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fe ff29 	bl	8005740 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d004      	beq.n	8006900 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	3318      	adds	r3, #24
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe ff20 	bl	8005740 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	2201      	movs	r2, #1
 8006906:	409a      	lsls	r2, r3
 8006908:	4b23      	ldr	r3, [pc, #140]	; (8006998 <xTaskIncrementTick+0x160>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4313      	orrs	r3, r2
 800690e:	4a22      	ldr	r2, [pc, #136]	; (8006998 <xTaskIncrementTick+0x160>)
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006916:	4613      	mov	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4a1f      	ldr	r2, [pc, #124]	; (800699c <xTaskIncrementTick+0x164>)
 8006920:	441a      	add	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	3304      	adds	r3, #4
 8006926:	4619      	mov	r1, r3
 8006928:	4610      	mov	r0, r2
 800692a:	f7fe feac 	bl	8005686 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006932:	4b1b      	ldr	r3, [pc, #108]	; (80069a0 <xTaskIncrementTick+0x168>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	429a      	cmp	r2, r3
 800693a:	d3b9      	bcc.n	80068b0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800693c:	2301      	movs	r3, #1
 800693e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006940:	e7b6      	b.n	80068b0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006942:	4b17      	ldr	r3, [pc, #92]	; (80069a0 <xTaskIncrementTick+0x168>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006948:	4914      	ldr	r1, [pc, #80]	; (800699c <xTaskIncrementTick+0x164>)
 800694a:	4613      	mov	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	440b      	add	r3, r1
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d907      	bls.n	800696a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800695a:	2301      	movs	r3, #1
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	e004      	b.n	800696a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006960:	4b10      	ldr	r3, [pc, #64]	; (80069a4 <xTaskIncrementTick+0x16c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3301      	adds	r3, #1
 8006966:	4a0f      	ldr	r2, [pc, #60]	; (80069a4 <xTaskIncrementTick+0x16c>)
 8006968:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800696a:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <xTaskIncrementTick+0x170>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006972:	2301      	movs	r3, #1
 8006974:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006976:	697b      	ldr	r3, [r7, #20]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	20000d9c 	.word	0x20000d9c
 8006984:	20000d78 	.word	0x20000d78
 8006988:	20000d2c 	.word	0x20000d2c
 800698c:	20000d30 	.word	0x20000d30
 8006990:	20000d8c 	.word	0x20000d8c
 8006994:	20000d94 	.word	0x20000d94
 8006998:	20000d7c 	.word	0x20000d7c
 800699c:	20000c78 	.word	0x20000c78
 80069a0:	20000c74 	.word	0x20000c74
 80069a4:	20000d84 	.word	0x20000d84
 80069a8:	20000d88 	.word	0x20000d88

080069ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069b2:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <vTaskSwitchContext+0xa8>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069ba:	4b27      	ldr	r3, [pc, #156]	; (8006a58 <vTaskSwitchContext+0xac>)
 80069bc:	2201      	movs	r2, #1
 80069be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069c0:	e041      	b.n	8006a46 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80069c2:	4b25      	ldr	r3, [pc, #148]	; (8006a58 <vTaskSwitchContext+0xac>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c8:	4b24      	ldr	r3, [pc, #144]	; (8006a5c <vTaskSwitchContext+0xb0>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	fab3 f383 	clz	r3, r3
 80069d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80069d6:	7afb      	ldrb	r3, [r7, #11]
 80069d8:	f1c3 031f 	rsb	r3, r3, #31
 80069dc:	617b      	str	r3, [r7, #20]
 80069de:	4920      	ldr	r1, [pc, #128]	; (8006a60 <vTaskSwitchContext+0xb4>)
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	440b      	add	r3, r1
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10c      	bne.n	8006a0c <vTaskSwitchContext+0x60>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	b672      	cpsid	i
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	b662      	cpsie	i
 8006a06:	607b      	str	r3, [r7, #4]
}
 8006a08:	bf00      	nop
 8006a0a:	e7fe      	b.n	8006a0a <vTaskSwitchContext+0x5e>
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4a12      	ldr	r2, [pc, #72]	; (8006a60 <vTaskSwitchContext+0xb4>)
 8006a18:	4413      	add	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	605a      	str	r2, [r3, #4]
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d104      	bne.n	8006a3c <vTaskSwitchContext+0x90>
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	605a      	str	r2, [r3, #4]
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	4a08      	ldr	r2, [pc, #32]	; (8006a64 <vTaskSwitchContext+0xb8>)
 8006a44:	6013      	str	r3, [r2, #0]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	20000d9c 	.word	0x20000d9c
 8006a58:	20000d88 	.word	0x20000d88
 8006a5c:	20000d7c 	.word	0x20000d7c
 8006a60:	20000c78 	.word	0x20000c78
 8006a64:	20000c74 	.word	0x20000c74

08006a68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10c      	bne.n	8006a92 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	b672      	cpsid	i
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	b662      	cpsie	i
 8006a8c:	60fb      	str	r3, [r7, #12]
}
 8006a8e:	bf00      	nop
 8006a90:	e7fe      	b.n	8006a90 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a92:	4b07      	ldr	r3, [pc, #28]	; (8006ab0 <vTaskPlaceOnEventList+0x48>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3318      	adds	r3, #24
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7fe fe17 	bl	80056ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	6838      	ldr	r0, [r7, #0]
 8006aa4:	f000 fa72 	bl	8006f8c <prvAddCurrentTaskToDelayedList>
}
 8006aa8:	bf00      	nop
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	20000c74 	.word	0x20000c74

08006ab4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10c      	bne.n	8006ae4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	b672      	cpsid	i
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	b662      	cpsie	i
 8006ade:	60fb      	str	r3, [r7, #12]
}
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	3318      	adds	r3, #24
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7fe fe29 	bl	8005740 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aee:	4b1d      	ldr	r3, [pc, #116]	; (8006b64 <xTaskRemoveFromEventList+0xb0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d11c      	bne.n	8006b30 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	3304      	adds	r3, #4
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fe fe20 	bl	8005740 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	2201      	movs	r2, #1
 8006b06:	409a      	lsls	r2, r3
 8006b08:	4b17      	ldr	r3, [pc, #92]	; (8006b68 <xTaskRemoveFromEventList+0xb4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	4a16      	ldr	r2, [pc, #88]	; (8006b68 <xTaskRemoveFromEventList+0xb4>)
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b16:	4613      	mov	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4a13      	ldr	r2, [pc, #76]	; (8006b6c <xTaskRemoveFromEventList+0xb8>)
 8006b20:	441a      	add	r2, r3
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4619      	mov	r1, r3
 8006b28:	4610      	mov	r0, r2
 8006b2a:	f7fe fdac 	bl	8005686 <vListInsertEnd>
 8006b2e:	e005      	b.n	8006b3c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	3318      	adds	r3, #24
 8006b34:	4619      	mov	r1, r3
 8006b36:	480e      	ldr	r0, [pc, #56]	; (8006b70 <xTaskRemoveFromEventList+0xbc>)
 8006b38:	f7fe fda5 	bl	8005686 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b40:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <xTaskRemoveFromEventList+0xc0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d905      	bls.n	8006b56 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b4e:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <xTaskRemoveFromEventList+0xc4>)
 8006b50:	2201      	movs	r2, #1
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	e001      	b.n	8006b5a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b5a:	697b      	ldr	r3, [r7, #20]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20000d9c 	.word	0x20000d9c
 8006b68:	20000d7c 	.word	0x20000d7c
 8006b6c:	20000c78 	.word	0x20000c78
 8006b70:	20000d34 	.word	0x20000d34
 8006b74:	20000c74 	.word	0x20000c74
 8006b78:	20000d88 	.word	0x20000d88

08006b7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <vTaskInternalSetTimeOutState+0x24>)
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b8c:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <vTaskInternalSetTimeOutState+0x28>)
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	605a      	str	r2, [r3, #4]
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	20000d8c 	.word	0x20000d8c
 8006ba4:	20000d78 	.word	0x20000d78

08006ba8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10c      	bne.n	8006bd2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbc:	b672      	cpsid	i
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	b662      	cpsie	i
 8006bcc:	613b      	str	r3, [r7, #16]
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10c      	bne.n	8006bf2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	b672      	cpsid	i
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	b662      	cpsie	i
 8006bec:	60fb      	str	r3, [r7, #12]
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006bf2:	f000 fb3b 	bl	800726c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bf6:	4b1d      	ldr	r3, [pc, #116]	; (8006c6c <xTaskCheckForTimeOut+0xc4>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0e:	d102      	bne.n	8006c16 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	61fb      	str	r3, [r7, #28]
 8006c14:	e023      	b.n	8006c5e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b15      	ldr	r3, [pc, #84]	; (8006c70 <xTaskCheckForTimeOut+0xc8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d007      	beq.n	8006c32 <xTaskCheckForTimeOut+0x8a>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d302      	bcc.n	8006c32 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	61fb      	str	r3, [r7, #28]
 8006c30:	e015      	b.n	8006c5e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d20b      	bcs.n	8006c54 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	1ad2      	subs	r2, r2, r3
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff ff97 	bl	8006b7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	61fb      	str	r3, [r7, #28]
 8006c52:	e004      	b.n	8006c5e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2200      	movs	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c5e:	f000 fb39 	bl	80072d4 <vPortExitCritical>

	return xReturn;
 8006c62:	69fb      	ldr	r3, [r7, #28]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3720      	adds	r7, #32
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20000d78 	.word	0x20000d78
 8006c70:	20000d8c 	.word	0x20000d8c

08006c74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c78:	4b03      	ldr	r3, [pc, #12]	; (8006c88 <vTaskMissedYield+0x14>)
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]
}
 8006c7e:	bf00      	nop
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	20000d88 	.word	0x20000d88

08006c8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c94:	f000 f852 	bl	8006d3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c98:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <prvIdleTask+0x28>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d9f9      	bls.n	8006c94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ca0:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <prvIdleTask+0x2c>)
 8006ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006cb0:	e7f0      	b.n	8006c94 <prvIdleTask+0x8>
 8006cb2:	bf00      	nop
 8006cb4:	20000c78 	.word	0x20000c78
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	607b      	str	r3, [r7, #4]
 8006cc6:	e00c      	b.n	8006ce2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4a12      	ldr	r2, [pc, #72]	; (8006d1c <prvInitialiseTaskLists+0x60>)
 8006cd4:	4413      	add	r3, r2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fe fca8 	bl	800562c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	607b      	str	r3, [r7, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b06      	cmp	r3, #6
 8006ce6:	d9ef      	bls.n	8006cc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ce8:	480d      	ldr	r0, [pc, #52]	; (8006d20 <prvInitialiseTaskLists+0x64>)
 8006cea:	f7fe fc9f 	bl	800562c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cee:	480d      	ldr	r0, [pc, #52]	; (8006d24 <prvInitialiseTaskLists+0x68>)
 8006cf0:	f7fe fc9c 	bl	800562c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cf4:	480c      	ldr	r0, [pc, #48]	; (8006d28 <prvInitialiseTaskLists+0x6c>)
 8006cf6:	f7fe fc99 	bl	800562c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cfa:	480c      	ldr	r0, [pc, #48]	; (8006d2c <prvInitialiseTaskLists+0x70>)
 8006cfc:	f7fe fc96 	bl	800562c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d00:	480b      	ldr	r0, [pc, #44]	; (8006d30 <prvInitialiseTaskLists+0x74>)
 8006d02:	f7fe fc93 	bl	800562c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d06:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <prvInitialiseTaskLists+0x78>)
 8006d08:	4a05      	ldr	r2, [pc, #20]	; (8006d20 <prvInitialiseTaskLists+0x64>)
 8006d0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <prvInitialiseTaskLists+0x7c>)
 8006d0e:	4a05      	ldr	r2, [pc, #20]	; (8006d24 <prvInitialiseTaskLists+0x68>)
 8006d10:	601a      	str	r2, [r3, #0]
}
 8006d12:	bf00      	nop
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20000c78 	.word	0x20000c78
 8006d20:	20000d04 	.word	0x20000d04
 8006d24:	20000d18 	.word	0x20000d18
 8006d28:	20000d34 	.word	0x20000d34
 8006d2c:	20000d48 	.word	0x20000d48
 8006d30:	20000d60 	.word	0x20000d60
 8006d34:	20000d2c 	.word	0x20000d2c
 8006d38:	20000d30 	.word	0x20000d30

08006d3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d42:	e019      	b.n	8006d78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d44:	f000 fa92 	bl	800726c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d48:	4b10      	ldr	r3, [pc, #64]	; (8006d8c <prvCheckTasksWaitingTermination+0x50>)
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3304      	adds	r3, #4
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe fcf3 	bl	8005740 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d5a:	4b0d      	ldr	r3, [pc, #52]	; (8006d90 <prvCheckTasksWaitingTermination+0x54>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	4a0b      	ldr	r2, [pc, #44]	; (8006d90 <prvCheckTasksWaitingTermination+0x54>)
 8006d62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d64:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <prvCheckTasksWaitingTermination+0x58>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	4a0a      	ldr	r2, [pc, #40]	; (8006d94 <prvCheckTasksWaitingTermination+0x58>)
 8006d6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d6e:	f000 fab1 	bl	80072d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f810 	bl	8006d98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d78:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <prvCheckTasksWaitingTermination+0x58>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e1      	bne.n	8006d44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20000d48 	.word	0x20000d48
 8006d90:	20000d74 	.word	0x20000d74
 8006d94:	20000d5c 	.word	0x20000d5c

08006d98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d108      	bne.n	8006dbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fc52 	bl	8007658 <vPortFree>
				vPortFree( pxTCB );
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fc4f 	bl	8007658 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006dba:	e01a      	b.n	8006df2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d103      	bne.n	8006dce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fc46 	bl	8007658 <vPortFree>
	}
 8006dcc:	e011      	b.n	8006df2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d00c      	beq.n	8006df2 <prvDeleteTCB+0x5a>
	__asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ddc:	b672      	cpsid	i
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	b662      	cpsie	i
 8006dec:	60fb      	str	r3, [r7, #12]
}
 8006dee:	bf00      	nop
 8006df0:	e7fe      	b.n	8006df0 <prvDeleteTCB+0x58>
	}
 8006df2:	bf00      	nop
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e02:	4b0c      	ldr	r3, [pc, #48]	; (8006e34 <prvResetNextTaskUnblockTime+0x38>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d104      	bne.n	8006e16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e0c:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <prvResetNextTaskUnblockTime+0x3c>)
 8006e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e14:	e008      	b.n	8006e28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e16:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <prvResetNextTaskUnblockTime+0x38>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	4a04      	ldr	r2, [pc, #16]	; (8006e38 <prvResetNextTaskUnblockTime+0x3c>)
 8006e26:	6013      	str	r3, [r2, #0]
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	20000d2c 	.word	0x20000d2c
 8006e38:	20000d94 	.word	0x20000d94

08006e3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e42:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <xTaskGetSchedulerState+0x34>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d102      	bne.n	8006e50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	607b      	str	r3, [r7, #4]
 8006e4e:	e008      	b.n	8006e62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e50:	4b08      	ldr	r3, [pc, #32]	; (8006e74 <xTaskGetSchedulerState+0x38>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d102      	bne.n	8006e5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e58:	2302      	movs	r3, #2
 8006e5a:	607b      	str	r3, [r7, #4]
 8006e5c:	e001      	b.n	8006e62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e62:	687b      	ldr	r3, [r7, #4]
	}
 8006e64:	4618      	mov	r0, r3
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	20000d80 	.word	0x20000d80
 8006e74:	20000d9c 	.word	0x20000d9c

08006e78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e84:	2300      	movs	r3, #0
 8006e86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d072      	beq.n	8006f74 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e8e:	4b3c      	ldr	r3, [pc, #240]	; (8006f80 <xTaskPriorityDisinherit+0x108>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d00c      	beq.n	8006eb2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	b672      	cpsid	i
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	b662      	cpsie	i
 8006eac:	60fb      	str	r3, [r7, #12]
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10c      	bne.n	8006ed4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	b672      	cpsid	i
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	b662      	cpsie	i
 8006ece:	60bb      	str	r3, [r7, #8]
}
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed8:	1e5a      	subs	r2, r3, #1
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d044      	beq.n	8006f74 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d140      	bne.n	8006f74 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe fc22 	bl	8005740 <uxListRemove>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d115      	bne.n	8006f2e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f06:	491f      	ldr	r1, [pc, #124]	; (8006f84 <xTaskPriorityDisinherit+0x10c>)
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	440b      	add	r3, r1
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <xTaskPriorityDisinherit+0xb6>
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f22:	43da      	mvns	r2, r3
 8006f24:	4b18      	ldr	r3, [pc, #96]	; (8006f88 <xTaskPriorityDisinherit+0x110>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	4a17      	ldr	r2, [pc, #92]	; (8006f88 <xTaskPriorityDisinherit+0x110>)
 8006f2c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3a:	f1c3 0207 	rsb	r2, r3, #7
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f46:	2201      	movs	r2, #1
 8006f48:	409a      	lsls	r2, r3
 8006f4a:	4b0f      	ldr	r3, [pc, #60]	; (8006f88 <xTaskPriorityDisinherit+0x110>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	4a0d      	ldr	r2, [pc, #52]	; (8006f88 <xTaskPriorityDisinherit+0x110>)
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f58:	4613      	mov	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4a08      	ldr	r2, [pc, #32]	; (8006f84 <xTaskPriorityDisinherit+0x10c>)
 8006f62:	441a      	add	r2, r3
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	3304      	adds	r3, #4
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	f7fe fb8b 	bl	8005686 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f70:	2301      	movs	r3, #1
 8006f72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f74:	697b      	ldr	r3, [r7, #20]
	}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000c74 	.word	0x20000c74
 8006f84:	20000c78 	.word	0x20000c78
 8006f88:	20000d7c 	.word	0x20000d7c

08006f8c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f96:	4b29      	ldr	r3, [pc, #164]	; (800703c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f9c:	4b28      	ldr	r3, [pc, #160]	; (8007040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe fbcc 	bl	8005740 <uxListRemove>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10b      	bne.n	8006fc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006fae:	4b24      	ldr	r3, [pc, #144]	; (8007040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fba:	43da      	mvns	r2, r3
 8006fbc:	4b21      	ldr	r3, [pc, #132]	; (8007044 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	4a20      	ldr	r2, [pc, #128]	; (8007044 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006fc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fcc:	d10a      	bne.n	8006fe4 <prvAddCurrentTaskToDelayedList+0x58>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fd4:	4b1a      	ldr	r3, [pc, #104]	; (8007040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	4619      	mov	r1, r3
 8006fdc:	481a      	ldr	r0, [pc, #104]	; (8007048 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006fde:	f7fe fb52 	bl	8005686 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fe2:	e026      	b.n	8007032 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4413      	add	r3, r2
 8006fea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fec:	4b14      	ldr	r3, [pc, #80]	; (8007040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d209      	bcs.n	8007010 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ffc:	4b13      	ldr	r3, [pc, #76]	; (800704c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	4b0f      	ldr	r3, [pc, #60]	; (8007040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3304      	adds	r3, #4
 8007006:	4619      	mov	r1, r3
 8007008:	4610      	mov	r0, r2
 800700a:	f7fe fb60 	bl	80056ce <vListInsert>
}
 800700e:	e010      	b.n	8007032 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007010:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3304      	adds	r3, #4
 800701a:	4619      	mov	r1, r3
 800701c:	4610      	mov	r0, r2
 800701e:	f7fe fb56 	bl	80056ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007022:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	429a      	cmp	r2, r3
 800702a:	d202      	bcs.n	8007032 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800702c:	4a09      	ldr	r2, [pc, #36]	; (8007054 <prvAddCurrentTaskToDelayedList+0xc8>)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	6013      	str	r3, [r2, #0]
}
 8007032:	bf00      	nop
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20000d78 	.word	0x20000d78
 8007040:	20000c74 	.word	0x20000c74
 8007044:	20000d7c 	.word	0x20000d7c
 8007048:	20000d60 	.word	0x20000d60
 800704c:	20000d30 	.word	0x20000d30
 8007050:	20000d2c 	.word	0x20000d2c
 8007054:	20000d94 	.word	0x20000d94

08007058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3b04      	subs	r3, #4
 8007068:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3b04      	subs	r3, #4
 8007076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f023 0201 	bic.w	r2, r3, #1
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3b04      	subs	r3, #4
 8007086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007088:	4a0c      	ldr	r2, [pc, #48]	; (80070bc <pxPortInitialiseStack+0x64>)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3b14      	subs	r3, #20
 8007092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3b04      	subs	r3, #4
 800709e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f06f 0202 	mvn.w	r2, #2
 80070a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3b20      	subs	r3, #32
 80070ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070ae:	68fb      	ldr	r3, [r7, #12]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	080070c1 	.word	0x080070c1

080070c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070ca:	4b14      	ldr	r3, [pc, #80]	; (800711c <prvTaskExitError+0x5c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d2:	d00c      	beq.n	80070ee <prvTaskExitError+0x2e>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	b672      	cpsid	i
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	b662      	cpsie	i
 80070e8:	60fb      	str	r3, [r7, #12]
}
 80070ea:	bf00      	nop
 80070ec:	e7fe      	b.n	80070ec <prvTaskExitError+0x2c>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	b672      	cpsid	i
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	b662      	cpsie	i
 8007102:	60bb      	str	r3, [r7, #8]
}
 8007104:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007106:	bf00      	nop
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0fc      	beq.n	8007108 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800710e:	bf00      	nop
 8007110:	bf00      	nop
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	200000a8 	.word	0x200000a8

08007120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007120:	4b07      	ldr	r3, [pc, #28]	; (8007140 <pxCurrentTCBConst2>)
 8007122:	6819      	ldr	r1, [r3, #0]
 8007124:	6808      	ldr	r0, [r1, #0]
 8007126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712a:	f380 8809 	msr	PSP, r0
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f04f 0000 	mov.w	r0, #0
 8007136:	f380 8811 	msr	BASEPRI, r0
 800713a:	4770      	bx	lr
 800713c:	f3af 8000 	nop.w

08007140 <pxCurrentTCBConst2>:
 8007140:	20000c74 	.word	0x20000c74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop

08007148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007148:	4808      	ldr	r0, [pc, #32]	; (800716c <prvPortStartFirstTask+0x24>)
 800714a:	6800      	ldr	r0, [r0, #0]
 800714c:	6800      	ldr	r0, [r0, #0]
 800714e:	f380 8808 	msr	MSP, r0
 8007152:	f04f 0000 	mov.w	r0, #0
 8007156:	f380 8814 	msr	CONTROL, r0
 800715a:	b662      	cpsie	i
 800715c:	b661      	cpsie	f
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	df00      	svc	0
 8007168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800716a:	bf00      	nop
 800716c:	e000ed08 	.word	0xe000ed08

08007170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007176:	4b37      	ldr	r3, [pc, #220]	; (8007254 <xPortStartScheduler+0xe4>)
 8007178:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b2db      	uxtb	r3, r3
 8007180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	22ff      	movs	r2, #255	; 0xff
 8007186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007198:	b2da      	uxtb	r2, r3
 800719a:	4b2f      	ldr	r3, [pc, #188]	; (8007258 <xPortStartScheduler+0xe8>)
 800719c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800719e:	4b2f      	ldr	r3, [pc, #188]	; (800725c <xPortStartScheduler+0xec>)
 80071a0:	2207      	movs	r2, #7
 80071a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071a4:	e009      	b.n	80071ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80071a6:	4b2d      	ldr	r3, [pc, #180]	; (800725c <xPortStartScheduler+0xec>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	4a2b      	ldr	r2, [pc, #172]	; (800725c <xPortStartScheduler+0xec>)
 80071ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071b0:	78fb      	ldrb	r3, [r7, #3]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071ba:	78fb      	ldrb	r3, [r7, #3]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c2:	2b80      	cmp	r3, #128	; 0x80
 80071c4:	d0ef      	beq.n	80071a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071c6:	4b25      	ldr	r3, [pc, #148]	; (800725c <xPortStartScheduler+0xec>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f1c3 0307 	rsb	r3, r3, #7
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d00c      	beq.n	80071ec <xPortStartScheduler+0x7c>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	b672      	cpsid	i
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	b662      	cpsie	i
 80071e6:	60bb      	str	r3, [r7, #8]
}
 80071e8:	bf00      	nop
 80071ea:	e7fe      	b.n	80071ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071ec:	4b1b      	ldr	r3, [pc, #108]	; (800725c <xPortStartScheduler+0xec>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	021b      	lsls	r3, r3, #8
 80071f2:	4a1a      	ldr	r2, [pc, #104]	; (800725c <xPortStartScheduler+0xec>)
 80071f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071f6:	4b19      	ldr	r3, [pc, #100]	; (800725c <xPortStartScheduler+0xec>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071fe:	4a17      	ldr	r2, [pc, #92]	; (800725c <xPortStartScheduler+0xec>)
 8007200:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	b2da      	uxtb	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800720a:	4b15      	ldr	r3, [pc, #84]	; (8007260 <xPortStartScheduler+0xf0>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a14      	ldr	r2, [pc, #80]	; (8007260 <xPortStartScheduler+0xf0>)
 8007210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007214:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007216:	4b12      	ldr	r3, [pc, #72]	; (8007260 <xPortStartScheduler+0xf0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a11      	ldr	r2, [pc, #68]	; (8007260 <xPortStartScheduler+0xf0>)
 800721c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007220:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007222:	f000 f8dd 	bl	80073e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007226:	4b0f      	ldr	r3, [pc, #60]	; (8007264 <xPortStartScheduler+0xf4>)
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800722c:	f000 f8fc 	bl	8007428 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007230:	4b0d      	ldr	r3, [pc, #52]	; (8007268 <xPortStartScheduler+0xf8>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a0c      	ldr	r2, [pc, #48]	; (8007268 <xPortStartScheduler+0xf8>)
 8007236:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800723a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800723c:	f7ff ff84 	bl	8007148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007240:	f7ff fbb4 	bl	80069ac <vTaskSwitchContext>
	prvTaskExitError();
 8007244:	f7ff ff3c 	bl	80070c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	e000e400 	.word	0xe000e400
 8007258:	20000da0 	.word	0x20000da0
 800725c:	20000da4 	.word	0x20000da4
 8007260:	e000ed20 	.word	0xe000ed20
 8007264:	200000a8 	.word	0x200000a8
 8007268:	e000ef34 	.word	0xe000ef34

0800726c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	b672      	cpsid	i
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	b662      	cpsie	i
 8007286:	607b      	str	r3, [r7, #4]
}
 8007288:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800728a:	4b10      	ldr	r3, [pc, #64]	; (80072cc <vPortEnterCritical+0x60>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3301      	adds	r3, #1
 8007290:	4a0e      	ldr	r2, [pc, #56]	; (80072cc <vPortEnterCritical+0x60>)
 8007292:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007294:	4b0d      	ldr	r3, [pc, #52]	; (80072cc <vPortEnterCritical+0x60>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d111      	bne.n	80072c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800729c:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <vPortEnterCritical+0x64>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00c      	beq.n	80072c0 <vPortEnterCritical+0x54>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	b672      	cpsid	i
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	b662      	cpsie	i
 80072ba:	603b      	str	r3, [r7, #0]
}
 80072bc:	bf00      	nop
 80072be:	e7fe      	b.n	80072be <vPortEnterCritical+0x52>
	}
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	200000a8 	.word	0x200000a8
 80072d0:	e000ed04 	.word	0xe000ed04

080072d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072da:	4b13      	ldr	r3, [pc, #76]	; (8007328 <vPortExitCritical+0x54>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10c      	bne.n	80072fc <vPortExitCritical+0x28>
	__asm volatile
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	b672      	cpsid	i
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	b662      	cpsie	i
 80072f6:	607b      	str	r3, [r7, #4]
}
 80072f8:	bf00      	nop
 80072fa:	e7fe      	b.n	80072fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <vPortExitCritical+0x54>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3b01      	subs	r3, #1
 8007302:	4a09      	ldr	r2, [pc, #36]	; (8007328 <vPortExitCritical+0x54>)
 8007304:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007306:	4b08      	ldr	r3, [pc, #32]	; (8007328 <vPortExitCritical+0x54>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d105      	bne.n	800731a <vPortExitCritical+0x46>
 800730e:	2300      	movs	r3, #0
 8007310:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	f383 8811 	msr	BASEPRI, r3
}
 8007318:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800731a:	bf00      	nop
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	200000a8 	.word	0x200000a8
 800732c:	00000000 	.word	0x00000000

08007330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007330:	f3ef 8009 	mrs	r0, PSP
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	4b15      	ldr	r3, [pc, #84]	; (8007390 <pxCurrentTCBConst>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	f01e 0f10 	tst.w	lr, #16
 8007340:	bf08      	it	eq
 8007342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734a:	6010      	str	r0, [r2, #0]
 800734c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007354:	b672      	cpsid	i
 8007356:	f380 8811 	msr	BASEPRI, r0
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	b662      	cpsie	i
 8007364:	f7ff fb22 	bl	80069ac <vTaskSwitchContext>
 8007368:	f04f 0000 	mov.w	r0, #0
 800736c:	f380 8811 	msr	BASEPRI, r0
 8007370:	bc09      	pop	{r0, r3}
 8007372:	6819      	ldr	r1, [r3, #0]
 8007374:	6808      	ldr	r0, [r1, #0]
 8007376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737a:	f01e 0f10 	tst.w	lr, #16
 800737e:	bf08      	it	eq
 8007380:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007384:	f380 8809 	msr	PSP, r0
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop

08007390 <pxCurrentTCBConst>:
 8007390:	20000c74 	.word	0x20000c74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop

08007398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	b672      	cpsid	i
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	b662      	cpsie	i
 80073b2:	607b      	str	r3, [r7, #4]
}
 80073b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073b6:	f7ff fa3f 	bl	8006838 <xTaskIncrementTick>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073c0:	4b06      	ldr	r3, [pc, #24]	; (80073dc <SysTick_Handler+0x44>)
 80073c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	2300      	movs	r3, #0
 80073ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	f383 8811 	msr	BASEPRI, r3
}
 80073d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	e000ed04 	.word	0xe000ed04

080073e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073e4:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <vPortSetupTimerInterrupt+0x34>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073ea:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <vPortSetupTimerInterrupt+0x38>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073f0:	4b0a      	ldr	r3, [pc, #40]	; (800741c <vPortSetupTimerInterrupt+0x3c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a0a      	ldr	r2, [pc, #40]	; (8007420 <vPortSetupTimerInterrupt+0x40>)
 80073f6:	fba2 2303 	umull	r2, r3, r2, r3
 80073fa:	099b      	lsrs	r3, r3, #6
 80073fc:	4a09      	ldr	r2, [pc, #36]	; (8007424 <vPortSetupTimerInterrupt+0x44>)
 80073fe:	3b01      	subs	r3, #1
 8007400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007402:	4b04      	ldr	r3, [pc, #16]	; (8007414 <vPortSetupTimerInterrupt+0x34>)
 8007404:	2207      	movs	r2, #7
 8007406:	601a      	str	r2, [r3, #0]
}
 8007408:	bf00      	nop
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	e000e010 	.word	0xe000e010
 8007418:	e000e018 	.word	0xe000e018
 800741c:	2000009c 	.word	0x2000009c
 8007420:	10624dd3 	.word	0x10624dd3
 8007424:	e000e014 	.word	0xe000e014

08007428 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007428:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007438 <vPortEnableVFP+0x10>
 800742c:	6801      	ldr	r1, [r0, #0]
 800742e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007432:	6001      	str	r1, [r0, #0]
 8007434:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007436:	bf00      	nop
 8007438:	e000ed88 	.word	0xe000ed88

0800743c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007442:	f3ef 8305 	mrs	r3, IPSR
 8007446:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b0f      	cmp	r3, #15
 800744c:	d916      	bls.n	800747c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800744e:	4a19      	ldr	r2, [pc, #100]	; (80074b4 <vPortValidateInterruptPriority+0x78>)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007458:	4b17      	ldr	r3, [pc, #92]	; (80074b8 <vPortValidateInterruptPriority+0x7c>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	7afa      	ldrb	r2, [r7, #11]
 800745e:	429a      	cmp	r2, r3
 8007460:	d20c      	bcs.n	800747c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	b672      	cpsid	i
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	b662      	cpsie	i
 8007476:	607b      	str	r3, [r7, #4]
}
 8007478:	bf00      	nop
 800747a:	e7fe      	b.n	800747a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800747c:	4b0f      	ldr	r3, [pc, #60]	; (80074bc <vPortValidateInterruptPriority+0x80>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007484:	4b0e      	ldr	r3, [pc, #56]	; (80074c0 <vPortValidateInterruptPriority+0x84>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d90c      	bls.n	80074a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	b672      	cpsid	i
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	b662      	cpsie	i
 80074a0:	603b      	str	r3, [r7, #0]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <vPortValidateInterruptPriority+0x68>
	}
 80074a6:	bf00      	nop
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	e000e3f0 	.word	0xe000e3f0
 80074b8:	20000da0 	.word	0x20000da0
 80074bc:	e000ed0c 	.word	0xe000ed0c
 80074c0:	20000da4 	.word	0x20000da4

080074c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08a      	sub	sp, #40	; 0x28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074cc:	2300      	movs	r3, #0
 80074ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074d0:	f7ff f906 	bl	80066e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074d4:	4b5b      	ldr	r3, [pc, #364]	; (8007644 <pvPortMalloc+0x180>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074dc:	f000 f91a 	bl	8007714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074e0:	4b59      	ldr	r3, [pc, #356]	; (8007648 <pvPortMalloc+0x184>)
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4013      	ands	r3, r2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f040 8092 	bne.w	8007612 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01f      	beq.n	8007534 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80074f4:	2208      	movs	r2, #8
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4413      	add	r3, r2
 80074fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	2b00      	cmp	r3, #0
 8007504:	d016      	beq.n	8007534 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f023 0307 	bic.w	r3, r3, #7
 800750c:	3308      	adds	r3, #8
 800750e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00c      	beq.n	8007534 <pvPortMalloc+0x70>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	b672      	cpsid	i
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	b662      	cpsie	i
 800752e:	617b      	str	r3, [r7, #20]
}
 8007530:	bf00      	nop
 8007532:	e7fe      	b.n	8007532 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d06b      	beq.n	8007612 <pvPortMalloc+0x14e>
 800753a:	4b44      	ldr	r3, [pc, #272]	; (800764c <pvPortMalloc+0x188>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	429a      	cmp	r2, r3
 8007542:	d866      	bhi.n	8007612 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007544:	4b42      	ldr	r3, [pc, #264]	; (8007650 <pvPortMalloc+0x18c>)
 8007546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007548:	4b41      	ldr	r3, [pc, #260]	; (8007650 <pvPortMalloc+0x18c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800754e:	e004      	b.n	800755a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	429a      	cmp	r2, r3
 8007562:	d903      	bls.n	800756c <pvPortMalloc+0xa8>
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1f1      	bne.n	8007550 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800756c:	4b35      	ldr	r3, [pc, #212]	; (8007644 <pvPortMalloc+0x180>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007572:	429a      	cmp	r2, r3
 8007574:	d04d      	beq.n	8007612 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2208      	movs	r2, #8
 800757c:	4413      	add	r3, r2
 800757e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	1ad2      	subs	r2, r2, r3
 8007590:	2308      	movs	r3, #8
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	429a      	cmp	r2, r3
 8007596:	d921      	bls.n	80075dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4413      	add	r3, r2
 800759e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00c      	beq.n	80075c4 <pvPortMalloc+0x100>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	b672      	cpsid	i
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	b662      	cpsie	i
 80075be:	613b      	str	r3, [r7, #16]
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	1ad2      	subs	r2, r2, r3
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075d6:	69b8      	ldr	r0, [r7, #24]
 80075d8:	f000 f8fe 	bl	80077d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075dc:	4b1b      	ldr	r3, [pc, #108]	; (800764c <pvPortMalloc+0x188>)
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	4a19      	ldr	r2, [pc, #100]	; (800764c <pvPortMalloc+0x188>)
 80075e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075ea:	4b18      	ldr	r3, [pc, #96]	; (800764c <pvPortMalloc+0x188>)
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	4b19      	ldr	r3, [pc, #100]	; (8007654 <pvPortMalloc+0x190>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d203      	bcs.n	80075fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075f6:	4b15      	ldr	r3, [pc, #84]	; (800764c <pvPortMalloc+0x188>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a16      	ldr	r2, [pc, #88]	; (8007654 <pvPortMalloc+0x190>)
 80075fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	4b11      	ldr	r3, [pc, #68]	; (8007648 <pvPortMalloc+0x184>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	431a      	orrs	r2, r3
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007612:	f7ff f873 	bl	80066fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00c      	beq.n	800763a <pvPortMalloc+0x176>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	b672      	cpsid	i
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	b662      	cpsie	i
 8007634:	60fb      	str	r3, [r7, #12]
}
 8007636:	bf00      	nop
 8007638:	e7fe      	b.n	8007638 <pvPortMalloc+0x174>
	return pvReturn;
 800763a:	69fb      	ldr	r3, [r7, #28]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3728      	adds	r7, #40	; 0x28
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	200049b0 	.word	0x200049b0
 8007648:	200049bc 	.word	0x200049bc
 800764c:	200049b4 	.word	0x200049b4
 8007650:	200049a8 	.word	0x200049a8
 8007654:	200049b8 	.word	0x200049b8

08007658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d04c      	beq.n	8007704 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800766a:	2308      	movs	r3, #8
 800766c:	425b      	negs	r3, r3
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4413      	add	r3, r2
 8007672:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	4b23      	ldr	r3, [pc, #140]	; (800770c <vPortFree+0xb4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4013      	ands	r3, r2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10c      	bne.n	80076a0 <vPortFree+0x48>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	b672      	cpsid	i
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	b662      	cpsie	i
 800769a:	60fb      	str	r3, [r7, #12]
}
 800769c:	bf00      	nop
 800769e:	e7fe      	b.n	800769e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00c      	beq.n	80076c2 <vPortFree+0x6a>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	b672      	cpsid	i
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	b662      	cpsie	i
 80076bc:	60bb      	str	r3, [r7, #8]
}
 80076be:	bf00      	nop
 80076c0:	e7fe      	b.n	80076c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	4b11      	ldr	r3, [pc, #68]	; (800770c <vPortFree+0xb4>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4013      	ands	r3, r2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d019      	beq.n	8007704 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d115      	bne.n	8007704 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	4b0b      	ldr	r3, [pc, #44]	; (800770c <vPortFree+0xb4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	43db      	mvns	r3, r3
 80076e2:	401a      	ands	r2, r3
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076e8:	f7fe fffa 	bl	80066e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	4b07      	ldr	r3, [pc, #28]	; (8007710 <vPortFree+0xb8>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4413      	add	r3, r2
 80076f6:	4a06      	ldr	r2, [pc, #24]	; (8007710 <vPortFree+0xb8>)
 80076f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076fa:	6938      	ldr	r0, [r7, #16]
 80076fc:	f000 f86c 	bl	80077d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007700:	f7fe fffc 	bl	80066fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007704:	bf00      	nop
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	200049bc 	.word	0x200049bc
 8007710:	200049b4 	.word	0x200049b4

08007714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800771a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800771e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007720:	4b27      	ldr	r3, [pc, #156]	; (80077c0 <prvHeapInit+0xac>)
 8007722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00c      	beq.n	8007748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3307      	adds	r3, #7
 8007732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0307 	bic.w	r3, r3, #7
 800773a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	4a1f      	ldr	r2, [pc, #124]	; (80077c0 <prvHeapInit+0xac>)
 8007744:	4413      	add	r3, r2
 8007746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800774c:	4a1d      	ldr	r2, [pc, #116]	; (80077c4 <prvHeapInit+0xb0>)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007752:	4b1c      	ldr	r3, [pc, #112]	; (80077c4 <prvHeapInit+0xb0>)
 8007754:	2200      	movs	r2, #0
 8007756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	4413      	add	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007760:	2208      	movs	r2, #8
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	1a9b      	subs	r3, r3, r2
 8007766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0307 	bic.w	r3, r3, #7
 800776e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4a15      	ldr	r2, [pc, #84]	; (80077c8 <prvHeapInit+0xb4>)
 8007774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007776:	4b14      	ldr	r3, [pc, #80]	; (80077c8 <prvHeapInit+0xb4>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2200      	movs	r2, #0
 800777c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800777e:	4b12      	ldr	r3, [pc, #72]	; (80077c8 <prvHeapInit+0xb4>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	1ad2      	subs	r2, r2, r3
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007794:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <prvHeapInit+0xb4>)
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	4a0a      	ldr	r2, [pc, #40]	; (80077cc <prvHeapInit+0xb8>)
 80077a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	4a09      	ldr	r2, [pc, #36]	; (80077d0 <prvHeapInit+0xbc>)
 80077aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077ac:	4b09      	ldr	r3, [pc, #36]	; (80077d4 <prvHeapInit+0xc0>)
 80077ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077b2:	601a      	str	r2, [r3, #0]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	20000da8 	.word	0x20000da8
 80077c4:	200049a8 	.word	0x200049a8
 80077c8:	200049b0 	.word	0x200049b0
 80077cc:	200049b8 	.word	0x200049b8
 80077d0:	200049b4 	.word	0x200049b4
 80077d4:	200049bc 	.word	0x200049bc

080077d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077e0:	4b28      	ldr	r3, [pc, #160]	; (8007884 <prvInsertBlockIntoFreeList+0xac>)
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e002      	b.n	80077ec <prvInsertBlockIntoFreeList+0x14>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d8f7      	bhi.n	80077e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	4413      	add	r3, r2
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	429a      	cmp	r2, r3
 8007806:	d108      	bne.n	800781a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	441a      	add	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	441a      	add	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	429a      	cmp	r2, r3
 800782c:	d118      	bne.n	8007860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	4b15      	ldr	r3, [pc, #84]	; (8007888 <prvInsertBlockIntoFreeList+0xb0>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	d00d      	beq.n	8007856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	441a      	add	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e008      	b.n	8007868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007856:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <prvInsertBlockIntoFreeList+0xb0>)
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	e003      	b.n	8007868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	429a      	cmp	r2, r3
 800786e:	d002      	beq.n	8007876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007876:	bf00      	nop
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	200049a8 	.word	0x200049a8
 8007888:	200049b0 	.word	0x200049b0

0800788c <memset>:
 800788c:	4402      	add	r2, r0
 800788e:	4603      	mov	r3, r0
 8007890:	4293      	cmp	r3, r2
 8007892:	d100      	bne.n	8007896 <memset+0xa>
 8007894:	4770      	bx	lr
 8007896:	f803 1b01 	strb.w	r1, [r3], #1
 800789a:	e7f9      	b.n	8007890 <memset+0x4>

0800789c <strcat>:
 800789c:	b510      	push	{r4, lr}
 800789e:	4602      	mov	r2, r0
 80078a0:	7814      	ldrb	r4, [r2, #0]
 80078a2:	4613      	mov	r3, r2
 80078a4:	3201      	adds	r2, #1
 80078a6:	2c00      	cmp	r4, #0
 80078a8:	d1fa      	bne.n	80078a0 <strcat+0x4>
 80078aa:	3b01      	subs	r3, #1
 80078ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078b4:	2a00      	cmp	r2, #0
 80078b6:	d1f9      	bne.n	80078ac <strcat+0x10>
 80078b8:	bd10      	pop	{r4, pc}
	...

080078bc <__libc_init_array>:
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	4d0d      	ldr	r5, [pc, #52]	; (80078f4 <__libc_init_array+0x38>)
 80078c0:	4c0d      	ldr	r4, [pc, #52]	; (80078f8 <__libc_init_array+0x3c>)
 80078c2:	1b64      	subs	r4, r4, r5
 80078c4:	10a4      	asrs	r4, r4, #2
 80078c6:	2600      	movs	r6, #0
 80078c8:	42a6      	cmp	r6, r4
 80078ca:	d109      	bne.n	80078e0 <__libc_init_array+0x24>
 80078cc:	4d0b      	ldr	r5, [pc, #44]	; (80078fc <__libc_init_array+0x40>)
 80078ce:	4c0c      	ldr	r4, [pc, #48]	; (8007900 <__libc_init_array+0x44>)
 80078d0:	f000 f826 	bl	8007920 <_init>
 80078d4:	1b64      	subs	r4, r4, r5
 80078d6:	10a4      	asrs	r4, r4, #2
 80078d8:	2600      	movs	r6, #0
 80078da:	42a6      	cmp	r6, r4
 80078dc:	d105      	bne.n	80078ea <__libc_init_array+0x2e>
 80078de:	bd70      	pop	{r4, r5, r6, pc}
 80078e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078e4:	4798      	blx	r3
 80078e6:	3601      	adds	r6, #1
 80078e8:	e7ee      	b.n	80078c8 <__libc_init_array+0xc>
 80078ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ee:	4798      	blx	r3
 80078f0:	3601      	adds	r6, #1
 80078f2:	e7f2      	b.n	80078da <__libc_init_array+0x1e>
 80078f4:	08007bfc 	.word	0x08007bfc
 80078f8:	08007bfc 	.word	0x08007bfc
 80078fc:	08007bfc 	.word	0x08007bfc
 8007900:	08007c00 	.word	0x08007c00

08007904 <memcpy>:
 8007904:	440a      	add	r2, r1
 8007906:	4291      	cmp	r1, r2
 8007908:	f100 33ff 	add.w	r3, r0, #4294967295
 800790c:	d100      	bne.n	8007910 <memcpy+0xc>
 800790e:	4770      	bx	lr
 8007910:	b510      	push	{r4, lr}
 8007912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800791a:	4291      	cmp	r1, r2
 800791c:	d1f9      	bne.n	8007912 <memcpy+0xe>
 800791e:	bd10      	pop	{r4, pc}

08007920 <_init>:
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007922:	bf00      	nop
 8007924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007926:	bc08      	pop	{r3}
 8007928:	469e      	mov	lr, r3
 800792a:	4770      	bx	lr

0800792c <_fini>:
 800792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792e:	bf00      	nop
 8007930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007932:	bc08      	pop	{r3}
 8007934:	469e      	mov	lr, r3
 8007936:	4770      	bx	lr
