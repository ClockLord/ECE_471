
ECE471_Hw7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08005ea4  08005ea4  00015ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800607c  0800607c  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006084  08006084  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006084  08006084  00016084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006088  08006088  00016088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800608c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  0800609c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  0800613c  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000047d0  20000150  080061dc  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20004920  080061dc  00024920  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001c9a3  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003b64  00000000  00000000  0003cb66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000017f8  00000000  00000000  000406d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000012a9  00000000  00000000  00041ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029798  00000000  00000000  00043171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001bf9f  00000000  00000000  0006c909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00101b00  00000000  00000000  000888a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000065b4  00000000  00000000  0018a3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  0019095c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000150 	.word	0x20000150
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005e8c 	.word	0x08005e8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000154 	.word	0x20000154
 800020c:	08005e8c 	.word	0x08005e8c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000016c 	.word	0x2000016c
 800053c:	200001c0 	.word	0x200001c0

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b09a      	sub	sp, #104	; 0x68
 8000544:	af00      	add	r7, sp, #0

//	printf("Encoded: ");
//	printf(morseEncodedMessage);
//	printf("\n");

	char* morseMessage = "S O S";
 8000546:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <main+0xb8>)
 8000548:	667b      	str	r3, [r7, #100]	; 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fdca 	bl	80010e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f865 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f9a7 	bl	80008a4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000556:	f000 f8c9 	bl	80006ec <MX_ETH_Init>
  MX_USART3_UART_Init();
 800055a:	f000 f945 	bl	80007e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055e:	f000 f973 	bl	8000848 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000562:	f000 f911 	bl	8000788 <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of MorseData */
  osMessageQStaticDef(MorseData, 50, uint16_t, MorseDataBuffer, &MorseDataControlBlock);
 8000566:	4b25      	ldr	r3, [pc, #148]	; (80005fc <main+0xbc>)
 8000568:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800056c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800056e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MorseDataHandle = osMessageCreate(osMessageQ(MorseData), NULL);
 8000572:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f004 f8ba 	bl	80046f2 <osMessageCreate>
 800057e:	4603      	mov	r3, r0
 8000580:	4a1f      	ldr	r2, [pc, #124]	; (8000600 <main+0xc0>)
 8000582:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 128);
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <main+0xc4>)
 8000586:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800058a:	461d      	mov	r5, r3
 800058c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000590:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000594:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000598:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 f847 	bl	8004632 <osThreadCreate>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a18      	ldr	r2, [pc, #96]	; (8000608 <main+0xc8>)
 80005a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartRead */
  osThreadDef(UartRead, Read, osPriorityHigh, 0, 128);
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <main+0xcc>)
 80005ac:	f107 041c 	add.w	r4, r7, #28
 80005b0:	461d      	mov	r5, r3
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UartReadHandle = osThreadCreate(osThread(UartRead), NULL);
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f004 f834 	bl	8004632 <osThreadCreate>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a10      	ldr	r2, [pc, #64]	; (8000610 <main+0xd0>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendUart */
  osThreadDef(SendUart, Send, osPriorityAboveNormal, 0, 128);
 80005d0:	4b10      	ldr	r3, [pc, #64]	; (8000614 <main+0xd4>)
 80005d2:	463c      	mov	r4, r7
 80005d4:	461d      	mov	r5, r3
 80005d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SendUartHandle = osThreadCreate(osThread(SendUart), NULL);
 80005e2:	463b      	mov	r3, r7
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 f823 	bl	8004632 <osThreadCreate>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <main+0xd8>)
 80005f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f2:	f004 f817 	bl	8004624 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80005f6:	e7fe      	b.n	80005f6 <main+0xb6>
 80005f8:	08005fa8 	.word	0x08005fa8
 80005fc:	08005fb0 	.word	0x08005fb0
 8000600:	20000acc 	.word	0x20000acc
 8000604:	08005fcc 	.word	0x08005fcc
 8000608:	20000ac0 	.word	0x20000ac0
 800060c:	08005ff4 	.word	0x08005ff4
 8000610:	20000ac4 	.word	0x20000ac4
 8000614:	0800601c 	.word	0x0800601c
 8000618:	20000ac8 	.word	0x20000ac8

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f005 fc02 	bl	8005e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000640:	f001 fcb6 	bl	8001fb0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <SystemClock_Config+0xc8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a26      	ldr	r2, [pc, #152]	; (80006e4 <SystemClock_Config+0xc8>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <SystemClock_Config+0xc8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xcc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000664:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemClock_Config+0xcc>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <SystemClock_Config+0xcc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000690:	2348      	movs	r3, #72	; 0x48
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000698:	2303      	movs	r3, #3
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fc95 	bl	8001fd0 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 fa1f 	bl	8000aee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2102      	movs	r1, #2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 ff23 	bl	8002518 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d8:	f000 fa09 	bl	8000aee <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	; 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_ETH_Init+0x84>)
 80006f2:	4a20      	ldr	r2, [pc, #128]	; (8000774 <MX_ETH_Init+0x88>)
 80006f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <MX_ETH_Init+0x8c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_ETH_Init+0x8c>)
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_ETH_Init+0x8c>)
 8000704:	22e1      	movs	r2, #225	; 0xe1
 8000706:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_ETH_Init+0x8c>)
 800070a:	2200      	movs	r2, #0
 800070c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_ETH_Init+0x8c>)
 8000710:	2200      	movs	r2, #0
 8000712:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_ETH_Init+0x8c>)
 8000716:	2200      	movs	r2, #0
 8000718:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_ETH_Init+0x84>)
 800071c:	4a16      	ldr	r2, [pc, #88]	; (8000778 <MX_ETH_Init+0x8c>)
 800071e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_ETH_Init+0x84>)
 8000722:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000726:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_ETH_Init+0x84>)
 800072a:	4a14      	ldr	r2, [pc, #80]	; (800077c <MX_ETH_Init+0x90>)
 800072c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_ETH_Init+0x84>)
 8000730:	4a13      	ldr	r2, [pc, #76]	; (8000780 <MX_ETH_Init+0x94>)
 8000732:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_ETH_Init+0x84>)
 8000736:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800073a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <MX_ETH_Init+0x84>)
 800073e:	f000 fe03 	bl	8001348 <HAL_ETH_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000748:	f000 f9d1 	bl	8000aee <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800074c:	2238      	movs	r2, #56	; 0x38
 800074e:	2100      	movs	r1, #0
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <MX_ETH_Init+0x98>)
 8000752:	f005 fb6f 	bl	8005e34 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_ETH_Init+0x98>)
 8000758:	2221      	movs	r2, #33	; 0x21
 800075a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_ETH_Init+0x98>)
 800075e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000762:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_ETH_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200003f8 	.word	0x200003f8
 8000774:	40028000 	.word	0x40028000
 8000778:	20000b7c 	.word	0x20000b7c
 800077c:	200000b0 	.word	0x200000b0
 8000780:	20000010 	.word	0x20000010
 8000784:	200003c0 	.word	0x200003c0

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <MX_USART2_UART_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007cc:	f002 ffcc 	bl	8003768 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 f98a 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200004a8 	.word	0x200004a8
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_USART3_UART_Init+0x58>)
 80007ee:	4a15      	ldr	r2, [pc, #84]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_USART3_UART_Init+0x58>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART3_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART3_UART_Init+0x58>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART3_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USART3_UART_Init+0x58>)
 800082c:	f002 ff9c 	bl	8003768 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000836:	f000 f95a 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000530 	.word	0x20000530
 8000844:	40004800 	.word	0x40004800

08000848 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000852:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	2206      	movs	r2, #6
 8000858:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085c:	2202      	movs	r2, #2
 800085e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2202      	movs	r2, #2
 800086a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2201      	movs	r2, #1
 8000870:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	2201      	movs	r2, #1
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088c:	f001 fa47 	bl	8001d1e <HAL_PCD_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 f92a 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200005b8 	.word	0x200005b8

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b47      	ldr	r3, [pc, #284]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a46      	ldr	r2, [pc, #280]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b44      	ldr	r3, [pc, #272]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	4b41      	ldr	r3, [pc, #260]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a40      	ldr	r2, [pc, #256]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a3a      	ldr	r2, [pc, #232]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b38      	ldr	r3, [pc, #224]	; (80009d8 <MX_GPIO_Init+0x134>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a34      	ldr	r2, [pc, #208]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a2e      	ldr	r2, [pc, #184]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000932:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a28      	ldr	r2, [pc, #160]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000950:	4822      	ldr	r0, [pc, #136]	; (80009dc <MX_GPIO_Init+0x138>)
 8000952:	f001 f9cb 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2140      	movs	r1, #64	; 0x40
 800095a:	4821      	ldr	r0, [pc, #132]	; (80009e0 <MX_GPIO_Init+0x13c>)
 800095c:	f001 f9c6 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000966:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	481b      	ldr	r0, [pc, #108]	; (80009e4 <MX_GPIO_Init+0x140>)
 8000978:	f001 f80c 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800097c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_GPIO_Init+0x138>)
 8000996:	f000 fffd 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800099a:	2340      	movs	r3, #64	; 0x40
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	480b      	ldr	r0, [pc, #44]	; (80009e0 <MX_GPIO_Init+0x13c>)
 80009b2:	f000 ffef 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_GPIO_Init+0x13c>)
 80009ca:	f000 ffe3 	bl	8001994 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ce:	bf00      	nop
 80009d0:	3730      	adds	r7, #48	; 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40021800 	.word	0x40021800
 80009e4:	40020800 	.word	0x40020800

080009e8 <morseCodeBlink>:
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
void morseCodeBlink(char* morseCode){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	int dotCount =0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
	for (int i = 0; morseCode[i] != '\0'; i++)  {
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	e03f      	b.n	8000a7a <morseCodeBlink+0x92>
	        char symbol = morseCode[i];
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	73fb      	strb	r3, [r7, #15]

	        if (symbol == ' ') {
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	2b20      	cmp	r3, #32
 8000a08:	d104      	bne.n	8000a14 <morseCodeBlink+0x2c>
	        	 osDelay(600);  // Adjust as needed fo
 8000a0a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000a0e:	f003 fe5c 	bl	80046ca <osDelay>
 8000a12:	e01a      	b.n	8000a4a <morseCodeBlink+0x62>

	        } else if (symbol == '-') {
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	2b2d      	cmp	r3, #45	; 0x2d
 8000a18:	d111      	bne.n	8000a3e <morseCodeBlink+0x56>
	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);  // Turn the LED on (replace with your LED control function)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	481c      	ldr	r0, [pc, #112]	; (8000a90 <morseCodeBlink+0xa8>)
 8000a20:	f001 f964 	bl	8001cec <HAL_GPIO_WritePin>
	        	osDelay(300);  // LED on time (adjust as needed)
 8000a24:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a28:	f003 fe4f 	bl	80046ca <osDelay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);  // Turn the LED off
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2180      	movs	r1, #128	; 0x80
 8000a30:	4817      	ldr	r0, [pc, #92]	; (8000a90 <morseCodeBlink+0xa8>)
 8000a32:	f001 f95b 	bl	8001cec <HAL_GPIO_WritePin>
				osDelay(100);  // Gap between dots (adjust as needed)
 8000a36:	2064      	movs	r0, #100	; 0x64
 8000a38:	f003 fe47 	bl	80046ca <osDelay>
 8000a3c:	e005      	b.n	8000a4a <morseCodeBlink+0x62>
	        } else if (symbol == '.') {
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	2b2e      	cmp	r3, #46	; 0x2e
 8000a42:	d102      	bne.n	8000a4a <morseCodeBlink+0x62>
	        	dotCount++;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	3301      	adds	r3, #1
 8000a48:	617b      	str	r3, [r7, #20]
	        }	//for some reason quick blinks happen to often this fixes it
	        if(dotCount>=2){
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	dd11      	ble.n	8000a74 <morseCodeBlink+0x8c>
	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2180      	movs	r1, #128	; 0x80
 8000a54:	480e      	ldr	r0, [pc, #56]	; (8000a90 <morseCodeBlink+0xa8>)
 8000a56:	f001 f949 	bl	8001cec <HAL_GPIO_WritePin>
				osDelay(100);  // 100ms for a dot
 8000a5a:	2064      	movs	r0, #100	; 0x64
 8000a5c:	f003 fe35 	bl	80046ca <osDelay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2180      	movs	r1, #128	; 0x80
 8000a64:	480a      	ldr	r0, [pc, #40]	; (8000a90 <morseCodeBlink+0xa8>)
 8000a66:	f001 f941 	bl	8001cec <HAL_GPIO_WritePin>
				osDelay(100);  // Gap for a dot
 8000a6a:	2064      	movs	r0, #100	; 0x64
 8000a6c:	f003 fe2d 	bl	80046ca <osDelay>
	        	dotCount=0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
	for (int i = 0; morseCode[i] != '\0'; i++)  {
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	3301      	adds	r3, #1
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1b9      	bne.n	80009fa <morseCodeBlink+0x12>
	        }
	    }

}
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40020400 	.word	0x40020400

08000a94 <StartDefaultTask>:
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  char* receivedMessage = ".......... ---------- ..........";
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <StartDefaultTask+0x20>)
 8000a9e:	60fb      	str	r3, [r7, #12]
	  morseCodeBlink(receivedMessage);
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f7ff ffa1 	bl	80009e8 <morseCodeBlink>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <StartDefaultTask+0x24>)
 8000aac:	f001 f91e 	bl	8001cec <HAL_GPIO_WritePin>
  {
 8000ab0:	e7f4      	b.n	8000a9c <StartDefaultTask+0x8>
 8000ab2:	bf00      	nop
 8000ab4:	08006038 	.word	0x08006038
 8000ab8:	40020400 	.word	0x40020400

08000abc <Read>:
*/

//
/* USER CODE END Header_Read */
void Read(void const * argument)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read */
  /* Infinite loop */
  for(;;)
 8000ac4:	e7fe      	b.n	8000ac4 <Read+0x8>

08000ac6 <Send>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Send */
void Send(void const * argument)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Send */

  /* Infinite loop */
  for(;;)
 8000ace:	e7fe      	b.n	8000ace <Send+0x8>

08000ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae2:	f000 fb0b 	bl	80010fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af2:	b672      	cpsid	i
}
 8000af4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <Error_Handler+0x8>

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	210f      	movs	r1, #15
 8000b32:	f06f 0001 	mvn.w	r0, #1
 8000b36:	f000 fbdd 	bl	80012f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a4e      	ldr	r2, [pc, #312]	; (8000ca0 <HAL_ETH_MspInit+0x158>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	f040 8096 	bne.w	8000c98 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b6c:	4b4d      	ldr	r3, [pc, #308]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a4c      	ldr	r2, [pc, #304]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000b72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b4a      	ldr	r3, [pc, #296]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b80:	623b      	str	r3, [r7, #32]
 8000b82:	6a3b      	ldr	r3, [r7, #32]
 8000b84:	4b47      	ldr	r3, [pc, #284]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a46      	ldr	r2, [pc, #280]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000b8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b44      	ldr	r3, [pc, #272]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b98:	61fb      	str	r3, [r7, #28]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	4b41      	ldr	r3, [pc, #260]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a40      	ldr	r2, [pc, #256]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000ba2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b3e      	ldr	r3, [pc, #248]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bb0:	61bb      	str	r3, [r7, #24]
 8000bb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb4:	4b3b      	ldr	r3, [pc, #236]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	4a3a      	ldr	r2, [pc, #232]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc0:	4b38      	ldr	r3, [pc, #224]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	4b35      	ldr	r3, [pc, #212]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	4a34      	ldr	r2, [pc, #208]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd8:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be4:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	4a2e      	ldr	r2, [pc, #184]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000bea:	f043 0302 	orr.w	r3, r3, #2
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf0:	4b2c      	ldr	r3, [pc, #176]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bfc:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	4a28      	ldr	r2, [pc, #160]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c06:	6313      	str	r3, [r2, #48]	; 0x30
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <HAL_ETH_MspInit+0x15c>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c14:	2332      	movs	r3, #50	; 0x32
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c24:	230b      	movs	r3, #11
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	481e      	ldr	r0, [pc, #120]	; (8000ca8 <HAL_ETH_MspInit+0x160>)
 8000c30:	f000 feb0 	bl	8001994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c34:	2386      	movs	r3, #134	; 0x86
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c44:	230b      	movs	r3, #11
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4817      	ldr	r0, [pc, #92]	; (8000cac <HAL_ETH_MspInit+0x164>)
 8000c50:	f000 fea0 	bl	8001994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c66:	230b      	movs	r3, #11
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480f      	ldr	r0, [pc, #60]	; (8000cb0 <HAL_ETH_MspInit+0x168>)
 8000c72:	f000 fe8f 	bl	8001994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c76:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c88:	230b      	movs	r3, #11
 8000c8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <HAL_ETH_MspInit+0x16c>)
 8000c94:	f000 fe7e 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c98:	bf00      	nop
 8000c9a:	3738      	adds	r7, #56	; 0x38
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40028000 	.word	0x40028000
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	40021800 	.word	0x40021800

08000cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0ae      	sub	sp, #184	; 0xb8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	2284      	movs	r2, #132	; 0x84
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f005 f8ab 	bl	8005e34 <memset>
  if(huart->Instance==USART2)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a53      	ldr	r2, [pc, #332]	; (8000e30 <HAL_UART_MspInit+0x178>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d15c      	bne.n	8000da2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf0:	f107 0320 	add.w	r3, r7, #32
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fe67 	bl	80029c8 <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d00:	f7ff fef5 	bl	8000aee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d04:	4b4b      	ldr	r3, [pc, #300]	; (8000e34 <HAL_UART_MspInit+0x17c>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	4a4a      	ldr	r2, [pc, #296]	; (8000e34 <HAL_UART_MspInit+0x17c>)
 8000d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d10:	4b48      	ldr	r3, [pc, #288]	; (8000e34 <HAL_UART_MspInit+0x17c>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b45      	ldr	r3, [pc, #276]	; (8000e34 <HAL_UART_MspInit+0x17c>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a44      	ldr	r2, [pc, #272]	; (8000e34 <HAL_UART_MspInit+0x17c>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <HAL_UART_MspInit+0x17c>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d34:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <HAL_UART_MspInit+0x17c>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a3e      	ldr	r2, [pc, #248]	; (8000e34 <HAL_UART_MspInit+0x17c>)
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <HAL_UART_MspInit+0x17c>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d64:	2307      	movs	r3, #7
 8000d66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4831      	ldr	r0, [pc, #196]	; (8000e38 <HAL_UART_MspInit+0x180>)
 8000d72:	f000 fe0f 	bl	8001994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d76:	2320      	movs	r3, #32
 8000d78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8e:	2307      	movs	r3, #7
 8000d90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4828      	ldr	r0, [pc, #160]	; (8000e3c <HAL_UART_MspInit+0x184>)
 8000d9c:	f000 fdfa 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000da0:	e041      	b.n	8000e26 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART3)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <HAL_UART_MspInit+0x188>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d13c      	bne.n	8000e26 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 fe04 	bl	80029c8 <HAL_RCCEx_PeriphCLKConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_UART_MspInit+0x112>
      Error_Handler();
 8000dc6:	f7ff fe92 	bl	8000aee <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <HAL_UART_MspInit+0x17c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <HAL_UART_MspInit+0x17c>)
 8000dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_UART_MspInit+0x17c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_UART_MspInit+0x17c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <HAL_UART_MspInit+0x17c>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_UART_MspInit+0x17c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e14:	2307      	movs	r3, #7
 8000e16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4806      	ldr	r0, [pc, #24]	; (8000e3c <HAL_UART_MspInit+0x184>)
 8000e22:	f000 fdb7 	bl	8001994 <HAL_GPIO_Init>
}
 8000e26:	bf00      	nop
 8000e28:	37b8      	adds	r7, #184	; 0xb8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40004400 	.word	0x40004400
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000
 8000e3c:	40020c00 	.word	0x40020c00
 8000e40:	40004800 	.word	0x40004800

08000e44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0ac      	sub	sp, #176	; 0xb0
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	2284      	movs	r2, #132	; 0x84
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f004 ffe5 	bl	8005e34 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e72:	d159      	bne.n	8000f28 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e80:	f107 0318 	add.w	r3, r7, #24
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 fd9f 	bl	80029c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e90:	f7ff fe2d 	bl	8000aee <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <HAL_PCD_MspInit+0xec>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	4a25      	ldr	r2, [pc, #148]	; (8000f30 <HAL_PCD_MspInit+0xec>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <HAL_PCD_MspInit+0xec>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4818      	ldr	r0, [pc, #96]	; (8000f34 <HAL_PCD_MspInit+0xf0>)
 8000ed4:	f000 fd5e 	bl	8001994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4810      	ldr	r0, [pc, #64]	; (8000f34 <HAL_PCD_MspInit+0xf0>)
 8000ef4:	f000 fd4e 	bl	8001994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_PCD_MspInit+0xec>)
 8000efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000efc:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <HAL_PCD_MspInit+0xec>)
 8000efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f02:	6353      	str	r3, [r2, #52]	; 0x34
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_PCD_MspInit+0xec>)
 8000f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <HAL_PCD_MspInit+0xec>)
 8000f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f14:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <HAL_PCD_MspInit+0xec>)
 8000f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <HAL_PCD_MspInit+0xec>)
 8000f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	37b0      	adds	r7, #176	; 0xb0
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000

08000f38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08e      	sub	sp, #56	; 0x38
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000f48:	4b34      	ldr	r3, [pc, #208]	; (800101c <HAL_InitTick+0xe4>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	4a33      	ldr	r2, [pc, #204]	; (800101c <HAL_InitTick+0xe4>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6413      	str	r3, [r2, #64]	; 0x40
 8000f54:	4b31      	ldr	r3, [pc, #196]	; (800101c <HAL_InitTick+0xe4>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f60:	f107 0210 	add.w	r2, r7, #16
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 fcfa 	bl	8002964 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d103      	bne.n	8000f82 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f7a:	f001 fccb 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 8000f7e:	6378      	str	r0, [r7, #52]	; 0x34
 8000f80:	e004      	b.n	8000f8c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f82:	f001 fcc7 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 8000f86:	4603      	mov	r3, r0
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f8e:	4a24      	ldr	r2, [pc, #144]	; (8001020 <HAL_InitTick+0xe8>)
 8000f90:	fba2 2303 	umull	r2, r3, r2, r3
 8000f94:	0c9b      	lsrs	r3, r3, #18
 8000f96:	3b01      	subs	r3, #1
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <HAL_InitTick+0xec>)
 8000f9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <HAL_InitTick+0xec>)
 8000fa4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fa8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000faa:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <HAL_InitTick+0xec>)
 8000fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fae:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <HAL_InitTick+0xec>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_InitTick+0xec>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_InitTick+0xec>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000fc2:	4818      	ldr	r0, [pc, #96]	; (8001024 <HAL_InitTick+0xec>)
 8000fc4:	f002 f8f0 	bl	80031a8 <HAL_TIM_Base_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000fce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d11b      	bne.n	800100e <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000fd6:	4813      	ldr	r0, [pc, #76]	; (8001024 <HAL_InitTick+0xec>)
 8000fd8:	f002 f948 	bl	800326c <HAL_TIM_Base_Start_IT>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000fe2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d111      	bne.n	800100e <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fea:	201c      	movs	r0, #28
 8000fec:	f000 f99e 	bl	800132c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b0f      	cmp	r3, #15
 8000ff4:	d808      	bhi.n	8001008 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	201c      	movs	r0, #28
 8000ffc:	f000 f97a 	bl	80012f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001000:	4a09      	ldr	r2, [pc, #36]	; (8001028 <HAL_InitTick+0xf0>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e002      	b.n	800100e <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800100e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001012:	4618      	mov	r0, r3
 8001014:	3738      	adds	r7, #56	; 0x38
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	431bde83 	.word	0x431bde83
 8001024:	20000b84 	.word	0x20000b84
 8001028:	20000004 	.word	0x20000004

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <TIM2_IRQHandler+0x10>)
 800105e:	f002 f97d 	bl	800335c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000b84 	.word	0x20000b84

0800106c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <SystemInit+0x20>)
 8001072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <SystemInit+0x20>)
 8001078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800107c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001096:	490e      	ldr	r1, [pc, #56]	; (80010d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001098:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010ac:	4c0b      	ldr	r4, [pc, #44]	; (80010dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ba:	f7ff ffd7 	bl	800106c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010be:	f004 fec1 	bl	8005e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c2:	f7ff fa3d 	bl	8000540 <main>
  bx  lr    
 80010c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010d4:	0800608c 	.word	0x0800608c
  ldr r2, =_sbss
 80010d8:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80010dc:	20004920 	.word	0x20004920

080010e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC_IRQHandler>

080010e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e6:	2003      	movs	r0, #3
 80010e8:	f000 f8f9 	bl	80012de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ec:	200f      	movs	r0, #15
 80010ee:	f7ff ff23 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f2:	f7ff fd01 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008
 8001120:	20000bd0 	.word	0x20000bd0

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000bd0 	.word	0x20000bd0

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001162:	bf00      	nop
 8001164:	f7ff ffde 	bl	8001124 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	05fa0000 	.word	0x05fa0000

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff4c 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001306:	f7ff ff61 	bl	80011cc <__NVIC_GetPriorityGrouping>
 800130a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	68b9      	ldr	r1, [r7, #8]
 8001310:	6978      	ldr	r0, [r7, #20]
 8001312:	f7ff ffb1 	bl	8001278 <NVIC_EncodePriority>
 8001316:	4602      	mov	r2, r0
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff80 	bl	8001224 <__NVIC_SetPriority>
}
 8001324:	bf00      	nop
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff54 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e06a      	b.n	8001430 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001360:	2b00      	cmp	r3, #0
 8001362:	d106      	bne.n	8001372 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2223      	movs	r2, #35	; 0x23
 8001368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fbeb 	bl	8000b48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <HAL_ETH_Init+0xf0>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a30      	ldr	r2, [pc, #192]	; (8001438 <HAL_ETH_Init+0xf0>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <HAL_ETH_Init+0xf0>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <HAL_ETH_Init+0xf4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4a2b      	ldr	r2, [pc, #172]	; (800143c <HAL_ETH_Init+0xf4>)
 8001390:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001394:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <HAL_ETH_Init+0xf4>)
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	4927      	ldr	r1, [pc, #156]	; (800143c <HAL_ETH_Init+0xf4>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013a4:	4b25      	ldr	r3, [pc, #148]	; (800143c <HAL_ETH_Init+0xf4>)
 80013a6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c0:	f7ff feb0 	bl	8001124 <HAL_GetTick>
 80013c4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013c6:	e011      	b.n	80013ec <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013c8:	f7ff feac 	bl	8001124 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013d6:	d909      	bls.n	80013ec <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2204      	movs	r2, #4
 80013dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	22e0      	movs	r2, #224	; 0xe0
 80013e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e021      	b.n	8001430 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1e4      	bne.n	80013c8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f958 	bl	80016b4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f9ff 	bl	8001808 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fa55 	bl	80018ba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	461a      	mov	r2, r3
 8001416:	2100      	movs	r1, #0
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f9bd 	bl	8001798 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2210      	movs	r2, #16
 800142a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40013800 	.word	0x40013800

08001440 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4b51      	ldr	r3, [pc, #324]	; (800159c <ETH_SetMACConfig+0x15c>)
 8001456:	4013      	ands	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	7c1b      	ldrb	r3, [r3, #16]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <ETH_SetMACConfig+0x28>
 8001462:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001466:	e000      	b.n	800146a <ETH_SetMACConfig+0x2a>
 8001468:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	7c5b      	ldrb	r3, [r3, #17]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <ETH_SetMACConfig+0x38>
 8001472:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001476:	e000      	b.n	800147a <ETH_SetMACConfig+0x3a>
 8001478:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800147a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001480:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	7fdb      	ldrb	r3, [r3, #31]
 8001486:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001488:	431a      	orrs	r2, r3
                        macconf->Speed |
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800148e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	7f92      	ldrb	r2, [r2, #30]
 8001494:	2a00      	cmp	r2, #0
 8001496:	d102      	bne.n	800149e <ETH_SetMACConfig+0x5e>
 8001498:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149c:	e000      	b.n	80014a0 <ETH_SetMACConfig+0x60>
 800149e:	2200      	movs	r2, #0
                        macconf->Speed |
 80014a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	7f1b      	ldrb	r3, [r3, #28]
 80014a6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014a8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	791b      	ldrb	r3, [r3, #4]
 80014b4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80014b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014be:	2a00      	cmp	r2, #0
 80014c0:	d102      	bne.n	80014c8 <ETH_SetMACConfig+0x88>
 80014c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c6:	e000      	b.n	80014ca <ETH_SetMACConfig+0x8a>
 80014c8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	7bdb      	ldrb	r3, [r3, #15]
 80014d0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014d2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014e0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014e2:	4313      	orrs	r3, r2
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff fe1e 	bl	800113c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001516:	4013      	ands	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001526:	2a00      	cmp	r2, #0
 8001528:	d101      	bne.n	800152e <ETH_SetMACConfig+0xee>
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	e000      	b.n	8001530 <ETH_SetMACConfig+0xf0>
 800152e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001530:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001536:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800153e:	2a01      	cmp	r2, #1
 8001540:	d101      	bne.n	8001546 <ETH_SetMACConfig+0x106>
 8001542:	2208      	movs	r2, #8
 8001544:	e000      	b.n	8001548 <ETH_SetMACConfig+0x108>
 8001546:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001548:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001550:	2a01      	cmp	r2, #1
 8001552:	d101      	bne.n	8001558 <ETH_SetMACConfig+0x118>
 8001554:	2204      	movs	r2, #4
 8001556:	e000      	b.n	800155a <ETH_SetMACConfig+0x11a>
 8001558:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800155a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001562:	2a01      	cmp	r2, #1
 8001564:	d101      	bne.n	800156a <ETH_SetMACConfig+0x12a>
 8001566:	2202      	movs	r2, #2
 8001568:	e000      	b.n	800156c <ETH_SetMACConfig+0x12c>
 800156a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800156c:	4313      	orrs	r3, r2
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4313      	orrs	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001584:	2001      	movs	r0, #1
 8001586:	f7ff fdd9 	bl	800113c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	619a      	str	r2, [r3, #24]
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	ff20810f 	.word	0xff20810f

080015a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <ETH_SetDMAConfig+0x110>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	7b1b      	ldrb	r3, [r3, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <ETH_SetDMAConfig+0x2c>
 80015c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015ca:	e000      	b.n	80015ce <ETH_SetDMAConfig+0x2e>
 80015cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	7b5b      	ldrb	r3, [r3, #13]
 80015d2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015d4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	7f52      	ldrb	r2, [r2, #29]
 80015da:	2a00      	cmp	r2, #0
 80015dc:	d102      	bne.n	80015e4 <ETH_SetDMAConfig+0x44>
 80015de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015e2:	e000      	b.n	80015e6 <ETH_SetDMAConfig+0x46>
 80015e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	7b9b      	ldrb	r3, [r3, #14]
 80015ec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015ee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	7f1b      	ldrb	r3, [r3, #28]
 80015fa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80015fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	7f9b      	ldrb	r3, [r3, #30]
 8001602:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001604:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800160a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001612:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001614:	4313      	orrs	r3, r2
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4313      	orrs	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001624:	461a      	mov	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001636:	2001      	movs	r0, #1
 8001638:	f7ff fd80 	bl	800113c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001644:	461a      	mov	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	791b      	ldrb	r3, [r3, #4]
 800164e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001654:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800165a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001660:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001668:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800166a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001672:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001678:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001686:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001694:	2001      	movs	r0, #1
 8001696:	f7ff fd51 	bl	800113c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	f8de3f23 	.word	0xf8de3f23

080016b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0a6      	sub	sp, #152	; 0x98
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80016bc:	2301      	movs	r3, #1
 80016be:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80016c8:	2300      	movs	r3, #0
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80016d2:	2301      	movs	r3, #1
 80016d4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80016de:	2301      	movs	r3, #1
 80016e0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016f0:	2300      	movs	r3, #0
 80016f2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001716:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800171a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800171c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001720:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001728:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fe86 	bl	8001440 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001734:	2301      	movs	r3, #1
 8001736:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001738:	2301      	movs	r3, #1
 800173a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800173c:	2301      	movs	r3, #1
 800173e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001742:	2301      	movs	r3, #1
 8001744:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001756:	2300      	movs	r3, #0
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800175a:	2301      	movs	r3, #1
 800175c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001760:	2301      	movs	r3, #1
 8001762:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001768:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800176a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800176e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001774:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001776:	2301      	movs	r3, #1
 8001778:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800177c:	2300      	movs	r3, #0
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	4619      	mov	r1, r3
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff08 	bl	80015a0 <ETH_SetDMAConfig>
}
 8001790:	bf00      	nop
 8001792:	3798      	adds	r7, #152	; 0x98
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3305      	adds	r3, #5
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	3204      	adds	r2, #4
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <ETH_MACAddressConfig+0x68>)
 80017ba:	4413      	add	r3, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3303      	adds	r3, #3
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	061a      	lsls	r2, r3, #24
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3302      	adds	r3, #2
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3301      	adds	r3, #1
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	4313      	orrs	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <ETH_MACAddressConfig+0x6c>)
 80017ea:	4413      	add	r3, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	6013      	str	r3, [r2, #0]
}
 80017f2:	bf00      	nop
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40028040 	.word	0x40028040
 8001804:	40028044 	.word	0x40028044

08001808 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e03e      	b.n	8001894 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68d9      	ldr	r1, [r3, #12]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2200      	movs	r2, #0
 8001832:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	3206      	adds	r2, #6
 8001848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d80c      	bhi.n	8001878 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68d9      	ldr	r1, [r3, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	461a      	mov	r2, r3
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	e004      	b.n	8001882 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	461a      	mov	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	3301      	adds	r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d9bd      	bls.n	8001816 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ac:	611a      	str	r2, [r3, #16]
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b085      	sub	sp, #20
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	e046      	b.n	8001956 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6919      	ldr	r1, [r3, #16]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2200      	movs	r2, #0
 80018e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	2200      	movs	r2, #0
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001904:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800190c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	3212      	adds	r2, #18
 8001922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d80c      	bhi.n	8001946 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6919      	ldr	r1, [r3, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	440b      	add	r3, r1
 800193e:	461a      	mov	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	e004      	b.n	8001950 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	461a      	mov	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3301      	adds	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d9b5      	bls.n	80018c8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001986:	60da      	str	r2, [r3, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e175      	b.n	8001ca0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019b4:	2201      	movs	r2, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	f040 8164 	bne.w	8001c9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d005      	beq.n	80019ea <HAL_GPIO_Init+0x56>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d130      	bne.n	8001a4c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	2203      	movs	r2, #3
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a20:	2201      	movs	r2, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 0201 	and.w	r2, r3, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d017      	beq.n	8001a88 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d123      	bne.n	8001adc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	220f      	movs	r2, #15
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	08da      	lsrs	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3208      	adds	r2, #8
 8001ad6:	69b9      	ldr	r1, [r7, #24]
 8001ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0203 	and.w	r2, r3, #3
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80be 	beq.w	8001c9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	4b66      	ldr	r3, [pc, #408]	; (8001cb8 <HAL_GPIO_Init+0x324>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a65      	ldr	r2, [pc, #404]	; (8001cb8 <HAL_GPIO_Init+0x324>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b63      	ldr	r3, [pc, #396]	; (8001cb8 <HAL_GPIO_Init+0x324>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b36:	4a61      	ldr	r2, [pc, #388]	; (8001cbc <HAL_GPIO_Init+0x328>)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_GPIO_Init+0x32c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d037      	beq.n	8001bd2 <HAL_GPIO_Init+0x23e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a57      	ldr	r2, [pc, #348]	; (8001cc4 <HAL_GPIO_Init+0x330>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d031      	beq.n	8001bce <HAL_GPIO_Init+0x23a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a56      	ldr	r2, [pc, #344]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d02b      	beq.n	8001bca <HAL_GPIO_Init+0x236>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a55      	ldr	r2, [pc, #340]	; (8001ccc <HAL_GPIO_Init+0x338>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d025      	beq.n	8001bc6 <HAL_GPIO_Init+0x232>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a54      	ldr	r2, [pc, #336]	; (8001cd0 <HAL_GPIO_Init+0x33c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d01f      	beq.n	8001bc2 <HAL_GPIO_Init+0x22e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a53      	ldr	r2, [pc, #332]	; (8001cd4 <HAL_GPIO_Init+0x340>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d019      	beq.n	8001bbe <HAL_GPIO_Init+0x22a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a52      	ldr	r2, [pc, #328]	; (8001cd8 <HAL_GPIO_Init+0x344>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0x226>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a51      	ldr	r2, [pc, #324]	; (8001cdc <HAL_GPIO_Init+0x348>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00d      	beq.n	8001bb6 <HAL_GPIO_Init+0x222>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a50      	ldr	r2, [pc, #320]	; (8001ce0 <HAL_GPIO_Init+0x34c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <HAL_GPIO_Init+0x21e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4f      	ldr	r2, [pc, #316]	; (8001ce4 <HAL_GPIO_Init+0x350>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_GPIO_Init+0x21a>
 8001baa:	2309      	movs	r3, #9
 8001bac:	e012      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bae:	230a      	movs	r3, #10
 8001bb0:	e010      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	e00e      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	e00c      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bba:	2306      	movs	r3, #6
 8001bbc:	e00a      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	e008      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	e006      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e004      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e002      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	f002 0203 	and.w	r2, r2, #3
 8001bda:	0092      	lsls	r2, r2, #2
 8001bdc:	4093      	lsls	r3, r2
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001be4:	4935      	ldr	r1, [pc, #212]	; (8001cbc <HAL_GPIO_Init+0x328>)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	3302      	adds	r3, #2
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c16:	4a34      	ldr	r2, [pc, #208]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c1c:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c40:	4a29      	ldr	r2, [pc, #164]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c46:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	61fb      	str	r3, [r7, #28]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	2b0f      	cmp	r3, #15
 8001ca4:	f67f ae86 	bls.w	80019b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3724      	adds	r7, #36	; 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40013800 	.word	0x40013800
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40020c00 	.word	0x40020c00
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40021400 	.word	0x40021400
 8001cd8:	40021800 	.word	0x40021800
 8001cdc:	40021c00 	.word	0x40021c00
 8001ce0:	40022000 	.word	0x40022000
 8001ce4:	40022400 	.word	0x40022400
 8001ce8:	40013c00 	.word	0x40013c00

08001cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cfc:	787b      	ldrb	r3, [r7, #1]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d08:	e003      	b.n	8001d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d0a:	887b      	ldrh	r3, [r7, #2]
 8001d0c:	041a      	lsls	r2, r3, #16
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	619a      	str	r2, [r3, #24]
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d20:	b08f      	sub	sp, #60	; 0x3c
 8001d22:	af0a      	add	r7, sp, #40	; 0x28
 8001d24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e116      	b.n	8001f5e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d106      	bne.n	8001d50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff f87a 	bl	8000e44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2203      	movs	r2, #3
 8001d54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f002 f9a4 	bl	80040bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	687e      	ldr	r6, [r7, #4]
 8001d7c:	466d      	mov	r5, sp
 8001d7e:	f106 0410 	add.w	r4, r6, #16
 8001d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d92:	1d33      	adds	r3, r6, #4
 8001d94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d96:	6838      	ldr	r0, [r7, #0]
 8001d98:	f002 f938 	bl	800400c <USB_CoreInit>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2202      	movs	r2, #2
 8001da6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0d7      	b.n	8001f5e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f002 f992 	bl	80040de <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	e04a      	b.n	8001e56 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	333d      	adds	r3, #61	; 0x3d
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	333c      	adds	r3, #60	; 0x3c
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	b298      	uxth	r0, r3
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3344      	adds	r3, #68	; 0x44
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3340      	adds	r3, #64	; 0x40
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	3348      	adds	r3, #72	; 0x48
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	334c      	adds	r3, #76	; 0x4c
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	3354      	adds	r3, #84	; 0x54
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	3301      	adds	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d3af      	bcc.n	8001dc0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	e044      	b.n	8001ef0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	3301      	adds	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d3b5      	bcc.n	8001e66 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	687e      	ldr	r6, [r7, #4]
 8001f02:	466d      	mov	r5, sp
 8001f04:	f106 0410 	add.w	r4, r6, #16
 8001f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f14:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f18:	1d33      	adds	r3, r6, #4
 8001f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f1c:	6838      	ldr	r0, [r7, #0]
 8001f1e:	f002 f92b 	bl	8004178 <USB_DevInit>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e014      	b.n	8001f5e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d102      	bne.n	8001f52 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f80b 	bl	8001f68 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f002 fae9 	bl	800452e <USB_DevDisconnect>

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001f68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_PCDEx_ActivateLPM+0x44>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	10000003 	.word	0x10000003

08001fb0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40007000 	.word	0x40007000

08001fd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e291      	b.n	800250a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8087 	beq.w	8002102 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff4:	4b96      	ldr	r3, [pc, #600]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d00c      	beq.n	800201a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002000:	4b93      	ldr	r3, [pc, #588]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b08      	cmp	r3, #8
 800200a:	d112      	bne.n	8002032 <HAL_RCC_OscConfig+0x62>
 800200c:	4b90      	ldr	r3, [pc, #576]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002018:	d10b      	bne.n	8002032 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201a:	4b8d      	ldr	r3, [pc, #564]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d06c      	beq.n	8002100 <HAL_RCC_OscConfig+0x130>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d168      	bne.n	8002100 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e26b      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x7a>
 800203c:	4b84      	ldr	r3, [pc, #528]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a83      	ldr	r2, [pc, #524]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e02e      	b.n	80020a8 <HAL_RCC_OscConfig+0xd8>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x9c>
 8002052:	4b7f      	ldr	r3, [pc, #508]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a7e      	ldr	r2, [pc, #504]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b7c      	ldr	r3, [pc, #496]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a7b      	ldr	r2, [pc, #492]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e01d      	b.n	80020a8 <HAL_RCC_OscConfig+0xd8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0xc0>
 8002076:	4b76      	ldr	r3, [pc, #472]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a75      	ldr	r2, [pc, #468]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b73      	ldr	r3, [pc, #460]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a72      	ldr	r2, [pc, #456]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0xd8>
 8002090:	4b6f      	ldr	r3, [pc, #444]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6e      	ldr	r2, [pc, #440]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b6c      	ldr	r3, [pc, #432]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a6b      	ldr	r2, [pc, #428]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80020a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7ff f838 	bl	8001124 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff f834 	bl	8001124 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e21f      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b61      	ldr	r3, [pc, #388]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0xe8>
 80020d6:	e014      	b.n	8002102 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff f824 	bl	8001124 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff f820 	bl	8001124 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e20b      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	4b57      	ldr	r3, [pc, #348]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x110>
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d069      	beq.n	80021e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800210e:	4b50      	ldr	r3, [pc, #320]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00b      	beq.n	8002132 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800211a:	4b4d      	ldr	r3, [pc, #308]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b08      	cmp	r3, #8
 8002124:	d11c      	bne.n	8002160 <HAL_RCC_OscConfig+0x190>
 8002126:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d116      	bne.n	8002160 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002132:	4b47      	ldr	r3, [pc, #284]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <HAL_RCC_OscConfig+0x17a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d001      	beq.n	800214a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e1df      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214a:	4b41      	ldr	r3, [pc, #260]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	493d      	ldr	r1, [pc, #244]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215e:	e040      	b.n	80021e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d023      	beq.n	80021b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002168:	4b39      	ldr	r3, [pc, #228]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a38      	ldr	r2, [pc, #224]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe ffd6 	bl	8001124 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217c:	f7fe ffd2 	bl	8001124 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e1bd      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b30      	ldr	r3, [pc, #192]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219a:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4929      	ldr	r1, [pc, #164]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
 80021ae:	e018      	b.n	80021e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b0:	4b27      	ldr	r3, [pc, #156]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a26      	ldr	r2, [pc, #152]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80021b6:	f023 0301 	bic.w	r3, r3, #1
 80021ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7fe ffb2 	bl	8001124 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c4:	f7fe ffae 	bl	8001124 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e199      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d6:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d038      	beq.n	8002260 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d019      	beq.n	800222a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f6:	4b16      	ldr	r3, [pc, #88]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80021f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fa:	4a15      	ldr	r2, [pc, #84]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7fe ff8f 	bl	8001124 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220a:	f7fe ff8b 	bl	8001124 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e176      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800221e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x23a>
 8002228:	e01a      	b.n	8002260 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800222c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222e:	4a08      	ldr	r2, [pc, #32]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002236:	f7fe ff75 	bl	8001124 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223e:	f7fe ff71 	bl	8001124 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d903      	bls.n	8002254 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e15c      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
 8002250:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	4b91      	ldr	r3, [pc, #580]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1ee      	bne.n	800223e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80a4 	beq.w	80023b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226e:	4b8b      	ldr	r3, [pc, #556]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10d      	bne.n	8002296 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	4b88      	ldr	r3, [pc, #544]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a87      	ldr	r2, [pc, #540]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b85      	ldr	r3, [pc, #532]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002292:	2301      	movs	r3, #1
 8002294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002296:	4b82      	ldr	r3, [pc, #520]	; (80024a0 <HAL_RCC_OscConfig+0x4d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80022a2:	4b7f      	ldr	r3, [pc, #508]	; (80024a0 <HAL_RCC_OscConfig+0x4d0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a7e      	ldr	r2, [pc, #504]	; (80024a0 <HAL_RCC_OscConfig+0x4d0>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ae:	f7fe ff39 	bl	8001124 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b6:	f7fe ff35 	bl	8001124 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b64      	cmp	r3, #100	; 0x64
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e120      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c8:	4b75      	ldr	r3, [pc, #468]	; (80024a0 <HAL_RCC_OscConfig+0x4d0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x31a>
 80022dc:	4b6f      	ldr	r3, [pc, #444]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	4a6e      	ldr	r2, [pc, #440]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6713      	str	r3, [r2, #112]	; 0x70
 80022e8:	e02d      	b.n	8002346 <HAL_RCC_OscConfig+0x376>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x33c>
 80022f2:	4b6a      	ldr	r3, [pc, #424]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a69      	ldr	r2, [pc, #420]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70
 80022fe:	4b67      	ldr	r3, [pc, #412]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a66      	ldr	r2, [pc, #408]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002304:	f023 0304 	bic.w	r3, r3, #4
 8002308:	6713      	str	r3, [r2, #112]	; 0x70
 800230a:	e01c      	b.n	8002346 <HAL_RCC_OscConfig+0x376>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b05      	cmp	r3, #5
 8002312:	d10c      	bne.n	800232e <HAL_RCC_OscConfig+0x35e>
 8002314:	4b61      	ldr	r3, [pc, #388]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4a60      	ldr	r2, [pc, #384]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	6713      	str	r3, [r2, #112]	; 0x70
 8002320:	4b5e      	ldr	r3, [pc, #376]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	4a5d      	ldr	r2, [pc, #372]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6713      	str	r3, [r2, #112]	; 0x70
 800232c:	e00b      	b.n	8002346 <HAL_RCC_OscConfig+0x376>
 800232e:	4b5b      	ldr	r3, [pc, #364]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	4a5a      	ldr	r2, [pc, #360]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	6713      	str	r3, [r2, #112]	; 0x70
 800233a:	4b58      	ldr	r3, [pc, #352]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	4a57      	ldr	r2, [pc, #348]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002340:	f023 0304 	bic.w	r3, r3, #4
 8002344:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d015      	beq.n	800237a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe fee9 	bl	8001124 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe fee5 	bl	8001124 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0ce      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	4b4b      	ldr	r3, [pc, #300]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ee      	beq.n	8002356 <HAL_RCC_OscConfig+0x386>
 8002378:	e014      	b.n	80023a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7fe fed3 	bl	8001124 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7fe fecf 	bl	8001124 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e0b8      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	4b40      	ldr	r3, [pc, #256]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1ee      	bne.n	8002382 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d105      	bne.n	80023b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023aa:	4b3c      	ldr	r3, [pc, #240]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a3b      	ldr	r2, [pc, #236]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80023b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80a4 	beq.w	8002508 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c0:	4b36      	ldr	r3, [pc, #216]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d06b      	beq.n	80024a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d149      	bne.n	8002468 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d4:	4b31      	ldr	r3, [pc, #196]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a30      	ldr	r2, [pc, #192]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80023da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe fea0 	bl	8001124 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7fe fe9c 	bl	8001124 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e087      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	4b28      	ldr	r3, [pc, #160]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	019b      	lsls	r3, r3, #6
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	3b01      	subs	r3, #1
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	061b      	lsls	r3, r3, #24
 800242a:	4313      	orrs	r3, r2
 800242c:	4a1b      	ldr	r2, [pc, #108]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800242e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002432:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a18      	ldr	r2, [pc, #96]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800243a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe fe70 	bl	8001124 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fe6c 	bl	8001124 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e057      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x478>
 8002466:	e04f      	b.n	8002508 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0b      	ldr	r2, [pc, #44]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800246e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fe56 	bl	8001124 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe fe52 	bl	8001124 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e03d      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248e:	4b03      	ldr	r3, [pc, #12]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x4ac>
 800249a:	e035      	b.n	8002508 <HAL_RCC_OscConfig+0x538>
 800249c:	40023800 	.word	0x40023800
 80024a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x544>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d028      	beq.n	8002504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d121      	bne.n	8002504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d11a      	bne.n	8002504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024dc:	4293      	cmp	r3, r2
 80024de:	d111      	bne.n	8002504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	3b01      	subs	r3, #1
 80024ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800

08002518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0d0      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002530:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d910      	bls.n	8002560 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b67      	ldr	r3, [pc, #412]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 020f 	bic.w	r2, r3, #15
 8002546:	4965      	ldr	r1, [pc, #404]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b63      	ldr	r3, [pc, #396]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0b8      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002578:	4b59      	ldr	r3, [pc, #356]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a58      	ldr	r2, [pc, #352]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002582:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002590:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a52      	ldr	r2, [pc, #328]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002596:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800259a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259c:	4b50      	ldr	r3, [pc, #320]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	494d      	ldr	r1, [pc, #308]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d040      	beq.n	800263c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d115      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e07f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025da:	4b41      	ldr	r3, [pc, #260]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e073      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ea:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06b      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fa:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f023 0203 	bic.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4936      	ldr	r1, [pc, #216]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	4313      	orrs	r3, r2
 800260a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800260c:	f7fe fd8a 	bl	8001124 <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	e00a      	b.n	800262a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002614:	f7fe fd86 	bl	8001124 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e053      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 020c 	and.w	r2, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	429a      	cmp	r2, r3
 800263a:	d1eb      	bne.n	8002614 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	4b27      	ldr	r3, [pc, #156]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d210      	bcs.n	800266c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 020f 	bic.w	r2, r3, #15
 8002652:	4922      	ldr	r1, [pc, #136]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b20      	ldr	r3, [pc, #128]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e032      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4916      	ldr	r1, [pc, #88]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	490e      	ldr	r1, [pc, #56]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026aa:	f000 f821 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	490a      	ldr	r1, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x1cc>)
 80026bc:	5ccb      	ldrb	r3, [r1, r3]
 80026be:	fa22 f303 	lsr.w	r3, r2, r3
 80026c2:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <HAL_RCC_ClockConfig+0x1d0>)
 80026c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x1d4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fc34 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08006064 	.word	0x08006064
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000004 	.word	0x20000004

080026f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f4:	b094      	sub	sp, #80	; 0x50
 80026f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	647b      	str	r3, [r7, #68]	; 0x44
 80026fc:	2300      	movs	r3, #0
 80026fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002700:	2300      	movs	r3, #0
 8002702:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002708:	4b79      	ldr	r3, [pc, #484]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b08      	cmp	r3, #8
 8002712:	d00d      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x40>
 8002714:	2b08      	cmp	r3, #8
 8002716:	f200 80e1 	bhi.w	80028dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x34>
 800271e:	2b04      	cmp	r3, #4
 8002720:	d003      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x3a>
 8002722:	e0db      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002724:	4b73      	ldr	r3, [pc, #460]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002726:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002728:	e0db      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800272a:	4b73      	ldr	r3, [pc, #460]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800272c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800272e:	e0d8      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002730:	4b6f      	ldr	r3, [pc, #444]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002738:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800273a:	4b6d      	ldr	r3, [pc, #436]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d063      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002746:	4b6a      	ldr	r3, [pc, #424]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	099b      	lsrs	r3, r3, #6
 800274c:	2200      	movs	r2, #0
 800274e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002750:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002758:	633b      	str	r3, [r7, #48]	; 0x30
 800275a:	2300      	movs	r3, #0
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
 800275e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002762:	4622      	mov	r2, r4
 8002764:	462b      	mov	r3, r5
 8002766:	f04f 0000 	mov.w	r0, #0
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	0159      	lsls	r1, r3, #5
 8002770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002774:	0150      	lsls	r0, r2, #5
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4621      	mov	r1, r4
 800277c:	1a51      	subs	r1, r2, r1
 800277e:	6139      	str	r1, [r7, #16]
 8002780:	4629      	mov	r1, r5
 8002782:	eb63 0301 	sbc.w	r3, r3, r1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002794:	4659      	mov	r1, fp
 8002796:	018b      	lsls	r3, r1, #6
 8002798:	4651      	mov	r1, sl
 800279a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800279e:	4651      	mov	r1, sl
 80027a0:	018a      	lsls	r2, r1, #6
 80027a2:	4651      	mov	r1, sl
 80027a4:	ebb2 0801 	subs.w	r8, r2, r1
 80027a8:	4659      	mov	r1, fp
 80027aa:	eb63 0901 	sbc.w	r9, r3, r1
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027c2:	4690      	mov	r8, r2
 80027c4:	4699      	mov	r9, r3
 80027c6:	4623      	mov	r3, r4
 80027c8:	eb18 0303 	adds.w	r3, r8, r3
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	462b      	mov	r3, r5
 80027d0:	eb49 0303 	adc.w	r3, r9, r3
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027e2:	4629      	mov	r1, r5
 80027e4:	024b      	lsls	r3, r1, #9
 80027e6:	4621      	mov	r1, r4
 80027e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027ec:	4621      	mov	r1, r4
 80027ee:	024a      	lsls	r2, r1, #9
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f6:	2200      	movs	r2, #0
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002800:	f7fd fd06 	bl	8000210 <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4613      	mov	r3, r2
 800280a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800280c:	e058      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280e:	4b38      	ldr	r3, [pc, #224]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	2200      	movs	r2, #0
 8002816:	4618      	mov	r0, r3
 8002818:	4611      	mov	r1, r2
 800281a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800281e:	623b      	str	r3, [r7, #32]
 8002820:	2300      	movs	r3, #0
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
 8002824:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002828:	4642      	mov	r2, r8
 800282a:	464b      	mov	r3, r9
 800282c:	f04f 0000 	mov.w	r0, #0
 8002830:	f04f 0100 	mov.w	r1, #0
 8002834:	0159      	lsls	r1, r3, #5
 8002836:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800283a:	0150      	lsls	r0, r2, #5
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4641      	mov	r1, r8
 8002842:	ebb2 0a01 	subs.w	sl, r2, r1
 8002846:	4649      	mov	r1, r9
 8002848:	eb63 0b01 	sbc.w	fp, r3, r1
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002858:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800285c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002860:	ebb2 040a 	subs.w	r4, r2, sl
 8002864:	eb63 050b 	sbc.w	r5, r3, fp
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	00eb      	lsls	r3, r5, #3
 8002872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002876:	00e2      	lsls	r2, r4, #3
 8002878:	4614      	mov	r4, r2
 800287a:	461d      	mov	r5, r3
 800287c:	4643      	mov	r3, r8
 800287e:	18e3      	adds	r3, r4, r3
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	464b      	mov	r3, r9
 8002884:	eb45 0303 	adc.w	r3, r5, r3
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002896:	4629      	mov	r1, r5
 8002898:	028b      	lsls	r3, r1, #10
 800289a:	4621      	mov	r1, r4
 800289c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a0:	4621      	mov	r1, r4
 80028a2:	028a      	lsls	r2, r1, #10
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028aa:	2200      	movs	r2, #0
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	61fa      	str	r2, [r7, #28]
 80028b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028b4:	f7fd fcac 	bl	8000210 <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4613      	mov	r3, r2
 80028be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	3301      	adds	r3, #1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80028d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028da:	e002      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3750      	adds	r7, #80	; 0x50
 80028e8:	46bd      	mov	sp, r7
 80028ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	00f42400 	.word	0x00f42400
 80028f8:	007a1200 	.word	0x007a1200

080028fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <HAL_RCC_GetHCLKFreq+0x14>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000000 	.word	0x20000000

08002914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002918:	f7ff fff0 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0a9b      	lsrs	r3, r3, #10
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4903      	ldr	r1, [pc, #12]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40023800 	.word	0x40023800
 8002938:	08006074 	.word	0x08006074

0800293c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002940:	f7ff ffdc 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	0b5b      	lsrs	r3, r3, #13
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4903      	ldr	r1, [pc, #12]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002958:	4618      	mov	r0, r3
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40023800 	.word	0x40023800
 8002960:	08006074 	.word	0x08006074

08002964 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	220f      	movs	r2, #15
 8002972:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 0203 	and.w	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_RCC_GetClockConfig+0x5c>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_RCC_GetClockConfig+0x5c>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	08db      	lsrs	r3, r3, #3
 800299e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <HAL_RCC_GetClockConfig+0x60>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 020f 	and.w	r2, r3, #15
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	601a      	str	r2, [r3, #0]
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40023c00 	.word	0x40023c00

080029c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d012      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029f0:	4b69      	ldr	r3, [pc, #420]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a68      	ldr	r2, [pc, #416]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029fa:	6093      	str	r3, [r2, #8]
 80029fc:	4b66      	ldr	r3, [pc, #408]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	4964      	ldr	r1, [pc, #400]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d017      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a22:	4b5d      	ldr	r3, [pc, #372]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	4959      	ldr	r1, [pc, #356]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a40:	d101      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d017      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a5e:	4b4e      	ldr	r3, [pc, #312]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	494a      	ldr	r1, [pc, #296]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 808b 	beq.w	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aac:	4b3a      	ldr	r3, [pc, #232]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	4a39      	ldr	r2, [pc, #228]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab8:	4b37      	ldr	r3, [pc, #220]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ac4:	4b35      	ldr	r3, [pc, #212]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a34      	ldr	r2, [pc, #208]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ace:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad0:	f7fe fb28 	bl	8001124 <HAL_GetTick>
 8002ad4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad8:	f7fe fb24 	bl	8001124 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e357      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002aea:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002af6:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d035      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d02e      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b14:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	4a1d      	ldr	r2, [pc, #116]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	4a1a      	ldr	r2, [pc, #104]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b36:	4a18      	ldr	r2, [pc, #96]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b3c:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d114      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe faec 	bl	8001124 <HAL_GetTick>
 8002b4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b50:	f7fe fae8 	bl	8001124 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e319      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0ee      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b7e:	d111      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b8c:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b8e:	400b      	ands	r3, r1
 8002b90:	4901      	ldr	r1, [pc, #4]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	0ffffcff 	.word	0x0ffffcff
 8002ba4:	4baa      	ldr	r3, [pc, #680]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4aa9      	ldr	r2, [pc, #676]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002baa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bae:	6093      	str	r3, [r2, #8]
 8002bb0:	4ba7      	ldr	r3, [pc, #668]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbc:	49a4      	ldr	r1, [pc, #656]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d010      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bce:	4ba0      	ldr	r3, [pc, #640]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd4:	4a9e      	ldr	r2, [pc, #632]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002bde:	4b9c      	ldr	r3, [pc, #624]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	4999      	ldr	r1, [pc, #612]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bfc:	4b94      	ldr	r3, [pc, #592]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c0a:	4991      	ldr	r1, [pc, #580]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c1e:	4b8c      	ldr	r3, [pc, #560]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c2c:	4988      	ldr	r1, [pc, #544]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c40:	4b83      	ldr	r3, [pc, #524]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c4e:	4980      	ldr	r1, [pc, #512]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c62:	4b7b      	ldr	r3, [pc, #492]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4977      	ldr	r1, [pc, #476]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c84:	4b72      	ldr	r3, [pc, #456]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	f023 0203 	bic.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	496f      	ldr	r1, [pc, #444]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ca6:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cac:	f023 020c 	bic.w	r2, r3, #12
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb4:	4966      	ldr	r1, [pc, #408]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cc8:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	495e      	ldr	r1, [pc, #376]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cea:	4b59      	ldr	r3, [pc, #356]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf8:	4955      	ldr	r1, [pc, #340]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d0c:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	494d      	ldr	r1, [pc, #308]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d2e:	4b48      	ldr	r3, [pc, #288]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	4944      	ldr	r1, [pc, #272]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d50:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	493c      	ldr	r1, [pc, #240]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d72:	4b37      	ldr	r3, [pc, #220]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d80:	4933      	ldr	r1, [pc, #204]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d94:	4b2e      	ldr	r3, [pc, #184]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002da2:	492b      	ldr	r1, [pc, #172]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d011      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002db6:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc4:	4922      	ldr	r1, [pc, #136]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dd4:	d101      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002de6:	2301      	movs	r3, #1
 8002de8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002df6:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e04:	4912      	ldr	r1, [pc, #72]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e18:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e28:	4909      	ldr	r1, [pc, #36]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d006      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80d9 	beq.w	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e44:	4b02      	ldr	r3, [pc, #8]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a01      	ldr	r2, [pc, #4]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e4e:	e001      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002e50:	40023800 	.word	0x40023800
 8002e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e56:	f7fe f965 	bl	8001124 <HAL_GetTick>
 8002e5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e5e:	f7fe f961 	bl	8001124 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b64      	cmp	r3, #100	; 0x64
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e194      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e70:	4b6c      	ldr	r3, [pc, #432]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f0      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d021      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d11d      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e90:	4b64      	ldr	r3, [pc, #400]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e96:	0c1b      	lsrs	r3, r3, #16
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e9e:	4b61      	ldr	r3, [pc, #388]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea4:	0e1b      	lsrs	r3, r3, #24
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	019a      	lsls	r2, r3, #6
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	041b      	lsls	r3, r3, #16
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	061b      	lsls	r3, r3, #24
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	071b      	lsls	r3, r3, #28
 8002ec4:	4957      	ldr	r1, [pc, #348]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d004      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d02e      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef6:	d129      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ef8:	4b4a      	ldr	r3, [pc, #296]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002efe:	0c1b      	lsrs	r3, r3, #16
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f06:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f0c:	0f1b      	lsrs	r3, r3, #28
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	019a      	lsls	r2, r3, #6
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	041b      	lsls	r3, r3, #16
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	061b      	lsls	r3, r3, #24
 8002f26:	431a      	orrs	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	071b      	lsls	r3, r3, #28
 8002f2c:	493d      	ldr	r1, [pc, #244]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f34:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f3a:	f023 021f 	bic.w	r2, r3, #31
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	3b01      	subs	r3, #1
 8002f44:	4937      	ldr	r1, [pc, #220]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01d      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f58:	4b32      	ldr	r3, [pc, #200]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5e:	0e1b      	lsrs	r3, r3, #24
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f66:	4b2f      	ldr	r3, [pc, #188]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6c:	0f1b      	lsrs	r3, r3, #28
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	019a      	lsls	r2, r3, #6
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	041b      	lsls	r3, r3, #16
 8002f80:	431a      	orrs	r2, r3
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	061b      	lsls	r3, r3, #24
 8002f86:	431a      	orrs	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	071b      	lsls	r3, r3, #28
 8002f8c:	4925      	ldr	r1, [pc, #148]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d011      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	019a      	lsls	r2, r3, #6
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	041b      	lsls	r3, r3, #16
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	071b      	lsls	r3, r3, #28
 8002fbc:	4919      	ldr	r1, [pc, #100]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fc4:	4b17      	ldr	r3, [pc, #92]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a16      	ldr	r2, [pc, #88]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd0:	f7fe f8a8 	bl	8001124 <HAL_GetTick>
 8002fd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fd8:	f7fe f8a4 	bl	8001124 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e0d7      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fea:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	f040 80cd 	bne.w	8003198 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a08      	ldr	r2, [pc, #32]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300a:	f7fe f88b 	bl	8001124 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003010:	e00a      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003012:	f7fe f887 	bl	8001124 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b64      	cmp	r3, #100	; 0x64
 800301e:	d903      	bls.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e0ba      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003024:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003028:	4b5e      	ldr	r3, [pc, #376]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003034:	d0ed      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003052:	2b00      	cmp	r3, #0
 8003054:	d02e      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d12a      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800305e:	4b51      	ldr	r3, [pc, #324]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800306c:	4b4d      	ldr	r3, [pc, #308]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003072:	0f1b      	lsrs	r3, r3, #28
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	019a      	lsls	r2, r3, #6
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	061b      	lsls	r3, r3, #24
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	071b      	lsls	r3, r3, #28
 8003092:	4944      	ldr	r1, [pc, #272]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800309a:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800309c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	3b01      	subs	r3, #1
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	493d      	ldr	r1, [pc, #244]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d022      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c8:	d11d      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030ca:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d0:	0e1b      	lsrs	r3, r3, #24
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030d8:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	0f1b      	lsrs	r3, r3, #28
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	019a      	lsls	r2, r3, #6
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	041b      	lsls	r3, r3, #16
 80030f2:	431a      	orrs	r2, r3
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	061b      	lsls	r3, r3, #24
 80030f8:	431a      	orrs	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	071b      	lsls	r3, r3, #28
 80030fe:	4929      	ldr	r1, [pc, #164]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d028      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003112:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003118:	0e1b      	lsrs	r3, r3, #24
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003120:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	0c1b      	lsrs	r3, r3, #16
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	019a      	lsls	r2, r3, #6
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	041b      	lsls	r3, r3, #16
 8003138:	431a      	orrs	r2, r3
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	071b      	lsls	r3, r3, #28
 8003146:	4917      	ldr	r1, [pc, #92]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	4911      	ldr	r1, [pc, #68]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800316a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003170:	f7fd ffd8 	bl	8001124 <HAL_GetTick>
 8003174:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003178:	f7fd ffd4 	bl	8001124 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	; 0x64
 8003184:	d901      	bls.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e007      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003196:	d1ef      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800

080031a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e049      	b.n	800324e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f841 	bl	8003256 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f000 fa00 	bl	80035ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	d001      	beq.n	8003284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e054      	b.n	800332e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a26      	ldr	r2, [pc, #152]	; (800333c <HAL_TIM_Base_Start_IT+0xd0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d022      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x80>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ae:	d01d      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x80>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a22      	ldr	r2, [pc, #136]	; (8003340 <HAL_TIM_Base_Start_IT+0xd4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d018      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x80>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a21      	ldr	r2, [pc, #132]	; (8003344 <HAL_TIM_Base_Start_IT+0xd8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d013      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x80>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1f      	ldr	r2, [pc, #124]	; (8003348 <HAL_TIM_Base_Start_IT+0xdc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00e      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x80>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1e      	ldr	r2, [pc, #120]	; (800334c <HAL_TIM_Base_Start_IT+0xe0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d009      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x80>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <HAL_TIM_Base_Start_IT+0xe4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d004      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x80>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_TIM_Base_Start_IT+0xe8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d115      	bne.n	8003318 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	4b19      	ldr	r3, [pc, #100]	; (8003358 <HAL_TIM_Base_Start_IT+0xec>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d015      	beq.n	800332a <HAL_TIM_Base_Start_IT+0xbe>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d011      	beq.n	800332a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003316:	e008      	b.n	800332a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	e000      	b.n	800332c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40010000 	.word	0x40010000
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800
 8003348:	40000c00 	.word	0x40000c00
 800334c:	40010400 	.word	0x40010400
 8003350:	40014000 	.word	0x40014000
 8003354:	40001800 	.word	0x40001800
 8003358:	00010007 	.word	0x00010007

0800335c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d122      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b02      	cmp	r3, #2
 800337e:	d11b      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0202 	mvn.w	r2, #2
 8003388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f905 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f8f7 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f908 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d122      	bne.n	800340c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d11b      	bne.n	800340c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0204 	mvn.w	r2, #4
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2202      	movs	r2, #2
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f8db 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f8cd 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f8de 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b08      	cmp	r3, #8
 8003418:	d122      	bne.n	8003460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b08      	cmp	r3, #8
 8003426:	d11b      	bne.n	8003460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0208 	mvn.w	r2, #8
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2204      	movs	r2, #4
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f8b1 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8a3 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f8b4 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b10      	cmp	r3, #16
 800346c:	d122      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b10      	cmp	r3, #16
 800347a:	d11b      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0210 	mvn.w	r2, #16
 8003484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2208      	movs	r2, #8
 800348a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f887 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f879 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f88a 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0201 	mvn.w	r2, #1
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fd faf8 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b80      	cmp	r3, #128	; 0x80
 80034ec:	d10e      	bne.n	800350c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d107      	bne.n	800350c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f91a 	bl	8003740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351a:	d10e      	bne.n	800353a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d107      	bne.n	800353a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f90d 	bl	8003754 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b40      	cmp	r3, #64	; 0x40
 8003546:	d10e      	bne.n	8003566 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	d107      	bne.n	8003566 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800355e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f838 	bl	80035d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b20      	cmp	r3, #32
 8003572:	d10e      	bne.n	8003592 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b20      	cmp	r3, #32
 8003580:	d107      	bne.n	8003592 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f06f 0220 	mvn.w	r2, #32
 800358a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f8cd 	bl	800372c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a40      	ldr	r2, [pc, #256]	; (8003700 <TIM_Base_SetConfig+0x114>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d013      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360a:	d00f      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a3d      	ldr	r2, [pc, #244]	; (8003704 <TIM_Base_SetConfig+0x118>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00b      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a3c      	ldr	r2, [pc, #240]	; (8003708 <TIM_Base_SetConfig+0x11c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d007      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a3b      	ldr	r2, [pc, #236]	; (800370c <TIM_Base_SetConfig+0x120>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a3a      	ldr	r2, [pc, #232]	; (8003710 <TIM_Base_SetConfig+0x124>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d108      	bne.n	800363e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a2f      	ldr	r2, [pc, #188]	; (8003700 <TIM_Base_SetConfig+0x114>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d02b      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364c:	d027      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a2c      	ldr	r2, [pc, #176]	; (8003704 <TIM_Base_SetConfig+0x118>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d023      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a2b      	ldr	r2, [pc, #172]	; (8003708 <TIM_Base_SetConfig+0x11c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01f      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2a      	ldr	r2, [pc, #168]	; (800370c <TIM_Base_SetConfig+0x120>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01b      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a29      	ldr	r2, [pc, #164]	; (8003710 <TIM_Base_SetConfig+0x124>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d017      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a28      	ldr	r2, [pc, #160]	; (8003714 <TIM_Base_SetConfig+0x128>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a27      	ldr	r2, [pc, #156]	; (8003718 <TIM_Base_SetConfig+0x12c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00f      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a26      	ldr	r2, [pc, #152]	; (800371c <TIM_Base_SetConfig+0x130>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00b      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a25      	ldr	r2, [pc, #148]	; (8003720 <TIM_Base_SetConfig+0x134>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a24      	ldr	r2, [pc, #144]	; (8003724 <TIM_Base_SetConfig+0x138>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d003      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a23      	ldr	r2, [pc, #140]	; (8003728 <TIM_Base_SetConfig+0x13c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d108      	bne.n	80036b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <TIM_Base_SetConfig+0x114>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d003      	beq.n	80036e4 <TIM_Base_SetConfig+0xf8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a0c      	ldr	r2, [pc, #48]	; (8003710 <TIM_Base_SetConfig+0x124>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d103      	bne.n	80036ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	615a      	str	r2, [r3, #20]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40010000 	.word	0x40010000
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800
 800370c:	40000c00 	.word	0x40000c00
 8003710:	40010400 	.word	0x40010400
 8003714:	40014000 	.word	0x40014000
 8003718:	40014400 	.word	0x40014400
 800371c:	40014800 	.word	0x40014800
 8003720:	40001800 	.word	0x40001800
 8003724:	40001c00 	.word	0x40001c00
 8003728:	40002000 	.word	0x40002000

0800372c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e040      	b.n	80037fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fd fa94 	bl	8000cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	; 0x24
 8003794:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f82c 	bl	8003804 <UART_SetConfig>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e022      	b.n	80037fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fa84 	bl	8003ccc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fb0b 	bl	8003e10 <UART_CheckIdleState>
 80037fa:	4603      	mov	r3, r0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4ba6      	ldr	r3, [pc, #664]	; (8003ac8 <UART_SetConfig+0x2c4>)
 8003830:	4013      	ands	r3, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	6979      	ldr	r1, [r7, #20]
 8003838:	430b      	orrs	r3, r1
 800383a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	430a      	orrs	r2, r1
 8003874:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a94      	ldr	r2, [pc, #592]	; (8003acc <UART_SetConfig+0x2c8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d120      	bne.n	80038c2 <UART_SetConfig+0xbe>
 8003880:	4b93      	ldr	r3, [pc, #588]	; (8003ad0 <UART_SetConfig+0x2cc>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b03      	cmp	r3, #3
 800388c:	d816      	bhi.n	80038bc <UART_SetConfig+0xb8>
 800388e:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <UART_SetConfig+0x90>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038a5 	.word	0x080038a5
 8003898:	080038b1 	.word	0x080038b1
 800389c:	080038ab 	.word	0x080038ab
 80038a0:	080038b7 	.word	0x080038b7
 80038a4:	2301      	movs	r3, #1
 80038a6:	77fb      	strb	r3, [r7, #31]
 80038a8:	e150      	b.n	8003b4c <UART_SetConfig+0x348>
 80038aa:	2302      	movs	r3, #2
 80038ac:	77fb      	strb	r3, [r7, #31]
 80038ae:	e14d      	b.n	8003b4c <UART_SetConfig+0x348>
 80038b0:	2304      	movs	r3, #4
 80038b2:	77fb      	strb	r3, [r7, #31]
 80038b4:	e14a      	b.n	8003b4c <UART_SetConfig+0x348>
 80038b6:	2308      	movs	r3, #8
 80038b8:	77fb      	strb	r3, [r7, #31]
 80038ba:	e147      	b.n	8003b4c <UART_SetConfig+0x348>
 80038bc:	2310      	movs	r3, #16
 80038be:	77fb      	strb	r3, [r7, #31]
 80038c0:	e144      	b.n	8003b4c <UART_SetConfig+0x348>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a83      	ldr	r2, [pc, #524]	; (8003ad4 <UART_SetConfig+0x2d0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d132      	bne.n	8003932 <UART_SetConfig+0x12e>
 80038cc:	4b80      	ldr	r3, [pc, #512]	; (8003ad0 <UART_SetConfig+0x2cc>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b0c      	cmp	r3, #12
 80038d8:	d828      	bhi.n	800392c <UART_SetConfig+0x128>
 80038da:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <UART_SetConfig+0xdc>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	08003915 	.word	0x08003915
 80038e4:	0800392d 	.word	0x0800392d
 80038e8:	0800392d 	.word	0x0800392d
 80038ec:	0800392d 	.word	0x0800392d
 80038f0:	08003921 	.word	0x08003921
 80038f4:	0800392d 	.word	0x0800392d
 80038f8:	0800392d 	.word	0x0800392d
 80038fc:	0800392d 	.word	0x0800392d
 8003900:	0800391b 	.word	0x0800391b
 8003904:	0800392d 	.word	0x0800392d
 8003908:	0800392d 	.word	0x0800392d
 800390c:	0800392d 	.word	0x0800392d
 8003910:	08003927 	.word	0x08003927
 8003914:	2300      	movs	r3, #0
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e118      	b.n	8003b4c <UART_SetConfig+0x348>
 800391a:	2302      	movs	r3, #2
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e115      	b.n	8003b4c <UART_SetConfig+0x348>
 8003920:	2304      	movs	r3, #4
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e112      	b.n	8003b4c <UART_SetConfig+0x348>
 8003926:	2308      	movs	r3, #8
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e10f      	b.n	8003b4c <UART_SetConfig+0x348>
 800392c:	2310      	movs	r3, #16
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e10c      	b.n	8003b4c <UART_SetConfig+0x348>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a68      	ldr	r2, [pc, #416]	; (8003ad8 <UART_SetConfig+0x2d4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d120      	bne.n	800397e <UART_SetConfig+0x17a>
 800393c:	4b64      	ldr	r3, [pc, #400]	; (8003ad0 <UART_SetConfig+0x2cc>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003946:	2b30      	cmp	r3, #48	; 0x30
 8003948:	d013      	beq.n	8003972 <UART_SetConfig+0x16e>
 800394a:	2b30      	cmp	r3, #48	; 0x30
 800394c:	d814      	bhi.n	8003978 <UART_SetConfig+0x174>
 800394e:	2b20      	cmp	r3, #32
 8003950:	d009      	beq.n	8003966 <UART_SetConfig+0x162>
 8003952:	2b20      	cmp	r3, #32
 8003954:	d810      	bhi.n	8003978 <UART_SetConfig+0x174>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <UART_SetConfig+0x15c>
 800395a:	2b10      	cmp	r3, #16
 800395c:	d006      	beq.n	800396c <UART_SetConfig+0x168>
 800395e:	e00b      	b.n	8003978 <UART_SetConfig+0x174>
 8003960:	2300      	movs	r3, #0
 8003962:	77fb      	strb	r3, [r7, #31]
 8003964:	e0f2      	b.n	8003b4c <UART_SetConfig+0x348>
 8003966:	2302      	movs	r3, #2
 8003968:	77fb      	strb	r3, [r7, #31]
 800396a:	e0ef      	b.n	8003b4c <UART_SetConfig+0x348>
 800396c:	2304      	movs	r3, #4
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e0ec      	b.n	8003b4c <UART_SetConfig+0x348>
 8003972:	2308      	movs	r3, #8
 8003974:	77fb      	strb	r3, [r7, #31]
 8003976:	e0e9      	b.n	8003b4c <UART_SetConfig+0x348>
 8003978:	2310      	movs	r3, #16
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e0e6      	b.n	8003b4c <UART_SetConfig+0x348>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a56      	ldr	r2, [pc, #344]	; (8003adc <UART_SetConfig+0x2d8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d120      	bne.n	80039ca <UART_SetConfig+0x1c6>
 8003988:	4b51      	ldr	r3, [pc, #324]	; (8003ad0 <UART_SetConfig+0x2cc>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003992:	2bc0      	cmp	r3, #192	; 0xc0
 8003994:	d013      	beq.n	80039be <UART_SetConfig+0x1ba>
 8003996:	2bc0      	cmp	r3, #192	; 0xc0
 8003998:	d814      	bhi.n	80039c4 <UART_SetConfig+0x1c0>
 800399a:	2b80      	cmp	r3, #128	; 0x80
 800399c:	d009      	beq.n	80039b2 <UART_SetConfig+0x1ae>
 800399e:	2b80      	cmp	r3, #128	; 0x80
 80039a0:	d810      	bhi.n	80039c4 <UART_SetConfig+0x1c0>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <UART_SetConfig+0x1a8>
 80039a6:	2b40      	cmp	r3, #64	; 0x40
 80039a8:	d006      	beq.n	80039b8 <UART_SetConfig+0x1b4>
 80039aa:	e00b      	b.n	80039c4 <UART_SetConfig+0x1c0>
 80039ac:	2300      	movs	r3, #0
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e0cc      	b.n	8003b4c <UART_SetConfig+0x348>
 80039b2:	2302      	movs	r3, #2
 80039b4:	77fb      	strb	r3, [r7, #31]
 80039b6:	e0c9      	b.n	8003b4c <UART_SetConfig+0x348>
 80039b8:	2304      	movs	r3, #4
 80039ba:	77fb      	strb	r3, [r7, #31]
 80039bc:	e0c6      	b.n	8003b4c <UART_SetConfig+0x348>
 80039be:	2308      	movs	r3, #8
 80039c0:	77fb      	strb	r3, [r7, #31]
 80039c2:	e0c3      	b.n	8003b4c <UART_SetConfig+0x348>
 80039c4:	2310      	movs	r3, #16
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e0c0      	b.n	8003b4c <UART_SetConfig+0x348>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a44      	ldr	r2, [pc, #272]	; (8003ae0 <UART_SetConfig+0x2dc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d125      	bne.n	8003a20 <UART_SetConfig+0x21c>
 80039d4:	4b3e      	ldr	r3, [pc, #248]	; (8003ad0 <UART_SetConfig+0x2cc>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039e2:	d017      	beq.n	8003a14 <UART_SetConfig+0x210>
 80039e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039e8:	d817      	bhi.n	8003a1a <UART_SetConfig+0x216>
 80039ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ee:	d00b      	beq.n	8003a08 <UART_SetConfig+0x204>
 80039f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039f4:	d811      	bhi.n	8003a1a <UART_SetConfig+0x216>
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <UART_SetConfig+0x1fe>
 80039fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fe:	d006      	beq.n	8003a0e <UART_SetConfig+0x20a>
 8003a00:	e00b      	b.n	8003a1a <UART_SetConfig+0x216>
 8003a02:	2300      	movs	r3, #0
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e0a1      	b.n	8003b4c <UART_SetConfig+0x348>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e09e      	b.n	8003b4c <UART_SetConfig+0x348>
 8003a0e:	2304      	movs	r3, #4
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e09b      	b.n	8003b4c <UART_SetConfig+0x348>
 8003a14:	2308      	movs	r3, #8
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e098      	b.n	8003b4c <UART_SetConfig+0x348>
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	77fb      	strb	r3, [r7, #31]
 8003a1e:	e095      	b.n	8003b4c <UART_SetConfig+0x348>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a2f      	ldr	r2, [pc, #188]	; (8003ae4 <UART_SetConfig+0x2e0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d125      	bne.n	8003a76 <UART_SetConfig+0x272>
 8003a2a:	4b29      	ldr	r3, [pc, #164]	; (8003ad0 <UART_SetConfig+0x2cc>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a38:	d017      	beq.n	8003a6a <UART_SetConfig+0x266>
 8003a3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a3e:	d817      	bhi.n	8003a70 <UART_SetConfig+0x26c>
 8003a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a44:	d00b      	beq.n	8003a5e <UART_SetConfig+0x25a>
 8003a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4a:	d811      	bhi.n	8003a70 <UART_SetConfig+0x26c>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <UART_SetConfig+0x254>
 8003a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a54:	d006      	beq.n	8003a64 <UART_SetConfig+0x260>
 8003a56:	e00b      	b.n	8003a70 <UART_SetConfig+0x26c>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	77fb      	strb	r3, [r7, #31]
 8003a5c:	e076      	b.n	8003b4c <UART_SetConfig+0x348>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	77fb      	strb	r3, [r7, #31]
 8003a62:	e073      	b.n	8003b4c <UART_SetConfig+0x348>
 8003a64:	2304      	movs	r3, #4
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e070      	b.n	8003b4c <UART_SetConfig+0x348>
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	77fb      	strb	r3, [r7, #31]
 8003a6e:	e06d      	b.n	8003b4c <UART_SetConfig+0x348>
 8003a70:	2310      	movs	r3, #16
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e06a      	b.n	8003b4c <UART_SetConfig+0x348>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <UART_SetConfig+0x2e4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d138      	bne.n	8003af2 <UART_SetConfig+0x2ee>
 8003a80:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <UART_SetConfig+0x2cc>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a8e:	d017      	beq.n	8003ac0 <UART_SetConfig+0x2bc>
 8003a90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a94:	d82a      	bhi.n	8003aec <UART_SetConfig+0x2e8>
 8003a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9a:	d00b      	beq.n	8003ab4 <UART_SetConfig+0x2b0>
 8003a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa0:	d824      	bhi.n	8003aec <UART_SetConfig+0x2e8>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <UART_SetConfig+0x2aa>
 8003aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aaa:	d006      	beq.n	8003aba <UART_SetConfig+0x2b6>
 8003aac:	e01e      	b.n	8003aec <UART_SetConfig+0x2e8>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	77fb      	strb	r3, [r7, #31]
 8003ab2:	e04b      	b.n	8003b4c <UART_SetConfig+0x348>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e048      	b.n	8003b4c <UART_SetConfig+0x348>
 8003aba:	2304      	movs	r3, #4
 8003abc:	77fb      	strb	r3, [r7, #31]
 8003abe:	e045      	b.n	8003b4c <UART_SetConfig+0x348>
 8003ac0:	2308      	movs	r3, #8
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e042      	b.n	8003b4c <UART_SetConfig+0x348>
 8003ac6:	bf00      	nop
 8003ac8:	efff69f3 	.word	0xefff69f3
 8003acc:	40011000 	.word	0x40011000
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40004400 	.word	0x40004400
 8003ad8:	40004800 	.word	0x40004800
 8003adc:	40004c00 	.word	0x40004c00
 8003ae0:	40005000 	.word	0x40005000
 8003ae4:	40011400 	.word	0x40011400
 8003ae8:	40007800 	.word	0x40007800
 8003aec:	2310      	movs	r3, #16
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	e02c      	b.n	8003b4c <UART_SetConfig+0x348>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a72      	ldr	r2, [pc, #456]	; (8003cc0 <UART_SetConfig+0x4bc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d125      	bne.n	8003b48 <UART_SetConfig+0x344>
 8003afc:	4b71      	ldr	r3, [pc, #452]	; (8003cc4 <UART_SetConfig+0x4c0>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b0a:	d017      	beq.n	8003b3c <UART_SetConfig+0x338>
 8003b0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b10:	d817      	bhi.n	8003b42 <UART_SetConfig+0x33e>
 8003b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b16:	d00b      	beq.n	8003b30 <UART_SetConfig+0x32c>
 8003b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b1c:	d811      	bhi.n	8003b42 <UART_SetConfig+0x33e>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <UART_SetConfig+0x326>
 8003b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b26:	d006      	beq.n	8003b36 <UART_SetConfig+0x332>
 8003b28:	e00b      	b.n	8003b42 <UART_SetConfig+0x33e>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	77fb      	strb	r3, [r7, #31]
 8003b2e:	e00d      	b.n	8003b4c <UART_SetConfig+0x348>
 8003b30:	2302      	movs	r3, #2
 8003b32:	77fb      	strb	r3, [r7, #31]
 8003b34:	e00a      	b.n	8003b4c <UART_SetConfig+0x348>
 8003b36:	2304      	movs	r3, #4
 8003b38:	77fb      	strb	r3, [r7, #31]
 8003b3a:	e007      	b.n	8003b4c <UART_SetConfig+0x348>
 8003b3c:	2308      	movs	r3, #8
 8003b3e:	77fb      	strb	r3, [r7, #31]
 8003b40:	e004      	b.n	8003b4c <UART_SetConfig+0x348>
 8003b42:	2310      	movs	r3, #16
 8003b44:	77fb      	strb	r3, [r7, #31]
 8003b46:	e001      	b.n	8003b4c <UART_SetConfig+0x348>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b54:	d15b      	bne.n	8003c0e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b56:	7ffb      	ldrb	r3, [r7, #31]
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d828      	bhi.n	8003bae <UART_SetConfig+0x3aa>
 8003b5c:	a201      	add	r2, pc, #4	; (adr r2, 8003b64 <UART_SetConfig+0x360>)
 8003b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b62:	bf00      	nop
 8003b64:	08003b89 	.word	0x08003b89
 8003b68:	08003b91 	.word	0x08003b91
 8003b6c:	08003b99 	.word	0x08003b99
 8003b70:	08003baf 	.word	0x08003baf
 8003b74:	08003b9f 	.word	0x08003b9f
 8003b78:	08003baf 	.word	0x08003baf
 8003b7c:	08003baf 	.word	0x08003baf
 8003b80:	08003baf 	.word	0x08003baf
 8003b84:	08003ba7 	.word	0x08003ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b88:	f7fe fec4 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 8003b8c:	61b8      	str	r0, [r7, #24]
        break;
 8003b8e:	e013      	b.n	8003bb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b90:	f7fe fed4 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 8003b94:	61b8      	str	r0, [r7, #24]
        break;
 8003b96:	e00f      	b.n	8003bb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b98:	4b4b      	ldr	r3, [pc, #300]	; (8003cc8 <UART_SetConfig+0x4c4>)
 8003b9a:	61bb      	str	r3, [r7, #24]
        break;
 8003b9c:	e00c      	b.n	8003bb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b9e:	f7fe fda7 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8003ba2:	61b8      	str	r0, [r7, #24]
        break;
 8003ba4:	e008      	b.n	8003bb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003baa:	61bb      	str	r3, [r7, #24]
        break;
 8003bac:	e004      	b.n	8003bb8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	77bb      	strb	r3, [r7, #30]
        break;
 8003bb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d074      	beq.n	8003ca8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	005a      	lsls	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	441a      	add	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	2b0f      	cmp	r3, #15
 8003bd8:	d916      	bls.n	8003c08 <UART_SetConfig+0x404>
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be0:	d212      	bcs.n	8003c08 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f023 030f 	bic.w	r3, r3, #15
 8003bea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	89fb      	ldrh	r3, [r7, #14]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	89fa      	ldrh	r2, [r7, #14]
 8003c04:	60da      	str	r2, [r3, #12]
 8003c06:	e04f      	b.n	8003ca8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	77bb      	strb	r3, [r7, #30]
 8003c0c:	e04c      	b.n	8003ca8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c0e:	7ffb      	ldrb	r3, [r7, #31]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d828      	bhi.n	8003c66 <UART_SetConfig+0x462>
 8003c14:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <UART_SetConfig+0x418>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c41 	.word	0x08003c41
 8003c20:	08003c49 	.word	0x08003c49
 8003c24:	08003c51 	.word	0x08003c51
 8003c28:	08003c67 	.word	0x08003c67
 8003c2c:	08003c57 	.word	0x08003c57
 8003c30:	08003c67 	.word	0x08003c67
 8003c34:	08003c67 	.word	0x08003c67
 8003c38:	08003c67 	.word	0x08003c67
 8003c3c:	08003c5f 	.word	0x08003c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c40:	f7fe fe68 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 8003c44:	61b8      	str	r0, [r7, #24]
        break;
 8003c46:	e013      	b.n	8003c70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c48:	f7fe fe78 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 8003c4c:	61b8      	str	r0, [r7, #24]
        break;
 8003c4e:	e00f      	b.n	8003c70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c50:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <UART_SetConfig+0x4c4>)
 8003c52:	61bb      	str	r3, [r7, #24]
        break;
 8003c54:	e00c      	b.n	8003c70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c56:	f7fe fd4b 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8003c5a:	61b8      	str	r0, [r7, #24]
        break;
 8003c5c:	e008      	b.n	8003c70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c62:	61bb      	str	r3, [r7, #24]
        break;
 8003c64:	e004      	b.n	8003c70 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c6e:	bf00      	nop
    }

    if (pclk != 0U)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d018      	beq.n	8003ca8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	085a      	lsrs	r2, r3, #1
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	441a      	add	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2b0f      	cmp	r3, #15
 8003c8e:	d909      	bls.n	8003ca4 <UART_SetConfig+0x4a0>
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c96:	d205      	bcs.n	8003ca4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	e001      	b.n	8003ca8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003cb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40007c00 	.word	0x40007c00
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	00f42400 	.word	0x00f42400

08003ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01a      	beq.n	8003de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dca:	d10a      	bne.n	8003de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
  }
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e20:	f7fd f980 	bl	8001124 <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d10e      	bne.n	8003e52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f81b 	bl	8003e7e <UART_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e011      	b.n	8003e76 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b09c      	sub	sp, #112	; 0x70
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8e:	e0a7      	b.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	f000 80a3 	beq.w	8003fe0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9a:	f7fd f943 	bl	8001124 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d302      	bcc.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d13f      	bne.n	8003f30 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ec4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ed0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ed4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e6      	bne.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f02:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e5      	bne.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e068      	b.n	8004002 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d050      	beq.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4c:	d148      	bne.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f56:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f76:	637b      	str	r3, [r7, #52]	; 0x34
 8003f78:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e6      	bne.n	8003f58 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3308      	adds	r3, #8
 8003f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	613b      	str	r3, [r7, #16]
   return(result);
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003faa:	623a      	str	r2, [r7, #32]
 8003fac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	69f9      	ldr	r1, [r7, #28]
 8003fb0:	6a3a      	ldr	r2, [r7, #32]
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e5      	bne.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e010      	b.n	8004002 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	69da      	ldr	r2, [r3, #28]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	f43f af48 	beq.w	8003e90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3770      	adds	r7, #112	; 0x70
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800400c:	b084      	sub	sp, #16
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	f107 001c 	add.w	r0, r7, #28
 800401a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	2b01      	cmp	r3, #1
 8004022:	d120      	bne.n	8004066 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <USB_CoreInit+0xac>)
 8004036:	4013      	ands	r3, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d105      	bne.n	800405a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fa96 	bl	800458c <USB_CoreReset>
 8004060:	4603      	mov	r3, r0
 8004062:	73fb      	strb	r3, [r7, #15]
 8004064:	e010      	b.n	8004088 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fa8a 	bl	800458c <USB_CoreReset>
 8004078:	4603      	mov	r3, r0
 800407a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	2b01      	cmp	r3, #1
 800408c:	d10b      	bne.n	80040a6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f043 0206 	orr.w	r2, r3, #6
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f043 0220 	orr.w	r2, r3, #32
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040b2:	b004      	add	sp, #16
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	ffbdffbf 	.word	0xffbdffbf

080040bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f023 0201 	bic.w	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	460b      	mov	r3, r1
 80040e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d115      	bne.n	800412c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800410c:	2001      	movs	r0, #1
 800410e:	f7fd f815 	bl	800113c <HAL_Delay>
      ms++;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	3301      	adds	r3, #1
 8004116:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 fa29 	bl	8004570 <USB_GetMode>
 800411e:	4603      	mov	r3, r0
 8004120:	2b01      	cmp	r3, #1
 8004122:	d01e      	beq.n	8004162 <USB_SetCurrentMode+0x84>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b31      	cmp	r3, #49	; 0x31
 8004128:	d9f0      	bls.n	800410c <USB_SetCurrentMode+0x2e>
 800412a:	e01a      	b.n	8004162 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d115      	bne.n	800415e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800413e:	2001      	movs	r0, #1
 8004140:	f7fc fffc 	bl	800113c <HAL_Delay>
      ms++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3301      	adds	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa10 	bl	8004570 <USB_GetMode>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <USB_SetCurrentMode+0x84>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b31      	cmp	r3, #49	; 0x31
 800415a:	d9f0      	bls.n	800413e <USB_SetCurrentMode+0x60>
 800415c:	e001      	b.n	8004162 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e005      	b.n	800416e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b32      	cmp	r3, #50	; 0x32
 8004166:	d101      	bne.n	800416c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004178:	b084      	sub	sp, #16
 800417a:	b580      	push	{r7, lr}
 800417c:	b086      	sub	sp, #24
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	e009      	b.n	80041ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	3340      	adds	r3, #64	; 0x40
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	2200      	movs	r2, #0
 80041a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	3301      	adds	r3, #1
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2b0e      	cmp	r3, #14
 80041b0:	d9f2      	bls.n	8004198 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11c      	bne.n	80041f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041c6:	f043 0302 	orr.w	r3, r3, #2
 80041ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	e005      	b.n	80041fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004204:	461a      	mov	r2, r3
 8004206:	2300      	movs	r3, #0
 8004208:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004210:	4619      	mov	r1, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004218:	461a      	mov	r2, r3
 800421a:	680b      	ldr	r3, [r1, #0]
 800421c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004220:	2b01      	cmp	r3, #1
 8004222:	d10c      	bne.n	800423e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004226:	2b00      	cmp	r3, #0
 8004228:	d104      	bne.n	8004234 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800422a:	2100      	movs	r1, #0
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f965 	bl	80044fc <USB_SetDevSpeed>
 8004232:	e008      	b.n	8004246 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004234:	2101      	movs	r1, #1
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f960 	bl	80044fc <USB_SetDevSpeed>
 800423c:	e003      	b.n	8004246 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800423e:	2103      	movs	r1, #3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f95b 	bl	80044fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004246:	2110      	movs	r1, #16
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f8f3 	bl	8004434 <USB_FlushTxFifo>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f91f 	bl	800449c <USB_FlushRxFifo>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426e:	461a      	mov	r2, r3
 8004270:	2300      	movs	r3, #0
 8004272:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427a:	461a      	mov	r2, r3
 800427c:	2300      	movs	r3, #0
 800427e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	461a      	mov	r2, r3
 8004288:	2300      	movs	r3, #0
 800428a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	e043      	b.n	800431a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042a8:	d118      	bne.n	80042dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042bc:	461a      	mov	r2, r3
 80042be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	e013      	b.n	80042ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d2:	461a      	mov	r2, r3
 80042d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e008      	b.n	80042ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e8:	461a      	mov	r2, r3
 80042ea:	2300      	movs	r3, #0
 80042ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fa:	461a      	mov	r2, r3
 80042fc:	2300      	movs	r3, #0
 80042fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430c:	461a      	mov	r2, r3
 800430e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004312:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	3301      	adds	r3, #1
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	429a      	cmp	r2, r3
 8004320:	d3b7      	bcc.n	8004292 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004322:	2300      	movs	r3, #0
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	e043      	b.n	80043b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800433a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800433e:	d118      	bne.n	8004372 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004352:	461a      	mov	r2, r3
 8004354:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e013      	b.n	8004384 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004368:	461a      	mov	r2, r3
 800436a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	e008      	b.n	8004384 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437e:	461a      	mov	r2, r3
 8004380:	2300      	movs	r3, #0
 8004382:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004390:	461a      	mov	r2, r3
 8004392:	2300      	movs	r3, #0
 8004394:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a2:	461a      	mov	r2, r3
 80043a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	3301      	adds	r3, #1
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d3b7      	bcc.n	8004328 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	f043 0210 	orr.w	r2, r3, #16
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	4b0e      	ldr	r3, [pc, #56]	; (800442c <USB_DevInit+0x2b4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	f043 0208 	orr.w	r2, r3, #8
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800440a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440c:	2b01      	cmp	r3, #1
 800440e:	d105      	bne.n	800441c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699a      	ldr	r2, [r3, #24]
 8004414:	4b06      	ldr	r3, [pc, #24]	; (8004430 <USB_DevInit+0x2b8>)
 8004416:	4313      	orrs	r3, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800441c:	7dfb      	ldrb	r3, [r7, #23]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004428:	b004      	add	sp, #16
 800442a:	4770      	bx	lr
 800442c:	803c3800 	.word	0x803c3800
 8004430:	40000004 	.word	0x40000004

08004434 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3301      	adds	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4a13      	ldr	r2, [pc, #76]	; (8004498 <USB_FlushTxFifo+0x64>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d901      	bls.n	8004454 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e01b      	b.n	800448c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	daf2      	bge.n	8004442 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	019b      	lsls	r3, r3, #6
 8004464:	f043 0220 	orr.w	r2, r3, #32
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3301      	adds	r3, #1
 8004470:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4a08      	ldr	r2, [pc, #32]	; (8004498 <USB_FlushTxFifo+0x64>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e006      	b.n	800448c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b20      	cmp	r3, #32
 8004488:	d0f0      	beq.n	800446c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	00030d40 	.word	0x00030d40

0800449c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3301      	adds	r3, #1
 80044ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4a11      	ldr	r2, [pc, #68]	; (80044f8 <USB_FlushRxFifo+0x5c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d901      	bls.n	80044ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e018      	b.n	80044ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	daf2      	bge.n	80044a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2210      	movs	r2, #16
 80044ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3301      	adds	r3, #1
 80044d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <USB_FlushRxFifo+0x5c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e006      	b.n	80044ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	2b10      	cmp	r3, #16
 80044e8:	d0f0      	beq.n	80044cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	00030d40 	.word	0x00030d40

080044fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	68f9      	ldr	r1, [r7, #12]
 8004518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800452e:	b480      	push	{r7}
 8004530:	b085      	sub	sp, #20
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004548:	f023 0303 	bic.w	r3, r3, #3
 800454c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800455c:	f043 0302 	orr.w	r3, r3, #2
 8004560:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f003 0301 	and.w	r3, r3, #1
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3301      	adds	r3, #1
 800459c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <USB_CoreReset+0x64>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e01b      	b.n	80045e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	daf2      	bge.n	8004598 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f043 0201 	orr.w	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3301      	adds	r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <USB_CoreReset+0x64>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e006      	b.n	80045e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d0f0      	beq.n	80045c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	00030d40 	.word	0x00030d40

080045f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004606:	2b84      	cmp	r3, #132	; 0x84
 8004608:	d005      	beq.n	8004616 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800460a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4413      	add	r3, r2
 8004612:	3303      	adds	r3, #3
 8004614:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004616:	68fb      	ldr	r3, [r7, #12]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004628:	f000 fc5e 	bl	8004ee8 <vTaskStartScheduler>
  
  return osOK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	bd80      	pop	{r7, pc}

08004632 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004634:	b089      	sub	sp, #36	; 0x24
 8004636:	af04      	add	r7, sp, #16
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d020      	beq.n	8004686 <osThreadCreate+0x54>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01c      	beq.n	8004686 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685c      	ldr	r4, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691e      	ldr	r6, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff ffc8 	bl	80045f4 <makeFreeRtosPriority>
 8004664:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800466e:	9202      	str	r2, [sp, #8]
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	9100      	str	r1, [sp, #0]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	4632      	mov	r2, r6
 8004678:	4629      	mov	r1, r5
 800467a:	4620      	mov	r0, r4
 800467c:	f000 fa63 	bl	8004b46 <xTaskCreateStatic>
 8004680:	4603      	mov	r3, r0
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	e01c      	b.n	80046c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685c      	ldr	r4, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004692:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ffaa 	bl	80045f4 <makeFreeRtosPriority>
 80046a0:	4602      	mov	r2, r0
 80046a2:	f107 030c 	add.w	r3, r7, #12
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	9200      	str	r2, [sp, #0]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	4632      	mov	r2, r6
 80046ae:	4629      	mov	r1, r5
 80046b0:	4620      	mov	r0, r4
 80046b2:	f000 faab 	bl	8004c0c <xTaskCreate>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d001      	beq.n	80046c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	e000      	b.n	80046c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046c0:	68fb      	ldr	r3, [r7, #12]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <osDelay+0x16>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	e000      	b.n	80046e2 <osDelay+0x18>
 80046e0:	2301      	movs	r3, #1
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fbca 	bl	8004e7c <vTaskDelay>
  
  return osOK;
 80046e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80046f2:	b590      	push	{r4, r7, lr}
 80046f4:	b085      	sub	sp, #20
 80046f6:	af02      	add	r7, sp, #8
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d011      	beq.n	8004728 <osMessageCreate+0x36>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00d      	beq.n	8004728 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2400      	movs	r4, #0
 800471e:	9400      	str	r4, [sp, #0]
 8004720:	f000 f92e 	bl	8004980 <xQueueGenericCreateStatic>
 8004724:	4603      	mov	r3, r0
 8004726:	e008      	b.n	800473a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	4619      	mov	r1, r3
 8004734:	f000 f9a6 	bl	8004a84 <xQueueGenericCreate>
 8004738:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	bd90      	pop	{r4, r7, pc}

08004742 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f103 0208 	add.w	r2, r3, #8
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f04f 32ff 	mov.w	r2, #4294967295
 800475a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f103 0208 	add.w	r2, r3, #8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f103 0208 	add.w	r2, r3, #8
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	601a      	str	r2, [r3, #0]
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	d103      	bne.n	8004804 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	e00c      	b.n	800481e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3308      	adds	r3, #8
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	e002      	b.n	8004812 <vListInsert+0x2e>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	429a      	cmp	r2, r3
 800481c:	d2f6      	bcs.n	800480c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	601a      	str	r2, [r3, #0]
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6892      	ldr	r2, [r2, #8]
 800486c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6852      	ldr	r2, [r2, #4]
 8004876:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	429a      	cmp	r2, r3
 8004880:	d103      	bne.n	800488a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	1e5a      	subs	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10c      	bne.n	80048da <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	b672      	cpsid	i
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	b662      	cpsie	i
 80048d4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80048da:	f000 ffdf 	bl	800589c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e6:	68f9      	ldr	r1, [r7, #12]
 80048e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048ea:	fb01 f303 	mul.w	r3, r1, r3
 80048ee:	441a      	add	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490a:	3b01      	subs	r3, #1
 800490c:	68f9      	ldr	r1, [r7, #12]
 800490e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004910:	fb01 f303 	mul.w	r3, r1, r3
 8004914:	441a      	add	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	22ff      	movs	r2, #255	; 0xff
 800491e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	22ff      	movs	r2, #255	; 0xff
 8004926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d114      	bne.n	800495a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01a      	beq.n	800496e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3310      	adds	r3, #16
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fcfb 	bl	8005338 <xTaskRemoveFromEventList>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d012      	beq.n	800496e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004948:	4b0c      	ldr	r3, [pc, #48]	; (800497c <xQueueGenericReset+0xd0>)
 800494a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	e009      	b.n	800496e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3310      	adds	r3, #16
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff feef 	bl	8004742 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3324      	adds	r3, #36	; 0x24
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff feea 	bl	8004742 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800496e:	f000 ffc9 	bl	8005904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004972:	2301      	movs	r3, #1
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	e000ed04 	.word	0xe000ed04

08004980 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08e      	sub	sp, #56	; 0x38
 8004984:	af02      	add	r7, sp, #8
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10c      	bne.n	80049ae <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	b672      	cpsid	i
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	b662      	cpsie	i
 80049a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10c      	bne.n	80049ce <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	b672      	cpsid	i
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	b662      	cpsie	i
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049ca:	bf00      	nop
 80049cc:	e7fe      	b.n	80049cc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <xQueueGenericCreateStatic+0x5a>
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <xQueueGenericCreateStatic+0x5e>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <xQueueGenericCreateStatic+0x60>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10c      	bne.n	80049fe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	b672      	cpsid	i
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	b662      	cpsie	i
 80049f8:	623b      	str	r3, [r7, #32]
}
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <xQueueGenericCreateStatic+0x8a>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <xQueueGenericCreateStatic+0x8e>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <xQueueGenericCreateStatic+0x90>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10c      	bne.n	8004a2e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	b672      	cpsid	i
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	b662      	cpsie	i
 8004a28:	61fb      	str	r3, [r7, #28]
}
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a2e:	2348      	movs	r3, #72	; 0x48
 8004a30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2b48      	cmp	r3, #72	; 0x48
 8004a36:	d00c      	beq.n	8004a52 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	b672      	cpsid	i
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	b662      	cpsie	i
 8004a4c:	61bb      	str	r3, [r7, #24]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00d      	beq.n	8004a7a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 f847 	bl	8004b08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3730      	adds	r7, #48	; 0x30
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10c      	bne.n	8004ab2 <xQueueGenericCreate+0x2e>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	b672      	cpsid	i
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	b662      	cpsie	i
 8004aac:	613b      	str	r3, [r7, #16]
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	e004      	b.n	8004ac8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	fb02 f303 	mul.w	r3, r2, r3
 8004ac6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	3348      	adds	r3, #72	; 0x48
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 ffcd 	bl	8005a6c <pvPortMalloc>
 8004ad2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d011      	beq.n	8004afe <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	3348      	adds	r3, #72	; 0x48
 8004ae2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004aec:	79fa      	ldrb	r2, [r7, #7]
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f805 	bl	8004b08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004afe:	69bb      	ldr	r3, [r7, #24]
	}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3720      	adds	r7, #32
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d103      	bne.n	8004b24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	e002      	b.n	8004b2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b36:	2101      	movs	r1, #1
 8004b38:	69b8      	ldr	r0, [r7, #24]
 8004b3a:	f7ff feb7 	bl	80048ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b3e:	bf00      	nop
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b08e      	sub	sp, #56	; 0x38
 8004b4a:	af04      	add	r7, sp, #16
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10c      	bne.n	8004b74 <xTaskCreateStatic+0x2e>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	b672      	cpsid	i
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	b662      	cpsie	i
 8004b6e:	623b      	str	r3, [r7, #32]
}
 8004b70:	bf00      	nop
 8004b72:	e7fe      	b.n	8004b72 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10c      	bne.n	8004b94 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	b672      	cpsid	i
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	b662      	cpsie	i
 8004b8e:	61fb      	str	r3, [r7, #28]
}
 8004b90:	bf00      	nop
 8004b92:	e7fe      	b.n	8004b92 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b94:	2354      	movs	r3, #84	; 0x54
 8004b96:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b54      	cmp	r3, #84	; 0x54
 8004b9c:	d00c      	beq.n	8004bb8 <xTaskCreateStatic+0x72>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	b672      	cpsid	i
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	b662      	cpsie	i
 8004bb2:	61bb      	str	r3, [r7, #24]
}
 8004bb4:	bf00      	nop
 8004bb6:	e7fe      	b.n	8004bb6 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004bb8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01e      	beq.n	8004bfe <xTaskCreateStatic+0xb8>
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d01b      	beq.n	8004bfe <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9303      	str	r3, [sp, #12]
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	9302      	str	r3, [sp, #8]
 8004be0:	f107 0314 	add.w	r3, r7, #20
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f850 	bl	8004c96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bf8:	f000 f8d6 	bl	8004da8 <prvAddNewTaskToReadyList>
 8004bfc:	e001      	b.n	8004c02 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c02:	697b      	ldr	r3, [r7, #20]
	}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3728      	adds	r7, #40	; 0x28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08c      	sub	sp, #48	; 0x30
 8004c10:	af04      	add	r7, sp, #16
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 ff23 	bl	8005a6c <pvPortMalloc>
 8004c26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00e      	beq.n	8004c4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c2e:	2054      	movs	r0, #84	; 0x54
 8004c30:	f000 ff1c 	bl	8005a6c <pvPortMalloc>
 8004c34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30
 8004c42:	e005      	b.n	8004c50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c44:	6978      	ldr	r0, [r7, #20]
 8004c46:	f000 ffdb 	bl	8005c00 <vPortFree>
 8004c4a:	e001      	b.n	8004c50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d017      	beq.n	8004c86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c5e:	88fa      	ldrh	r2, [r7, #6]
 8004c60:	2300      	movs	r3, #0
 8004c62:	9303      	str	r3, [sp, #12]
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	9302      	str	r3, [sp, #8]
 8004c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6a:	9301      	str	r3, [sp, #4]
 8004c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f80e 	bl	8004c96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c7a:	69f8      	ldr	r0, [r7, #28]
 8004c7c:	f000 f894 	bl	8004da8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c80:	2301      	movs	r3, #1
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	e002      	b.n	8004c8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c86:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
	}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3720      	adds	r7, #32
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b088      	sub	sp, #32
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004cae:	440b      	add	r3, r1
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f023 0307 	bic.w	r3, r3, #7
 8004cbc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00c      	beq.n	8004ce2 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	b672      	cpsid	i
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	b662      	cpsie	i
 8004cdc:	617b      	str	r3, [r7, #20]
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01f      	beq.n	8004d28 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]
 8004cec:	e012      	b.n	8004d14 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	7819      	ldrb	r1, [r3, #0]
 8004cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3334      	adds	r3, #52	; 0x34
 8004cfe:	460a      	mov	r2, r1
 8004d00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	4413      	add	r3, r2
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d006      	beq.n	8004d1c <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	3301      	adds	r3, #1
 8004d12:	61fb      	str	r3, [r7, #28]
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	2b0f      	cmp	r3, #15
 8004d18:	d9e9      	bls.n	8004cee <prvInitialiseNewTask+0x58>
 8004d1a:	e000      	b.n	8004d1e <prvInitialiseNewTask+0x88>
			{
				break;
 8004d1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d26:	e003      	b.n	8004d30 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	2b06      	cmp	r3, #6
 8004d34:	d901      	bls.n	8004d3a <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d36:	2306      	movs	r3, #6
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d44:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	2200      	movs	r2, #0
 8004d4a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff fd16 	bl	8004782 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	3318      	adds	r3, #24
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fd11 	bl	8004782 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	f1c3 0207 	rsb	r2, r3, #7
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d74:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	2200      	movs	r2, #0
 8004d7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	68f9      	ldr	r1, [r7, #12]
 8004d88:	69b8      	ldr	r0, [r7, #24]
 8004d8a:	f000 fc77 	bl	800567c <pxPortInitialiseStack>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004da0:	bf00      	nop
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004db0:	f000 fd74 	bl	800589c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004db4:	4b2a      	ldr	r3, [pc, #168]	; (8004e60 <prvAddNewTaskToReadyList+0xb8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3301      	adds	r3, #1
 8004dba:	4a29      	ldr	r2, [pc, #164]	; (8004e60 <prvAddNewTaskToReadyList+0xb8>)
 8004dbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dbe:	4b29      	ldr	r3, [pc, #164]	; (8004e64 <prvAddNewTaskToReadyList+0xbc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dc6:	4a27      	ldr	r2, [pc, #156]	; (8004e64 <prvAddNewTaskToReadyList+0xbc>)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004dcc:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <prvAddNewTaskToReadyList+0xb8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d110      	bne.n	8004df6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004dd4:	f000 fb2c 	bl	8005430 <prvInitialiseTaskLists>
 8004dd8:	e00d      	b.n	8004df6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dda:	4b23      	ldr	r3, [pc, #140]	; (8004e68 <prvAddNewTaskToReadyList+0xc0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d109      	bne.n	8004df6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004de2:	4b20      	ldr	r3, [pc, #128]	; (8004e64 <prvAddNewTaskToReadyList+0xbc>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d802      	bhi.n	8004df6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004df0:	4a1c      	ldr	r2, [pc, #112]	; (8004e64 <prvAddNewTaskToReadyList+0xbc>)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004df6:	4b1d      	ldr	r3, [pc, #116]	; (8004e6c <prvAddNewTaskToReadyList+0xc4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	4a1b      	ldr	r2, [pc, #108]	; (8004e6c <prvAddNewTaskToReadyList+0xc4>)
 8004dfe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	2201      	movs	r2, #1
 8004e06:	409a      	lsls	r2, r3
 8004e08:	4b19      	ldr	r3, [pc, #100]	; (8004e70 <prvAddNewTaskToReadyList+0xc8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <prvAddNewTaskToReadyList+0xc8>)
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4a15      	ldr	r2, [pc, #84]	; (8004e74 <prvAddNewTaskToReadyList+0xcc>)
 8004e20:	441a      	add	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3304      	adds	r3, #4
 8004e26:	4619      	mov	r1, r3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f7ff fcb7 	bl	800479c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e2e:	f000 fd69 	bl	8005904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e32:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <prvAddNewTaskToReadyList+0xc0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00e      	beq.n	8004e58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <prvAddNewTaskToReadyList+0xbc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d207      	bcs.n	8004e58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <prvAddNewTaskToReadyList+0xd0>)
 8004e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e58:	bf00      	nop
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20000cd4 	.word	0x20000cd4
 8004e64:	20000bd4 	.word	0x20000bd4
 8004e68:	20000ce0 	.word	0x20000ce0
 8004e6c:	20000cf0 	.word	0x20000cf0
 8004e70:	20000cdc 	.word	0x20000cdc
 8004e74:	20000bd8 	.word	0x20000bd8
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d019      	beq.n	8004ec2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e8e:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <vTaskDelay+0x64>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00c      	beq.n	8004eb0 <vTaskDelay+0x34>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	b672      	cpsid	i
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	b662      	cpsie	i
 8004eaa:	60bb      	str	r3, [r7, #8]
}
 8004eac:	bf00      	nop
 8004eae:	e7fe      	b.n	8004eae <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004eb0:	f000 f87e 	bl	8004fb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fb7a 	bl	80055b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ebc:	f000 f886 	bl	8004fcc <xTaskResumeAll>
 8004ec0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d107      	bne.n	8004ed8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <vTaskDelay+0x68>)
 8004eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20000cfc 	.word	0x20000cfc
 8004ee4:	e000ed04 	.word	0xe000ed04

08004ee8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ef6:	463a      	mov	r2, r7
 8004ef8:	1d39      	adds	r1, r7, #4
 8004efa:	f107 0308 	add.w	r3, r7, #8
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fb fb04 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f04:	6839      	ldr	r1, [r7, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	9202      	str	r2, [sp, #8]
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	460a      	mov	r2, r1
 8004f16:	4920      	ldr	r1, [pc, #128]	; (8004f98 <vTaskStartScheduler+0xb0>)
 8004f18:	4820      	ldr	r0, [pc, #128]	; (8004f9c <vTaskStartScheduler+0xb4>)
 8004f1a:	f7ff fe14 	bl	8004b46 <xTaskCreateStatic>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4a1f      	ldr	r2, [pc, #124]	; (8004fa0 <vTaskStartScheduler+0xb8>)
 8004f22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f24:	4b1e      	ldr	r3, [pc, #120]	; (8004fa0 <vTaskStartScheduler+0xb8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	e001      	b.n	8004f36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d118      	bne.n	8004f6e <vTaskStartScheduler+0x86>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	b672      	cpsid	i
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	b662      	cpsie	i
 8004f50:	613b      	str	r3, [r7, #16]
}
 8004f52:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f54:	4b13      	ldr	r3, [pc, #76]	; (8004fa4 <vTaskStartScheduler+0xbc>)
 8004f56:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f5c:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <vTaskStartScheduler+0xc0>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f62:	4b12      	ldr	r3, [pc, #72]	; (8004fac <vTaskStartScheduler+0xc4>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f68:	f000 fc1a 	bl	80057a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f6c:	e010      	b.n	8004f90 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d10c      	bne.n	8004f90 <vTaskStartScheduler+0xa8>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	b672      	cpsid	i
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	b662      	cpsie	i
 8004f8a:	60fb      	str	r3, [r7, #12]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <vTaskStartScheduler+0xa6>
}
 8004f90:	bf00      	nop
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	0800605c 	.word	0x0800605c
 8004f9c:	08005401 	.word	0x08005401
 8004fa0:	20000cf8 	.word	0x20000cf8
 8004fa4:	20000cf4 	.word	0x20000cf4
 8004fa8:	20000ce0 	.word	0x20000ce0
 8004fac:	20000cd8 	.word	0x20000cd8

08004fb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004fb4:	4b04      	ldr	r3, [pc, #16]	; (8004fc8 <vTaskSuspendAll+0x18>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	4a03      	ldr	r2, [pc, #12]	; (8004fc8 <vTaskSuspendAll+0x18>)
 8004fbc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004fbe:	bf00      	nop
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	20000cfc 	.word	0x20000cfc

08004fcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fda:	4b42      	ldr	r3, [pc, #264]	; (80050e4 <xTaskResumeAll+0x118>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10c      	bne.n	8004ffc <xTaskResumeAll+0x30>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	b672      	cpsid	i
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	b662      	cpsie	i
 8004ff6:	603b      	str	r3, [r7, #0]
}
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ffc:	f000 fc4e 	bl	800589c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005000:	4b38      	ldr	r3, [pc, #224]	; (80050e4 <xTaskResumeAll+0x118>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3b01      	subs	r3, #1
 8005006:	4a37      	ldr	r2, [pc, #220]	; (80050e4 <xTaskResumeAll+0x118>)
 8005008:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800500a:	4b36      	ldr	r3, [pc, #216]	; (80050e4 <xTaskResumeAll+0x118>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d161      	bne.n	80050d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005012:	4b35      	ldr	r3, [pc, #212]	; (80050e8 <xTaskResumeAll+0x11c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d05d      	beq.n	80050d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800501a:	e02e      	b.n	800507a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800501c:	4b33      	ldr	r3, [pc, #204]	; (80050ec <xTaskResumeAll+0x120>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3318      	adds	r3, #24
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fc14 	bl	8004856 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3304      	adds	r3, #4
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fc0f 	bl	8004856 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	2201      	movs	r2, #1
 800503e:	409a      	lsls	r2, r3
 8005040:	4b2b      	ldr	r3, [pc, #172]	; (80050f0 <xTaskResumeAll+0x124>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4313      	orrs	r3, r2
 8005046:	4a2a      	ldr	r2, [pc, #168]	; (80050f0 <xTaskResumeAll+0x124>)
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4a27      	ldr	r2, [pc, #156]	; (80050f4 <xTaskResumeAll+0x128>)
 8005058:	441a      	add	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3304      	adds	r3, #4
 800505e:	4619      	mov	r1, r3
 8005060:	4610      	mov	r0, r2
 8005062:	f7ff fb9b 	bl	800479c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506a:	4b23      	ldr	r3, [pc, #140]	; (80050f8 <xTaskResumeAll+0x12c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	429a      	cmp	r2, r3
 8005072:	d302      	bcc.n	800507a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005074:	4b21      	ldr	r3, [pc, #132]	; (80050fc <xTaskResumeAll+0x130>)
 8005076:	2201      	movs	r2, #1
 8005078:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800507a:	4b1c      	ldr	r3, [pc, #112]	; (80050ec <xTaskResumeAll+0x120>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1cc      	bne.n	800501c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005088:	f000 fa72 	bl	8005570 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800508c:	4b1c      	ldr	r3, [pc, #112]	; (8005100 <xTaskResumeAll+0x134>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d010      	beq.n	80050ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005098:	f000 f836 	bl	8005108 <xTaskIncrementTick>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80050a2:	4b16      	ldr	r3, [pc, #88]	; (80050fc <xTaskResumeAll+0x130>)
 80050a4:	2201      	movs	r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1f1      	bne.n	8005098 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80050b4:	4b12      	ldr	r3, [pc, #72]	; (8005100 <xTaskResumeAll+0x134>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050ba:	4b10      	ldr	r3, [pc, #64]	; (80050fc <xTaskResumeAll+0x130>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050c2:	2301      	movs	r3, #1
 80050c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050c6:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <xTaskResumeAll+0x138>)
 80050c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050d6:	f000 fc15 	bl	8005904 <vPortExitCritical>

	return xAlreadyYielded;
 80050da:	68bb      	ldr	r3, [r7, #8]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20000cfc 	.word	0x20000cfc
 80050e8:	20000cd4 	.word	0x20000cd4
 80050ec:	20000c94 	.word	0x20000c94
 80050f0:	20000cdc 	.word	0x20000cdc
 80050f4:	20000bd8 	.word	0x20000bd8
 80050f8:	20000bd4 	.word	0x20000bd4
 80050fc:	20000ce8 	.word	0x20000ce8
 8005100:	20000ce4 	.word	0x20000ce4
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800510e:	2300      	movs	r3, #0
 8005110:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005112:	4b4f      	ldr	r3, [pc, #316]	; (8005250 <xTaskIncrementTick+0x148>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	f040 808a 	bne.w	8005230 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800511c:	4b4d      	ldr	r3, [pc, #308]	; (8005254 <xTaskIncrementTick+0x14c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005124:	4a4b      	ldr	r2, [pc, #300]	; (8005254 <xTaskIncrementTick+0x14c>)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d122      	bne.n	8005176 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005130:	4b49      	ldr	r3, [pc, #292]	; (8005258 <xTaskIncrementTick+0x150>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00c      	beq.n	8005154 <xTaskIncrementTick+0x4c>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	b672      	cpsid	i
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	b662      	cpsie	i
 800514e:	603b      	str	r3, [r7, #0]
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <xTaskIncrementTick+0x4a>
 8005154:	4b40      	ldr	r3, [pc, #256]	; (8005258 <xTaskIncrementTick+0x150>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	4b40      	ldr	r3, [pc, #256]	; (800525c <xTaskIncrementTick+0x154>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a3e      	ldr	r2, [pc, #248]	; (8005258 <xTaskIncrementTick+0x150>)
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	4a3e      	ldr	r2, [pc, #248]	; (800525c <xTaskIncrementTick+0x154>)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	4b3d      	ldr	r3, [pc, #244]	; (8005260 <xTaskIncrementTick+0x158>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3301      	adds	r3, #1
 800516e:	4a3c      	ldr	r2, [pc, #240]	; (8005260 <xTaskIncrementTick+0x158>)
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	f000 f9fd 	bl	8005570 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005176:	4b3b      	ldr	r3, [pc, #236]	; (8005264 <xTaskIncrementTick+0x15c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	429a      	cmp	r2, r3
 800517e:	d348      	bcc.n	8005212 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005180:	4b35      	ldr	r3, [pc, #212]	; (8005258 <xTaskIncrementTick+0x150>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800518a:	4b36      	ldr	r3, [pc, #216]	; (8005264 <xTaskIncrementTick+0x15c>)
 800518c:	f04f 32ff 	mov.w	r2, #4294967295
 8005190:	601a      	str	r2, [r3, #0]
					break;
 8005192:	e03e      	b.n	8005212 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005194:	4b30      	ldr	r3, [pc, #192]	; (8005258 <xTaskIncrementTick+0x150>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d203      	bcs.n	80051b4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051ac:	4a2d      	ldr	r2, [pc, #180]	; (8005264 <xTaskIncrementTick+0x15c>)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051b2:	e02e      	b.n	8005212 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	3304      	adds	r3, #4
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff fb4c 	bl	8004856 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d004      	beq.n	80051d0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	3318      	adds	r3, #24
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff fb43 	bl	8004856 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	2201      	movs	r2, #1
 80051d6:	409a      	lsls	r2, r3
 80051d8:	4b23      	ldr	r3, [pc, #140]	; (8005268 <xTaskIncrementTick+0x160>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4313      	orrs	r3, r2
 80051de:	4a22      	ldr	r2, [pc, #136]	; (8005268 <xTaskIncrementTick+0x160>)
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e6:	4613      	mov	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4a1f      	ldr	r2, [pc, #124]	; (800526c <xTaskIncrementTick+0x164>)
 80051f0:	441a      	add	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4619      	mov	r1, r3
 80051f8:	4610      	mov	r0, r2
 80051fa:	f7ff facf 	bl	800479c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005202:	4b1b      	ldr	r3, [pc, #108]	; (8005270 <xTaskIncrementTick+0x168>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	429a      	cmp	r2, r3
 800520a:	d3b9      	bcc.n	8005180 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800520c:	2301      	movs	r3, #1
 800520e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005210:	e7b6      	b.n	8005180 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005212:	4b17      	ldr	r3, [pc, #92]	; (8005270 <xTaskIncrementTick+0x168>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005218:	4914      	ldr	r1, [pc, #80]	; (800526c <xTaskIncrementTick+0x164>)
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	440b      	add	r3, r1
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d907      	bls.n	800523a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800522a:	2301      	movs	r3, #1
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e004      	b.n	800523a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005230:	4b10      	ldr	r3, [pc, #64]	; (8005274 <xTaskIncrementTick+0x16c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3301      	adds	r3, #1
 8005236:	4a0f      	ldr	r2, [pc, #60]	; (8005274 <xTaskIncrementTick+0x16c>)
 8005238:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800523a:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <xTaskIncrementTick+0x170>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005242:	2301      	movs	r3, #1
 8005244:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005246:	697b      	ldr	r3, [r7, #20]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	20000cfc 	.word	0x20000cfc
 8005254:	20000cd8 	.word	0x20000cd8
 8005258:	20000c8c 	.word	0x20000c8c
 800525c:	20000c90 	.word	0x20000c90
 8005260:	20000cec 	.word	0x20000cec
 8005264:	20000cf4 	.word	0x20000cf4
 8005268:	20000cdc 	.word	0x20000cdc
 800526c:	20000bd8 	.word	0x20000bd8
 8005270:	20000bd4 	.word	0x20000bd4
 8005274:	20000ce4 	.word	0x20000ce4
 8005278:	20000ce8 	.word	0x20000ce8

0800527c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005282:	4b28      	ldr	r3, [pc, #160]	; (8005324 <vTaskSwitchContext+0xa8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800528a:	4b27      	ldr	r3, [pc, #156]	; (8005328 <vTaskSwitchContext+0xac>)
 800528c:	2201      	movs	r2, #1
 800528e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005290:	e041      	b.n	8005316 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005292:	4b25      	ldr	r3, [pc, #148]	; (8005328 <vTaskSwitchContext+0xac>)
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005298:	4b24      	ldr	r3, [pc, #144]	; (800532c <vTaskSwitchContext+0xb0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	fab3 f383 	clz	r3, r3
 80052a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80052a6:	7afb      	ldrb	r3, [r7, #11]
 80052a8:	f1c3 031f 	rsb	r3, r3, #31
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	4920      	ldr	r1, [pc, #128]	; (8005330 <vTaskSwitchContext+0xb4>)
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10c      	bne.n	80052dc <vTaskSwitchContext+0x60>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	b672      	cpsid	i
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	b662      	cpsie	i
 80052d6:	607b      	str	r3, [r7, #4]
}
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <vTaskSwitchContext+0x5e>
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4a12      	ldr	r2, [pc, #72]	; (8005330 <vTaskSwitchContext+0xb4>)
 80052e8:	4413      	add	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	605a      	str	r2, [r3, #4]
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	3308      	adds	r3, #8
 80052fe:	429a      	cmp	r2, r3
 8005300:	d104      	bne.n	800530c <vTaskSwitchContext+0x90>
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	605a      	str	r2, [r3, #4]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	4a08      	ldr	r2, [pc, #32]	; (8005334 <vTaskSwitchContext+0xb8>)
 8005314:	6013      	str	r3, [r2, #0]
}
 8005316:	bf00      	nop
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000cfc 	.word	0x20000cfc
 8005328:	20000ce8 	.word	0x20000ce8
 800532c:	20000cdc 	.word	0x20000cdc
 8005330:	20000bd8 	.word	0x20000bd8
 8005334:	20000bd4 	.word	0x20000bd4

08005338 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10c      	bne.n	8005368 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	b672      	cpsid	i
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	b662      	cpsie	i
 8005362:	60fb      	str	r3, [r7, #12]
}
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	3318      	adds	r3, #24
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff fa72 	bl	8004856 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005372:	4b1d      	ldr	r3, [pc, #116]	; (80053e8 <xTaskRemoveFromEventList+0xb0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d11c      	bne.n	80053b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	3304      	adds	r3, #4
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff fa69 	bl	8004856 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	2201      	movs	r2, #1
 800538a:	409a      	lsls	r2, r3
 800538c:	4b17      	ldr	r3, [pc, #92]	; (80053ec <xTaskRemoveFromEventList+0xb4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4313      	orrs	r3, r2
 8005392:	4a16      	ldr	r2, [pc, #88]	; (80053ec <xTaskRemoveFromEventList+0xb4>)
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4a13      	ldr	r2, [pc, #76]	; (80053f0 <xTaskRemoveFromEventList+0xb8>)
 80053a4:	441a      	add	r2, r3
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f7ff f9f5 	bl	800479c <vListInsertEnd>
 80053b2:	e005      	b.n	80053c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	3318      	adds	r3, #24
 80053b8:	4619      	mov	r1, r3
 80053ba:	480e      	ldr	r0, [pc, #56]	; (80053f4 <xTaskRemoveFromEventList+0xbc>)
 80053bc:	f7ff f9ee 	bl	800479c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <xTaskRemoveFromEventList+0xc0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d905      	bls.n	80053da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053ce:	2301      	movs	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053d2:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <xTaskRemoveFromEventList+0xc4>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e001      	b.n	80053de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053de:	697b      	ldr	r3, [r7, #20]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20000cfc 	.word	0x20000cfc
 80053ec:	20000cdc 	.word	0x20000cdc
 80053f0:	20000bd8 	.word	0x20000bd8
 80053f4:	20000c94 	.word	0x20000c94
 80053f8:	20000bd4 	.word	0x20000bd4
 80053fc:	20000ce8 	.word	0x20000ce8

08005400 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005408:	f000 f852 	bl	80054b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800540c:	4b06      	ldr	r3, [pc, #24]	; (8005428 <prvIdleTask+0x28>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d9f9      	bls.n	8005408 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <prvIdleTask+0x2c>)
 8005416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005424:	e7f0      	b.n	8005408 <prvIdleTask+0x8>
 8005426:	bf00      	nop
 8005428:	20000bd8 	.word	0x20000bd8
 800542c:	e000ed04 	.word	0xe000ed04

08005430 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005436:	2300      	movs	r3, #0
 8005438:	607b      	str	r3, [r7, #4]
 800543a:	e00c      	b.n	8005456 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4a12      	ldr	r2, [pc, #72]	; (8005490 <prvInitialiseTaskLists+0x60>)
 8005448:	4413      	add	r3, r2
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff f979 	bl	8004742 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3301      	adds	r3, #1
 8005454:	607b      	str	r3, [r7, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b06      	cmp	r3, #6
 800545a:	d9ef      	bls.n	800543c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800545c:	480d      	ldr	r0, [pc, #52]	; (8005494 <prvInitialiseTaskLists+0x64>)
 800545e:	f7ff f970 	bl	8004742 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005462:	480d      	ldr	r0, [pc, #52]	; (8005498 <prvInitialiseTaskLists+0x68>)
 8005464:	f7ff f96d 	bl	8004742 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005468:	480c      	ldr	r0, [pc, #48]	; (800549c <prvInitialiseTaskLists+0x6c>)
 800546a:	f7ff f96a 	bl	8004742 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800546e:	480c      	ldr	r0, [pc, #48]	; (80054a0 <prvInitialiseTaskLists+0x70>)
 8005470:	f7ff f967 	bl	8004742 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005474:	480b      	ldr	r0, [pc, #44]	; (80054a4 <prvInitialiseTaskLists+0x74>)
 8005476:	f7ff f964 	bl	8004742 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800547a:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <prvInitialiseTaskLists+0x78>)
 800547c:	4a05      	ldr	r2, [pc, #20]	; (8005494 <prvInitialiseTaskLists+0x64>)
 800547e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005480:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <prvInitialiseTaskLists+0x7c>)
 8005482:	4a05      	ldr	r2, [pc, #20]	; (8005498 <prvInitialiseTaskLists+0x68>)
 8005484:	601a      	str	r2, [r3, #0]
}
 8005486:	bf00      	nop
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20000bd8 	.word	0x20000bd8
 8005494:	20000c64 	.word	0x20000c64
 8005498:	20000c78 	.word	0x20000c78
 800549c:	20000c94 	.word	0x20000c94
 80054a0:	20000ca8 	.word	0x20000ca8
 80054a4:	20000cc0 	.word	0x20000cc0
 80054a8:	20000c8c 	.word	0x20000c8c
 80054ac:	20000c90 	.word	0x20000c90

080054b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054b6:	e019      	b.n	80054ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054b8:	f000 f9f0 	bl	800589c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054bc:	4b10      	ldr	r3, [pc, #64]	; (8005500 <prvCheckTasksWaitingTermination+0x50>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3304      	adds	r3, #4
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff f9c4 	bl	8004856 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <prvCheckTasksWaitingTermination+0x54>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	4a0b      	ldr	r2, [pc, #44]	; (8005504 <prvCheckTasksWaitingTermination+0x54>)
 80054d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <prvCheckTasksWaitingTermination+0x58>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3b01      	subs	r3, #1
 80054de:	4a0a      	ldr	r2, [pc, #40]	; (8005508 <prvCheckTasksWaitingTermination+0x58>)
 80054e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054e2:	f000 fa0f 	bl	8005904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f810 	bl	800550c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054ec:	4b06      	ldr	r3, [pc, #24]	; (8005508 <prvCheckTasksWaitingTermination+0x58>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e1      	bne.n	80054b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20000ca8 	.word	0x20000ca8
 8005504:	20000cd4 	.word	0x20000cd4
 8005508:	20000cbc 	.word	0x20000cbc

0800550c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800551a:	2b00      	cmp	r3, #0
 800551c:	d108      	bne.n	8005530 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fb6c 	bl	8005c00 <vPortFree>
				vPortFree( pxTCB );
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fb69 	bl	8005c00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800552e:	e01a      	b.n	8005566 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005536:	2b01      	cmp	r3, #1
 8005538:	d103      	bne.n	8005542 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fb60 	bl	8005c00 <vPortFree>
	}
 8005540:	e011      	b.n	8005566 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005548:	2b02      	cmp	r3, #2
 800554a:	d00c      	beq.n	8005566 <prvDeleteTCB+0x5a>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	b672      	cpsid	i
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	b662      	cpsie	i
 8005560:	60fb      	str	r3, [r7, #12]
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <prvDeleteTCB+0x58>
	}
 8005566:	bf00      	nop
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005576:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <prvResetNextTaskUnblockTime+0x38>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d104      	bne.n	800558a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005580:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <prvResetNextTaskUnblockTime+0x3c>)
 8005582:	f04f 32ff 	mov.w	r2, #4294967295
 8005586:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005588:	e008      	b.n	800559c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800558a:	4b07      	ldr	r3, [pc, #28]	; (80055a8 <prvResetNextTaskUnblockTime+0x38>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4a04      	ldr	r2, [pc, #16]	; (80055ac <prvResetNextTaskUnblockTime+0x3c>)
 800559a:	6013      	str	r3, [r2, #0]
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	20000c8c 	.word	0x20000c8c
 80055ac:	20000cf4 	.word	0x20000cf4

080055b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055ba:	4b29      	ldr	r3, [pc, #164]	; (8005660 <prvAddCurrentTaskToDelayedList+0xb0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055c0:	4b28      	ldr	r3, [pc, #160]	; (8005664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3304      	adds	r3, #4
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff f945 	bl	8004856 <uxListRemove>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10b      	bne.n	80055ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055d2:	4b24      	ldr	r3, [pc, #144]	; (8005664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	2201      	movs	r2, #1
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	43da      	mvns	r2, r3
 80055e0:	4b21      	ldr	r3, [pc, #132]	; (8005668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4013      	ands	r3, r2
 80055e6:	4a20      	ldr	r2, [pc, #128]	; (8005668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d10a      	bne.n	8005608 <prvAddCurrentTaskToDelayedList+0x58>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f8:	4b1a      	ldr	r3, [pc, #104]	; (8005664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3304      	adds	r3, #4
 80055fe:	4619      	mov	r1, r3
 8005600:	481a      	ldr	r0, [pc, #104]	; (800566c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005602:	f7ff f8cb 	bl	800479c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005606:	e026      	b.n	8005656 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4413      	add	r3, r2
 800560e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005610:	4b14      	ldr	r3, [pc, #80]	; (8005664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	429a      	cmp	r2, r3
 800561e:	d209      	bcs.n	8005634 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005620:	4b13      	ldr	r3, [pc, #76]	; (8005670 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3304      	adds	r3, #4
 800562a:	4619      	mov	r1, r3
 800562c:	4610      	mov	r0, r2
 800562e:	f7ff f8d9 	bl	80047e4 <vListInsert>
}
 8005632:	e010      	b.n	8005656 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005634:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <prvAddCurrentTaskToDelayedList+0xb4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3304      	adds	r3, #4
 800563e:	4619      	mov	r1, r3
 8005640:	4610      	mov	r0, r2
 8005642:	f7ff f8cf 	bl	80047e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005646:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	429a      	cmp	r2, r3
 800564e:	d202      	bcs.n	8005656 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005650:	4a09      	ldr	r2, [pc, #36]	; (8005678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	6013      	str	r3, [r2, #0]
}
 8005656:	bf00      	nop
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000cd8 	.word	0x20000cd8
 8005664:	20000bd4 	.word	0x20000bd4
 8005668:	20000cdc 	.word	0x20000cdc
 800566c:	20000cc0 	.word	0x20000cc0
 8005670:	20000c90 	.word	0x20000c90
 8005674:	20000c8c 	.word	0x20000c8c
 8005678:	20000cf4 	.word	0x20000cf4

0800567c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3b04      	subs	r3, #4
 800568c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3b04      	subs	r3, #4
 800569a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f023 0201 	bic.w	r2, r3, #1
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3b04      	subs	r3, #4
 80056aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056ac:	4a0c      	ldr	r2, [pc, #48]	; (80056e0 <pxPortInitialiseStack+0x64>)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3b14      	subs	r3, #20
 80056b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3b04      	subs	r3, #4
 80056c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f06f 0202 	mvn.w	r2, #2
 80056ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3b20      	subs	r3, #32
 80056d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056d2:	68fb      	ldr	r3, [r7, #12]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	080056e5 	.word	0x080056e5

080056e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056ee:	4b14      	ldr	r3, [pc, #80]	; (8005740 <prvTaskExitError+0x5c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f6:	d00c      	beq.n	8005712 <prvTaskExitError+0x2e>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	b672      	cpsid	i
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	b662      	cpsie	i
 800570c:	60fb      	str	r3, [r7, #12]
}
 800570e:	bf00      	nop
 8005710:	e7fe      	b.n	8005710 <prvTaskExitError+0x2c>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	b672      	cpsid	i
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	b662      	cpsie	i
 8005726:	60bb      	str	r3, [r7, #8]
}
 8005728:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800572a:	bf00      	nop
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0fc      	beq.n	800572c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005732:	bf00      	nop
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	2000000c 	.word	0x2000000c
	...

08005750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005750:	4b07      	ldr	r3, [pc, #28]	; (8005770 <pxCurrentTCBConst2>)
 8005752:	6819      	ldr	r1, [r3, #0]
 8005754:	6808      	ldr	r0, [r1, #0]
 8005756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575a:	f380 8809 	msr	PSP, r0
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f04f 0000 	mov.w	r0, #0
 8005766:	f380 8811 	msr	BASEPRI, r0
 800576a:	4770      	bx	lr
 800576c:	f3af 8000 	nop.w

08005770 <pxCurrentTCBConst2>:
 8005770:	20000bd4 	.word	0x20000bd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop

08005778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005778:	4808      	ldr	r0, [pc, #32]	; (800579c <prvPortStartFirstTask+0x24>)
 800577a:	6800      	ldr	r0, [r0, #0]
 800577c:	6800      	ldr	r0, [r0, #0]
 800577e:	f380 8808 	msr	MSP, r0
 8005782:	f04f 0000 	mov.w	r0, #0
 8005786:	f380 8814 	msr	CONTROL, r0
 800578a:	b662      	cpsie	i
 800578c:	b661      	cpsie	f
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	df00      	svc	0
 8005798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800579a:	bf00      	nop
 800579c:	e000ed08 	.word	0xe000ed08

080057a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057a6:	4b37      	ldr	r3, [pc, #220]	; (8005884 <xPortStartScheduler+0xe4>)
 80057a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	22ff      	movs	r2, #255	; 0xff
 80057b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	4b2f      	ldr	r3, [pc, #188]	; (8005888 <xPortStartScheduler+0xe8>)
 80057cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057ce:	4b2f      	ldr	r3, [pc, #188]	; (800588c <xPortStartScheduler+0xec>)
 80057d0:	2207      	movs	r2, #7
 80057d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057d4:	e009      	b.n	80057ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80057d6:	4b2d      	ldr	r3, [pc, #180]	; (800588c <xPortStartScheduler+0xec>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3b01      	subs	r3, #1
 80057dc:	4a2b      	ldr	r2, [pc, #172]	; (800588c <xPortStartScheduler+0xec>)
 80057de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f2:	2b80      	cmp	r3, #128	; 0x80
 80057f4:	d0ef      	beq.n	80057d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057f6:	4b25      	ldr	r3, [pc, #148]	; (800588c <xPortStartScheduler+0xec>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f1c3 0307 	rsb	r3, r3, #7
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d00c      	beq.n	800581c <xPortStartScheduler+0x7c>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	b672      	cpsid	i
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	b662      	cpsie	i
 8005816:	60bb      	str	r3, [r7, #8]
}
 8005818:	bf00      	nop
 800581a:	e7fe      	b.n	800581a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800581c:	4b1b      	ldr	r3, [pc, #108]	; (800588c <xPortStartScheduler+0xec>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	4a1a      	ldr	r2, [pc, #104]	; (800588c <xPortStartScheduler+0xec>)
 8005824:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005826:	4b19      	ldr	r3, [pc, #100]	; (800588c <xPortStartScheduler+0xec>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800582e:	4a17      	ldr	r2, [pc, #92]	; (800588c <xPortStartScheduler+0xec>)
 8005830:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	b2da      	uxtb	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800583a:	4b15      	ldr	r3, [pc, #84]	; (8005890 <xPortStartScheduler+0xf0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a14      	ldr	r2, [pc, #80]	; (8005890 <xPortStartScheduler+0xf0>)
 8005840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005844:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005846:	4b12      	ldr	r3, [pc, #72]	; (8005890 <xPortStartScheduler+0xf0>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a11      	ldr	r2, [pc, #68]	; (8005890 <xPortStartScheduler+0xf0>)
 800584c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005850:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005852:	f000 f8dd 	bl	8005a10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005856:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <xPortStartScheduler+0xf4>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800585c:	f000 f8fc 	bl	8005a58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005860:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <xPortStartScheduler+0xf8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a0c      	ldr	r2, [pc, #48]	; (8005898 <xPortStartScheduler+0xf8>)
 8005866:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800586a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800586c:	f7ff ff84 	bl	8005778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005870:	f7ff fd04 	bl	800527c <vTaskSwitchContext>
	prvTaskExitError();
 8005874:	f7ff ff36 	bl	80056e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	e000e400 	.word	0xe000e400
 8005888:	20000d00 	.word	0x20000d00
 800588c:	20000d04 	.word	0x20000d04
 8005890:	e000ed20 	.word	0xe000ed20
 8005894:	2000000c 	.word	0x2000000c
 8005898:	e000ef34 	.word	0xe000ef34

0800589c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	b672      	cpsid	i
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	b662      	cpsie	i
 80058b6:	607b      	str	r3, [r7, #4]
}
 80058b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058ba:	4b10      	ldr	r3, [pc, #64]	; (80058fc <vPortEnterCritical+0x60>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3301      	adds	r3, #1
 80058c0:	4a0e      	ldr	r2, [pc, #56]	; (80058fc <vPortEnterCritical+0x60>)
 80058c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058c4:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <vPortEnterCritical+0x60>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d111      	bne.n	80058f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058cc:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <vPortEnterCritical+0x64>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00c      	beq.n	80058f0 <vPortEnterCritical+0x54>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	b672      	cpsid	i
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	b662      	cpsie	i
 80058ea:	603b      	str	r3, [r7, #0]
}
 80058ec:	bf00      	nop
 80058ee:	e7fe      	b.n	80058ee <vPortEnterCritical+0x52>
	}
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	2000000c 	.word	0x2000000c
 8005900:	e000ed04 	.word	0xe000ed04

08005904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800590a:	4b13      	ldr	r3, [pc, #76]	; (8005958 <vPortExitCritical+0x54>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10c      	bne.n	800592c <vPortExitCritical+0x28>
	__asm volatile
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	b672      	cpsid	i
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	b662      	cpsie	i
 8005926:	607b      	str	r3, [r7, #4]
}
 8005928:	bf00      	nop
 800592a:	e7fe      	b.n	800592a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800592c:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <vPortExitCritical+0x54>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3b01      	subs	r3, #1
 8005932:	4a09      	ldr	r2, [pc, #36]	; (8005958 <vPortExitCritical+0x54>)
 8005934:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005936:	4b08      	ldr	r3, [pc, #32]	; (8005958 <vPortExitCritical+0x54>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d105      	bne.n	800594a <vPortExitCritical+0x46>
 800593e:	2300      	movs	r3, #0
 8005940:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005948:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	2000000c 	.word	0x2000000c
 800595c:	00000000 	.word	0x00000000

08005960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005960:	f3ef 8009 	mrs	r0, PSP
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <pxCurrentTCBConst>)
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	f01e 0f10 	tst.w	lr, #16
 8005970:	bf08      	it	eq
 8005972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597a:	6010      	str	r0, [r2, #0]
 800597c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005984:	b672      	cpsid	i
 8005986:	f380 8811 	msr	BASEPRI, r0
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	b662      	cpsie	i
 8005994:	f7ff fc72 	bl	800527c <vTaskSwitchContext>
 8005998:	f04f 0000 	mov.w	r0, #0
 800599c:	f380 8811 	msr	BASEPRI, r0
 80059a0:	bc09      	pop	{r0, r3}
 80059a2:	6819      	ldr	r1, [r3, #0]
 80059a4:	6808      	ldr	r0, [r1, #0]
 80059a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059aa:	f01e 0f10 	tst.w	lr, #16
 80059ae:	bf08      	it	eq
 80059b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059b4:	f380 8809 	msr	PSP, r0
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop

080059c0 <pxCurrentTCBConst>:
 80059c0:	20000bd4 	.word	0x20000bd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop

080059c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	b672      	cpsid	i
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	b662      	cpsie	i
 80059e2:	607b      	str	r3, [r7, #4]
}
 80059e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059e6:	f7ff fb8f 	bl	8005108 <xTaskIncrementTick>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <SysTick_Handler+0x44>)
 80059f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	2300      	movs	r3, #0
 80059fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	f383 8811 	msr	BASEPRI, r3
}
 8005a02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a04:	bf00      	nop
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	e000ed04 	.word	0xe000ed04

08005a10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a14:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <vPortSetupTimerInterrupt+0x34>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a1a:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <vPortSetupTimerInterrupt+0x38>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a20:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <vPortSetupTimerInterrupt+0x3c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a0a      	ldr	r2, [pc, #40]	; (8005a50 <vPortSetupTimerInterrupt+0x40>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	099b      	lsrs	r3, r3, #6
 8005a2c:	4a09      	ldr	r2, [pc, #36]	; (8005a54 <vPortSetupTimerInterrupt+0x44>)
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a32:	4b04      	ldr	r3, [pc, #16]	; (8005a44 <vPortSetupTimerInterrupt+0x34>)
 8005a34:	2207      	movs	r2, #7
 8005a36:	601a      	str	r2, [r3, #0]
}
 8005a38:	bf00      	nop
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	e000e010 	.word	0xe000e010
 8005a48:	e000e018 	.word	0xe000e018
 8005a4c:	20000000 	.word	0x20000000
 8005a50:	10624dd3 	.word	0x10624dd3
 8005a54:	e000e014 	.word	0xe000e014

08005a58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a58:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a68 <vPortEnableVFP+0x10>
 8005a5c:	6801      	ldr	r1, [r0, #0]
 8005a5e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a62:	6001      	str	r1, [r0, #0]
 8005a64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a66:	bf00      	nop
 8005a68:	e000ed88 	.word	0xe000ed88

08005a6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08a      	sub	sp, #40	; 0x28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a74:	2300      	movs	r3, #0
 8005a76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a78:	f7ff fa9a 	bl	8004fb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a7c:	4b5b      	ldr	r3, [pc, #364]	; (8005bec <pvPortMalloc+0x180>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a84:	f000 f91a 	bl	8005cbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a88:	4b59      	ldr	r3, [pc, #356]	; (8005bf0 <pvPortMalloc+0x184>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f040 8092 	bne.w	8005bba <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01f      	beq.n	8005adc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d016      	beq.n	8005adc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f023 0307 	bic.w	r3, r3, #7
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00c      	beq.n	8005adc <pvPortMalloc+0x70>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	b672      	cpsid	i
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	b662      	cpsie	i
 8005ad6:	617b      	str	r3, [r7, #20]
}
 8005ad8:	bf00      	nop
 8005ada:	e7fe      	b.n	8005ada <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d06b      	beq.n	8005bba <pvPortMalloc+0x14e>
 8005ae2:	4b44      	ldr	r3, [pc, #272]	; (8005bf4 <pvPortMalloc+0x188>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d866      	bhi.n	8005bba <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005aec:	4b42      	ldr	r3, [pc, #264]	; (8005bf8 <pvPortMalloc+0x18c>)
 8005aee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005af0:	4b41      	ldr	r3, [pc, #260]	; (8005bf8 <pvPortMalloc+0x18c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005af6:	e004      	b.n	8005b02 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d903      	bls.n	8005b14 <pvPortMalloc+0xa8>
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1f1      	bne.n	8005af8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b14:	4b35      	ldr	r3, [pc, #212]	; (8005bec <pvPortMalloc+0x180>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d04d      	beq.n	8005bba <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2208      	movs	r2, #8
 8005b24:	4413      	add	r3, r2
 8005b26:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	1ad2      	subs	r2, r2, r3
 8005b38:	2308      	movs	r3, #8
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d921      	bls.n	8005b84 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4413      	add	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00c      	beq.n	8005b6c <pvPortMalloc+0x100>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	b672      	cpsid	i
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	b662      	cpsie	i
 8005b66:	613b      	str	r3, [r7, #16]
}
 8005b68:	bf00      	nop
 8005b6a:	e7fe      	b.n	8005b6a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	1ad2      	subs	r2, r2, r3
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b7e:	69b8      	ldr	r0, [r7, #24]
 8005b80:	f000 f8fe 	bl	8005d80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b84:	4b1b      	ldr	r3, [pc, #108]	; (8005bf4 <pvPortMalloc+0x188>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	4a19      	ldr	r2, [pc, #100]	; (8005bf4 <pvPortMalloc+0x188>)
 8005b90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b92:	4b18      	ldr	r3, [pc, #96]	; (8005bf4 <pvPortMalloc+0x188>)
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4b19      	ldr	r3, [pc, #100]	; (8005bfc <pvPortMalloc+0x190>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d203      	bcs.n	8005ba6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b9e:	4b15      	ldr	r3, [pc, #84]	; (8005bf4 <pvPortMalloc+0x188>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a16      	ldr	r2, [pc, #88]	; (8005bfc <pvPortMalloc+0x190>)
 8005ba4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <pvPortMalloc+0x184>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bba:	f7ff fa07 	bl	8004fcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00c      	beq.n	8005be2 <pvPortMalloc+0x176>
	__asm volatile
 8005bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bcc:	b672      	cpsid	i
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	b662      	cpsie	i
 8005bdc:	60fb      	str	r3, [r7, #12]
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <pvPortMalloc+0x174>
	return pvReturn;
 8005be2:	69fb      	ldr	r3, [r7, #28]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3728      	adds	r7, #40	; 0x28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20004910 	.word	0x20004910
 8005bf0:	2000491c 	.word	0x2000491c
 8005bf4:	20004914 	.word	0x20004914
 8005bf8:	20004908 	.word	0x20004908
 8005bfc:	20004918 	.word	0x20004918

08005c00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d04c      	beq.n	8005cac <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c12:	2308      	movs	r3, #8
 8005c14:	425b      	negs	r3, r3
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4413      	add	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	4b23      	ldr	r3, [pc, #140]	; (8005cb4 <vPortFree+0xb4>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10c      	bne.n	8005c48 <vPortFree+0x48>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	b672      	cpsid	i
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	b662      	cpsie	i
 8005c42:	60fb      	str	r3, [r7, #12]
}
 8005c44:	bf00      	nop
 8005c46:	e7fe      	b.n	8005c46 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00c      	beq.n	8005c6a <vPortFree+0x6a>
	__asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c54:	b672      	cpsid	i
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	b662      	cpsie	i
 8005c64:	60bb      	str	r3, [r7, #8]
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <vPortFree+0xb4>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4013      	ands	r3, r2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d019      	beq.n	8005cac <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d115      	bne.n	8005cac <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <vPortFree+0xb4>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	401a      	ands	r2, r3
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c90:	f7ff f98e 	bl	8004fb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <vPortFree+0xb8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	4a06      	ldr	r2, [pc, #24]	; (8005cb8 <vPortFree+0xb8>)
 8005ca0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ca2:	6938      	ldr	r0, [r7, #16]
 8005ca4:	f000 f86c 	bl	8005d80 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ca8:	f7ff f990 	bl	8004fcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cac:	bf00      	nop
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	2000491c 	.word	0x2000491c
 8005cb8:	20004914 	.word	0x20004914

08005cbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cc2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005cc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cc8:	4b27      	ldr	r3, [pc, #156]	; (8005d68 <prvHeapInit+0xac>)
 8005cca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00c      	beq.n	8005cf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3307      	adds	r3, #7
 8005cda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0307 	bic.w	r3, r3, #7
 8005ce2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	4a1f      	ldr	r2, [pc, #124]	; (8005d68 <prvHeapInit+0xac>)
 8005cec:	4413      	add	r3, r2
 8005cee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cf4:	4a1d      	ldr	r2, [pc, #116]	; (8005d6c <prvHeapInit+0xb0>)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cfa:	4b1c      	ldr	r3, [pc, #112]	; (8005d6c <prvHeapInit+0xb0>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	4413      	add	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d08:	2208      	movs	r2, #8
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	1a9b      	subs	r3, r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0307 	bic.w	r3, r3, #7
 8005d16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4a15      	ldr	r2, [pc, #84]	; (8005d70 <prvHeapInit+0xb4>)
 8005d1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d1e:	4b14      	ldr	r3, [pc, #80]	; (8005d70 <prvHeapInit+0xb4>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2200      	movs	r2, #0
 8005d24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d26:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <prvHeapInit+0xb4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	1ad2      	subs	r2, r2, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d3c:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <prvHeapInit+0xb4>)
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	4a0a      	ldr	r2, [pc, #40]	; (8005d74 <prvHeapInit+0xb8>)
 8005d4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	4a09      	ldr	r2, [pc, #36]	; (8005d78 <prvHeapInit+0xbc>)
 8005d52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <prvHeapInit+0xc0>)
 8005d56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d5a:	601a      	str	r2, [r3, #0]
}
 8005d5c:	bf00      	nop
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	20000d08 	.word	0x20000d08
 8005d6c:	20004908 	.word	0x20004908
 8005d70:	20004910 	.word	0x20004910
 8005d74:	20004918 	.word	0x20004918
 8005d78:	20004914 	.word	0x20004914
 8005d7c:	2000491c 	.word	0x2000491c

08005d80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d88:	4b28      	ldr	r3, [pc, #160]	; (8005e2c <prvInsertBlockIntoFreeList+0xac>)
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e002      	b.n	8005d94 <prvInsertBlockIntoFreeList+0x14>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d8f7      	bhi.n	8005d8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	4413      	add	r3, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d108      	bne.n	8005dc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	441a      	add	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	441a      	add	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d118      	bne.n	8005e08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4b15      	ldr	r3, [pc, #84]	; (8005e30 <prvInsertBlockIntoFreeList+0xb0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d00d      	beq.n	8005dfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	441a      	add	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	e008      	b.n	8005e10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <prvInsertBlockIntoFreeList+0xb0>)
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	e003      	b.n	8005e10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d002      	beq.n	8005e1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20004908 	.word	0x20004908
 8005e30:	20004910 	.word	0x20004910

08005e34 <memset>:
 8005e34:	4402      	add	r2, r0
 8005e36:	4603      	mov	r3, r0
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d100      	bne.n	8005e3e <memset+0xa>
 8005e3c:	4770      	bx	lr
 8005e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e42:	e7f9      	b.n	8005e38 <memset+0x4>

08005e44 <__libc_init_array>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	4d0d      	ldr	r5, [pc, #52]	; (8005e7c <__libc_init_array+0x38>)
 8005e48:	4c0d      	ldr	r4, [pc, #52]	; (8005e80 <__libc_init_array+0x3c>)
 8005e4a:	1b64      	subs	r4, r4, r5
 8005e4c:	10a4      	asrs	r4, r4, #2
 8005e4e:	2600      	movs	r6, #0
 8005e50:	42a6      	cmp	r6, r4
 8005e52:	d109      	bne.n	8005e68 <__libc_init_array+0x24>
 8005e54:	4d0b      	ldr	r5, [pc, #44]	; (8005e84 <__libc_init_array+0x40>)
 8005e56:	4c0c      	ldr	r4, [pc, #48]	; (8005e88 <__libc_init_array+0x44>)
 8005e58:	f000 f818 	bl	8005e8c <_init>
 8005e5c:	1b64      	subs	r4, r4, r5
 8005e5e:	10a4      	asrs	r4, r4, #2
 8005e60:	2600      	movs	r6, #0
 8005e62:	42a6      	cmp	r6, r4
 8005e64:	d105      	bne.n	8005e72 <__libc_init_array+0x2e>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6c:	4798      	blx	r3
 8005e6e:	3601      	adds	r6, #1
 8005e70:	e7ee      	b.n	8005e50 <__libc_init_array+0xc>
 8005e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e76:	4798      	blx	r3
 8005e78:	3601      	adds	r6, #1
 8005e7a:	e7f2      	b.n	8005e62 <__libc_init_array+0x1e>
 8005e7c:	08006084 	.word	0x08006084
 8005e80:	08006084 	.word	0x08006084
 8005e84:	08006084 	.word	0x08006084
 8005e88:	08006088 	.word	0x08006088

08005e8c <_init>:
 8005e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8e:	bf00      	nop
 8005e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e92:	bc08      	pop	{r3}
 8005e94:	469e      	mov	lr, r3
 8005e96:	4770      	bx	lr

08005e98 <_fini>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	bf00      	nop
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr
