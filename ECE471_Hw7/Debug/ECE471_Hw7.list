
ECE471_Hw7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005018  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054f8  080054f8  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  080054f8  080054f8  000154f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005500  08005500  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005500  08005500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005504  08005504  00015504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08005508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000104  0800560c  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200001a4  080056ac  000201a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000007f0  20000244  0800574c  00020244  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a34  0800574c  00020a34  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001154b  00000000  00000000  000202b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002443  00000000  00000000  00031802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000d60  00000000  00000000  00033c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000a42  00000000  00000000  000349a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027932  00000000  00000000  000353ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00010436  00000000  00000000  0005cd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f12d7  00000000  00000000  0006d152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004160  00000000  00000000  0015e42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  0016258c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000244 	.word	0x20000244
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080051d0 	.word	0x080051d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000248 	.word	0x20000248
 800020c:	080051d0 	.word	0x080051d0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <decodeMorse>:
		".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-",
		"...-", ".--", "-..-", "-.--", "--..", "-----", ".----", "..---", "...--", "....-",
		".....", "-....", "--...", "---..", "----.", ".-.-.-", "--..--", "..--.."};

//function takes in morse code and decodes it back into ASCII
char* decodeMorse(char* morseMessage){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

	 int length = strlen(morseMessage);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff fe1d 	bl	8000224 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	613b      	str	r3, [r7, #16]
	    char* decodedMessage = malloc((length / 4) + 1); // Maximum size for Morse to ASCII
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	da00      	bge.n	80005f6 <decodeMorse+0x1a>
 80005f4:	3303      	adds	r3, #3
 80005f6:	109b      	asrs	r3, r3, #2
 80005f8:	3301      	adds	r3, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fdf0 	bl	80041e0 <malloc>
 8000600:	4603      	mov	r3, r0
 8000602:	60fb      	str	r3, [r7, #12]

	    if (decodedMessage == NULL) {
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <decodeMorse+0x32>
	        return NULL; // Memory allocation error
 800060a:	2300      	movs	r3, #0
 800060c:	e044      	b.n	8000698 <decodeMorse+0xbc>
	    }

	    char* token = strtok(morseMessage, " "); // Tokenize the input by space
 800060e:	4924      	ldr	r1, [pc, #144]	; (80006a0 <decodeMorse+0xc4>)
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f003 ff95 	bl	8004540 <strtok>
 8000616:	61f8      	str	r0, [r7, #28]
	    int index = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]

	    while (token != NULL) {
 800061c:	e033      	b.n	8000686 <decodeMorse+0xaa>
	        int i;
	        for (i = 0; i < 36; i++) {
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	e028      	b.n	8000676 <decodeMorse+0x9a>
	            if (strcmp(token, morseCode[i]) == 0) {
 8000624:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <decodeMorse+0xc8>)
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062c:	4619      	mov	r1, r3
 800062e:	69f8      	ldr	r0, [r7, #28]
 8000630:	f7ff fdee 	bl	8000210 <strcmp>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d11a      	bne.n	8000670 <decodeMorse+0x94>
	                if (i < 26) {
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	2b19      	cmp	r3, #25
 800063e:	dc08      	bgt.n	8000652 <decodeMorse+0x76>
	                    decodedMessage[index] = 'A' + i; // Convert to uppercase letter
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	b2da      	uxtb	r2, r3
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	68f9      	ldr	r1, [r7, #12]
 8000648:	440b      	add	r3, r1
 800064a:	3241      	adds	r2, #65	; 0x41
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	701a      	strb	r2, [r3, #0]
 8000650:	e00a      	b.n	8000668 <decodeMorse+0x8c>
	                } else if (i < 36) {
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	2b23      	cmp	r3, #35	; 0x23
 8000656:	dc07      	bgt.n	8000668 <decodeMorse+0x8c>
	                    decodedMessage[index] = '0' + (i - 26); // Convert to digit
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	b2da      	uxtb	r2, r3
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	68f9      	ldr	r1, [r7, #12]
 8000660:	440b      	add	r3, r1
 8000662:	3216      	adds	r2, #22
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	701a      	strb	r2, [r3, #0]
	                }
	                index++;
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	3301      	adds	r3, #1
 800066c:	61bb      	str	r3, [r7, #24]
	                break;
 800066e:	e005      	b.n	800067c <decodeMorse+0xa0>
	        for (i = 0; i < 36; i++) {
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	3301      	adds	r3, #1
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	2b23      	cmp	r3, #35	; 0x23
 800067a:	ddd3      	ble.n	8000624 <decodeMorse+0x48>
	            }
	        }
	        token = strtok(NULL, " "); // Get the next token
 800067c:	4908      	ldr	r1, [pc, #32]	; (80006a0 <decodeMorse+0xc4>)
 800067e:	2000      	movs	r0, #0
 8000680:	f003 ff5e 	bl	8004540 <strtok>
 8000684:	61f8      	str	r0, [r7, #28]
	    while (token != NULL) {
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1c8      	bne.n	800061e <decodeMorse+0x42>
	    }

	    decodedMessage[index] = '\0'; // Null-terminate the string
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
	    return decodedMessage;
 8000696:	68fb      	ldr	r3, [r7, #12]

}
 8000698:	4618      	mov	r0, r3
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	080052e8 	.word	0x080052e8
 80006a4:	20000000 	.word	0x20000000

080006a8 <codeMorse>:

//function takes in ASCII and codes it into morse code
char* codeMorse(char* asciiMessage) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
    int length = strlen(asciiMessage);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff fdb7 	bl	8000224 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	61fb      	str	r3, [r7, #28]
    char* morseMessage = malloc((length * 5) + 1); // Maximum size for ASCII to Morse
 80006ba:	69fa      	ldr	r2, [r7, #28]
 80006bc:	4613      	mov	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4413      	add	r3, r2
 80006c2:	3301      	adds	r3, #1
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 fd8b 	bl	80041e0 <malloc>
 80006ca:	4603      	mov	r3, r0
 80006cc:	61bb      	str	r3, [r7, #24]

    if (morseMessage == NULL) {
 80006ce:	69bb      	ldr	r3, [r7, #24]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d101      	bne.n	80006d8 <codeMorse+0x30>
        return NULL; // Memory allocation error
 80006d4:	2300      	movs	r3, #0
 80006d6:	e082      	b.n	80007de <codeMorse+0x136>
    }

    int index = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24

    for (int i = 0; i < length; i++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
 80006e0:	e073      	b.n	80007ca <codeMorse+0x122>
        char c = toupper(asciiMessage[i]);
 80006e2:	6a3b      	ldr	r3, [r7, #32]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	75fb      	strb	r3, [r7, #23]
 80006ec:	7dfb      	ldrb	r3, [r7, #23]
 80006ee:	3301      	adds	r3, #1
 80006f0:	4a3d      	ldr	r2, [pc, #244]	; (80007e8 <codeMorse+0x140>)
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	f003 0303 	and.w	r3, r3, #3
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d102      	bne.n	8000704 <codeMorse+0x5c>
 80006fe:	7dfb      	ldrb	r3, [r7, #23]
 8000700:	3b20      	subs	r3, #32
 8000702:	e000      	b.n	8000706 <codeMorse+0x5e>
 8000704:	7dfb      	ldrb	r3, [r7, #23]
 8000706:	75bb      	strb	r3, [r7, #22]

        if (isalpha(c)) {
 8000708:	7dbb      	ldrb	r3, [r7, #22]
 800070a:	3301      	adds	r3, #1
 800070c:	4a36      	ldr	r2, [pc, #216]	; (80007e8 <codeMorse+0x140>)
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f003 0303 	and.w	r3, r3, #3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d019      	beq.n	800074e <codeMorse+0xa6>
            int morseIndex = c - 'A';
 800071a:	7dbb      	ldrb	r3, [r7, #22]
 800071c:	3b41      	subs	r3, #65	; 0x41
 800071e:	60fb      	str	r3, [r7, #12]
            strcpy(&morseMessage[index], morseCode[morseIndex]);
 8000720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000722:	69ba      	ldr	r2, [r7, #24]
 8000724:	441a      	add	r2, r3
 8000726:	4931      	ldr	r1, [pc, #196]	; (80007ec <codeMorse+0x144>)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800072e:	4619      	mov	r1, r3
 8000730:	4610      	mov	r0, r2
 8000732:	f003 ffe3 	bl	80046fc <strcpy>
            index += strlen(morseCode[morseIndex]);
 8000736:	4a2d      	ldr	r2, [pc, #180]	; (80007ec <codeMorse+0x144>)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fd70 	bl	8000224 <strlen>
 8000744:	4602      	mov	r2, r0
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	4413      	add	r3, r2
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
 800074c:	e02d      	b.n	80007aa <codeMorse+0x102>
        } else if (isdigit(c)) {
 800074e:	7dbb      	ldrb	r3, [r7, #22]
 8000750:	3301      	adds	r3, #1
 8000752:	4a25      	ldr	r2, [pc, #148]	; (80007e8 <codeMorse+0x140>)
 8000754:	4413      	add	r3, r2
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	f003 0304 	and.w	r3, r3, #4
 800075c:	2b00      	cmp	r3, #0
 800075e:	d019      	beq.n	8000794 <codeMorse+0xec>
            int morseIndex = c - '0' + 26; // Offset for digits
 8000760:	7dbb      	ldrb	r3, [r7, #22]
 8000762:	3b16      	subs	r3, #22
 8000764:	613b      	str	r3, [r7, #16]
            strcpy(&morseMessage[index], morseCode[morseIndex]);
 8000766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000768:	69ba      	ldr	r2, [r7, #24]
 800076a:	441a      	add	r2, r3
 800076c:	491f      	ldr	r1, [pc, #124]	; (80007ec <codeMorse+0x144>)
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000774:	4619      	mov	r1, r3
 8000776:	4610      	mov	r0, r2
 8000778:	f003 ffc0 	bl	80046fc <strcpy>
            index += strlen(morseCode[morseIndex]);
 800077c:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <codeMorse+0x144>)
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fd4d 	bl	8000224 <strlen>
 800078a:	4602      	mov	r2, r0
 800078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078e:	4413      	add	r3, r2
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
 8000792:	e00a      	b.n	80007aa <codeMorse+0x102>
        } else if (c == ' ') {
 8000794:	7dbb      	ldrb	r3, [r7, #22]
 8000796:	2b20      	cmp	r3, #32
 8000798:	d107      	bne.n	80007aa <codeMorse+0x102>
            morseMessage[index++] = ' '; // Space character
 800079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	627a      	str	r2, [r7, #36]	; 0x24
 80007a0:	461a      	mov	r2, r3
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	4413      	add	r3, r2
 80007a6:	2220      	movs	r2, #32
 80007a8:	701a      	strb	r2, [r3, #0]
        }
        if (i < length - 1) {
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	6a3a      	ldr	r2, [r7, #32]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	da07      	bge.n	80007c4 <codeMorse+0x11c>
            morseMessage[index++] = ' '; // Inter-element gap
 80007b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	627a      	str	r2, [r7, #36]	; 0x24
 80007ba:	461a      	mov	r2, r3
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	4413      	add	r3, r2
 80007c0:	2220      	movs	r2, #32
 80007c2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length; i++) {
 80007c4:	6a3b      	ldr	r3, [r7, #32]
 80007c6:	3301      	adds	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
 80007ca:	6a3a      	ldr	r2, [r7, #32]
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	db87      	blt.n	80006e2 <codeMorse+0x3a>
        }
    }

    morseMessage[index] = '\0'; // Null-terminate the string
 80007d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d4:	69ba      	ldr	r2, [r7, #24]
 80007d6:	4413      	add	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
    return morseMessage;
 80007dc:	69bb      	ldr	r3, [r7, #24]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	08005314 	.word	0x08005314
 80007ec:	20000000 	.word	0x20000000

080007f0 <morseCodeBlink>:
void UART3_Print(const char* str) {
    HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}

//function blinks an led in morse code
void morseCodeBlink(char* morseCode){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

	 for (int i = 0; morseCode[i] != '\0'; i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e02e      	b.n	800085c <morseCodeBlink+0x6c>
	        char symbol = morseCode[i];
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	72fb      	strb	r3, [r7, #11]

	        if (symbol == '.') {
 8000808:	7afb      	ldrb	r3, [r7, #11]
 800080a:	2b2e      	cmp	r3, #46	; 0x2e
 800080c:	d110      	bne.n	8000830 <morseCodeBlink+0x40>
	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // Turn the LED on (replace with your LED control function)
 800080e:	2201      	movs	r2, #1
 8000810:	2101      	movs	r1, #1
 8000812:	4818      	ldr	r0, [pc, #96]	; (8000874 <morseCodeBlink+0x84>)
 8000814:	f001 fb58 	bl	8001ec8 <HAL_GPIO_WritePin>
	            HAL_Delay(100);  // LED on time (adjust as needed)
 8000818:	2064      	movs	r0, #100	; 0x64
 800081a:	f000 fd61 	bl	80012e0 <HAL_Delay>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Turn the LED off
 800081e:	2200      	movs	r2, #0
 8000820:	2101      	movs	r1, #1
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <morseCodeBlink+0x84>)
 8000824:	f001 fb50 	bl	8001ec8 <HAL_GPIO_WritePin>
	            HAL_Delay(100);  // Gap between dots (adjust as needed)
 8000828:	2064      	movs	r0, #100	; 0x64
 800082a:	f000 fd59 	bl	80012e0 <HAL_Delay>
 800082e:	e012      	b.n	8000856 <morseCodeBlink+0x66>
	        } else if (symbol == '-') {
 8000830:	7afb      	ldrb	r3, [r7, #11]
 8000832:	2b2d      	cmp	r3, #45	; 0x2d
 8000834:	d108      	bne.n	8000848 <morseCodeBlink+0x58>
	        	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000836:	2101      	movs	r1, #1
 8000838:	480e      	ldr	r0, [pc, #56]	; (8000874 <morseCodeBlink+0x84>)
 800083a:	f001 fb5e 	bl	8001efa <HAL_GPIO_TogglePin>
	        	HAL_Delay(300);
 800083e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000842:	f000 fd4d 	bl	80012e0 <HAL_Delay>
 8000846:	e006      	b.n	8000856 <morseCodeBlink+0x66>
	        } else if (symbol == ' ') {
 8000848:	7afb      	ldrb	r3, [r7, #11]
 800084a:	2b20      	cmp	r3, #32
 800084c:	d103      	bne.n	8000856 <morseCodeBlink+0x66>
	            // Gap between words
	            HAL_Delay(600);  // Adjust as needed for word gapHAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800084e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000852:	f000 fd45 	bl	80012e0 <HAL_Delay>
	 for (int i = 0; morseCode[i] != '\0'; i++) {
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3301      	adds	r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1ca      	bne.n	80007fe <morseCodeBlink+0xe>
	        }
	    }

}
 8000868:	bf00      	nop
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40020400 	.word	0x40020400

08000878 <main>:




int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char* asciiMessage = "SOS";
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <main+0x64>)
 8000880:	60fb      	str	r3, [r7, #12]
	char* morseEncodedMessage = codeMorse(asciiMessage);
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f7ff ff10 	bl	80006a8 <codeMorse>
 8000888:	60b8      	str	r0, [r7, #8]

//	printf("Encoded: ");
//	printf(morseEncodedMessage);
//	printf("\n");

	char* morseMessage = "... --- ...";
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <main+0x68>)
 800088c:	607b      	str	r3, [r7, #4]
	char* decodedMessage = decodeMorse(morseMessage);
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff fea4 	bl	80005dc <decodeMorse>
 8000894:	6038      	str	r0, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000896:	f000 fcc6 	bl	8001226 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089a:	f000 f827 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089e:	f000 f939 	bl	8000b14 <MX_GPIO_Init>
  MX_ETH_Init();
 80008a2:	f000 f88b 	bl	80009bc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008a6:	f000 f8d7 	bl	8000a58 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008aa:	f000 f905 	bl	8000ab8 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    morseCodeBlink(morseEncodedMessage);
 80008ae:	68b8      	ldr	r0, [r7, #8]
 80008b0:	f7ff ff9e 	bl	80007f0 <morseCodeBlink>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 80008b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b8:	480a      	ldr	r0, [pc, #40]	; (80008e4 <main+0x6c>)
 80008ba:	f001 faed 	bl	8001e98 <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d105      	bne.n	80008d0 <main+0x58>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //green
 80008c4:	2201      	movs	r2, #1
 80008c6:	2101      	movs	r1, #1
 80008c8:	4807      	ldr	r0, [pc, #28]	; (80008e8 <main+0x70>)
 80008ca:	f001 fafd 	bl	8001ec8 <HAL_GPIO_WritePin>
 80008ce:	e7ee      	b.n	80008ae <main+0x36>
		  //UART3_Print(morseEncodedMessage);


	  }
	  else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //green
 80008d0:	2200      	movs	r2, #0
 80008d2:	2101      	movs	r1, #1
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <main+0x70>)
 80008d6:	f001 faf7 	bl	8001ec8 <HAL_GPIO_WritePin>
	    morseCodeBlink(morseEncodedMessage);
 80008da:	e7e8      	b.n	80008ae <main+0x36>
 80008dc:	080052ec 	.word	0x080052ec
 80008e0:	080052f0 	.word	0x080052f0
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40020400 	.word	0x40020400

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	; 0x50
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0320 	add.w	r3, r7, #32
 80008f6:	2230      	movs	r2, #48	; 0x30
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 fe17 	bl	800452e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000910:	f001 fc56 	bl	80021c0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <SystemClock_Config+0xc8>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	4a26      	ldr	r2, [pc, #152]	; (80009b4 <SystemClock_Config+0xc8>)
 800091a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091e:	6413      	str	r3, [r2, #64]	; 0x40
 8000920:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <SystemClock_Config+0xc8>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <SystemClock_Config+0xcc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000934:	4a20      	ldr	r2, [pc, #128]	; (80009b8 <SystemClock_Config+0xcc>)
 8000936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093a:	6013      	str	r3, [r2, #0]
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <SystemClock_Config+0xcc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800094c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000952:	2302      	movs	r3, #2
 8000954:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000956:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800095a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800095c:	2304      	movs	r3, #4
 800095e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000960:	2348      	movs	r3, #72	; 0x48
 8000962:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000964:	2302      	movs	r3, #2
 8000966:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000968:	2303      	movs	r3, #3
 800096a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096c:	f107 0320 	add.w	r3, r7, #32
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fc35 	bl	80021e0 <HAL_RCC_OscConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800097c:	f000 f96c 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000980:	230f      	movs	r3, #15
 8000982:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000984:	2302      	movs	r3, #2
 8000986:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000990:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	2102      	movs	r1, #2
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fec3 	bl	8002728 <HAL_RCC_ClockConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009a8:	f000 f956 	bl	8000c58 <Error_Handler>
  }
}
 80009ac:	bf00      	nop
 80009ae:	3750      	adds	r7, #80	; 0x50
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40007000 	.word	0x40007000

080009bc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_ETH_Init+0x84>)
 80009c2:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <MX_ETH_Init+0x88>)
 80009c4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009c6:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <MX_ETH_Init+0x8c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_ETH_Init+0x8c>)
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_ETH_Init+0x8c>)
 80009d4:	22e1      	movs	r2, #225	; 0xe1
 80009d6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_ETH_Init+0x8c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_ETH_Init+0x8c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_ETH_Init+0x8c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_ETH_Init+0x84>)
 80009ec:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <MX_ETH_Init+0x8c>)
 80009ee:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_ETH_Init+0x84>)
 80009f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009f6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_ETH_Init+0x84>)
 80009fa:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <MX_ETH_Init+0x90>)
 80009fc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_ETH_Init+0x84>)
 8000a00:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <MX_ETH_Init+0x94>)
 8000a02:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_ETH_Init+0x84>)
 8000a06:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a0a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <MX_ETH_Init+0x84>)
 8000a0e:	f000 fd71 	bl	80014f4 <HAL_ETH_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a18:	f000 f91e 	bl	8000c58 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a1c:	2238      	movs	r2, #56	; 0x38
 8000a1e:	2100      	movs	r1, #0
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_ETH_Init+0x98>)
 8000a22:	f003 fd84 	bl	800452e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_ETH_Init+0x98>)
 8000a28:	2221      	movs	r2, #33	; 0x21
 8000a2a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_ETH_Init+0x98>)
 8000a2e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a32:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <MX_ETH_Init+0x98>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000298 	.word	0x20000298
 8000a44:	40028000 	.word	0x40028000
 8000a48:	200008d8 	.word	0x200008d8
 8000a4c:	200001a4 	.word	0x200001a4
 8000a50:	20000104 	.word	0x20000104
 8000a54:	20000260 	.word	0x20000260

08000a58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_USART3_UART_Init+0x58>)
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <MX_USART3_UART_Init+0x5c>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_USART3_UART_Init+0x58>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_USART3_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_USART3_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_USART3_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USART3_UART_Init+0x58>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_USART3_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USART3_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_USART3_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USART3_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_USART3_UART_Init+0x58>)
 8000a9c:	f002 fc5a 	bl	8003354 <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aa6:	f000 f8d7 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000348 	.word	0x20000348
 8000ab4:	40004800 	.word	0x40004800

08000ab8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ac2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac6:	2206      	movs	r2, #6
 8000ac8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000acc:	2202      	movs	r2, #2
 8000ace:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad8:	2202      	movs	r2, #2
 8000ada:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afc:	f001 fa17 	bl	8001f2e <HAL_PCD_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b06:	f000 f8a7 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200003d0 	.word	0x200003d0

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b47      	ldr	r3, [pc, #284]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a46      	ldr	r2, [pc, #280]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b44      	ldr	r3, [pc, #272]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	61bb      	str	r3, [r7, #24]
 8000b40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	4b41      	ldr	r3, [pc, #260]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a40      	ldr	r2, [pc, #256]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b3e      	ldr	r3, [pc, #248]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b3b      	ldr	r3, [pc, #236]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a3a      	ldr	r2, [pc, #232]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b38      	ldr	r3, [pc, #224]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a34      	ldr	r2, [pc, #208]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a2e      	ldr	r2, [pc, #184]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba2:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <MX_GPIO_Init+0x134>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bc0:	4822      	ldr	r0, [pc, #136]	; (8000c4c <MX_GPIO_Init+0x138>)
 8000bc2:	f001 f981 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2140      	movs	r1, #64	; 0x40
 8000bca:	4821      	ldr	r0, [pc, #132]	; (8000c50 <MX_GPIO_Init+0x13c>)
 8000bcc:	f001 f97c 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	481b      	ldr	r0, [pc, #108]	; (8000c54 <MX_GPIO_Init+0x140>)
 8000be8:	f000 ffaa 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bec:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4811      	ldr	r0, [pc, #68]	; (8000c4c <MX_GPIO_Init+0x138>)
 8000c06:	f000 ff9b 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480b      	ldr	r0, [pc, #44]	; (8000c50 <MX_GPIO_Init+0x13c>)
 8000c22:	f000 ff8d 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_GPIO_Init+0x13c>)
 8000c3a:	f000 ff81 	bl	8001b40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	bf00      	nop
 8000c40:	3730      	adds	r7, #48	; 0x30
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40021800 	.word	0x40021800
 8000c54:	40020800 	.word	0x40020800

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
	...

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800

08000cac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	; 0x38
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a4e      	ldr	r2, [pc, #312]	; (8000e04 <HAL_ETH_MspInit+0x158>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	f040 8096 	bne.w	8000dfc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000cd0:	4b4d      	ldr	r3, [pc, #308]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a4c      	ldr	r2, [pc, #304]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000cd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
 8000cdc:	4b4a      	ldr	r3, [pc, #296]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ce4:	623b      	str	r3, [r7, #32]
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
 8000ce8:	4b47      	ldr	r3, [pc, #284]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	4a46      	ldr	r2, [pc, #280]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000cee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf4:	4b44      	ldr	r3, [pc, #272]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cfc:	61fb      	str	r3, [r7, #28]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4a40      	ldr	r2, [pc, #256]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000d06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0c:	4b3e      	ldr	r3, [pc, #248]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d14:	61bb      	str	r3, [r7, #24]
 8000d16:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	4a3a      	ldr	r2, [pc, #232]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6313      	str	r3, [r2, #48]	; 0x30
 8000d24:	4b38      	ldr	r3, [pc, #224]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	4a34      	ldr	r2, [pc, #208]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d48:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	4a2e      	ldr	r2, [pc, #184]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000d4e:	f043 0302 	orr.w	r3, r3, #2
 8000d52:	6313      	str	r3, [r2, #48]	; 0x30
 8000d54:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d60:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	4a28      	ldr	r2, [pc, #160]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6c:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <HAL_ETH_MspInit+0x15c>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d78:	2332      	movs	r3, #50	; 0x32
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d88:	230b      	movs	r3, #11
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	481e      	ldr	r0, [pc, #120]	; (8000e0c <HAL_ETH_MspInit+0x160>)
 8000d94:	f000 fed4 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d98:	2386      	movs	r3, #134	; 0x86
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da8:	230b      	movs	r3, #11
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	4817      	ldr	r0, [pc, #92]	; (8000e10 <HAL_ETH_MspInit+0x164>)
 8000db4:	f000 fec4 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dca:	230b      	movs	r3, #11
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480f      	ldr	r0, [pc, #60]	; (8000e14 <HAL_ETH_MspInit+0x168>)
 8000dd6:	f000 feb3 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dda:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dec:	230b      	movs	r3, #11
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	4619      	mov	r1, r3
 8000df6:	4808      	ldr	r0, [pc, #32]	; (8000e18 <HAL_ETH_MspInit+0x16c>)
 8000df8:	f000 fea2 	bl	8001b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3738      	adds	r7, #56	; 0x38
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40028000 	.word	0x40028000
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020800 	.word	0x40020800
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40020400 	.word	0x40020400
 8000e18:	40021800 	.word	0x40021800

08000e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0aa      	sub	sp, #168	; 0xa8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	2284      	movs	r2, #132	; 0x84
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 fb76 	bl	800452e <memset>
  if(huart->Instance==USART3)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a22      	ldr	r2, [pc, #136]	; (8000ed0 <HAL_UART_MspInit+0xb4>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d13c      	bne.n	8000ec6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e50:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 fe8a 	bl	8002b74 <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e66:	f7ff fef7 	bl	8000c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <HAL_UART_MspInit+0xb8>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <HAL_UART_MspInit+0xb8>)
 8000e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_UART_MspInit+0xb8>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_UART_MspInit+0xb8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <HAL_UART_MspInit+0xb8>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_UART_MspInit+0xb8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <HAL_UART_MspInit+0xbc>)
 8000ec2:	f000 fe3d 	bl	8001b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ec6:	bf00      	nop
 8000ec8:	37a8      	adds	r7, #168	; 0xa8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40004800 	.word	0x40004800
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020c00 	.word	0x40020c00

08000edc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0ac      	sub	sp, #176	; 0xb0
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef4:	f107 0318 	add.w	r3, r7, #24
 8000ef8:	2284      	movs	r2, #132	; 0x84
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f003 fb16 	bl	800452e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f0a:	d159      	bne.n	8000fc0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f10:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f18:	f107 0318 	add.w	r3, r7, #24
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fe29 	bl	8002b74 <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f28:	f7ff fe96 	bl	8000c58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <HAL_PCD_MspInit+0xec>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	4a25      	ldr	r2, [pc, #148]	; (8000fc8 <HAL_PCD_MspInit+0xec>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6313      	str	r3, [r2, #48]	; 0x30
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <HAL_PCD_MspInit+0xec>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f44:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f5e:	230a      	movs	r3, #10
 8000f60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4818      	ldr	r0, [pc, #96]	; (8000fcc <HAL_PCD_MspInit+0xf0>)
 8000f6c:	f000 fde8 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4810      	ldr	r0, [pc, #64]	; (8000fcc <HAL_PCD_MspInit+0xf0>)
 8000f8c:	f000 fdd8 	bl	8001b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <HAL_PCD_MspInit+0xec>)
 8000f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f94:	4a0c      	ldr	r2, [pc, #48]	; (8000fc8 <HAL_PCD_MspInit+0xec>)
 8000f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f9a:	6353      	str	r3, [r2, #52]	; 0x34
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_PCD_MspInit+0xec>)
 8000f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <HAL_PCD_MspInit+0xec>)
 8000faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_PCD_MspInit+0xec>)
 8000fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb2:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <HAL_PCD_MspInit+0xec>)
 8000fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	37b0      	adds	r7, #176	; 0xb0
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <UsageFault_Handler+0x4>

08000fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f940 	bl	80012a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return 1;
 8001028:	2301      	movs	r3, #1
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_kill>:

int _kill(int pid, int sig)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800103e:	f003 fb31 	bl	80046a4 <__errno>
 8001042:	4603      	mov	r3, r0
 8001044:	2216      	movs	r2, #22
 8001046:	601a      	str	r2, [r3, #0]
  return -1;
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_exit>:

void _exit (int status)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffe7 	bl	8001034 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001066:	e7fe      	b.n	8001066 <_exit+0x12>

08001068 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	e00a      	b.n	8001090 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800107a:	f3af 8000 	nop.w
 800107e:	4601      	mov	r1, r0
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	60ba      	str	r2, [r7, #8]
 8001086:	b2ca      	uxtb	r2, r1
 8001088:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	429a      	cmp	r2, r3
 8001096:	dbf0      	blt.n	800107a <_read+0x12>
  }

  return len;
 8001098:	687b      	ldr	r3, [r7, #4]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	e009      	b.n	80010c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	60ba      	str	r2, [r7, #8]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbf1      	blt.n	80010b4 <_write+0x12>
  }
  return len;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_close>:

int _close(int file)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001102:	605a      	str	r2, [r3, #4]
  return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <_isatty>:

int _isatty(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <_sbrk+0x5c>)
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <_sbrk+0x60>)
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <_sbrk+0x64>)
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <_sbrk+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	429a      	cmp	r2, r3
 8001172:	d207      	bcs.n	8001184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001174:	f003 fa96 	bl	80046a4 <__errno>
 8001178:	4603      	mov	r3, r0
 800117a:	220c      	movs	r2, #12
 800117c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	e009      	b.n	8001198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <_sbrk+0x64>)
 8001194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20050000 	.word	0x20050000
 80011a4:	00000400 	.word	0x00000400
 80011a8:	200008e0 	.word	0x200008e0
 80011ac:	20000a38 	.word	0x20000a38

080011b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <SystemInit+0x20>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <SystemInit+0x20>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011da:	490e      	ldr	r1, [pc, #56]	; (8001214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f0:	4c0b      	ldr	r4, [pc, #44]	; (8001220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011fe:	f7ff ffd7 	bl	80011b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f003 fa55 	bl	80046b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff fb37 	bl	8000878 <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800120c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001218:	08005508 	.word	0x08005508
  ldr r2, =_sbss
 800121c:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8001220:	20000a34 	.word	0x20000a34

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>

08001226 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122a:	2003      	movs	r0, #3
 800122c:	f000 f92e 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001230:	2000      	movs	r0, #0
 8001232:	f000 f805 	bl	8001240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001236:	f7ff fd15 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_InitTick+0x54>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x58>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001256:	fbb3 f3f1 	udiv	r3, r3, r1
 800125a:	fbb2 f3f3 	udiv	r3, r2, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f93b 	bl	80014da <HAL_SYSTICK_Config>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e00e      	b.n	800128c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b0f      	cmp	r3, #15
 8001272:	d80a      	bhi.n	800128a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001274:	2200      	movs	r2, #0
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f000 f911 	bl	80014a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001280:	4a06      	ldr	r2, [pc, #24]	; (800129c <HAL_InitTick+0x5c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e000      	b.n	800128c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	2000009c 	.word	0x2000009c
 8001298:	200000a4 	.word	0x200000a4
 800129c:	200000a0 	.word	0x200000a0

080012a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x20>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x24>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_IncTick+0x24>)
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	200000a4 	.word	0x200000a4
 80012c4:	200008e4 	.word	0x200008e4

080012c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <HAL_GetTick+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	200008e4 	.word	0x200008e4

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff ffee 	bl	80012c8 <HAL_GetTick>
 80012ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d005      	beq.n	8001306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_Delay+0x44>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001306:	bf00      	nop
 8001308:	f7ff ffde 	bl	80012c8 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	429a      	cmp	r2, r3
 8001316:	d8f7      	bhi.n	8001308 <HAL_Delay+0x28>
  {
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200000a4 	.word	0x200000a4

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <__NVIC_SetPriorityGrouping+0x40>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	4313      	orrs	r3, r2
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x40>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	05fa0000 	.word	0x05fa0000

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
         );
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f7ff ff8e 	bl	800138c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff47 	bl	8001328 <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff5c 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff8e 	bl	80013e0 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5d 	bl	800138c <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffb0 	bl	8001448 <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e06a      	b.n	80015dc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800150c:	2b00      	cmp	r3, #0
 800150e:	d106      	bne.n	800151e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2223      	movs	r2, #35	; 0x23
 8001514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff fbc7 	bl	8000cac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <HAL_ETH_Init+0xf0>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a30      	ldr	r2, [pc, #192]	; (80015e4 <HAL_ETH_Init+0xf0>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <HAL_ETH_Init+0xf0>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001536:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <HAL_ETH_Init+0xf4>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4a2b      	ldr	r2, [pc, #172]	; (80015e8 <HAL_ETH_Init+0xf4>)
 800153c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001540:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001542:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <HAL_ETH_Init+0xf4>)
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	4927      	ldr	r1, [pc, #156]	; (80015e8 <HAL_ETH_Init+0xf4>)
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <HAL_ETH_Init+0xf4>)
 8001552:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800156a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800156c:	f7ff feac 	bl	80012c8 <HAL_GetTick>
 8001570:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001572:	e011      	b.n	8001598 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001574:	f7ff fea8 	bl	80012c8 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001582:	d909      	bls.n	8001598 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2204      	movs	r2, #4
 8001588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	22e0      	movs	r2, #224	; 0xe0
 8001590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e021      	b.n	80015dc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1e4      	bne.n	8001574 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f958 	bl	8001860 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f9ff 	bl	80019b4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 fa55 	bl	8001a66 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	461a      	mov	r2, r3
 80015c2:	2100      	movs	r1, #0
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f9bd 	bl	8001944 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2210      	movs	r2, #16
 80015d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40013800 	.word	0x40013800

080015ec <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	4b51      	ldr	r3, [pc, #324]	; (8001748 <ETH_SetMACConfig+0x15c>)
 8001602:	4013      	ands	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	7c1b      	ldrb	r3, [r3, #16]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <ETH_SetMACConfig+0x28>
 800160e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001612:	e000      	b.n	8001616 <ETH_SetMACConfig+0x2a>
 8001614:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	7c5b      	ldrb	r3, [r3, #17]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <ETH_SetMACConfig+0x38>
 800161e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001622:	e000      	b.n	8001626 <ETH_SetMACConfig+0x3a>
 8001624:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001626:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800162c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	7fdb      	ldrb	r3, [r3, #31]
 8001632:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001634:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800163a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	7f92      	ldrb	r2, [r2, #30]
 8001640:	2a00      	cmp	r2, #0
 8001642:	d102      	bne.n	800164a <ETH_SetMACConfig+0x5e>
 8001644:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001648:	e000      	b.n	800164c <ETH_SetMACConfig+0x60>
 800164a:	2200      	movs	r2, #0
                        macconf->Speed |
 800164c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	7f1b      	ldrb	r3, [r3, #28]
 8001652:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001654:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800165a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	791b      	ldrb	r3, [r3, #4]
 8001660:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001662:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	f892 2020 	ldrb.w	r2, [r2, #32]
 800166a:	2a00      	cmp	r2, #0
 800166c:	d102      	bne.n	8001674 <ETH_SetMACConfig+0x88>
 800166e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001672:	e000      	b.n	8001676 <ETH_SetMACConfig+0x8a>
 8001674:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001676:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	7bdb      	ldrb	r3, [r3, #15]
 800167c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800167e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001684:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800168c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800168e:	4313      	orrs	r3, r2
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7ff fe1a 	bl	80012e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	f64f 7341 	movw	r3, #65345	; 0xff41
 80016c2:	4013      	ands	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80016d2:	2a00      	cmp	r2, #0
 80016d4:	d101      	bne.n	80016da <ETH_SetMACConfig+0xee>
 80016d6:	2280      	movs	r2, #128	; 0x80
 80016d8:	e000      	b.n	80016dc <ETH_SetMACConfig+0xf0>
 80016da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016dc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80016ea:	2a01      	cmp	r2, #1
 80016ec:	d101      	bne.n	80016f2 <ETH_SetMACConfig+0x106>
 80016ee:	2208      	movs	r2, #8
 80016f0:	e000      	b.n	80016f4 <ETH_SetMACConfig+0x108>
 80016f2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80016f4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80016fc:	2a01      	cmp	r2, #1
 80016fe:	d101      	bne.n	8001704 <ETH_SetMACConfig+0x118>
 8001700:	2204      	movs	r2, #4
 8001702:	e000      	b.n	8001706 <ETH_SetMACConfig+0x11a>
 8001704:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001706:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800170e:	2a01      	cmp	r2, #1
 8001710:	d101      	bne.n	8001716 <ETH_SetMACConfig+0x12a>
 8001712:	2202      	movs	r2, #2
 8001714:	e000      	b.n	8001718 <ETH_SetMACConfig+0x12c>
 8001716:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001718:	4313      	orrs	r3, r2
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001730:	2001      	movs	r0, #1
 8001732:	f7ff fdd5 	bl	80012e0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	619a      	str	r2, [r3, #24]
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	ff20810f 	.word	0xff20810f

0800174c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4b3d      	ldr	r3, [pc, #244]	; (800185c <ETH_SetDMAConfig+0x110>)
 8001766:	4013      	ands	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	7b1b      	ldrb	r3, [r3, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <ETH_SetDMAConfig+0x2c>
 8001772:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001776:	e000      	b.n	800177a <ETH_SetDMAConfig+0x2e>
 8001778:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	7b5b      	ldrb	r3, [r3, #13]
 800177e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001780:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	7f52      	ldrb	r2, [r2, #29]
 8001786:	2a00      	cmp	r2, #0
 8001788:	d102      	bne.n	8001790 <ETH_SetDMAConfig+0x44>
 800178a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800178e:	e000      	b.n	8001792 <ETH_SetDMAConfig+0x46>
 8001790:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001792:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	7b9b      	ldrb	r3, [r3, #14]
 8001798:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800179a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80017a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	7f1b      	ldrb	r3, [r3, #28]
 80017a6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80017a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	7f9b      	ldrb	r3, [r3, #30]
 80017ae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80017b0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80017b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017be:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017c0:	4313      	orrs	r3, r2
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d0:	461a      	mov	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017e2:	2001      	movs	r0, #1
 80017e4:	f7ff fd7c 	bl	80012e0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f0:	461a      	mov	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	791b      	ldrb	r3, [r3, #4]
 80017fa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001800:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001806:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800180c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001814:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001816:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800181e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001824:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800182e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001832:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001840:	2001      	movs	r0, #1
 8001842:	f7ff fd4d 	bl	80012e0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800184e:	461a      	mov	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	f8de3f23 	.word	0xf8de3f23

08001860 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0a6      	sub	sp, #152	; 0x98
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001868:	2301      	movs	r3, #1
 800186a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800186e:	2301      	movs	r3, #1
 8001870:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001874:	2300      	movs	r3, #0
 8001876:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800187e:	2301      	movs	r3, #1
 8001880:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800188a:	2301      	movs	r3, #1
 800188c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800189c:	2300      	movs	r3, #0
 800189e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80018c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018c6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80018c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fe86 	bl	80015ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80018e0:	2301      	movs	r3, #1
 80018e2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80018e4:	2301      	movs	r3, #1
 80018e6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80018e8:	2301      	movs	r3, #1
 80018ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80018ee:	2301      	movs	r3, #1
 80018f0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001902:	2300      	movs	r3, #0
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001906:	2301      	movs	r3, #1
 8001908:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800190c:	2301      	movs	r3, #1
 800190e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001914:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001916:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800191a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800191c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001920:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001922:	2301      	movs	r3, #1
 8001924:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001928:	2300      	movs	r3, #0
 800192a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	4619      	mov	r1, r3
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ff08 	bl	800174c <ETH_SetDMAConfig>
}
 800193c:	bf00      	nop
 800193e:	3798      	adds	r7, #152	; 0x98
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3305      	adds	r3, #5
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	3204      	adds	r2, #4
 800195c:	7812      	ldrb	r2, [r2, #0]
 800195e:	4313      	orrs	r3, r2
 8001960:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <ETH_MACAddressConfig+0x68>)
 8001966:	4413      	add	r3, r2
 8001968:	461a      	mov	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3303      	adds	r3, #3
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	061a      	lsls	r2, r3, #24
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3302      	adds	r3, #2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	041b      	lsls	r3, r3, #16
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3301      	adds	r3, #1
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	4313      	orrs	r3, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	7812      	ldrb	r2, [r2, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <ETH_MACAddressConfig+0x6c>)
 8001996:	4413      	add	r3, r2
 8001998:	461a      	mov	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	6013      	str	r3, [r2, #0]
}
 800199e:	bf00      	nop
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40028040 	.word	0x40028040
 80019b0:	40028044 	.word	0x40028044

080019b4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e03e      	b.n	8001a40 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68d9      	ldr	r1, [r3, #12]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	440b      	add	r3, r1
 80019d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2200      	movs	r2, #0
 80019de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	3206      	adds	r2, #6
 80019f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d80c      	bhi.n	8001a24 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68d9      	ldr	r1, [r3, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	440b      	add	r3, r1
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	e004      	b.n	8001a2e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d9bd      	bls.n	80019c2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a58:	611a      	str	r2, [r3, #16]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	e046      	b.n	8001b02 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6919      	ldr	r1, [r3, #16]
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ab0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001ab8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ac6:	68b9      	ldr	r1, [r7, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	3212      	adds	r2, #18
 8001ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d80c      	bhi.n	8001af2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6919      	ldr	r1, [r3, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	461a      	mov	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	e004      	b.n	8001afc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	461a      	mov	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3301      	adds	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d9b5      	bls.n	8001a74 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b32:	60da      	str	r2, [r3, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e175      	b.n	8001e4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	f040 8164 	bne.w	8001e46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d005      	beq.n	8001b96 <HAL_GPIO_Init+0x56>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d130      	bne.n	8001bf8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 0201 	and.w	r2, r3, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d017      	beq.n	8001c34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d123      	bne.n	8001c88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	69b9      	ldr	r1, [r7, #24]
 8001c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80be 	beq.w	8001e46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	4b66      	ldr	r3, [pc, #408]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a65      	ldr	r2, [pc, #404]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ce2:	4a61      	ldr	r2, [pc, #388]	; (8001e68 <HAL_GPIO_Init+0x328>)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a58      	ldr	r2, [pc, #352]	; (8001e6c <HAL_GPIO_Init+0x32c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d037      	beq.n	8001d7e <HAL_GPIO_Init+0x23e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a57      	ldr	r2, [pc, #348]	; (8001e70 <HAL_GPIO_Init+0x330>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d031      	beq.n	8001d7a <HAL_GPIO_Init+0x23a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a56      	ldr	r2, [pc, #344]	; (8001e74 <HAL_GPIO_Init+0x334>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d02b      	beq.n	8001d76 <HAL_GPIO_Init+0x236>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a55      	ldr	r2, [pc, #340]	; (8001e78 <HAL_GPIO_Init+0x338>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d025      	beq.n	8001d72 <HAL_GPIO_Init+0x232>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a54      	ldr	r2, [pc, #336]	; (8001e7c <HAL_GPIO_Init+0x33c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d01f      	beq.n	8001d6e <HAL_GPIO_Init+0x22e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a53      	ldr	r2, [pc, #332]	; (8001e80 <HAL_GPIO_Init+0x340>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d019      	beq.n	8001d6a <HAL_GPIO_Init+0x22a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a52      	ldr	r2, [pc, #328]	; (8001e84 <HAL_GPIO_Init+0x344>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <HAL_GPIO_Init+0x226>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a51      	ldr	r2, [pc, #324]	; (8001e88 <HAL_GPIO_Init+0x348>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00d      	beq.n	8001d62 <HAL_GPIO_Init+0x222>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a50      	ldr	r2, [pc, #320]	; (8001e8c <HAL_GPIO_Init+0x34c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d007      	beq.n	8001d5e <HAL_GPIO_Init+0x21e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4f      	ldr	r2, [pc, #316]	; (8001e90 <HAL_GPIO_Init+0x350>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d101      	bne.n	8001d5a <HAL_GPIO_Init+0x21a>
 8001d56:	2309      	movs	r3, #9
 8001d58:	e012      	b.n	8001d80 <HAL_GPIO_Init+0x240>
 8001d5a:	230a      	movs	r3, #10
 8001d5c:	e010      	b.n	8001d80 <HAL_GPIO_Init+0x240>
 8001d5e:	2308      	movs	r3, #8
 8001d60:	e00e      	b.n	8001d80 <HAL_GPIO_Init+0x240>
 8001d62:	2307      	movs	r3, #7
 8001d64:	e00c      	b.n	8001d80 <HAL_GPIO_Init+0x240>
 8001d66:	2306      	movs	r3, #6
 8001d68:	e00a      	b.n	8001d80 <HAL_GPIO_Init+0x240>
 8001d6a:	2305      	movs	r3, #5
 8001d6c:	e008      	b.n	8001d80 <HAL_GPIO_Init+0x240>
 8001d6e:	2304      	movs	r3, #4
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x240>
 8001d72:	2303      	movs	r3, #3
 8001d74:	e004      	b.n	8001d80 <HAL_GPIO_Init+0x240>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_Init+0x240>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_GPIO_Init+0x240>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	f002 0203 	and.w	r2, r2, #3
 8001d86:	0092      	lsls	r2, r2, #2
 8001d88:	4093      	lsls	r3, r2
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d90:	4935      	ldr	r1, [pc, #212]	; (8001e68 <HAL_GPIO_Init+0x328>)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <HAL_GPIO_Init+0x354>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dc2:	4a34      	ldr	r2, [pc, #208]	; (8001e94 <HAL_GPIO_Init+0x354>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc8:	4b32      	ldr	r3, [pc, #200]	; (8001e94 <HAL_GPIO_Init+0x354>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dec:	4a29      	ldr	r2, [pc, #164]	; (8001e94 <HAL_GPIO_Init+0x354>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001df2:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <HAL_GPIO_Init+0x354>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e16:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_GPIO_Init+0x354>)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_GPIO_Init+0x354>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <HAL_GPIO_Init+0x354>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2b0f      	cmp	r3, #15
 8001e50:	f67f ae86 	bls.w	8001b60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40013800 	.word	0x40013800
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40020800 	.word	0x40020800
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40021400 	.word	0x40021400
 8001e84:	40021800 	.word	0x40021800
 8001e88:	40021c00 	.word	0x40021c00
 8001e8c:	40022000 	.word	0x40022000
 8001e90:	40022400 	.word	0x40022400
 8001e94:	40013c00 	.word	0x40013c00

08001e98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	887b      	ldrh	r3, [r7, #2]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
 8001eb4:	e001      	b.n	8001eba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed8:	787b      	ldrb	r3, [r7, #1]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ee4:	e003      	b.n	8001eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ee6:	887b      	ldrh	r3, [r7, #2]
 8001ee8:	041a      	lsls	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	619a      	str	r2, [r3, #24]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b085      	sub	sp, #20
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f0c:	887a      	ldrh	r2, [r7, #2]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4013      	ands	r3, r2
 8001f12:	041a      	lsls	r2, r3, #16
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	887b      	ldrh	r3, [r7, #2]
 8001f1a:	400b      	ands	r3, r1
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	619a      	str	r2, [r3, #24]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f30:	b08f      	sub	sp, #60	; 0x3c
 8001f32:	af0a      	add	r7, sp, #40	; 0x28
 8001f34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e116      	b.n	800216e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe ffbe 	bl	8000edc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2203      	movs	r2, #3
 8001f64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 fe92 	bl	8003ca8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	687e      	ldr	r6, [r7, #4]
 8001f8c:	466d      	mov	r5, sp
 8001f8e:	f106 0410 	add.w	r4, r6, #16
 8001f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fa2:	1d33      	adds	r3, r6, #4
 8001fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa6:	6838      	ldr	r0, [r7, #0]
 8001fa8:	f001 fe26 	bl	8003bf8 <USB_CoreInit>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0d7      	b.n	800216e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f001 fe80 	bl	8003cca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73fb      	strb	r3, [r7, #15]
 8001fce:	e04a      	b.n	8002066 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	333d      	adds	r3, #61	; 0x3d
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	333c      	adds	r3, #60	; 0x3c
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	b298      	uxth	r0, r3
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	3344      	adds	r3, #68	; 0x44
 800200c:	4602      	mov	r2, r0
 800200e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3340      	adds	r3, #64	; 0x40
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	3348      	adds	r3, #72	; 0x48
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	334c      	adds	r3, #76	; 0x4c
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	3354      	adds	r3, #84	; 0x54
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	3301      	adds	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	d3af      	bcc.n	8001fd0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	e044      	b.n	8002100 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	3301      	adds	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	429a      	cmp	r2, r3
 8002108:	d3b5      	bcc.n	8002076 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	687e      	ldr	r6, [r7, #4]
 8002112:	466d      	mov	r5, sp
 8002114:	f106 0410 	add.w	r4, r6, #16
 8002118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800211a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800211c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800211e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002120:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002124:	e885 0003 	stmia.w	r5, {r0, r1}
 8002128:	1d33      	adds	r3, r6, #4
 800212a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800212c:	6838      	ldr	r0, [r7, #0]
 800212e:	f001 fe19 	bl	8003d64 <USB_DevInit>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e014      	b.n	800216e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	2b01      	cmp	r3, #1
 800215a:	d102      	bne.n	8002162 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f80b 	bl	8002178 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f001 ffd7 	bl	800411a <USB_DevDisconnect>

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002178 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_PCDEx_ActivateLPM+0x44>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	10000003 	.word	0x10000003

080021c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ce:	6013      	str	r3, [r2, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40007000 	.word	0x40007000

080021e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e291      	b.n	800271a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8087 	beq.w	8002312 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002204:	4b96      	ldr	r3, [pc, #600]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b04      	cmp	r3, #4
 800220e:	d00c      	beq.n	800222a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002210:	4b93      	ldr	r3, [pc, #588]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b08      	cmp	r3, #8
 800221a:	d112      	bne.n	8002242 <HAL_RCC_OscConfig+0x62>
 800221c:	4b90      	ldr	r3, [pc, #576]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002228:	d10b      	bne.n	8002242 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222a:	4b8d      	ldr	r3, [pc, #564]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d06c      	beq.n	8002310 <HAL_RCC_OscConfig+0x130>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d168      	bne.n	8002310 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e26b      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x7a>
 800224c:	4b84      	ldr	r3, [pc, #528]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a83      	ldr	r2, [pc, #524]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	e02e      	b.n	80022b8 <HAL_RCC_OscConfig+0xd8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x9c>
 8002262:	4b7f      	ldr	r3, [pc, #508]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a7e      	ldr	r2, [pc, #504]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b7c      	ldr	r3, [pc, #496]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a7b      	ldr	r2, [pc, #492]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002274:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e01d      	b.n	80022b8 <HAL_RCC_OscConfig+0xd8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0xc0>
 8002286:	4b76      	ldr	r3, [pc, #472]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a75      	ldr	r2, [pc, #468]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 800228c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b73      	ldr	r3, [pc, #460]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a72      	ldr	r2, [pc, #456]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e00b      	b.n	80022b8 <HAL_RCC_OscConfig+0xd8>
 80022a0:	4b6f      	ldr	r3, [pc, #444]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a6e      	ldr	r2, [pc, #440]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b6c      	ldr	r3, [pc, #432]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a6b      	ldr	r2, [pc, #428]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 80022b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d013      	beq.n	80022e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7ff f802 	bl	80012c8 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c8:	f7fe fffe 	bl	80012c8 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e21f      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	4b61      	ldr	r3, [pc, #388]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0xe8>
 80022e6:	e014      	b.n	8002312 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe ffee 	bl	80012c8 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f0:	f7fe ffea 	bl	80012c8 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e20b      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	4b57      	ldr	r3, [pc, #348]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x110>
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d069      	beq.n	80023f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800231e:	4b50      	ldr	r3, [pc, #320]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00b      	beq.n	8002342 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232a:	4b4d      	ldr	r3, [pc, #308]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b08      	cmp	r3, #8
 8002334:	d11c      	bne.n	8002370 <HAL_RCC_OscConfig+0x190>
 8002336:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d116      	bne.n	8002370 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_RCC_OscConfig+0x17a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e1df      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	493d      	ldr	r1, [pc, #244]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	e040      	b.n	80023f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d023      	beq.n	80023c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002378:	4b39      	ldr	r3, [pc, #228]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a38      	ldr	r2, [pc, #224]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe ffa0 	bl	80012c8 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238c:	f7fe ff9c 	bl	80012c8 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1bd      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239e:	4b30      	ldr	r3, [pc, #192]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4929      	ldr	r1, [pc, #164]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
 80023be:	e018      	b.n	80023f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a26      	ldr	r2, [pc, #152]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 80023c6:	f023 0301 	bic.w	r3, r3, #1
 80023ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe ff7c 	bl	80012c8 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d4:	f7fe ff78 	bl	80012c8 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e199      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d038      	beq.n	8002470 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d019      	beq.n	800243a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002406:	4b16      	ldr	r3, [pc, #88]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240a:	4a15      	ldr	r2, [pc, #84]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002412:	f7fe ff59 	bl	80012c8 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241a:	f7fe ff55 	bl	80012c8 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e176      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 800242e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x23a>
 8002438:	e01a      	b.n	8002470 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 800243c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243e:	4a08      	ldr	r2, [pc, #32]	; (8002460 <HAL_RCC_OscConfig+0x280>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7fe ff3f 	bl	80012c8 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244e:	f7fe ff3b 	bl	80012c8 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d903      	bls.n	8002464 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e15c      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
 8002460:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002464:	4b91      	ldr	r3, [pc, #580]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 8002466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ee      	bne.n	800244e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a4 	beq.w	80025c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800247e:	4b8b      	ldr	r3, [pc, #556]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10d      	bne.n	80024a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800248a:	4b88      	ldr	r3, [pc, #544]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a87      	ldr	r2, [pc, #540]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 8002490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
 8002496:	4b85      	ldr	r3, [pc, #532]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a2:	2301      	movs	r3, #1
 80024a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a6:	4b82      	ldr	r3, [pc, #520]	; (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d118      	bne.n	80024e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024b2:	4b7f      	ldr	r3, [pc, #508]	; (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a7e      	ldr	r2, [pc, #504]	; (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024be:	f7fe ff03 	bl	80012c8 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c6:	f7fe feff 	bl	80012c8 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b64      	cmp	r3, #100	; 0x64
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e120      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d8:	4b75      	ldr	r3, [pc, #468]	; (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x31a>
 80024ec:	4b6f      	ldr	r3, [pc, #444]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f0:	4a6e      	ldr	r2, [pc, #440]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6713      	str	r3, [r2, #112]	; 0x70
 80024f8:	e02d      	b.n	8002556 <HAL_RCC_OscConfig+0x376>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x33c>
 8002502:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	4a69      	ldr	r2, [pc, #420]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	6713      	str	r3, [r2, #112]	; 0x70
 800250e:	4b67      	ldr	r3, [pc, #412]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a66      	ldr	r2, [pc, #408]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	6713      	str	r3, [r2, #112]	; 0x70
 800251a:	e01c      	b.n	8002556 <HAL_RCC_OscConfig+0x376>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d10c      	bne.n	800253e <HAL_RCC_OscConfig+0x35e>
 8002524:	4b61      	ldr	r3, [pc, #388]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	4a60      	ldr	r2, [pc, #384]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	6713      	str	r3, [r2, #112]	; 0x70
 8002530:	4b5e      	ldr	r3, [pc, #376]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	4a5d      	ldr	r2, [pc, #372]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6713      	str	r3, [r2, #112]	; 0x70
 800253c:	e00b      	b.n	8002556 <HAL_RCC_OscConfig+0x376>
 800253e:	4b5b      	ldr	r3, [pc, #364]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	4a5a      	ldr	r2, [pc, #360]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	6713      	str	r3, [r2, #112]	; 0x70
 800254a:	4b58      	ldr	r3, [pc, #352]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a57      	ldr	r2, [pc, #348]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d015      	beq.n	800258a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7fe feb3 	bl	80012c8 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe feaf 	bl	80012c8 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0ce      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257c:	4b4b      	ldr	r3, [pc, #300]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ee      	beq.n	8002566 <HAL_RCC_OscConfig+0x386>
 8002588:	e014      	b.n	80025b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7fe fe9d 	bl	80012c8 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe fe99 	bl	80012c8 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0b8      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a8:	4b40      	ldr	r3, [pc, #256]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ee      	bne.n	8002592 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d105      	bne.n	80025c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ba:	4b3c      	ldr	r3, [pc, #240]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a3b      	ldr	r2, [pc, #236]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80a4 	beq.w	8002718 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d0:	4b36      	ldr	r3, [pc, #216]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d06b      	beq.n	80026b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d149      	bne.n	8002678 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e4:	4b31      	ldr	r3, [pc, #196]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a30      	ldr	r2, [pc, #192]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 80025ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe fe6a 	bl	80012c8 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fe fe66 	bl	80012c8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e087      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260a:	4b28      	ldr	r3, [pc, #160]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69da      	ldr	r2, [r3, #28]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	019b      	lsls	r3, r3, #6
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	085b      	lsrs	r3, r3, #1
 800262e:	3b01      	subs	r3, #1
 8002630:	041b      	lsls	r3, r3, #16
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	4313      	orrs	r3, r2
 800263c:	4a1b      	ldr	r2, [pc, #108]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 800263e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002642:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a18      	ldr	r2, [pc, #96]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 800264a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe fe3a 	bl	80012c8 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7fe fe36 	bl	80012c8 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e057      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x478>
 8002676:	e04f      	b.n	8002718 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 800267e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fe20 	bl	80012c8 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe fe1c 	bl	80012c8 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e03d      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269e:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_RCC_OscConfig+0x4cc>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x4ac>
 80026aa:	e035      	b.n	8002718 <HAL_RCC_OscConfig+0x538>
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026b4:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <HAL_RCC_OscConfig+0x544>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d028      	beq.n	8002714 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d121      	bne.n	8002714 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d11a      	bne.n	8002714 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026e4:	4013      	ands	r3, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d111      	bne.n	8002714 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	3b01      	subs	r3, #1
 80026fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d107      	bne.n	8002714 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800

08002728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0d0      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002740:	4b6a      	ldr	r3, [pc, #424]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d910      	bls.n	8002770 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b67      	ldr	r3, [pc, #412]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 020f 	bic.w	r2, r3, #15
 8002756:	4965      	ldr	r1, [pc, #404]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b63      	ldr	r3, [pc, #396]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0b8      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002788:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a58      	ldr	r2, [pc, #352]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 800278e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002792:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a0:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	494d      	ldr	r1, [pc, #308]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d040      	beq.n	800284c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d115      	bne.n	800280a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e07f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ea:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e073      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e06b      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280a:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f023 0203 	bic.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4936      	ldr	r1, [pc, #216]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002818:	4313      	orrs	r3, r2
 800281a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800281c:	f7fe fd54 	bl	80012c8 <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	e00a      	b.n	800283a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7fe fd50 	bl	80012c8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e053      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 020c 	and.w	r2, r3, #12
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d1eb      	bne.n	8002824 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d210      	bcs.n	800287c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 020f 	bic.w	r2, r3, #15
 8002862:	4922      	ldr	r1, [pc, #136]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e032      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4916      	ldr	r1, [pc, #88]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	490e      	ldr	r1, [pc, #56]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ba:	f000 f821 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80028be:	4602      	mov	r2, r0
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	490a      	ldr	r1, [pc, #40]	; (80028f4 <HAL_RCC_ClockConfig+0x1cc>)
 80028cc:	5ccb      	ldrb	r3, [r1, r3]
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1d0>)
 80028d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1d4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fcb0 	bl	8001240 <HAL_InitTick>

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023c00 	.word	0x40023c00
 80028f0:	40023800 	.word	0x40023800
 80028f4:	080052fc 	.word	0x080052fc
 80028f8:	2000009c 	.word	0x2000009c
 80028fc:	200000a0 	.word	0x200000a0

08002900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002904:	b094      	sub	sp, #80	; 0x50
 8002906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	647b      	str	r3, [r7, #68]	; 0x44
 800290c:	2300      	movs	r3, #0
 800290e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002910:	2300      	movs	r3, #0
 8002912:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002918:	4b79      	ldr	r3, [pc, #484]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b08      	cmp	r3, #8
 8002922:	d00d      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x40>
 8002924:	2b08      	cmp	r3, #8
 8002926:	f200 80e1 	bhi.w	8002aec <HAL_RCC_GetSysClockFreq+0x1ec>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x34>
 800292e:	2b04      	cmp	r3, #4
 8002930:	d003      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x3a>
 8002932:	e0db      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002934:	4b73      	ldr	r3, [pc, #460]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002936:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002938:	e0db      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800293a:	4b73      	ldr	r3, [pc, #460]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x208>)
 800293c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800293e:	e0d8      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002940:	4b6f      	ldr	r3, [pc, #444]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002948:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800294a:	4b6d      	ldr	r3, [pc, #436]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d063      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002956:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	099b      	lsrs	r3, r3, #6
 800295c:	2200      	movs	r2, #0
 800295e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002960:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
 800296a:	2300      	movs	r3, #0
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
 800296e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002972:	4622      	mov	r2, r4
 8002974:	462b      	mov	r3, r5
 8002976:	f04f 0000 	mov.w	r0, #0
 800297a:	f04f 0100 	mov.w	r1, #0
 800297e:	0159      	lsls	r1, r3, #5
 8002980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002984:	0150      	lsls	r0, r2, #5
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4621      	mov	r1, r4
 800298c:	1a51      	subs	r1, r2, r1
 800298e:	6139      	str	r1, [r7, #16]
 8002990:	4629      	mov	r1, r5
 8002992:	eb63 0301 	sbc.w	r3, r3, r1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029a4:	4659      	mov	r1, fp
 80029a6:	018b      	lsls	r3, r1, #6
 80029a8:	4651      	mov	r1, sl
 80029aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ae:	4651      	mov	r1, sl
 80029b0:	018a      	lsls	r2, r1, #6
 80029b2:	4651      	mov	r1, sl
 80029b4:	ebb2 0801 	subs.w	r8, r2, r1
 80029b8:	4659      	mov	r1, fp
 80029ba:	eb63 0901 	sbc.w	r9, r3, r1
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029d2:	4690      	mov	r8, r2
 80029d4:	4699      	mov	r9, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	eb18 0303 	adds.w	r3, r8, r3
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	462b      	mov	r3, r5
 80029e0:	eb49 0303 	adc.w	r3, r9, r3
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029f2:	4629      	mov	r1, r5
 80029f4:	024b      	lsls	r3, r1, #9
 80029f6:	4621      	mov	r1, r4
 80029f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029fc:	4621      	mov	r1, r4
 80029fe:	024a      	lsls	r2, r1, #9
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a06:	2200      	movs	r2, #0
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a10:	f7fd fc66 	bl	80002e0 <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a1c:	e058      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1e:	4b38      	ldr	r3, [pc, #224]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	099b      	lsrs	r3, r3, #6
 8002a24:	2200      	movs	r2, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	4611      	mov	r1, r2
 8002a2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a2e:	623b      	str	r3, [r7, #32]
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
 8002a34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a38:	4642      	mov	r2, r8
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	f04f 0000 	mov.w	r0, #0
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	0159      	lsls	r1, r3, #5
 8002a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a4a:	0150      	lsls	r0, r2, #5
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4641      	mov	r1, r8
 8002a52:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a56:	4649      	mov	r1, r9
 8002a58:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a70:	ebb2 040a 	subs.w	r4, r2, sl
 8002a74:	eb63 050b 	sbc.w	r5, r3, fp
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	00eb      	lsls	r3, r5, #3
 8002a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a86:	00e2      	lsls	r2, r4, #3
 8002a88:	4614      	mov	r4, r2
 8002a8a:	461d      	mov	r5, r3
 8002a8c:	4643      	mov	r3, r8
 8002a8e:	18e3      	adds	r3, r4, r3
 8002a90:	603b      	str	r3, [r7, #0]
 8002a92:	464b      	mov	r3, r9
 8002a94:	eb45 0303 	adc.w	r3, r5, r3
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	028b      	lsls	r3, r1, #10
 8002aaa:	4621      	mov	r1, r4
 8002aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	028a      	lsls	r2, r1, #10
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aba:	2200      	movs	r2, #0
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	61fa      	str	r2, [r7, #28]
 8002ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ac4:	f7fd fc0c 	bl	80002e0 <__aeabi_uldivmod>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4613      	mov	r3, r2
 8002ace:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	0c1b      	lsrs	r3, r3, #16
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	3301      	adds	r3, #1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002ae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aea:	e002      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3750      	adds	r7, #80	; 0x50
 8002af8:	46bd      	mov	sp, r7
 8002afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	00f42400 	.word	0x00f42400
 8002b08:	007a1200 	.word	0x007a1200

08002b0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	2000009c 	.word	0x2000009c

08002b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b28:	f7ff fff0 	bl	8002b0c <HAL_RCC_GetHCLKFreq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0a9b      	lsrs	r3, r3, #10
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4903      	ldr	r1, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	0800530c 	.word	0x0800530c

08002b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b50:	f7ff ffdc 	bl	8002b0c <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	0b5b      	lsrs	r3, r3, #13
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4903      	ldr	r1, [pc, #12]	; (8002b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	0800530c 	.word	0x0800530c

08002b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d012      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b9c:	4b69      	ldr	r3, [pc, #420]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a68      	ldr	r2, [pc, #416]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ba6:	6093      	str	r3, [r2, #8]
 8002ba8:	4b66      	ldr	r3, [pc, #408]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb0:	4964      	ldr	r1, [pc, #400]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d017      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bce:	4b5d      	ldr	r3, [pc, #372]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bdc:	4959      	ldr	r1, [pc, #356]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d017      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c0a:	4b4e      	ldr	r3, [pc, #312]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	494a      	ldr	r1, [pc, #296]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c28:	d101      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 808b 	beq.w	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c58:	4b3a      	ldr	r3, [pc, #232]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	4a39      	ldr	r2, [pc, #228]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c62:	6413      	str	r3, [r2, #64]	; 0x40
 8002c64:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c70:	4b35      	ldr	r3, [pc, #212]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a34      	ldr	r2, [pc, #208]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7c:	f7fe fb24 	bl	80012c8 <HAL_GetTick>
 8002c80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7fe fb20 	bl	80012c8 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e357      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c96:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ca2:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002caa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d035      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d02e      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cc0:	4b20      	ldr	r3, [pc, #128]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cca:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	4a1d      	ldr	r2, [pc, #116]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	4a1a      	ldr	r2, [pc, #104]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ce2:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ce8:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d114      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fae8 	bl	80012c8 <HAL_GetTick>
 8002cf8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fae4 	bl	80012c8 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e319      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0ee      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d2a:	d111      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d38:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d3a:	400b      	ands	r3, r1
 8002d3c:	4901      	ldr	r1, [pc, #4]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
 8002d42:	e00b      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	0ffffcff 	.word	0x0ffffcff
 8002d50:	4baa      	ldr	r3, [pc, #680]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4aa9      	ldr	r2, [pc, #676]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d5a:	6093      	str	r3, [r2, #8]
 8002d5c:	4ba7      	ldr	r3, [pc, #668]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d68:	49a4      	ldr	r1, [pc, #656]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d010      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d7a:	4ba0      	ldr	r3, [pc, #640]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d80:	4a9e      	ldr	r2, [pc, #632]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d8a:	4b9c      	ldr	r3, [pc, #624]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	4999      	ldr	r1, [pc, #612]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002da8:	4b94      	ldr	r3, [pc, #592]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002db6:	4991      	ldr	r1, [pc, #580]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dca:	4b8c      	ldr	r3, [pc, #560]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dd8:	4988      	ldr	r1, [pc, #544]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dec:	4b83      	ldr	r3, [pc, #524]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dfa:	4980      	ldr	r1, [pc, #512]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e0e:	4b7b      	ldr	r3, [pc, #492]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	4977      	ldr	r1, [pc, #476]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e30:	4b72      	ldr	r3, [pc, #456]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	f023 0203 	bic.w	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	496f      	ldr	r1, [pc, #444]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e52:	4b6a      	ldr	r3, [pc, #424]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e58:	f023 020c 	bic.w	r2, r3, #12
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e60:	4966      	ldr	r1, [pc, #408]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e74:	4b61      	ldr	r3, [pc, #388]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e82:	495e      	ldr	r1, [pc, #376]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e96:	4b59      	ldr	r3, [pc, #356]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea4:	4955      	ldr	r1, [pc, #340]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eb8:	4b50      	ldr	r3, [pc, #320]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	494d      	ldr	r1, [pc, #308]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002eda:	4b48      	ldr	r3, [pc, #288]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	4944      	ldr	r1, [pc, #272]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002efc:	4b3f      	ldr	r3, [pc, #252]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0a:	493c      	ldr	r1, [pc, #240]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f1e:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2c:	4933      	ldr	r1, [pc, #204]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f40:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f4e:	492b      	ldr	r1, [pc, #172]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d011      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f70:	4922      	ldr	r1, [pc, #136]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f80:	d101      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f82:	2301      	movs	r3, #1
 8002f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f92:	2301      	movs	r3, #1
 8002f94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fa2:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb0:	4912      	ldr	r1, [pc, #72]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00b      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fc4:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd4:	4909      	ldr	r1, [pc, #36]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d006      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80d9 	beq.w	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ff0:	4b02      	ldr	r3, [pc, #8]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a01      	ldr	r2, [pc, #4]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ffa:	e001      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002ffc:	40023800 	.word	0x40023800
 8003000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003002:	f7fe f961 	bl	80012c8 <HAL_GetTick>
 8003006:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003008:	e008      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800300a:	f7fe f95d 	bl	80012c8 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b64      	cmp	r3, #100	; 0x64
 8003016:	d901      	bls.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e194      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800301c:	4b6c      	ldr	r3, [pc, #432]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f0      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d021      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003038:	2b00      	cmp	r3, #0
 800303a:	d11d      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800303c:	4b64      	ldr	r3, [pc, #400]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800303e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003042:	0c1b      	lsrs	r3, r3, #16
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800304a:	4b61      	ldr	r3, [pc, #388]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800304c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003050:	0e1b      	lsrs	r3, r3, #24
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	019a      	lsls	r2, r3, #6
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	431a      	orrs	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	061b      	lsls	r3, r3, #24
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	071b      	lsls	r3, r3, #28
 8003070:	4957      	ldr	r1, [pc, #348]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d004      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800308c:	d00a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003096:	2b00      	cmp	r3, #0
 8003098:	d02e      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a2:	d129      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030a4:	4b4a      	ldr	r3, [pc, #296]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030aa:	0c1b      	lsrs	r3, r3, #16
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030b2:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b8:	0f1b      	lsrs	r3, r3, #28
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	019a      	lsls	r2, r3, #6
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	431a      	orrs	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	071b      	lsls	r3, r3, #28
 80030d8:	493d      	ldr	r1, [pc, #244]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030e0:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030e6:	f023 021f 	bic.w	r2, r3, #31
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	3b01      	subs	r3, #1
 80030f0:	4937      	ldr	r1, [pc, #220]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01d      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003104:	4b32      	ldr	r3, [pc, #200]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800310a:	0e1b      	lsrs	r3, r3, #24
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003112:	4b2f      	ldr	r3, [pc, #188]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003118:	0f1b      	lsrs	r3, r3, #28
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	019a      	lsls	r2, r3, #6
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	431a      	orrs	r2, r3
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	061b      	lsls	r3, r3, #24
 8003132:	431a      	orrs	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	071b      	lsls	r3, r3, #28
 8003138:	4925      	ldr	r1, [pc, #148]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d011      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	019a      	lsls	r2, r3, #6
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	041b      	lsls	r3, r3, #16
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	061b      	lsls	r3, r3, #24
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	071b      	lsls	r3, r3, #28
 8003168:	4919      	ldr	r1, [pc, #100]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003170:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003176:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800317a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317c:	f7fe f8a4 	bl	80012c8 <HAL_GetTick>
 8003180:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003184:	f7fe f8a0 	bl	80012c8 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	; 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e0d7      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003196:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	f040 80cd 	bne.w	8003344 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b6:	f7fe f887 	bl	80012c8 <HAL_GetTick>
 80031ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031bc:	e00a      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031be:	f7fe f883 	bl	80012c8 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b64      	cmp	r3, #100	; 0x64
 80031ca:	d903      	bls.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e0ba      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80031d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031d4:	4b5e      	ldr	r3, [pc, #376]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e0:	d0ed      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d02e      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d12a      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800320a:	4b51      	ldr	r3, [pc, #324]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003218:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	0f1b      	lsrs	r3, r3, #28
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	019a      	lsls	r2, r3, #6
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	041b      	lsls	r3, r3, #16
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	061b      	lsls	r3, r3, #24
 8003238:	431a      	orrs	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	071b      	lsls	r3, r3, #28
 800323e:	4944      	ldr	r1, [pc, #272]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003246:	4b42      	ldr	r3, [pc, #264]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800324c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	3b01      	subs	r3, #1
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	493d      	ldr	r1, [pc, #244]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d022      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003274:	d11d      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003276:	4b36      	ldr	r3, [pc, #216]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	0e1b      	lsrs	r3, r3, #24
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003284:	4b32      	ldr	r3, [pc, #200]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	0f1b      	lsrs	r3, r3, #28
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	019a      	lsls	r2, r3, #6
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	431a      	orrs	r2, r3
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	061b      	lsls	r3, r3, #24
 80032a4:	431a      	orrs	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	071b      	lsls	r3, r3, #28
 80032aa:	4929      	ldr	r1, [pc, #164]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d028      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032be:	4b24      	ldr	r3, [pc, #144]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c4:	0e1b      	lsrs	r3, r3, #24
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	0c1b      	lsrs	r3, r3, #16
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	019a      	lsls	r2, r3, #6
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	041b      	lsls	r3, r3, #16
 80032e4:	431a      	orrs	r2, r3
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	061b      	lsls	r3, r3, #24
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	071b      	lsls	r3, r3, #28
 80032f2:	4917      	ldr	r1, [pc, #92]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032fa:	4b15      	ldr	r3, [pc, #84]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	4911      	ldr	r1, [pc, #68]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a0e      	ldr	r2, [pc, #56]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800331c:	f7fd ffd4 	bl	80012c8 <HAL_GetTick>
 8003320:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003324:	f7fd ffd0 	bl	80012c8 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e007      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800333e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003342:	d1ef      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800

08003354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e040      	b.n	80033e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd fd50 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2224      	movs	r2, #36	; 0x24
 8003380:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f82c 	bl	80033f0 <UART_SetConfig>
 8003398:	4603      	mov	r3, r0
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e022      	b.n	80033e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fa84 	bl	80038b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fb0b 	bl	80039fc <UART_CheckIdleState>
 80033e6:	4603      	mov	r3, r0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4ba6      	ldr	r3, [pc, #664]	; (80036b4 <UART_SetConfig+0x2c4>)
 800341c:	4013      	ands	r3, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	6979      	ldr	r1, [r7, #20]
 8003424:	430b      	orrs	r3, r1
 8003426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	430a      	orrs	r2, r1
 8003460:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a94      	ldr	r2, [pc, #592]	; (80036b8 <UART_SetConfig+0x2c8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d120      	bne.n	80034ae <UART_SetConfig+0xbe>
 800346c:	4b93      	ldr	r3, [pc, #588]	; (80036bc <UART_SetConfig+0x2cc>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b03      	cmp	r3, #3
 8003478:	d816      	bhi.n	80034a8 <UART_SetConfig+0xb8>
 800347a:	a201      	add	r2, pc, #4	; (adr r2, 8003480 <UART_SetConfig+0x90>)
 800347c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003480:	08003491 	.word	0x08003491
 8003484:	0800349d 	.word	0x0800349d
 8003488:	08003497 	.word	0x08003497
 800348c:	080034a3 	.word	0x080034a3
 8003490:	2301      	movs	r3, #1
 8003492:	77fb      	strb	r3, [r7, #31]
 8003494:	e150      	b.n	8003738 <UART_SetConfig+0x348>
 8003496:	2302      	movs	r3, #2
 8003498:	77fb      	strb	r3, [r7, #31]
 800349a:	e14d      	b.n	8003738 <UART_SetConfig+0x348>
 800349c:	2304      	movs	r3, #4
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e14a      	b.n	8003738 <UART_SetConfig+0x348>
 80034a2:	2308      	movs	r3, #8
 80034a4:	77fb      	strb	r3, [r7, #31]
 80034a6:	e147      	b.n	8003738 <UART_SetConfig+0x348>
 80034a8:	2310      	movs	r3, #16
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e144      	b.n	8003738 <UART_SetConfig+0x348>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a83      	ldr	r2, [pc, #524]	; (80036c0 <UART_SetConfig+0x2d0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d132      	bne.n	800351e <UART_SetConfig+0x12e>
 80034b8:	4b80      	ldr	r3, [pc, #512]	; (80036bc <UART_SetConfig+0x2cc>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b0c      	cmp	r3, #12
 80034c4:	d828      	bhi.n	8003518 <UART_SetConfig+0x128>
 80034c6:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <UART_SetConfig+0xdc>)
 80034c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034cc:	08003501 	.word	0x08003501
 80034d0:	08003519 	.word	0x08003519
 80034d4:	08003519 	.word	0x08003519
 80034d8:	08003519 	.word	0x08003519
 80034dc:	0800350d 	.word	0x0800350d
 80034e0:	08003519 	.word	0x08003519
 80034e4:	08003519 	.word	0x08003519
 80034e8:	08003519 	.word	0x08003519
 80034ec:	08003507 	.word	0x08003507
 80034f0:	08003519 	.word	0x08003519
 80034f4:	08003519 	.word	0x08003519
 80034f8:	08003519 	.word	0x08003519
 80034fc:	08003513 	.word	0x08003513
 8003500:	2300      	movs	r3, #0
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	e118      	b.n	8003738 <UART_SetConfig+0x348>
 8003506:	2302      	movs	r3, #2
 8003508:	77fb      	strb	r3, [r7, #31]
 800350a:	e115      	b.n	8003738 <UART_SetConfig+0x348>
 800350c:	2304      	movs	r3, #4
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e112      	b.n	8003738 <UART_SetConfig+0x348>
 8003512:	2308      	movs	r3, #8
 8003514:	77fb      	strb	r3, [r7, #31]
 8003516:	e10f      	b.n	8003738 <UART_SetConfig+0x348>
 8003518:	2310      	movs	r3, #16
 800351a:	77fb      	strb	r3, [r7, #31]
 800351c:	e10c      	b.n	8003738 <UART_SetConfig+0x348>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a68      	ldr	r2, [pc, #416]	; (80036c4 <UART_SetConfig+0x2d4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d120      	bne.n	800356a <UART_SetConfig+0x17a>
 8003528:	4b64      	ldr	r3, [pc, #400]	; (80036bc <UART_SetConfig+0x2cc>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003532:	2b30      	cmp	r3, #48	; 0x30
 8003534:	d013      	beq.n	800355e <UART_SetConfig+0x16e>
 8003536:	2b30      	cmp	r3, #48	; 0x30
 8003538:	d814      	bhi.n	8003564 <UART_SetConfig+0x174>
 800353a:	2b20      	cmp	r3, #32
 800353c:	d009      	beq.n	8003552 <UART_SetConfig+0x162>
 800353e:	2b20      	cmp	r3, #32
 8003540:	d810      	bhi.n	8003564 <UART_SetConfig+0x174>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <UART_SetConfig+0x15c>
 8003546:	2b10      	cmp	r3, #16
 8003548:	d006      	beq.n	8003558 <UART_SetConfig+0x168>
 800354a:	e00b      	b.n	8003564 <UART_SetConfig+0x174>
 800354c:	2300      	movs	r3, #0
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e0f2      	b.n	8003738 <UART_SetConfig+0x348>
 8003552:	2302      	movs	r3, #2
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e0ef      	b.n	8003738 <UART_SetConfig+0x348>
 8003558:	2304      	movs	r3, #4
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e0ec      	b.n	8003738 <UART_SetConfig+0x348>
 800355e:	2308      	movs	r3, #8
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e0e9      	b.n	8003738 <UART_SetConfig+0x348>
 8003564:	2310      	movs	r3, #16
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e0e6      	b.n	8003738 <UART_SetConfig+0x348>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a56      	ldr	r2, [pc, #344]	; (80036c8 <UART_SetConfig+0x2d8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d120      	bne.n	80035b6 <UART_SetConfig+0x1c6>
 8003574:	4b51      	ldr	r3, [pc, #324]	; (80036bc <UART_SetConfig+0x2cc>)
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800357e:	2bc0      	cmp	r3, #192	; 0xc0
 8003580:	d013      	beq.n	80035aa <UART_SetConfig+0x1ba>
 8003582:	2bc0      	cmp	r3, #192	; 0xc0
 8003584:	d814      	bhi.n	80035b0 <UART_SetConfig+0x1c0>
 8003586:	2b80      	cmp	r3, #128	; 0x80
 8003588:	d009      	beq.n	800359e <UART_SetConfig+0x1ae>
 800358a:	2b80      	cmp	r3, #128	; 0x80
 800358c:	d810      	bhi.n	80035b0 <UART_SetConfig+0x1c0>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <UART_SetConfig+0x1a8>
 8003592:	2b40      	cmp	r3, #64	; 0x40
 8003594:	d006      	beq.n	80035a4 <UART_SetConfig+0x1b4>
 8003596:	e00b      	b.n	80035b0 <UART_SetConfig+0x1c0>
 8003598:	2300      	movs	r3, #0
 800359a:	77fb      	strb	r3, [r7, #31]
 800359c:	e0cc      	b.n	8003738 <UART_SetConfig+0x348>
 800359e:	2302      	movs	r3, #2
 80035a0:	77fb      	strb	r3, [r7, #31]
 80035a2:	e0c9      	b.n	8003738 <UART_SetConfig+0x348>
 80035a4:	2304      	movs	r3, #4
 80035a6:	77fb      	strb	r3, [r7, #31]
 80035a8:	e0c6      	b.n	8003738 <UART_SetConfig+0x348>
 80035aa:	2308      	movs	r3, #8
 80035ac:	77fb      	strb	r3, [r7, #31]
 80035ae:	e0c3      	b.n	8003738 <UART_SetConfig+0x348>
 80035b0:	2310      	movs	r3, #16
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	e0c0      	b.n	8003738 <UART_SetConfig+0x348>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a44      	ldr	r2, [pc, #272]	; (80036cc <UART_SetConfig+0x2dc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d125      	bne.n	800360c <UART_SetConfig+0x21c>
 80035c0:	4b3e      	ldr	r3, [pc, #248]	; (80036bc <UART_SetConfig+0x2cc>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ce:	d017      	beq.n	8003600 <UART_SetConfig+0x210>
 80035d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035d4:	d817      	bhi.n	8003606 <UART_SetConfig+0x216>
 80035d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035da:	d00b      	beq.n	80035f4 <UART_SetConfig+0x204>
 80035dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e0:	d811      	bhi.n	8003606 <UART_SetConfig+0x216>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <UART_SetConfig+0x1fe>
 80035e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ea:	d006      	beq.n	80035fa <UART_SetConfig+0x20a>
 80035ec:	e00b      	b.n	8003606 <UART_SetConfig+0x216>
 80035ee:	2300      	movs	r3, #0
 80035f0:	77fb      	strb	r3, [r7, #31]
 80035f2:	e0a1      	b.n	8003738 <UART_SetConfig+0x348>
 80035f4:	2302      	movs	r3, #2
 80035f6:	77fb      	strb	r3, [r7, #31]
 80035f8:	e09e      	b.n	8003738 <UART_SetConfig+0x348>
 80035fa:	2304      	movs	r3, #4
 80035fc:	77fb      	strb	r3, [r7, #31]
 80035fe:	e09b      	b.n	8003738 <UART_SetConfig+0x348>
 8003600:	2308      	movs	r3, #8
 8003602:	77fb      	strb	r3, [r7, #31]
 8003604:	e098      	b.n	8003738 <UART_SetConfig+0x348>
 8003606:	2310      	movs	r3, #16
 8003608:	77fb      	strb	r3, [r7, #31]
 800360a:	e095      	b.n	8003738 <UART_SetConfig+0x348>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a2f      	ldr	r2, [pc, #188]	; (80036d0 <UART_SetConfig+0x2e0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d125      	bne.n	8003662 <UART_SetConfig+0x272>
 8003616:	4b29      	ldr	r3, [pc, #164]	; (80036bc <UART_SetConfig+0x2cc>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003620:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003624:	d017      	beq.n	8003656 <UART_SetConfig+0x266>
 8003626:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800362a:	d817      	bhi.n	800365c <UART_SetConfig+0x26c>
 800362c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003630:	d00b      	beq.n	800364a <UART_SetConfig+0x25a>
 8003632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003636:	d811      	bhi.n	800365c <UART_SetConfig+0x26c>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <UART_SetConfig+0x254>
 800363c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003640:	d006      	beq.n	8003650 <UART_SetConfig+0x260>
 8003642:	e00b      	b.n	800365c <UART_SetConfig+0x26c>
 8003644:	2301      	movs	r3, #1
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e076      	b.n	8003738 <UART_SetConfig+0x348>
 800364a:	2302      	movs	r3, #2
 800364c:	77fb      	strb	r3, [r7, #31]
 800364e:	e073      	b.n	8003738 <UART_SetConfig+0x348>
 8003650:	2304      	movs	r3, #4
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	e070      	b.n	8003738 <UART_SetConfig+0x348>
 8003656:	2308      	movs	r3, #8
 8003658:	77fb      	strb	r3, [r7, #31]
 800365a:	e06d      	b.n	8003738 <UART_SetConfig+0x348>
 800365c:	2310      	movs	r3, #16
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e06a      	b.n	8003738 <UART_SetConfig+0x348>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <UART_SetConfig+0x2e4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d138      	bne.n	80036de <UART_SetConfig+0x2ee>
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <UART_SetConfig+0x2cc>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003676:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800367a:	d017      	beq.n	80036ac <UART_SetConfig+0x2bc>
 800367c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003680:	d82a      	bhi.n	80036d8 <UART_SetConfig+0x2e8>
 8003682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003686:	d00b      	beq.n	80036a0 <UART_SetConfig+0x2b0>
 8003688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800368c:	d824      	bhi.n	80036d8 <UART_SetConfig+0x2e8>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <UART_SetConfig+0x2aa>
 8003692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003696:	d006      	beq.n	80036a6 <UART_SetConfig+0x2b6>
 8003698:	e01e      	b.n	80036d8 <UART_SetConfig+0x2e8>
 800369a:	2300      	movs	r3, #0
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e04b      	b.n	8003738 <UART_SetConfig+0x348>
 80036a0:	2302      	movs	r3, #2
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e048      	b.n	8003738 <UART_SetConfig+0x348>
 80036a6:	2304      	movs	r3, #4
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e045      	b.n	8003738 <UART_SetConfig+0x348>
 80036ac:	2308      	movs	r3, #8
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e042      	b.n	8003738 <UART_SetConfig+0x348>
 80036b2:	bf00      	nop
 80036b4:	efff69f3 	.word	0xefff69f3
 80036b8:	40011000 	.word	0x40011000
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40004400 	.word	0x40004400
 80036c4:	40004800 	.word	0x40004800
 80036c8:	40004c00 	.word	0x40004c00
 80036cc:	40005000 	.word	0x40005000
 80036d0:	40011400 	.word	0x40011400
 80036d4:	40007800 	.word	0x40007800
 80036d8:	2310      	movs	r3, #16
 80036da:	77fb      	strb	r3, [r7, #31]
 80036dc:	e02c      	b.n	8003738 <UART_SetConfig+0x348>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a72      	ldr	r2, [pc, #456]	; (80038ac <UART_SetConfig+0x4bc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d125      	bne.n	8003734 <UART_SetConfig+0x344>
 80036e8:	4b71      	ldr	r3, [pc, #452]	; (80038b0 <UART_SetConfig+0x4c0>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036f6:	d017      	beq.n	8003728 <UART_SetConfig+0x338>
 80036f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036fc:	d817      	bhi.n	800372e <UART_SetConfig+0x33e>
 80036fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003702:	d00b      	beq.n	800371c <UART_SetConfig+0x32c>
 8003704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003708:	d811      	bhi.n	800372e <UART_SetConfig+0x33e>
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <UART_SetConfig+0x326>
 800370e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003712:	d006      	beq.n	8003722 <UART_SetConfig+0x332>
 8003714:	e00b      	b.n	800372e <UART_SetConfig+0x33e>
 8003716:	2300      	movs	r3, #0
 8003718:	77fb      	strb	r3, [r7, #31]
 800371a:	e00d      	b.n	8003738 <UART_SetConfig+0x348>
 800371c:	2302      	movs	r3, #2
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e00a      	b.n	8003738 <UART_SetConfig+0x348>
 8003722:	2304      	movs	r3, #4
 8003724:	77fb      	strb	r3, [r7, #31]
 8003726:	e007      	b.n	8003738 <UART_SetConfig+0x348>
 8003728:	2308      	movs	r3, #8
 800372a:	77fb      	strb	r3, [r7, #31]
 800372c:	e004      	b.n	8003738 <UART_SetConfig+0x348>
 800372e:	2310      	movs	r3, #16
 8003730:	77fb      	strb	r3, [r7, #31]
 8003732:	e001      	b.n	8003738 <UART_SetConfig+0x348>
 8003734:	2310      	movs	r3, #16
 8003736:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003740:	d15b      	bne.n	80037fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003742:	7ffb      	ldrb	r3, [r7, #31]
 8003744:	2b08      	cmp	r3, #8
 8003746:	d828      	bhi.n	800379a <UART_SetConfig+0x3aa>
 8003748:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <UART_SetConfig+0x360>)
 800374a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374e:	bf00      	nop
 8003750:	08003775 	.word	0x08003775
 8003754:	0800377d 	.word	0x0800377d
 8003758:	08003785 	.word	0x08003785
 800375c:	0800379b 	.word	0x0800379b
 8003760:	0800378b 	.word	0x0800378b
 8003764:	0800379b 	.word	0x0800379b
 8003768:	0800379b 	.word	0x0800379b
 800376c:	0800379b 	.word	0x0800379b
 8003770:	08003793 	.word	0x08003793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003774:	f7ff f9d6 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 8003778:	61b8      	str	r0, [r7, #24]
        break;
 800377a:	e013      	b.n	80037a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800377c:	f7ff f9e6 	bl	8002b4c <HAL_RCC_GetPCLK2Freq>
 8003780:	61b8      	str	r0, [r7, #24]
        break;
 8003782:	e00f      	b.n	80037a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003784:	4b4b      	ldr	r3, [pc, #300]	; (80038b4 <UART_SetConfig+0x4c4>)
 8003786:	61bb      	str	r3, [r7, #24]
        break;
 8003788:	e00c      	b.n	80037a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800378a:	f7ff f8b9 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 800378e:	61b8      	str	r0, [r7, #24]
        break;
 8003790:	e008      	b.n	80037a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003796:	61bb      	str	r3, [r7, #24]
        break;
 8003798:	e004      	b.n	80037a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	77bb      	strb	r3, [r7, #30]
        break;
 80037a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d074      	beq.n	8003894 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	005a      	lsls	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	441a      	add	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80037be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b0f      	cmp	r3, #15
 80037c4:	d916      	bls.n	80037f4 <UART_SetConfig+0x404>
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037cc:	d212      	bcs.n	80037f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f023 030f 	bic.w	r3, r3, #15
 80037d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	b29b      	uxth	r3, r3
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	89fb      	ldrh	r3, [r7, #14]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	89fa      	ldrh	r2, [r7, #14]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	e04f      	b.n	8003894 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	77bb      	strb	r3, [r7, #30]
 80037f8:	e04c      	b.n	8003894 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037fa:	7ffb      	ldrb	r3, [r7, #31]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d828      	bhi.n	8003852 <UART_SetConfig+0x462>
 8003800:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <UART_SetConfig+0x418>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	0800382d 	.word	0x0800382d
 800380c:	08003835 	.word	0x08003835
 8003810:	0800383d 	.word	0x0800383d
 8003814:	08003853 	.word	0x08003853
 8003818:	08003843 	.word	0x08003843
 800381c:	08003853 	.word	0x08003853
 8003820:	08003853 	.word	0x08003853
 8003824:	08003853 	.word	0x08003853
 8003828:	0800384b 	.word	0x0800384b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800382c:	f7ff f97a 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 8003830:	61b8      	str	r0, [r7, #24]
        break;
 8003832:	e013      	b.n	800385c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003834:	f7ff f98a 	bl	8002b4c <HAL_RCC_GetPCLK2Freq>
 8003838:	61b8      	str	r0, [r7, #24]
        break;
 800383a:	e00f      	b.n	800385c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800383c:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <UART_SetConfig+0x4c4>)
 800383e:	61bb      	str	r3, [r7, #24]
        break;
 8003840:	e00c      	b.n	800385c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003842:	f7ff f85d 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 8003846:	61b8      	str	r0, [r7, #24]
        break;
 8003848:	e008      	b.n	800385c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800384a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384e:	61bb      	str	r3, [r7, #24]
        break;
 8003850:	e004      	b.n	800385c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	77bb      	strb	r3, [r7, #30]
        break;
 800385a:	bf00      	nop
    }

    if (pclk != 0U)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d018      	beq.n	8003894 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	085a      	lsrs	r2, r3, #1
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	441a      	add	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b0f      	cmp	r3, #15
 800387a:	d909      	bls.n	8003890 <UART_SetConfig+0x4a0>
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003882:	d205      	bcs.n	8003890 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	e001      	b.n	8003894 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3720      	adds	r7, #32
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40007c00 	.word	0x40007c00
 80038b0:	40023800 	.word	0x40023800
 80038b4:	00f42400 	.word	0x00f42400

080038b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01a      	beq.n	80039ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039b6:	d10a      	bne.n	80039ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	605a      	str	r2, [r3, #4]
  }
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a0c:	f7fd fc5c 	bl	80012c8 <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d10e      	bne.n	8003a3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f81b 	bl	8003a6a <UART_WaitOnFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e011      	b.n	8003a62 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b09c      	sub	sp, #112	; 0x70
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	4613      	mov	r3, r2
 8003a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a7a:	e0a7      	b.n	8003bcc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	f000 80a3 	beq.w	8003bcc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a86:	f7fd fc1f 	bl	80012c8 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d302      	bcc.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x32>
 8003a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d13f      	bne.n	8003b1c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ab0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003abc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ac0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e6      	bne.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3308      	adds	r3, #8
 8003aec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aee:	64ba      	str	r2, [r7, #72]	; 0x48
 8003af0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e5      	bne.n	8003ace <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2220      	movs	r2, #32
 8003b06:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e068      	b.n	8003bee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d050      	beq.n	8003bcc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b38:	d148      	bne.n	8003bcc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b42:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b62:	637b      	str	r3, [r7, #52]	; 0x34
 8003b64:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e6      	bne.n	8003b44 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	613b      	str	r3, [r7, #16]
   return(result);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3308      	adds	r3, #8
 8003b94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b96:	623a      	str	r2, [r7, #32]
 8003b98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	69f9      	ldr	r1, [r7, #28]
 8003b9c:	6a3a      	ldr	r2, [r7, #32]
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e5      	bne.n	8003b76 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e010      	b.n	8003bee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69da      	ldr	r2, [r3, #28]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	f43f af48 	beq.w	8003a7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3770      	adds	r7, #112	; 0x70
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	f107 001c 	add.w	r0, r7, #28
 8003c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d120      	bne.n	8003c52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <USB_CoreInit+0xac>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d105      	bne.n	8003c46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fa96 	bl	8004178 <USB_CoreReset>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	e010      	b.n	8003c74 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fa8a 	bl	8004178 <USB_CoreReset>
 8003c64:	4603      	mov	r3, r0
 8003c66:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d10b      	bne.n	8003c92 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f043 0206 	orr.w	r2, r3, #6
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f043 0220 	orr.w	r2, r3, #32
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c9e:	b004      	add	sp, #16
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	ffbdffbf 	.word	0xffbdffbf

08003ca8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f023 0201 	bic.w	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d115      	bne.n	8003d18 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f7fd faf1 	bl	80012e0 <HAL_Delay>
      ms++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3301      	adds	r3, #1
 8003d02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fa29 	bl	800415c <USB_GetMode>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d01e      	beq.n	8003d4e <USB_SetCurrentMode+0x84>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b31      	cmp	r3, #49	; 0x31
 8003d14:	d9f0      	bls.n	8003cf8 <USB_SetCurrentMode+0x2e>
 8003d16:	e01a      	b.n	8003d4e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d115      	bne.n	8003d4a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d2a:	2001      	movs	r0, #1
 8003d2c:	f7fd fad8 	bl	80012e0 <HAL_Delay>
      ms++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3301      	adds	r3, #1
 8003d34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa10 	bl	800415c <USB_GetMode>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <USB_SetCurrentMode+0x84>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b31      	cmp	r3, #49	; 0x31
 8003d46:	d9f0      	bls.n	8003d2a <USB_SetCurrentMode+0x60>
 8003d48:	e001      	b.n	8003d4e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e005      	b.n	8003d5a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b32      	cmp	r3, #50	; 0x32
 8003d52:	d101      	bne.n	8003d58 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d64:	b084      	sub	sp, #16
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b086      	sub	sp, #24
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d7e:	2300      	movs	r3, #0
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	e009      	b.n	8003d98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	3340      	adds	r3, #64	; 0x40
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	2200      	movs	r2, #0
 8003d90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	3301      	adds	r3, #1
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2b0e      	cmp	r3, #14
 8003d9c:	d9f2      	bls.n	8003d84 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d11c      	bne.n	8003dde <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db2:	f043 0302 	orr.w	r3, r3, #2
 8003db6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	e005      	b.n	8003dea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003df0:	461a      	mov	r2, r3
 8003df2:	2300      	movs	r3, #0
 8003df4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e04:	461a      	mov	r2, r3
 8003e06:	680b      	ldr	r3, [r1, #0]
 8003e08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d10c      	bne.n	8003e2a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d104      	bne.n	8003e20 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e16:	2100      	movs	r1, #0
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f965 	bl	80040e8 <USB_SetDevSpeed>
 8003e1e:	e008      	b.n	8003e32 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e20:	2101      	movs	r1, #1
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f960 	bl	80040e8 <USB_SetDevSpeed>
 8003e28:	e003      	b.n	8003e32 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e2a:	2103      	movs	r1, #3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f95b 	bl	80040e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e32:	2110      	movs	r1, #16
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f8f3 	bl	8004020 <USB_FlushTxFifo>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f91f 	bl	8004088 <USB_FlushRxFifo>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e66:	461a      	mov	r2, r3
 8003e68:	2300      	movs	r3, #0
 8003e6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e72:	461a      	mov	r2, r3
 8003e74:	2300      	movs	r3, #0
 8003e76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	e043      	b.n	8003f06 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e94:	d118      	bne.n	8003ec8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	e013      	b.n	8003eda <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	e008      	b.n	8003eda <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2300      	movs	r3, #0
 8003eea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003efe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	3301      	adds	r3, #1
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d3b7      	bcc.n	8003e7e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	e043      	b.n	8003f9c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f2a:	d118      	bne.n	8003f5e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e013      	b.n	8003f70 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f54:	461a      	mov	r2, r3
 8003f56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	e008      	b.n	8003f70 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2300      	movs	r3, #0
 8003f80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d3b7      	bcc.n	8003f14 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003fc4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d105      	bne.n	8003fd8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f043 0210 	orr.w	r2, r3, #16
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <USB_DevInit+0x2b4>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f043 0208 	orr.w	r2, r3, #8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d105      	bne.n	8004008 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699a      	ldr	r2, [r3, #24]
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <USB_DevInit+0x2b8>)
 8004002:	4313      	orrs	r3, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004008:	7dfb      	ldrb	r3, [r7, #23]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004014:	b004      	add	sp, #16
 8004016:	4770      	bx	lr
 8004018:	803c3800 	.word	0x803c3800
 800401c:	40000004 	.word	0x40000004

08004020 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3301      	adds	r3, #1
 8004032:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4a13      	ldr	r2, [pc, #76]	; (8004084 <USB_FlushTxFifo+0x64>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d901      	bls.n	8004040 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e01b      	b.n	8004078 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	daf2      	bge.n	800402e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	019b      	lsls	r3, r3, #6
 8004050:	f043 0220 	orr.w	r2, r3, #32
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3301      	adds	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4a08      	ldr	r2, [pc, #32]	; (8004084 <USB_FlushTxFifo+0x64>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e006      	b.n	8004078 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b20      	cmp	r3, #32
 8004074:	d0f0      	beq.n	8004058 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	00030d40 	.word	0x00030d40

08004088 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3301      	adds	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a11      	ldr	r2, [pc, #68]	; (80040e4 <USB_FlushRxFifo+0x5c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e018      	b.n	80040d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	daf2      	bge.n	8004094 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2210      	movs	r2, #16
 80040b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3301      	adds	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4a08      	ldr	r2, [pc, #32]	; (80040e4 <USB_FlushRxFifo+0x5c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d901      	bls.n	80040ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e006      	b.n	80040d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	d0f0      	beq.n	80040b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	00030d40 	.word	0x00030d40

080040e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	68f9      	ldr	r1, [r7, #12]
 8004104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800411a:	b480      	push	{r7}
 800411c:	b085      	sub	sp, #20
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004134:	f023 0303 	bic.w	r3, r3, #3
 8004138:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004148:	f043 0302 	orr.w	r3, r3, #2
 800414c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0301 	and.w	r3, r3, #1
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3301      	adds	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4a13      	ldr	r2, [pc, #76]	; (80041dc <USB_CoreReset+0x64>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e01b      	b.n	80041ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	daf2      	bge.n	8004184 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f043 0201 	orr.w	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3301      	adds	r3, #1
 80041b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4a09      	ldr	r2, [pc, #36]	; (80041dc <USB_CoreReset+0x64>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d901      	bls.n	80041c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e006      	b.n	80041ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d0f0      	beq.n	80041ae <USB_CoreReset+0x36>

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	00030d40 	.word	0x00030d40

080041e0 <malloc>:
 80041e0:	4b02      	ldr	r3, [pc, #8]	; (80041ec <malloc+0xc>)
 80041e2:	4601      	mov	r1, r0
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	f000 b823 	b.w	8004230 <_malloc_r>
 80041ea:	bf00      	nop
 80041ec:	20000100 	.word	0x20000100

080041f0 <sbrk_aligned>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	4e0e      	ldr	r6, [pc, #56]	; (800422c <sbrk_aligned+0x3c>)
 80041f4:	460c      	mov	r4, r1
 80041f6:	6831      	ldr	r1, [r6, #0]
 80041f8:	4605      	mov	r5, r0
 80041fa:	b911      	cbnz	r1, 8004202 <sbrk_aligned+0x12>
 80041fc:	f000 fa30 	bl	8004660 <_sbrk_r>
 8004200:	6030      	str	r0, [r6, #0]
 8004202:	4621      	mov	r1, r4
 8004204:	4628      	mov	r0, r5
 8004206:	f000 fa2b 	bl	8004660 <_sbrk_r>
 800420a:	1c43      	adds	r3, r0, #1
 800420c:	d00a      	beq.n	8004224 <sbrk_aligned+0x34>
 800420e:	1cc4      	adds	r4, r0, #3
 8004210:	f024 0403 	bic.w	r4, r4, #3
 8004214:	42a0      	cmp	r0, r4
 8004216:	d007      	beq.n	8004228 <sbrk_aligned+0x38>
 8004218:	1a21      	subs	r1, r4, r0
 800421a:	4628      	mov	r0, r5
 800421c:	f000 fa20 	bl	8004660 <_sbrk_r>
 8004220:	3001      	adds	r0, #1
 8004222:	d101      	bne.n	8004228 <sbrk_aligned+0x38>
 8004224:	f04f 34ff 	mov.w	r4, #4294967295
 8004228:	4620      	mov	r0, r4
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	200008ec 	.word	0x200008ec

08004230 <_malloc_r>:
 8004230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004234:	1ccd      	adds	r5, r1, #3
 8004236:	f025 0503 	bic.w	r5, r5, #3
 800423a:	3508      	adds	r5, #8
 800423c:	2d0c      	cmp	r5, #12
 800423e:	bf38      	it	cc
 8004240:	250c      	movcc	r5, #12
 8004242:	2d00      	cmp	r5, #0
 8004244:	4607      	mov	r7, r0
 8004246:	db01      	blt.n	800424c <_malloc_r+0x1c>
 8004248:	42a9      	cmp	r1, r5
 800424a:	d905      	bls.n	8004258 <_malloc_r+0x28>
 800424c:	230c      	movs	r3, #12
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	2600      	movs	r6, #0
 8004252:	4630      	mov	r0, r6
 8004254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004258:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800432c <_malloc_r+0xfc>
 800425c:	f000 f868 	bl	8004330 <__malloc_lock>
 8004260:	f8d8 3000 	ldr.w	r3, [r8]
 8004264:	461c      	mov	r4, r3
 8004266:	bb5c      	cbnz	r4, 80042c0 <_malloc_r+0x90>
 8004268:	4629      	mov	r1, r5
 800426a:	4638      	mov	r0, r7
 800426c:	f7ff ffc0 	bl	80041f0 <sbrk_aligned>
 8004270:	1c43      	adds	r3, r0, #1
 8004272:	4604      	mov	r4, r0
 8004274:	d155      	bne.n	8004322 <_malloc_r+0xf2>
 8004276:	f8d8 4000 	ldr.w	r4, [r8]
 800427a:	4626      	mov	r6, r4
 800427c:	2e00      	cmp	r6, #0
 800427e:	d145      	bne.n	800430c <_malloc_r+0xdc>
 8004280:	2c00      	cmp	r4, #0
 8004282:	d048      	beq.n	8004316 <_malloc_r+0xe6>
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	4631      	mov	r1, r6
 8004288:	4638      	mov	r0, r7
 800428a:	eb04 0903 	add.w	r9, r4, r3
 800428e:	f000 f9e7 	bl	8004660 <_sbrk_r>
 8004292:	4581      	cmp	r9, r0
 8004294:	d13f      	bne.n	8004316 <_malloc_r+0xe6>
 8004296:	6821      	ldr	r1, [r4, #0]
 8004298:	1a6d      	subs	r5, r5, r1
 800429a:	4629      	mov	r1, r5
 800429c:	4638      	mov	r0, r7
 800429e:	f7ff ffa7 	bl	80041f0 <sbrk_aligned>
 80042a2:	3001      	adds	r0, #1
 80042a4:	d037      	beq.n	8004316 <_malloc_r+0xe6>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	442b      	add	r3, r5
 80042aa:	6023      	str	r3, [r4, #0]
 80042ac:	f8d8 3000 	ldr.w	r3, [r8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d038      	beq.n	8004326 <_malloc_r+0xf6>
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	42a2      	cmp	r2, r4
 80042b8:	d12b      	bne.n	8004312 <_malloc_r+0xe2>
 80042ba:	2200      	movs	r2, #0
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	e00f      	b.n	80042e0 <_malloc_r+0xb0>
 80042c0:	6822      	ldr	r2, [r4, #0]
 80042c2:	1b52      	subs	r2, r2, r5
 80042c4:	d41f      	bmi.n	8004306 <_malloc_r+0xd6>
 80042c6:	2a0b      	cmp	r2, #11
 80042c8:	d917      	bls.n	80042fa <_malloc_r+0xca>
 80042ca:	1961      	adds	r1, r4, r5
 80042cc:	42a3      	cmp	r3, r4
 80042ce:	6025      	str	r5, [r4, #0]
 80042d0:	bf18      	it	ne
 80042d2:	6059      	strne	r1, [r3, #4]
 80042d4:	6863      	ldr	r3, [r4, #4]
 80042d6:	bf08      	it	eq
 80042d8:	f8c8 1000 	streq.w	r1, [r8]
 80042dc:	5162      	str	r2, [r4, r5]
 80042de:	604b      	str	r3, [r1, #4]
 80042e0:	4638      	mov	r0, r7
 80042e2:	f104 060b 	add.w	r6, r4, #11
 80042e6:	f000 f829 	bl	800433c <__malloc_unlock>
 80042ea:	f026 0607 	bic.w	r6, r6, #7
 80042ee:	1d23      	adds	r3, r4, #4
 80042f0:	1af2      	subs	r2, r6, r3
 80042f2:	d0ae      	beq.n	8004252 <_malloc_r+0x22>
 80042f4:	1b9b      	subs	r3, r3, r6
 80042f6:	50a3      	str	r3, [r4, r2]
 80042f8:	e7ab      	b.n	8004252 <_malloc_r+0x22>
 80042fa:	42a3      	cmp	r3, r4
 80042fc:	6862      	ldr	r2, [r4, #4]
 80042fe:	d1dd      	bne.n	80042bc <_malloc_r+0x8c>
 8004300:	f8c8 2000 	str.w	r2, [r8]
 8004304:	e7ec      	b.n	80042e0 <_malloc_r+0xb0>
 8004306:	4623      	mov	r3, r4
 8004308:	6864      	ldr	r4, [r4, #4]
 800430a:	e7ac      	b.n	8004266 <_malloc_r+0x36>
 800430c:	4634      	mov	r4, r6
 800430e:	6876      	ldr	r6, [r6, #4]
 8004310:	e7b4      	b.n	800427c <_malloc_r+0x4c>
 8004312:	4613      	mov	r3, r2
 8004314:	e7cc      	b.n	80042b0 <_malloc_r+0x80>
 8004316:	230c      	movs	r3, #12
 8004318:	603b      	str	r3, [r7, #0]
 800431a:	4638      	mov	r0, r7
 800431c:	f000 f80e 	bl	800433c <__malloc_unlock>
 8004320:	e797      	b.n	8004252 <_malloc_r+0x22>
 8004322:	6025      	str	r5, [r4, #0]
 8004324:	e7dc      	b.n	80042e0 <_malloc_r+0xb0>
 8004326:	605b      	str	r3, [r3, #4]
 8004328:	deff      	udf	#255	; 0xff
 800432a:	bf00      	nop
 800432c:	200008e8 	.word	0x200008e8

08004330 <__malloc_lock>:
 8004330:	4801      	ldr	r0, [pc, #4]	; (8004338 <__malloc_lock+0x8>)
 8004332:	f000 b9e1 	b.w	80046f8 <__retarget_lock_acquire_recursive>
 8004336:	bf00      	nop
 8004338:	20000a30 	.word	0x20000a30

0800433c <__malloc_unlock>:
 800433c:	4801      	ldr	r0, [pc, #4]	; (8004344 <__malloc_unlock+0x8>)
 800433e:	f000 b9dc 	b.w	80046fa <__retarget_lock_release_recursive>
 8004342:	bf00      	nop
 8004344:	20000a30 	.word	0x20000a30

08004348 <std>:
 8004348:	2300      	movs	r3, #0
 800434a:	b510      	push	{r4, lr}
 800434c:	4604      	mov	r4, r0
 800434e:	e9c0 3300 	strd	r3, r3, [r0]
 8004352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004356:	6083      	str	r3, [r0, #8]
 8004358:	8181      	strh	r1, [r0, #12]
 800435a:	6643      	str	r3, [r0, #100]	; 0x64
 800435c:	81c2      	strh	r2, [r0, #14]
 800435e:	6183      	str	r3, [r0, #24]
 8004360:	4619      	mov	r1, r3
 8004362:	2208      	movs	r2, #8
 8004364:	305c      	adds	r0, #92	; 0x5c
 8004366:	f000 f8e2 	bl	800452e <memset>
 800436a:	4b05      	ldr	r3, [pc, #20]	; (8004380 <std+0x38>)
 800436c:	6263      	str	r3, [r4, #36]	; 0x24
 800436e:	4b05      	ldr	r3, [pc, #20]	; (8004384 <std+0x3c>)
 8004370:	62a3      	str	r3, [r4, #40]	; 0x28
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <std+0x40>)
 8004374:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004376:	4b05      	ldr	r3, [pc, #20]	; (800438c <std+0x44>)
 8004378:	6224      	str	r4, [r4, #32]
 800437a:	6323      	str	r3, [r4, #48]	; 0x30
 800437c:	bd10      	pop	{r4, pc}
 800437e:	bf00      	nop
 8004380:	080044a9 	.word	0x080044a9
 8004384:	080044cb 	.word	0x080044cb
 8004388:	08004503 	.word	0x08004503
 800438c:	08004527 	.word	0x08004527

08004390 <stdio_exit_handler>:
 8004390:	4a02      	ldr	r2, [pc, #8]	; (800439c <stdio_exit_handler+0xc>)
 8004392:	4903      	ldr	r1, [pc, #12]	; (80043a0 <stdio_exit_handler+0x10>)
 8004394:	4803      	ldr	r0, [pc, #12]	; (80043a4 <stdio_exit_handler+0x14>)
 8004396:	f000 b869 	b.w	800446c <_fwalk_sglue>
 800439a:	bf00      	nop
 800439c:	200000a8 	.word	0x200000a8
 80043a0:	080048ed 	.word	0x080048ed
 80043a4:	200000b4 	.word	0x200000b4

080043a8 <cleanup_stdio>:
 80043a8:	6841      	ldr	r1, [r0, #4]
 80043aa:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <cleanup_stdio+0x34>)
 80043ac:	4299      	cmp	r1, r3
 80043ae:	b510      	push	{r4, lr}
 80043b0:	4604      	mov	r4, r0
 80043b2:	d001      	beq.n	80043b8 <cleanup_stdio+0x10>
 80043b4:	f000 fa9a 	bl	80048ec <_fflush_r>
 80043b8:	68a1      	ldr	r1, [r4, #8]
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <cleanup_stdio+0x38>)
 80043bc:	4299      	cmp	r1, r3
 80043be:	d002      	beq.n	80043c6 <cleanup_stdio+0x1e>
 80043c0:	4620      	mov	r0, r4
 80043c2:	f000 fa93 	bl	80048ec <_fflush_r>
 80043c6:	68e1      	ldr	r1, [r4, #12]
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <cleanup_stdio+0x3c>)
 80043ca:	4299      	cmp	r1, r3
 80043cc:	d004      	beq.n	80043d8 <cleanup_stdio+0x30>
 80043ce:	4620      	mov	r0, r4
 80043d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d4:	f000 ba8a 	b.w	80048ec <_fflush_r>
 80043d8:	bd10      	pop	{r4, pc}
 80043da:	bf00      	nop
 80043dc:	200008f0 	.word	0x200008f0
 80043e0:	20000958 	.word	0x20000958
 80043e4:	200009c0 	.word	0x200009c0

080043e8 <global_stdio_init.part.0>:
 80043e8:	b510      	push	{r4, lr}
 80043ea:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <global_stdio_init.part.0+0x30>)
 80043ec:	4c0b      	ldr	r4, [pc, #44]	; (800441c <global_stdio_init.part.0+0x34>)
 80043ee:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <global_stdio_init.part.0+0x38>)
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	4620      	mov	r0, r4
 80043f4:	2200      	movs	r2, #0
 80043f6:	2104      	movs	r1, #4
 80043f8:	f7ff ffa6 	bl	8004348 <std>
 80043fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004400:	2201      	movs	r2, #1
 8004402:	2109      	movs	r1, #9
 8004404:	f7ff ffa0 	bl	8004348 <std>
 8004408:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800440c:	2202      	movs	r2, #2
 800440e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004412:	2112      	movs	r1, #18
 8004414:	f7ff bf98 	b.w	8004348 <std>
 8004418:	20000a28 	.word	0x20000a28
 800441c:	200008f0 	.word	0x200008f0
 8004420:	08004391 	.word	0x08004391

08004424 <__sfp_lock_acquire>:
 8004424:	4801      	ldr	r0, [pc, #4]	; (800442c <__sfp_lock_acquire+0x8>)
 8004426:	f000 b967 	b.w	80046f8 <__retarget_lock_acquire_recursive>
 800442a:	bf00      	nop
 800442c:	20000a31 	.word	0x20000a31

08004430 <__sfp_lock_release>:
 8004430:	4801      	ldr	r0, [pc, #4]	; (8004438 <__sfp_lock_release+0x8>)
 8004432:	f000 b962 	b.w	80046fa <__retarget_lock_release_recursive>
 8004436:	bf00      	nop
 8004438:	20000a31 	.word	0x20000a31

0800443c <__sinit>:
 800443c:	b510      	push	{r4, lr}
 800443e:	4604      	mov	r4, r0
 8004440:	f7ff fff0 	bl	8004424 <__sfp_lock_acquire>
 8004444:	6a23      	ldr	r3, [r4, #32]
 8004446:	b11b      	cbz	r3, 8004450 <__sinit+0x14>
 8004448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800444c:	f7ff bff0 	b.w	8004430 <__sfp_lock_release>
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <__sinit+0x28>)
 8004452:	6223      	str	r3, [r4, #32]
 8004454:	4b04      	ldr	r3, [pc, #16]	; (8004468 <__sinit+0x2c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f5      	bne.n	8004448 <__sinit+0xc>
 800445c:	f7ff ffc4 	bl	80043e8 <global_stdio_init.part.0>
 8004460:	e7f2      	b.n	8004448 <__sinit+0xc>
 8004462:	bf00      	nop
 8004464:	080043a9 	.word	0x080043a9
 8004468:	20000a28 	.word	0x20000a28

0800446c <_fwalk_sglue>:
 800446c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004470:	4607      	mov	r7, r0
 8004472:	4688      	mov	r8, r1
 8004474:	4614      	mov	r4, r2
 8004476:	2600      	movs	r6, #0
 8004478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800447c:	f1b9 0901 	subs.w	r9, r9, #1
 8004480:	d505      	bpl.n	800448e <_fwalk_sglue+0x22>
 8004482:	6824      	ldr	r4, [r4, #0]
 8004484:	2c00      	cmp	r4, #0
 8004486:	d1f7      	bne.n	8004478 <_fwalk_sglue+0xc>
 8004488:	4630      	mov	r0, r6
 800448a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800448e:	89ab      	ldrh	r3, [r5, #12]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d907      	bls.n	80044a4 <_fwalk_sglue+0x38>
 8004494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004498:	3301      	adds	r3, #1
 800449a:	d003      	beq.n	80044a4 <_fwalk_sglue+0x38>
 800449c:	4629      	mov	r1, r5
 800449e:	4638      	mov	r0, r7
 80044a0:	47c0      	blx	r8
 80044a2:	4306      	orrs	r6, r0
 80044a4:	3568      	adds	r5, #104	; 0x68
 80044a6:	e7e9      	b.n	800447c <_fwalk_sglue+0x10>

080044a8 <__sread>:
 80044a8:	b510      	push	{r4, lr}
 80044aa:	460c      	mov	r4, r1
 80044ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044b0:	f000 f8c4 	bl	800463c <_read_r>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	bfab      	itete	ge
 80044b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044ba:	89a3      	ldrhlt	r3, [r4, #12]
 80044bc:	181b      	addge	r3, r3, r0
 80044be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044c2:	bfac      	ite	ge
 80044c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80044c6:	81a3      	strhlt	r3, [r4, #12]
 80044c8:	bd10      	pop	{r4, pc}

080044ca <__swrite>:
 80044ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ce:	461f      	mov	r7, r3
 80044d0:	898b      	ldrh	r3, [r1, #12]
 80044d2:	05db      	lsls	r3, r3, #23
 80044d4:	4605      	mov	r5, r0
 80044d6:	460c      	mov	r4, r1
 80044d8:	4616      	mov	r6, r2
 80044da:	d505      	bpl.n	80044e8 <__swrite+0x1e>
 80044dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e0:	2302      	movs	r3, #2
 80044e2:	2200      	movs	r2, #0
 80044e4:	f000 f898 	bl	8004618 <_lseek_r>
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044f2:	81a3      	strh	r3, [r4, #12]
 80044f4:	4632      	mov	r2, r6
 80044f6:	463b      	mov	r3, r7
 80044f8:	4628      	mov	r0, r5
 80044fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044fe:	f000 b8bf 	b.w	8004680 <_write_r>

08004502 <__sseek>:
 8004502:	b510      	push	{r4, lr}
 8004504:	460c      	mov	r4, r1
 8004506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800450a:	f000 f885 	bl	8004618 <_lseek_r>
 800450e:	1c43      	adds	r3, r0, #1
 8004510:	89a3      	ldrh	r3, [r4, #12]
 8004512:	bf15      	itete	ne
 8004514:	6560      	strne	r0, [r4, #84]	; 0x54
 8004516:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800451a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800451e:	81a3      	strheq	r3, [r4, #12]
 8004520:	bf18      	it	ne
 8004522:	81a3      	strhne	r3, [r4, #12]
 8004524:	bd10      	pop	{r4, pc}

08004526 <__sclose>:
 8004526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452a:	f000 b865 	b.w	80045f8 <_close_r>

0800452e <memset>:
 800452e:	4402      	add	r2, r0
 8004530:	4603      	mov	r3, r0
 8004532:	4293      	cmp	r3, r2
 8004534:	d100      	bne.n	8004538 <memset+0xa>
 8004536:	4770      	bx	lr
 8004538:	f803 1b01 	strb.w	r1, [r3], #1
 800453c:	e7f9      	b.n	8004532 <memset+0x4>
	...

08004540 <strtok>:
 8004540:	4b16      	ldr	r3, [pc, #88]	; (800459c <strtok+0x5c>)
 8004542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004544:	681e      	ldr	r6, [r3, #0]
 8004546:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8004548:	4605      	mov	r5, r0
 800454a:	b9fc      	cbnz	r4, 800458c <strtok+0x4c>
 800454c:	2050      	movs	r0, #80	; 0x50
 800454e:	9101      	str	r1, [sp, #4]
 8004550:	f7ff fe46 	bl	80041e0 <malloc>
 8004554:	9901      	ldr	r1, [sp, #4]
 8004556:	6470      	str	r0, [r6, #68]	; 0x44
 8004558:	4602      	mov	r2, r0
 800455a:	b920      	cbnz	r0, 8004566 <strtok+0x26>
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <strtok+0x60>)
 800455e:	4811      	ldr	r0, [pc, #68]	; (80045a4 <strtok+0x64>)
 8004560:	215b      	movs	r1, #91	; 0x5b
 8004562:	f000 f8d3 	bl	800470c <__assert_func>
 8004566:	e9c0 4400 	strd	r4, r4, [r0]
 800456a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800456e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004572:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004576:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800457a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800457e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004582:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004586:	6184      	str	r4, [r0, #24]
 8004588:	7704      	strb	r4, [r0, #28]
 800458a:	6244      	str	r4, [r0, #36]	; 0x24
 800458c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800458e:	2301      	movs	r3, #1
 8004590:	4628      	mov	r0, r5
 8004592:	b002      	add	sp, #8
 8004594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004598:	f000 b806 	b.w	80045a8 <__strtok_r>
 800459c:	20000100 	.word	0x20000100
 80045a0:	08005415 	.word	0x08005415
 80045a4:	0800542c 	.word	0x0800542c

080045a8 <__strtok_r>:
 80045a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045aa:	b908      	cbnz	r0, 80045b0 <__strtok_r+0x8>
 80045ac:	6810      	ldr	r0, [r2, #0]
 80045ae:	b188      	cbz	r0, 80045d4 <__strtok_r+0x2c>
 80045b0:	4604      	mov	r4, r0
 80045b2:	4620      	mov	r0, r4
 80045b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80045b8:	460f      	mov	r7, r1
 80045ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 80045be:	b91e      	cbnz	r6, 80045c8 <__strtok_r+0x20>
 80045c0:	b965      	cbnz	r5, 80045dc <__strtok_r+0x34>
 80045c2:	6015      	str	r5, [r2, #0]
 80045c4:	4628      	mov	r0, r5
 80045c6:	e005      	b.n	80045d4 <__strtok_r+0x2c>
 80045c8:	42b5      	cmp	r5, r6
 80045ca:	d1f6      	bne.n	80045ba <__strtok_r+0x12>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <__strtok_r+0xa>
 80045d0:	6014      	str	r4, [r2, #0]
 80045d2:	7003      	strb	r3, [r0, #0]
 80045d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d6:	461c      	mov	r4, r3
 80045d8:	e00c      	b.n	80045f4 <__strtok_r+0x4c>
 80045da:	b915      	cbnz	r5, 80045e2 <__strtok_r+0x3a>
 80045dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80045e0:	460e      	mov	r6, r1
 80045e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80045e6:	42ab      	cmp	r3, r5
 80045e8:	d1f7      	bne.n	80045da <__strtok_r+0x32>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f3      	beq.n	80045d6 <__strtok_r+0x2e>
 80045ee:	2300      	movs	r3, #0
 80045f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80045f4:	6014      	str	r4, [r2, #0]
 80045f6:	e7ed      	b.n	80045d4 <__strtok_r+0x2c>

080045f8 <_close_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	4d06      	ldr	r5, [pc, #24]	; (8004614 <_close_r+0x1c>)
 80045fc:	2300      	movs	r3, #0
 80045fe:	4604      	mov	r4, r0
 8004600:	4608      	mov	r0, r1
 8004602:	602b      	str	r3, [r5, #0]
 8004604:	f7fc fd69 	bl	80010da <_close>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d102      	bne.n	8004612 <_close_r+0x1a>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	b103      	cbz	r3, 8004612 <_close_r+0x1a>
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	20000a2c 	.word	0x20000a2c

08004618 <_lseek_r>:
 8004618:	b538      	push	{r3, r4, r5, lr}
 800461a:	4d07      	ldr	r5, [pc, #28]	; (8004638 <_lseek_r+0x20>)
 800461c:	4604      	mov	r4, r0
 800461e:	4608      	mov	r0, r1
 8004620:	4611      	mov	r1, r2
 8004622:	2200      	movs	r2, #0
 8004624:	602a      	str	r2, [r5, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	f7fc fd7e 	bl	8001128 <_lseek>
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	d102      	bne.n	8004636 <_lseek_r+0x1e>
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	b103      	cbz	r3, 8004636 <_lseek_r+0x1e>
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	bd38      	pop	{r3, r4, r5, pc}
 8004638:	20000a2c 	.word	0x20000a2c

0800463c <_read_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	4d07      	ldr	r5, [pc, #28]	; (800465c <_read_r+0x20>)
 8004640:	4604      	mov	r4, r0
 8004642:	4608      	mov	r0, r1
 8004644:	4611      	mov	r1, r2
 8004646:	2200      	movs	r2, #0
 8004648:	602a      	str	r2, [r5, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	f7fc fd0c 	bl	8001068 <_read>
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d102      	bne.n	800465a <_read_r+0x1e>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	b103      	cbz	r3, 800465a <_read_r+0x1e>
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	20000a2c 	.word	0x20000a2c

08004660 <_sbrk_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4d06      	ldr	r5, [pc, #24]	; (800467c <_sbrk_r+0x1c>)
 8004664:	2300      	movs	r3, #0
 8004666:	4604      	mov	r4, r0
 8004668:	4608      	mov	r0, r1
 800466a:	602b      	str	r3, [r5, #0]
 800466c:	f7fc fd6a 	bl	8001144 <_sbrk>
 8004670:	1c43      	adds	r3, r0, #1
 8004672:	d102      	bne.n	800467a <_sbrk_r+0x1a>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	b103      	cbz	r3, 800467a <_sbrk_r+0x1a>
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	bd38      	pop	{r3, r4, r5, pc}
 800467c:	20000a2c 	.word	0x20000a2c

08004680 <_write_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4d07      	ldr	r5, [pc, #28]	; (80046a0 <_write_r+0x20>)
 8004684:	4604      	mov	r4, r0
 8004686:	4608      	mov	r0, r1
 8004688:	4611      	mov	r1, r2
 800468a:	2200      	movs	r2, #0
 800468c:	602a      	str	r2, [r5, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	f7fc fd07 	bl	80010a2 <_write>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d102      	bne.n	800469e <_write_r+0x1e>
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	b103      	cbz	r3, 800469e <_write_r+0x1e>
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	bd38      	pop	{r3, r4, r5, pc}
 80046a0:	20000a2c 	.word	0x20000a2c

080046a4 <__errno>:
 80046a4:	4b01      	ldr	r3, [pc, #4]	; (80046ac <__errno+0x8>)
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20000100 	.word	0x20000100

080046b0 <__libc_init_array>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	4d0d      	ldr	r5, [pc, #52]	; (80046e8 <__libc_init_array+0x38>)
 80046b4:	4c0d      	ldr	r4, [pc, #52]	; (80046ec <__libc_init_array+0x3c>)
 80046b6:	1b64      	subs	r4, r4, r5
 80046b8:	10a4      	asrs	r4, r4, #2
 80046ba:	2600      	movs	r6, #0
 80046bc:	42a6      	cmp	r6, r4
 80046be:	d109      	bne.n	80046d4 <__libc_init_array+0x24>
 80046c0:	4d0b      	ldr	r5, [pc, #44]	; (80046f0 <__libc_init_array+0x40>)
 80046c2:	4c0c      	ldr	r4, [pc, #48]	; (80046f4 <__libc_init_array+0x44>)
 80046c4:	f000 fd84 	bl	80051d0 <_init>
 80046c8:	1b64      	subs	r4, r4, r5
 80046ca:	10a4      	asrs	r4, r4, #2
 80046cc:	2600      	movs	r6, #0
 80046ce:	42a6      	cmp	r6, r4
 80046d0:	d105      	bne.n	80046de <__libc_init_array+0x2e>
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
 80046d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d8:	4798      	blx	r3
 80046da:	3601      	adds	r6, #1
 80046dc:	e7ee      	b.n	80046bc <__libc_init_array+0xc>
 80046de:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e2:	4798      	blx	r3
 80046e4:	3601      	adds	r6, #1
 80046e6:	e7f2      	b.n	80046ce <__libc_init_array+0x1e>
 80046e8:	08005500 	.word	0x08005500
 80046ec:	08005500 	.word	0x08005500
 80046f0:	08005500 	.word	0x08005500
 80046f4:	08005504 	.word	0x08005504

080046f8 <__retarget_lock_acquire_recursive>:
 80046f8:	4770      	bx	lr

080046fa <__retarget_lock_release_recursive>:
 80046fa:	4770      	bx	lr

080046fc <strcpy>:
 80046fc:	4603      	mov	r3, r0
 80046fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004702:	f803 2b01 	strb.w	r2, [r3], #1
 8004706:	2a00      	cmp	r2, #0
 8004708:	d1f9      	bne.n	80046fe <strcpy+0x2>
 800470a:	4770      	bx	lr

0800470c <__assert_func>:
 800470c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800470e:	4614      	mov	r4, r2
 8004710:	461a      	mov	r2, r3
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <__assert_func+0x2c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4605      	mov	r5, r0
 8004718:	68d8      	ldr	r0, [r3, #12]
 800471a:	b14c      	cbz	r4, 8004730 <__assert_func+0x24>
 800471c:	4b07      	ldr	r3, [pc, #28]	; (800473c <__assert_func+0x30>)
 800471e:	9100      	str	r1, [sp, #0]
 8004720:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004724:	4906      	ldr	r1, [pc, #24]	; (8004740 <__assert_func+0x34>)
 8004726:	462b      	mov	r3, r5
 8004728:	f000 f908 	bl	800493c <fiprintf>
 800472c:	f000 f918 	bl	8004960 <abort>
 8004730:	4b04      	ldr	r3, [pc, #16]	; (8004744 <__assert_func+0x38>)
 8004732:	461c      	mov	r4, r3
 8004734:	e7f3      	b.n	800471e <__assert_func+0x12>
 8004736:	bf00      	nop
 8004738:	20000100 	.word	0x20000100
 800473c:	08005486 	.word	0x08005486
 8004740:	08005493 	.word	0x08005493
 8004744:	080054c1 	.word	0x080054c1

08004748 <_free_r>:
 8004748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800474a:	2900      	cmp	r1, #0
 800474c:	d044      	beq.n	80047d8 <_free_r+0x90>
 800474e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004752:	9001      	str	r0, [sp, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	f1a1 0404 	sub.w	r4, r1, #4
 800475a:	bfb8      	it	lt
 800475c:	18e4      	addlt	r4, r4, r3
 800475e:	f7ff fde7 	bl	8004330 <__malloc_lock>
 8004762:	4a1e      	ldr	r2, [pc, #120]	; (80047dc <_free_r+0x94>)
 8004764:	9801      	ldr	r0, [sp, #4]
 8004766:	6813      	ldr	r3, [r2, #0]
 8004768:	b933      	cbnz	r3, 8004778 <_free_r+0x30>
 800476a:	6063      	str	r3, [r4, #4]
 800476c:	6014      	str	r4, [r2, #0]
 800476e:	b003      	add	sp, #12
 8004770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004774:	f7ff bde2 	b.w	800433c <__malloc_unlock>
 8004778:	42a3      	cmp	r3, r4
 800477a:	d908      	bls.n	800478e <_free_r+0x46>
 800477c:	6825      	ldr	r5, [r4, #0]
 800477e:	1961      	adds	r1, r4, r5
 8004780:	428b      	cmp	r3, r1
 8004782:	bf01      	itttt	eq
 8004784:	6819      	ldreq	r1, [r3, #0]
 8004786:	685b      	ldreq	r3, [r3, #4]
 8004788:	1949      	addeq	r1, r1, r5
 800478a:	6021      	streq	r1, [r4, #0]
 800478c:	e7ed      	b.n	800476a <_free_r+0x22>
 800478e:	461a      	mov	r2, r3
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	b10b      	cbz	r3, 8004798 <_free_r+0x50>
 8004794:	42a3      	cmp	r3, r4
 8004796:	d9fa      	bls.n	800478e <_free_r+0x46>
 8004798:	6811      	ldr	r1, [r2, #0]
 800479a:	1855      	adds	r5, r2, r1
 800479c:	42a5      	cmp	r5, r4
 800479e:	d10b      	bne.n	80047b8 <_free_r+0x70>
 80047a0:	6824      	ldr	r4, [r4, #0]
 80047a2:	4421      	add	r1, r4
 80047a4:	1854      	adds	r4, r2, r1
 80047a6:	42a3      	cmp	r3, r4
 80047a8:	6011      	str	r1, [r2, #0]
 80047aa:	d1e0      	bne.n	800476e <_free_r+0x26>
 80047ac:	681c      	ldr	r4, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	6053      	str	r3, [r2, #4]
 80047b2:	440c      	add	r4, r1
 80047b4:	6014      	str	r4, [r2, #0]
 80047b6:	e7da      	b.n	800476e <_free_r+0x26>
 80047b8:	d902      	bls.n	80047c0 <_free_r+0x78>
 80047ba:	230c      	movs	r3, #12
 80047bc:	6003      	str	r3, [r0, #0]
 80047be:	e7d6      	b.n	800476e <_free_r+0x26>
 80047c0:	6825      	ldr	r5, [r4, #0]
 80047c2:	1961      	adds	r1, r4, r5
 80047c4:	428b      	cmp	r3, r1
 80047c6:	bf04      	itt	eq
 80047c8:	6819      	ldreq	r1, [r3, #0]
 80047ca:	685b      	ldreq	r3, [r3, #4]
 80047cc:	6063      	str	r3, [r4, #4]
 80047ce:	bf04      	itt	eq
 80047d0:	1949      	addeq	r1, r1, r5
 80047d2:	6021      	streq	r1, [r4, #0]
 80047d4:	6054      	str	r4, [r2, #4]
 80047d6:	e7ca      	b.n	800476e <_free_r+0x26>
 80047d8:	b003      	add	sp, #12
 80047da:	bd30      	pop	{r4, r5, pc}
 80047dc:	200008e8 	.word	0x200008e8

080047e0 <__sflush_r>:
 80047e0:	898a      	ldrh	r2, [r1, #12]
 80047e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047e6:	4605      	mov	r5, r0
 80047e8:	0710      	lsls	r0, r2, #28
 80047ea:	460c      	mov	r4, r1
 80047ec:	d458      	bmi.n	80048a0 <__sflush_r+0xc0>
 80047ee:	684b      	ldr	r3, [r1, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	dc05      	bgt.n	8004800 <__sflush_r+0x20>
 80047f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	dc02      	bgt.n	8004800 <__sflush_r+0x20>
 80047fa:	2000      	movs	r0, #0
 80047fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004802:	2e00      	cmp	r6, #0
 8004804:	d0f9      	beq.n	80047fa <__sflush_r+0x1a>
 8004806:	2300      	movs	r3, #0
 8004808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800480c:	682f      	ldr	r7, [r5, #0]
 800480e:	6a21      	ldr	r1, [r4, #32]
 8004810:	602b      	str	r3, [r5, #0]
 8004812:	d032      	beq.n	800487a <__sflush_r+0x9a>
 8004814:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	075a      	lsls	r2, r3, #29
 800481a:	d505      	bpl.n	8004828 <__sflush_r+0x48>
 800481c:	6863      	ldr	r3, [r4, #4]
 800481e:	1ac0      	subs	r0, r0, r3
 8004820:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004822:	b10b      	cbz	r3, 8004828 <__sflush_r+0x48>
 8004824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004826:	1ac0      	subs	r0, r0, r3
 8004828:	2300      	movs	r3, #0
 800482a:	4602      	mov	r2, r0
 800482c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800482e:	6a21      	ldr	r1, [r4, #32]
 8004830:	4628      	mov	r0, r5
 8004832:	47b0      	blx	r6
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	d106      	bne.n	8004848 <__sflush_r+0x68>
 800483a:	6829      	ldr	r1, [r5, #0]
 800483c:	291d      	cmp	r1, #29
 800483e:	d82b      	bhi.n	8004898 <__sflush_r+0xb8>
 8004840:	4a29      	ldr	r2, [pc, #164]	; (80048e8 <__sflush_r+0x108>)
 8004842:	410a      	asrs	r2, r1
 8004844:	07d6      	lsls	r6, r2, #31
 8004846:	d427      	bmi.n	8004898 <__sflush_r+0xb8>
 8004848:	2200      	movs	r2, #0
 800484a:	6062      	str	r2, [r4, #4]
 800484c:	04d9      	lsls	r1, r3, #19
 800484e:	6922      	ldr	r2, [r4, #16]
 8004850:	6022      	str	r2, [r4, #0]
 8004852:	d504      	bpl.n	800485e <__sflush_r+0x7e>
 8004854:	1c42      	adds	r2, r0, #1
 8004856:	d101      	bne.n	800485c <__sflush_r+0x7c>
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	b903      	cbnz	r3, 800485e <__sflush_r+0x7e>
 800485c:	6560      	str	r0, [r4, #84]	; 0x54
 800485e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004860:	602f      	str	r7, [r5, #0]
 8004862:	2900      	cmp	r1, #0
 8004864:	d0c9      	beq.n	80047fa <__sflush_r+0x1a>
 8004866:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800486a:	4299      	cmp	r1, r3
 800486c:	d002      	beq.n	8004874 <__sflush_r+0x94>
 800486e:	4628      	mov	r0, r5
 8004870:	f7ff ff6a 	bl	8004748 <_free_r>
 8004874:	2000      	movs	r0, #0
 8004876:	6360      	str	r0, [r4, #52]	; 0x34
 8004878:	e7c0      	b.n	80047fc <__sflush_r+0x1c>
 800487a:	2301      	movs	r3, #1
 800487c:	4628      	mov	r0, r5
 800487e:	47b0      	blx	r6
 8004880:	1c41      	adds	r1, r0, #1
 8004882:	d1c8      	bne.n	8004816 <__sflush_r+0x36>
 8004884:	682b      	ldr	r3, [r5, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0c5      	beq.n	8004816 <__sflush_r+0x36>
 800488a:	2b1d      	cmp	r3, #29
 800488c:	d001      	beq.n	8004892 <__sflush_r+0xb2>
 800488e:	2b16      	cmp	r3, #22
 8004890:	d101      	bne.n	8004896 <__sflush_r+0xb6>
 8004892:	602f      	str	r7, [r5, #0]
 8004894:	e7b1      	b.n	80047fa <__sflush_r+0x1a>
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489c:	81a3      	strh	r3, [r4, #12]
 800489e:	e7ad      	b.n	80047fc <__sflush_r+0x1c>
 80048a0:	690f      	ldr	r7, [r1, #16]
 80048a2:	2f00      	cmp	r7, #0
 80048a4:	d0a9      	beq.n	80047fa <__sflush_r+0x1a>
 80048a6:	0793      	lsls	r3, r2, #30
 80048a8:	680e      	ldr	r6, [r1, #0]
 80048aa:	bf08      	it	eq
 80048ac:	694b      	ldreq	r3, [r1, #20]
 80048ae:	600f      	str	r7, [r1, #0]
 80048b0:	bf18      	it	ne
 80048b2:	2300      	movne	r3, #0
 80048b4:	eba6 0807 	sub.w	r8, r6, r7
 80048b8:	608b      	str	r3, [r1, #8]
 80048ba:	f1b8 0f00 	cmp.w	r8, #0
 80048be:	dd9c      	ble.n	80047fa <__sflush_r+0x1a>
 80048c0:	6a21      	ldr	r1, [r4, #32]
 80048c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048c4:	4643      	mov	r3, r8
 80048c6:	463a      	mov	r2, r7
 80048c8:	4628      	mov	r0, r5
 80048ca:	47b0      	blx	r6
 80048cc:	2800      	cmp	r0, #0
 80048ce:	dc06      	bgt.n	80048de <__sflush_r+0xfe>
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048d6:	81a3      	strh	r3, [r4, #12]
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	e78e      	b.n	80047fc <__sflush_r+0x1c>
 80048de:	4407      	add	r7, r0
 80048e0:	eba8 0800 	sub.w	r8, r8, r0
 80048e4:	e7e9      	b.n	80048ba <__sflush_r+0xda>
 80048e6:	bf00      	nop
 80048e8:	dfbffffe 	.word	0xdfbffffe

080048ec <_fflush_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	690b      	ldr	r3, [r1, #16]
 80048f0:	4605      	mov	r5, r0
 80048f2:	460c      	mov	r4, r1
 80048f4:	b913      	cbnz	r3, 80048fc <_fflush_r+0x10>
 80048f6:	2500      	movs	r5, #0
 80048f8:	4628      	mov	r0, r5
 80048fa:	bd38      	pop	{r3, r4, r5, pc}
 80048fc:	b118      	cbz	r0, 8004906 <_fflush_r+0x1a>
 80048fe:	6a03      	ldr	r3, [r0, #32]
 8004900:	b90b      	cbnz	r3, 8004906 <_fflush_r+0x1a>
 8004902:	f7ff fd9b 	bl	800443c <__sinit>
 8004906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f3      	beq.n	80048f6 <_fflush_r+0xa>
 800490e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004910:	07d0      	lsls	r0, r2, #31
 8004912:	d404      	bmi.n	800491e <_fflush_r+0x32>
 8004914:	0599      	lsls	r1, r3, #22
 8004916:	d402      	bmi.n	800491e <_fflush_r+0x32>
 8004918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800491a:	f7ff feed 	bl	80046f8 <__retarget_lock_acquire_recursive>
 800491e:	4628      	mov	r0, r5
 8004920:	4621      	mov	r1, r4
 8004922:	f7ff ff5d 	bl	80047e0 <__sflush_r>
 8004926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004928:	07da      	lsls	r2, r3, #31
 800492a:	4605      	mov	r5, r0
 800492c:	d4e4      	bmi.n	80048f8 <_fflush_r+0xc>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	059b      	lsls	r3, r3, #22
 8004932:	d4e1      	bmi.n	80048f8 <_fflush_r+0xc>
 8004934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004936:	f7ff fee0 	bl	80046fa <__retarget_lock_release_recursive>
 800493a:	e7dd      	b.n	80048f8 <_fflush_r+0xc>

0800493c <fiprintf>:
 800493c:	b40e      	push	{r1, r2, r3}
 800493e:	b503      	push	{r0, r1, lr}
 8004940:	4601      	mov	r1, r0
 8004942:	ab03      	add	r3, sp, #12
 8004944:	4805      	ldr	r0, [pc, #20]	; (800495c <fiprintf+0x20>)
 8004946:	f853 2b04 	ldr.w	r2, [r3], #4
 800494a:	6800      	ldr	r0, [r0, #0]
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	f000 f837 	bl	80049c0 <_vfiprintf_r>
 8004952:	b002      	add	sp, #8
 8004954:	f85d eb04 	ldr.w	lr, [sp], #4
 8004958:	b003      	add	sp, #12
 800495a:	4770      	bx	lr
 800495c:	20000100 	.word	0x20000100

08004960 <abort>:
 8004960:	b508      	push	{r3, lr}
 8004962:	2006      	movs	r0, #6
 8004964:	f000 fb94 	bl	8005090 <raise>
 8004968:	2001      	movs	r0, #1
 800496a:	f7fc fb73 	bl	8001054 <_exit>

0800496e <__sfputc_r>:
 800496e:	6893      	ldr	r3, [r2, #8]
 8004970:	3b01      	subs	r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	b410      	push	{r4}
 8004976:	6093      	str	r3, [r2, #8]
 8004978:	da08      	bge.n	800498c <__sfputc_r+0x1e>
 800497a:	6994      	ldr	r4, [r2, #24]
 800497c:	42a3      	cmp	r3, r4
 800497e:	db01      	blt.n	8004984 <__sfputc_r+0x16>
 8004980:	290a      	cmp	r1, #10
 8004982:	d103      	bne.n	800498c <__sfputc_r+0x1e>
 8004984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004988:	f000 bac4 	b.w	8004f14 <__swbuf_r>
 800498c:	6813      	ldr	r3, [r2, #0]
 800498e:	1c58      	adds	r0, r3, #1
 8004990:	6010      	str	r0, [r2, #0]
 8004992:	7019      	strb	r1, [r3, #0]
 8004994:	4608      	mov	r0, r1
 8004996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800499a:	4770      	bx	lr

0800499c <__sfputs_r>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	4606      	mov	r6, r0
 80049a0:	460f      	mov	r7, r1
 80049a2:	4614      	mov	r4, r2
 80049a4:	18d5      	adds	r5, r2, r3
 80049a6:	42ac      	cmp	r4, r5
 80049a8:	d101      	bne.n	80049ae <__sfputs_r+0x12>
 80049aa:	2000      	movs	r0, #0
 80049ac:	e007      	b.n	80049be <__sfputs_r+0x22>
 80049ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b2:	463a      	mov	r2, r7
 80049b4:	4630      	mov	r0, r6
 80049b6:	f7ff ffda 	bl	800496e <__sfputc_r>
 80049ba:	1c43      	adds	r3, r0, #1
 80049bc:	d1f3      	bne.n	80049a6 <__sfputs_r+0xa>
 80049be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049c0 <_vfiprintf_r>:
 80049c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c4:	460d      	mov	r5, r1
 80049c6:	b09d      	sub	sp, #116	; 0x74
 80049c8:	4614      	mov	r4, r2
 80049ca:	4698      	mov	r8, r3
 80049cc:	4606      	mov	r6, r0
 80049ce:	b118      	cbz	r0, 80049d8 <_vfiprintf_r+0x18>
 80049d0:	6a03      	ldr	r3, [r0, #32]
 80049d2:	b90b      	cbnz	r3, 80049d8 <_vfiprintf_r+0x18>
 80049d4:	f7ff fd32 	bl	800443c <__sinit>
 80049d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049da:	07d9      	lsls	r1, r3, #31
 80049dc:	d405      	bmi.n	80049ea <_vfiprintf_r+0x2a>
 80049de:	89ab      	ldrh	r3, [r5, #12]
 80049e0:	059a      	lsls	r2, r3, #22
 80049e2:	d402      	bmi.n	80049ea <_vfiprintf_r+0x2a>
 80049e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049e6:	f7ff fe87 	bl	80046f8 <__retarget_lock_acquire_recursive>
 80049ea:	89ab      	ldrh	r3, [r5, #12]
 80049ec:	071b      	lsls	r3, r3, #28
 80049ee:	d501      	bpl.n	80049f4 <_vfiprintf_r+0x34>
 80049f0:	692b      	ldr	r3, [r5, #16]
 80049f2:	b99b      	cbnz	r3, 8004a1c <_vfiprintf_r+0x5c>
 80049f4:	4629      	mov	r1, r5
 80049f6:	4630      	mov	r0, r6
 80049f8:	f000 faca 	bl	8004f90 <__swsetup_r>
 80049fc:	b170      	cbz	r0, 8004a1c <_vfiprintf_r+0x5c>
 80049fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a00:	07dc      	lsls	r4, r3, #31
 8004a02:	d504      	bpl.n	8004a0e <_vfiprintf_r+0x4e>
 8004a04:	f04f 30ff 	mov.w	r0, #4294967295
 8004a08:	b01d      	add	sp, #116	; 0x74
 8004a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0e:	89ab      	ldrh	r3, [r5, #12]
 8004a10:	0598      	lsls	r0, r3, #22
 8004a12:	d4f7      	bmi.n	8004a04 <_vfiprintf_r+0x44>
 8004a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a16:	f7ff fe70 	bl	80046fa <__retarget_lock_release_recursive>
 8004a1a:	e7f3      	b.n	8004a04 <_vfiprintf_r+0x44>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a20:	2320      	movs	r3, #32
 8004a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a2a:	2330      	movs	r3, #48	; 0x30
 8004a2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004be0 <_vfiprintf_r+0x220>
 8004a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a34:	f04f 0901 	mov.w	r9, #1
 8004a38:	4623      	mov	r3, r4
 8004a3a:	469a      	mov	sl, r3
 8004a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a40:	b10a      	cbz	r2, 8004a46 <_vfiprintf_r+0x86>
 8004a42:	2a25      	cmp	r2, #37	; 0x25
 8004a44:	d1f9      	bne.n	8004a3a <_vfiprintf_r+0x7a>
 8004a46:	ebba 0b04 	subs.w	fp, sl, r4
 8004a4a:	d00b      	beq.n	8004a64 <_vfiprintf_r+0xa4>
 8004a4c:	465b      	mov	r3, fp
 8004a4e:	4622      	mov	r2, r4
 8004a50:	4629      	mov	r1, r5
 8004a52:	4630      	mov	r0, r6
 8004a54:	f7ff ffa2 	bl	800499c <__sfputs_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	f000 80a9 	beq.w	8004bb0 <_vfiprintf_r+0x1f0>
 8004a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a60:	445a      	add	r2, fp
 8004a62:	9209      	str	r2, [sp, #36]	; 0x24
 8004a64:	f89a 3000 	ldrb.w	r3, [sl]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80a1 	beq.w	8004bb0 <_vfiprintf_r+0x1f0>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f04f 32ff 	mov.w	r2, #4294967295
 8004a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a78:	f10a 0a01 	add.w	sl, sl, #1
 8004a7c:	9304      	str	r3, [sp, #16]
 8004a7e:	9307      	str	r3, [sp, #28]
 8004a80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a84:	931a      	str	r3, [sp, #104]	; 0x68
 8004a86:	4654      	mov	r4, sl
 8004a88:	2205      	movs	r2, #5
 8004a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a8e:	4854      	ldr	r0, [pc, #336]	; (8004be0 <_vfiprintf_r+0x220>)
 8004a90:	f7fb fbd6 	bl	8000240 <memchr>
 8004a94:	9a04      	ldr	r2, [sp, #16]
 8004a96:	b9d8      	cbnz	r0, 8004ad0 <_vfiprintf_r+0x110>
 8004a98:	06d1      	lsls	r1, r2, #27
 8004a9a:	bf44      	itt	mi
 8004a9c:	2320      	movmi	r3, #32
 8004a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004aa2:	0713      	lsls	r3, r2, #28
 8004aa4:	bf44      	itt	mi
 8004aa6:	232b      	movmi	r3, #43	; 0x2b
 8004aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004aac:	f89a 3000 	ldrb.w	r3, [sl]
 8004ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ab2:	d015      	beq.n	8004ae0 <_vfiprintf_r+0x120>
 8004ab4:	9a07      	ldr	r2, [sp, #28]
 8004ab6:	4654      	mov	r4, sl
 8004ab8:	2000      	movs	r0, #0
 8004aba:	f04f 0c0a 	mov.w	ip, #10
 8004abe:	4621      	mov	r1, r4
 8004ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ac4:	3b30      	subs	r3, #48	; 0x30
 8004ac6:	2b09      	cmp	r3, #9
 8004ac8:	d94d      	bls.n	8004b66 <_vfiprintf_r+0x1a6>
 8004aca:	b1b0      	cbz	r0, 8004afa <_vfiprintf_r+0x13a>
 8004acc:	9207      	str	r2, [sp, #28]
 8004ace:	e014      	b.n	8004afa <_vfiprintf_r+0x13a>
 8004ad0:	eba0 0308 	sub.w	r3, r0, r8
 8004ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	9304      	str	r3, [sp, #16]
 8004adc:	46a2      	mov	sl, r4
 8004ade:	e7d2      	b.n	8004a86 <_vfiprintf_r+0xc6>
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	1d19      	adds	r1, r3, #4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	9103      	str	r1, [sp, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bfbb      	ittet	lt
 8004aec:	425b      	neglt	r3, r3
 8004aee:	f042 0202 	orrlt.w	r2, r2, #2
 8004af2:	9307      	strge	r3, [sp, #28]
 8004af4:	9307      	strlt	r3, [sp, #28]
 8004af6:	bfb8      	it	lt
 8004af8:	9204      	strlt	r2, [sp, #16]
 8004afa:	7823      	ldrb	r3, [r4, #0]
 8004afc:	2b2e      	cmp	r3, #46	; 0x2e
 8004afe:	d10c      	bne.n	8004b1a <_vfiprintf_r+0x15a>
 8004b00:	7863      	ldrb	r3, [r4, #1]
 8004b02:	2b2a      	cmp	r3, #42	; 0x2a
 8004b04:	d134      	bne.n	8004b70 <_vfiprintf_r+0x1b0>
 8004b06:	9b03      	ldr	r3, [sp, #12]
 8004b08:	1d1a      	adds	r2, r3, #4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	9203      	str	r2, [sp, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bfb8      	it	lt
 8004b12:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b16:	3402      	adds	r4, #2
 8004b18:	9305      	str	r3, [sp, #20]
 8004b1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004bf0 <_vfiprintf_r+0x230>
 8004b1e:	7821      	ldrb	r1, [r4, #0]
 8004b20:	2203      	movs	r2, #3
 8004b22:	4650      	mov	r0, sl
 8004b24:	f7fb fb8c 	bl	8000240 <memchr>
 8004b28:	b138      	cbz	r0, 8004b3a <_vfiprintf_r+0x17a>
 8004b2a:	9b04      	ldr	r3, [sp, #16]
 8004b2c:	eba0 000a 	sub.w	r0, r0, sl
 8004b30:	2240      	movs	r2, #64	; 0x40
 8004b32:	4082      	lsls	r2, r0
 8004b34:	4313      	orrs	r3, r2
 8004b36:	3401      	adds	r4, #1
 8004b38:	9304      	str	r3, [sp, #16]
 8004b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b3e:	4829      	ldr	r0, [pc, #164]	; (8004be4 <_vfiprintf_r+0x224>)
 8004b40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b44:	2206      	movs	r2, #6
 8004b46:	f7fb fb7b 	bl	8000240 <memchr>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d03f      	beq.n	8004bce <_vfiprintf_r+0x20e>
 8004b4e:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <_vfiprintf_r+0x228>)
 8004b50:	bb1b      	cbnz	r3, 8004b9a <_vfiprintf_r+0x1da>
 8004b52:	9b03      	ldr	r3, [sp, #12]
 8004b54:	3307      	adds	r3, #7
 8004b56:	f023 0307 	bic.w	r3, r3, #7
 8004b5a:	3308      	adds	r3, #8
 8004b5c:	9303      	str	r3, [sp, #12]
 8004b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b60:	443b      	add	r3, r7
 8004b62:	9309      	str	r3, [sp, #36]	; 0x24
 8004b64:	e768      	b.n	8004a38 <_vfiprintf_r+0x78>
 8004b66:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	2001      	movs	r0, #1
 8004b6e:	e7a6      	b.n	8004abe <_vfiprintf_r+0xfe>
 8004b70:	2300      	movs	r3, #0
 8004b72:	3401      	adds	r4, #1
 8004b74:	9305      	str	r3, [sp, #20]
 8004b76:	4619      	mov	r1, r3
 8004b78:	f04f 0c0a 	mov.w	ip, #10
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b82:	3a30      	subs	r2, #48	; 0x30
 8004b84:	2a09      	cmp	r2, #9
 8004b86:	d903      	bls.n	8004b90 <_vfiprintf_r+0x1d0>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0c6      	beq.n	8004b1a <_vfiprintf_r+0x15a>
 8004b8c:	9105      	str	r1, [sp, #20]
 8004b8e:	e7c4      	b.n	8004b1a <_vfiprintf_r+0x15a>
 8004b90:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b94:	4604      	mov	r4, r0
 8004b96:	2301      	movs	r3, #1
 8004b98:	e7f0      	b.n	8004b7c <_vfiprintf_r+0x1bc>
 8004b9a:	ab03      	add	r3, sp, #12
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	462a      	mov	r2, r5
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <_vfiprintf_r+0x22c>)
 8004ba2:	a904      	add	r1, sp, #16
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	f3af 8000 	nop.w
 8004baa:	4607      	mov	r7, r0
 8004bac:	1c78      	adds	r0, r7, #1
 8004bae:	d1d6      	bne.n	8004b5e <_vfiprintf_r+0x19e>
 8004bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bb2:	07d9      	lsls	r1, r3, #31
 8004bb4:	d405      	bmi.n	8004bc2 <_vfiprintf_r+0x202>
 8004bb6:	89ab      	ldrh	r3, [r5, #12]
 8004bb8:	059a      	lsls	r2, r3, #22
 8004bba:	d402      	bmi.n	8004bc2 <_vfiprintf_r+0x202>
 8004bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bbe:	f7ff fd9c 	bl	80046fa <__retarget_lock_release_recursive>
 8004bc2:	89ab      	ldrh	r3, [r5, #12]
 8004bc4:	065b      	lsls	r3, r3, #25
 8004bc6:	f53f af1d 	bmi.w	8004a04 <_vfiprintf_r+0x44>
 8004bca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bcc:	e71c      	b.n	8004a08 <_vfiprintf_r+0x48>
 8004bce:	ab03      	add	r3, sp, #12
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	462a      	mov	r2, r5
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <_vfiprintf_r+0x22c>)
 8004bd6:	a904      	add	r1, sp, #16
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f000 f879 	bl	8004cd0 <_printf_i>
 8004bde:	e7e4      	b.n	8004baa <_vfiprintf_r+0x1ea>
 8004be0:	080054c2 	.word	0x080054c2
 8004be4:	080054cc 	.word	0x080054cc
 8004be8:	00000000 	.word	0x00000000
 8004bec:	0800499d 	.word	0x0800499d
 8004bf0:	080054c8 	.word	0x080054c8

08004bf4 <_printf_common>:
 8004bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	4616      	mov	r6, r2
 8004bfa:	4699      	mov	r9, r3
 8004bfc:	688a      	ldr	r2, [r1, #8]
 8004bfe:	690b      	ldr	r3, [r1, #16]
 8004c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c04:	4293      	cmp	r3, r2
 8004c06:	bfb8      	it	lt
 8004c08:	4613      	movlt	r3, r2
 8004c0a:	6033      	str	r3, [r6, #0]
 8004c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c10:	4607      	mov	r7, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	b10a      	cbz	r2, 8004c1a <_printf_common+0x26>
 8004c16:	3301      	adds	r3, #1
 8004c18:	6033      	str	r3, [r6, #0]
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	0699      	lsls	r1, r3, #26
 8004c1e:	bf42      	ittt	mi
 8004c20:	6833      	ldrmi	r3, [r6, #0]
 8004c22:	3302      	addmi	r3, #2
 8004c24:	6033      	strmi	r3, [r6, #0]
 8004c26:	6825      	ldr	r5, [r4, #0]
 8004c28:	f015 0506 	ands.w	r5, r5, #6
 8004c2c:	d106      	bne.n	8004c3c <_printf_common+0x48>
 8004c2e:	f104 0a19 	add.w	sl, r4, #25
 8004c32:	68e3      	ldr	r3, [r4, #12]
 8004c34:	6832      	ldr	r2, [r6, #0]
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	42ab      	cmp	r3, r5
 8004c3a:	dc26      	bgt.n	8004c8a <_printf_common+0x96>
 8004c3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c40:	1e13      	subs	r3, r2, #0
 8004c42:	6822      	ldr	r2, [r4, #0]
 8004c44:	bf18      	it	ne
 8004c46:	2301      	movne	r3, #1
 8004c48:	0692      	lsls	r2, r2, #26
 8004c4a:	d42b      	bmi.n	8004ca4 <_printf_common+0xb0>
 8004c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c50:	4649      	mov	r1, r9
 8004c52:	4638      	mov	r0, r7
 8004c54:	47c0      	blx	r8
 8004c56:	3001      	adds	r0, #1
 8004c58:	d01e      	beq.n	8004c98 <_printf_common+0xa4>
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	6922      	ldr	r2, [r4, #16]
 8004c5e:	f003 0306 	and.w	r3, r3, #6
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	bf02      	ittt	eq
 8004c66:	68e5      	ldreq	r5, [r4, #12]
 8004c68:	6833      	ldreq	r3, [r6, #0]
 8004c6a:	1aed      	subeq	r5, r5, r3
 8004c6c:	68a3      	ldr	r3, [r4, #8]
 8004c6e:	bf0c      	ite	eq
 8004c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c74:	2500      	movne	r5, #0
 8004c76:	4293      	cmp	r3, r2
 8004c78:	bfc4      	itt	gt
 8004c7a:	1a9b      	subgt	r3, r3, r2
 8004c7c:	18ed      	addgt	r5, r5, r3
 8004c7e:	2600      	movs	r6, #0
 8004c80:	341a      	adds	r4, #26
 8004c82:	42b5      	cmp	r5, r6
 8004c84:	d11a      	bne.n	8004cbc <_printf_common+0xc8>
 8004c86:	2000      	movs	r0, #0
 8004c88:	e008      	b.n	8004c9c <_printf_common+0xa8>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4652      	mov	r2, sl
 8004c8e:	4649      	mov	r1, r9
 8004c90:	4638      	mov	r0, r7
 8004c92:	47c0      	blx	r8
 8004c94:	3001      	adds	r0, #1
 8004c96:	d103      	bne.n	8004ca0 <_printf_common+0xac>
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca0:	3501      	adds	r5, #1
 8004ca2:	e7c6      	b.n	8004c32 <_printf_common+0x3e>
 8004ca4:	18e1      	adds	r1, r4, r3
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	2030      	movs	r0, #48	; 0x30
 8004caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cae:	4422      	add	r2, r4
 8004cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cb8:	3302      	adds	r3, #2
 8004cba:	e7c7      	b.n	8004c4c <_printf_common+0x58>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	47c0      	blx	r8
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d0e6      	beq.n	8004c98 <_printf_common+0xa4>
 8004cca:	3601      	adds	r6, #1
 8004ccc:	e7d9      	b.n	8004c82 <_printf_common+0x8e>
	...

08004cd0 <_printf_i>:
 8004cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd4:	7e0f      	ldrb	r7, [r1, #24]
 8004cd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cd8:	2f78      	cmp	r7, #120	; 0x78
 8004cda:	4691      	mov	r9, r2
 8004cdc:	4680      	mov	r8, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	469a      	mov	sl, r3
 8004ce2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ce6:	d807      	bhi.n	8004cf8 <_printf_i+0x28>
 8004ce8:	2f62      	cmp	r7, #98	; 0x62
 8004cea:	d80a      	bhi.n	8004d02 <_printf_i+0x32>
 8004cec:	2f00      	cmp	r7, #0
 8004cee:	f000 80d4 	beq.w	8004e9a <_printf_i+0x1ca>
 8004cf2:	2f58      	cmp	r7, #88	; 0x58
 8004cf4:	f000 80c0 	beq.w	8004e78 <_printf_i+0x1a8>
 8004cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d00:	e03a      	b.n	8004d78 <_printf_i+0xa8>
 8004d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d06:	2b15      	cmp	r3, #21
 8004d08:	d8f6      	bhi.n	8004cf8 <_printf_i+0x28>
 8004d0a:	a101      	add	r1, pc, #4	; (adr r1, 8004d10 <_printf_i+0x40>)
 8004d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d10:	08004d69 	.word	0x08004d69
 8004d14:	08004d7d 	.word	0x08004d7d
 8004d18:	08004cf9 	.word	0x08004cf9
 8004d1c:	08004cf9 	.word	0x08004cf9
 8004d20:	08004cf9 	.word	0x08004cf9
 8004d24:	08004cf9 	.word	0x08004cf9
 8004d28:	08004d7d 	.word	0x08004d7d
 8004d2c:	08004cf9 	.word	0x08004cf9
 8004d30:	08004cf9 	.word	0x08004cf9
 8004d34:	08004cf9 	.word	0x08004cf9
 8004d38:	08004cf9 	.word	0x08004cf9
 8004d3c:	08004e81 	.word	0x08004e81
 8004d40:	08004da9 	.word	0x08004da9
 8004d44:	08004e3b 	.word	0x08004e3b
 8004d48:	08004cf9 	.word	0x08004cf9
 8004d4c:	08004cf9 	.word	0x08004cf9
 8004d50:	08004ea3 	.word	0x08004ea3
 8004d54:	08004cf9 	.word	0x08004cf9
 8004d58:	08004da9 	.word	0x08004da9
 8004d5c:	08004cf9 	.word	0x08004cf9
 8004d60:	08004cf9 	.word	0x08004cf9
 8004d64:	08004e43 	.word	0x08004e43
 8004d68:	682b      	ldr	r3, [r5, #0]
 8004d6a:	1d1a      	adds	r2, r3, #4
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	602a      	str	r2, [r5, #0]
 8004d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e09f      	b.n	8004ebc <_printf_i+0x1ec>
 8004d7c:	6820      	ldr	r0, [r4, #0]
 8004d7e:	682b      	ldr	r3, [r5, #0]
 8004d80:	0607      	lsls	r7, r0, #24
 8004d82:	f103 0104 	add.w	r1, r3, #4
 8004d86:	6029      	str	r1, [r5, #0]
 8004d88:	d501      	bpl.n	8004d8e <_printf_i+0xbe>
 8004d8a:	681e      	ldr	r6, [r3, #0]
 8004d8c:	e003      	b.n	8004d96 <_printf_i+0xc6>
 8004d8e:	0646      	lsls	r6, r0, #25
 8004d90:	d5fb      	bpl.n	8004d8a <_printf_i+0xba>
 8004d92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d96:	2e00      	cmp	r6, #0
 8004d98:	da03      	bge.n	8004da2 <_printf_i+0xd2>
 8004d9a:	232d      	movs	r3, #45	; 0x2d
 8004d9c:	4276      	negs	r6, r6
 8004d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004da2:	485a      	ldr	r0, [pc, #360]	; (8004f0c <_printf_i+0x23c>)
 8004da4:	230a      	movs	r3, #10
 8004da6:	e012      	b.n	8004dce <_printf_i+0xfe>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	6820      	ldr	r0, [r4, #0]
 8004dac:	1d19      	adds	r1, r3, #4
 8004dae:	6029      	str	r1, [r5, #0]
 8004db0:	0605      	lsls	r5, r0, #24
 8004db2:	d501      	bpl.n	8004db8 <_printf_i+0xe8>
 8004db4:	681e      	ldr	r6, [r3, #0]
 8004db6:	e002      	b.n	8004dbe <_printf_i+0xee>
 8004db8:	0641      	lsls	r1, r0, #25
 8004dba:	d5fb      	bpl.n	8004db4 <_printf_i+0xe4>
 8004dbc:	881e      	ldrh	r6, [r3, #0]
 8004dbe:	4853      	ldr	r0, [pc, #332]	; (8004f0c <_printf_i+0x23c>)
 8004dc0:	2f6f      	cmp	r7, #111	; 0x6f
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2308      	moveq	r3, #8
 8004dc6:	230a      	movne	r3, #10
 8004dc8:	2100      	movs	r1, #0
 8004dca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dce:	6865      	ldr	r5, [r4, #4]
 8004dd0:	60a5      	str	r5, [r4, #8]
 8004dd2:	2d00      	cmp	r5, #0
 8004dd4:	bfa2      	ittt	ge
 8004dd6:	6821      	ldrge	r1, [r4, #0]
 8004dd8:	f021 0104 	bicge.w	r1, r1, #4
 8004ddc:	6021      	strge	r1, [r4, #0]
 8004dde:	b90e      	cbnz	r6, 8004de4 <_printf_i+0x114>
 8004de0:	2d00      	cmp	r5, #0
 8004de2:	d04b      	beq.n	8004e7c <_printf_i+0x1ac>
 8004de4:	4615      	mov	r5, r2
 8004de6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dea:	fb03 6711 	mls	r7, r3, r1, r6
 8004dee:	5dc7      	ldrb	r7, [r0, r7]
 8004df0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004df4:	4637      	mov	r7, r6
 8004df6:	42bb      	cmp	r3, r7
 8004df8:	460e      	mov	r6, r1
 8004dfa:	d9f4      	bls.n	8004de6 <_printf_i+0x116>
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d10b      	bne.n	8004e18 <_printf_i+0x148>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	07de      	lsls	r6, r3, #31
 8004e04:	d508      	bpl.n	8004e18 <_printf_i+0x148>
 8004e06:	6923      	ldr	r3, [r4, #16]
 8004e08:	6861      	ldr	r1, [r4, #4]
 8004e0a:	4299      	cmp	r1, r3
 8004e0c:	bfde      	ittt	le
 8004e0e:	2330      	movle	r3, #48	; 0x30
 8004e10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e18:	1b52      	subs	r2, r2, r5
 8004e1a:	6122      	str	r2, [r4, #16]
 8004e1c:	f8cd a000 	str.w	sl, [sp]
 8004e20:	464b      	mov	r3, r9
 8004e22:	aa03      	add	r2, sp, #12
 8004e24:	4621      	mov	r1, r4
 8004e26:	4640      	mov	r0, r8
 8004e28:	f7ff fee4 	bl	8004bf4 <_printf_common>
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d14a      	bne.n	8004ec6 <_printf_i+0x1f6>
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295
 8004e34:	b004      	add	sp, #16
 8004e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	f043 0320 	orr.w	r3, r3, #32
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	4833      	ldr	r0, [pc, #204]	; (8004f10 <_printf_i+0x240>)
 8004e44:	2778      	movs	r7, #120	; 0x78
 8004e46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	6829      	ldr	r1, [r5, #0]
 8004e4e:	061f      	lsls	r7, r3, #24
 8004e50:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e54:	d402      	bmi.n	8004e5c <_printf_i+0x18c>
 8004e56:	065f      	lsls	r7, r3, #25
 8004e58:	bf48      	it	mi
 8004e5a:	b2b6      	uxthmi	r6, r6
 8004e5c:	07df      	lsls	r7, r3, #31
 8004e5e:	bf48      	it	mi
 8004e60:	f043 0320 	orrmi.w	r3, r3, #32
 8004e64:	6029      	str	r1, [r5, #0]
 8004e66:	bf48      	it	mi
 8004e68:	6023      	strmi	r3, [r4, #0]
 8004e6a:	b91e      	cbnz	r6, 8004e74 <_printf_i+0x1a4>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	f023 0320 	bic.w	r3, r3, #32
 8004e72:	6023      	str	r3, [r4, #0]
 8004e74:	2310      	movs	r3, #16
 8004e76:	e7a7      	b.n	8004dc8 <_printf_i+0xf8>
 8004e78:	4824      	ldr	r0, [pc, #144]	; (8004f0c <_printf_i+0x23c>)
 8004e7a:	e7e4      	b.n	8004e46 <_printf_i+0x176>
 8004e7c:	4615      	mov	r5, r2
 8004e7e:	e7bd      	b.n	8004dfc <_printf_i+0x12c>
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	6826      	ldr	r6, [r4, #0]
 8004e84:	6961      	ldr	r1, [r4, #20]
 8004e86:	1d18      	adds	r0, r3, #4
 8004e88:	6028      	str	r0, [r5, #0]
 8004e8a:	0635      	lsls	r5, r6, #24
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	d501      	bpl.n	8004e94 <_printf_i+0x1c4>
 8004e90:	6019      	str	r1, [r3, #0]
 8004e92:	e002      	b.n	8004e9a <_printf_i+0x1ca>
 8004e94:	0670      	lsls	r0, r6, #25
 8004e96:	d5fb      	bpl.n	8004e90 <_printf_i+0x1c0>
 8004e98:	8019      	strh	r1, [r3, #0]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	6123      	str	r3, [r4, #16]
 8004e9e:	4615      	mov	r5, r2
 8004ea0:	e7bc      	b.n	8004e1c <_printf_i+0x14c>
 8004ea2:	682b      	ldr	r3, [r5, #0]
 8004ea4:	1d1a      	adds	r2, r3, #4
 8004ea6:	602a      	str	r2, [r5, #0]
 8004ea8:	681d      	ldr	r5, [r3, #0]
 8004eaa:	6862      	ldr	r2, [r4, #4]
 8004eac:	2100      	movs	r1, #0
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f7fb f9c6 	bl	8000240 <memchr>
 8004eb4:	b108      	cbz	r0, 8004eba <_printf_i+0x1ea>
 8004eb6:	1b40      	subs	r0, r0, r5
 8004eb8:	6060      	str	r0, [r4, #4]
 8004eba:	6863      	ldr	r3, [r4, #4]
 8004ebc:	6123      	str	r3, [r4, #16]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec4:	e7aa      	b.n	8004e1c <_printf_i+0x14c>
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	462a      	mov	r2, r5
 8004eca:	4649      	mov	r1, r9
 8004ecc:	4640      	mov	r0, r8
 8004ece:	47d0      	blx	sl
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d0ad      	beq.n	8004e30 <_printf_i+0x160>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	079b      	lsls	r3, r3, #30
 8004ed8:	d413      	bmi.n	8004f02 <_printf_i+0x232>
 8004eda:	68e0      	ldr	r0, [r4, #12]
 8004edc:	9b03      	ldr	r3, [sp, #12]
 8004ede:	4298      	cmp	r0, r3
 8004ee0:	bfb8      	it	lt
 8004ee2:	4618      	movlt	r0, r3
 8004ee4:	e7a6      	b.n	8004e34 <_printf_i+0x164>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	4632      	mov	r2, r6
 8004eea:	4649      	mov	r1, r9
 8004eec:	4640      	mov	r0, r8
 8004eee:	47d0      	blx	sl
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d09d      	beq.n	8004e30 <_printf_i+0x160>
 8004ef4:	3501      	adds	r5, #1
 8004ef6:	68e3      	ldr	r3, [r4, #12]
 8004ef8:	9903      	ldr	r1, [sp, #12]
 8004efa:	1a5b      	subs	r3, r3, r1
 8004efc:	42ab      	cmp	r3, r5
 8004efe:	dcf2      	bgt.n	8004ee6 <_printf_i+0x216>
 8004f00:	e7eb      	b.n	8004eda <_printf_i+0x20a>
 8004f02:	2500      	movs	r5, #0
 8004f04:	f104 0619 	add.w	r6, r4, #25
 8004f08:	e7f5      	b.n	8004ef6 <_printf_i+0x226>
 8004f0a:	bf00      	nop
 8004f0c:	080054d3 	.word	0x080054d3
 8004f10:	080054e4 	.word	0x080054e4

08004f14 <__swbuf_r>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	460e      	mov	r6, r1
 8004f18:	4614      	mov	r4, r2
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	b118      	cbz	r0, 8004f26 <__swbuf_r+0x12>
 8004f1e:	6a03      	ldr	r3, [r0, #32]
 8004f20:	b90b      	cbnz	r3, 8004f26 <__swbuf_r+0x12>
 8004f22:	f7ff fa8b 	bl	800443c <__sinit>
 8004f26:	69a3      	ldr	r3, [r4, #24]
 8004f28:	60a3      	str	r3, [r4, #8]
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	071a      	lsls	r2, r3, #28
 8004f2e:	d525      	bpl.n	8004f7c <__swbuf_r+0x68>
 8004f30:	6923      	ldr	r3, [r4, #16]
 8004f32:	b31b      	cbz	r3, 8004f7c <__swbuf_r+0x68>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	6922      	ldr	r2, [r4, #16]
 8004f38:	1a98      	subs	r0, r3, r2
 8004f3a:	6963      	ldr	r3, [r4, #20]
 8004f3c:	b2f6      	uxtb	r6, r6
 8004f3e:	4283      	cmp	r3, r0
 8004f40:	4637      	mov	r7, r6
 8004f42:	dc04      	bgt.n	8004f4e <__swbuf_r+0x3a>
 8004f44:	4621      	mov	r1, r4
 8004f46:	4628      	mov	r0, r5
 8004f48:	f7ff fcd0 	bl	80048ec <_fflush_r>
 8004f4c:	b9e0      	cbnz	r0, 8004f88 <__swbuf_r+0x74>
 8004f4e:	68a3      	ldr	r3, [r4, #8]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	60a3      	str	r3, [r4, #8]
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	701e      	strb	r6, [r3, #0]
 8004f5c:	6962      	ldr	r2, [r4, #20]
 8004f5e:	1c43      	adds	r3, r0, #1
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d004      	beq.n	8004f6e <__swbuf_r+0x5a>
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	07db      	lsls	r3, r3, #31
 8004f68:	d506      	bpl.n	8004f78 <__swbuf_r+0x64>
 8004f6a:	2e0a      	cmp	r6, #10
 8004f6c:	d104      	bne.n	8004f78 <__swbuf_r+0x64>
 8004f6e:	4621      	mov	r1, r4
 8004f70:	4628      	mov	r0, r5
 8004f72:	f7ff fcbb 	bl	80048ec <_fflush_r>
 8004f76:	b938      	cbnz	r0, 8004f88 <__swbuf_r+0x74>
 8004f78:	4638      	mov	r0, r7
 8004f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	4628      	mov	r0, r5
 8004f80:	f000 f806 	bl	8004f90 <__swsetup_r>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d0d5      	beq.n	8004f34 <__swbuf_r+0x20>
 8004f88:	f04f 37ff 	mov.w	r7, #4294967295
 8004f8c:	e7f4      	b.n	8004f78 <__swbuf_r+0x64>
	...

08004f90 <__swsetup_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4b2a      	ldr	r3, [pc, #168]	; (800503c <__swsetup_r+0xac>)
 8004f94:	4605      	mov	r5, r0
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	460c      	mov	r4, r1
 8004f9a:	b118      	cbz	r0, 8004fa4 <__swsetup_r+0x14>
 8004f9c:	6a03      	ldr	r3, [r0, #32]
 8004f9e:	b90b      	cbnz	r3, 8004fa4 <__swsetup_r+0x14>
 8004fa0:	f7ff fa4c 	bl	800443c <__sinit>
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004faa:	0718      	lsls	r0, r3, #28
 8004fac:	d422      	bmi.n	8004ff4 <__swsetup_r+0x64>
 8004fae:	06d9      	lsls	r1, r3, #27
 8004fb0:	d407      	bmi.n	8004fc2 <__swsetup_r+0x32>
 8004fb2:	2309      	movs	r3, #9
 8004fb4:	602b      	str	r3, [r5, #0]
 8004fb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004fba:	81a3      	strh	r3, [r4, #12]
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc0:	e034      	b.n	800502c <__swsetup_r+0x9c>
 8004fc2:	0758      	lsls	r0, r3, #29
 8004fc4:	d512      	bpl.n	8004fec <__swsetup_r+0x5c>
 8004fc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fc8:	b141      	cbz	r1, 8004fdc <__swsetup_r+0x4c>
 8004fca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fce:	4299      	cmp	r1, r3
 8004fd0:	d002      	beq.n	8004fd8 <__swsetup_r+0x48>
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f7ff fbb8 	bl	8004748 <_free_r>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	6363      	str	r3, [r4, #52]	; 0x34
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fe2:	81a3      	strh	r3, [r4, #12]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	6063      	str	r3, [r4, #4]
 8004fe8:	6923      	ldr	r3, [r4, #16]
 8004fea:	6023      	str	r3, [r4, #0]
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	f043 0308 	orr.w	r3, r3, #8
 8004ff2:	81a3      	strh	r3, [r4, #12]
 8004ff4:	6923      	ldr	r3, [r4, #16]
 8004ff6:	b94b      	cbnz	r3, 800500c <__swsetup_r+0x7c>
 8004ff8:	89a3      	ldrh	r3, [r4, #12]
 8004ffa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005002:	d003      	beq.n	800500c <__swsetup_r+0x7c>
 8005004:	4621      	mov	r1, r4
 8005006:	4628      	mov	r0, r5
 8005008:	f000 f884 	bl	8005114 <__smakebuf_r>
 800500c:	89a0      	ldrh	r0, [r4, #12]
 800500e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005012:	f010 0301 	ands.w	r3, r0, #1
 8005016:	d00a      	beq.n	800502e <__swsetup_r+0x9e>
 8005018:	2300      	movs	r3, #0
 800501a:	60a3      	str	r3, [r4, #8]
 800501c:	6963      	ldr	r3, [r4, #20]
 800501e:	425b      	negs	r3, r3
 8005020:	61a3      	str	r3, [r4, #24]
 8005022:	6923      	ldr	r3, [r4, #16]
 8005024:	b943      	cbnz	r3, 8005038 <__swsetup_r+0xa8>
 8005026:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800502a:	d1c4      	bne.n	8004fb6 <__swsetup_r+0x26>
 800502c:	bd38      	pop	{r3, r4, r5, pc}
 800502e:	0781      	lsls	r1, r0, #30
 8005030:	bf58      	it	pl
 8005032:	6963      	ldrpl	r3, [r4, #20]
 8005034:	60a3      	str	r3, [r4, #8]
 8005036:	e7f4      	b.n	8005022 <__swsetup_r+0x92>
 8005038:	2000      	movs	r0, #0
 800503a:	e7f7      	b.n	800502c <__swsetup_r+0x9c>
 800503c:	20000100 	.word	0x20000100

08005040 <_raise_r>:
 8005040:	291f      	cmp	r1, #31
 8005042:	b538      	push	{r3, r4, r5, lr}
 8005044:	4604      	mov	r4, r0
 8005046:	460d      	mov	r5, r1
 8005048:	d904      	bls.n	8005054 <_raise_r+0x14>
 800504a:	2316      	movs	r3, #22
 800504c:	6003      	str	r3, [r0, #0]
 800504e:	f04f 30ff 	mov.w	r0, #4294967295
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005056:	b112      	cbz	r2, 800505e <_raise_r+0x1e>
 8005058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800505c:	b94b      	cbnz	r3, 8005072 <_raise_r+0x32>
 800505e:	4620      	mov	r0, r4
 8005060:	f000 f830 	bl	80050c4 <_getpid_r>
 8005064:	462a      	mov	r2, r5
 8005066:	4601      	mov	r1, r0
 8005068:	4620      	mov	r0, r4
 800506a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800506e:	f000 b817 	b.w	80050a0 <_kill_r>
 8005072:	2b01      	cmp	r3, #1
 8005074:	d00a      	beq.n	800508c <_raise_r+0x4c>
 8005076:	1c59      	adds	r1, r3, #1
 8005078:	d103      	bne.n	8005082 <_raise_r+0x42>
 800507a:	2316      	movs	r3, #22
 800507c:	6003      	str	r3, [r0, #0]
 800507e:	2001      	movs	r0, #1
 8005080:	e7e7      	b.n	8005052 <_raise_r+0x12>
 8005082:	2400      	movs	r4, #0
 8005084:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005088:	4628      	mov	r0, r5
 800508a:	4798      	blx	r3
 800508c:	2000      	movs	r0, #0
 800508e:	e7e0      	b.n	8005052 <_raise_r+0x12>

08005090 <raise>:
 8005090:	4b02      	ldr	r3, [pc, #8]	; (800509c <raise+0xc>)
 8005092:	4601      	mov	r1, r0
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	f7ff bfd3 	b.w	8005040 <_raise_r>
 800509a:	bf00      	nop
 800509c:	20000100 	.word	0x20000100

080050a0 <_kill_r>:
 80050a0:	b538      	push	{r3, r4, r5, lr}
 80050a2:	4d07      	ldr	r5, [pc, #28]	; (80050c0 <_kill_r+0x20>)
 80050a4:	2300      	movs	r3, #0
 80050a6:	4604      	mov	r4, r0
 80050a8:	4608      	mov	r0, r1
 80050aa:	4611      	mov	r1, r2
 80050ac:	602b      	str	r3, [r5, #0]
 80050ae:	f7fb ffc1 	bl	8001034 <_kill>
 80050b2:	1c43      	adds	r3, r0, #1
 80050b4:	d102      	bne.n	80050bc <_kill_r+0x1c>
 80050b6:	682b      	ldr	r3, [r5, #0]
 80050b8:	b103      	cbz	r3, 80050bc <_kill_r+0x1c>
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	bd38      	pop	{r3, r4, r5, pc}
 80050be:	bf00      	nop
 80050c0:	20000a2c 	.word	0x20000a2c

080050c4 <_getpid_r>:
 80050c4:	f7fb bfae 	b.w	8001024 <_getpid>

080050c8 <__swhatbuf_r>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	460c      	mov	r4, r1
 80050cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d0:	2900      	cmp	r1, #0
 80050d2:	b096      	sub	sp, #88	; 0x58
 80050d4:	4615      	mov	r5, r2
 80050d6:	461e      	mov	r6, r3
 80050d8:	da0d      	bge.n	80050f6 <__swhatbuf_r+0x2e>
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80050e0:	f04f 0100 	mov.w	r1, #0
 80050e4:	bf0c      	ite	eq
 80050e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80050ea:	2340      	movne	r3, #64	; 0x40
 80050ec:	2000      	movs	r0, #0
 80050ee:	6031      	str	r1, [r6, #0]
 80050f0:	602b      	str	r3, [r5, #0]
 80050f2:	b016      	add	sp, #88	; 0x58
 80050f4:	bd70      	pop	{r4, r5, r6, pc}
 80050f6:	466a      	mov	r2, sp
 80050f8:	f000 f848 	bl	800518c <_fstat_r>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	dbec      	blt.n	80050da <__swhatbuf_r+0x12>
 8005100:	9901      	ldr	r1, [sp, #4]
 8005102:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005106:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800510a:	4259      	negs	r1, r3
 800510c:	4159      	adcs	r1, r3
 800510e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005112:	e7eb      	b.n	80050ec <__swhatbuf_r+0x24>

08005114 <__smakebuf_r>:
 8005114:	898b      	ldrh	r3, [r1, #12]
 8005116:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005118:	079d      	lsls	r5, r3, #30
 800511a:	4606      	mov	r6, r0
 800511c:	460c      	mov	r4, r1
 800511e:	d507      	bpl.n	8005130 <__smakebuf_r+0x1c>
 8005120:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	6123      	str	r3, [r4, #16]
 8005128:	2301      	movs	r3, #1
 800512a:	6163      	str	r3, [r4, #20]
 800512c:	b002      	add	sp, #8
 800512e:	bd70      	pop	{r4, r5, r6, pc}
 8005130:	ab01      	add	r3, sp, #4
 8005132:	466a      	mov	r2, sp
 8005134:	f7ff ffc8 	bl	80050c8 <__swhatbuf_r>
 8005138:	9900      	ldr	r1, [sp, #0]
 800513a:	4605      	mov	r5, r0
 800513c:	4630      	mov	r0, r6
 800513e:	f7ff f877 	bl	8004230 <_malloc_r>
 8005142:	b948      	cbnz	r0, 8005158 <__smakebuf_r+0x44>
 8005144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005148:	059a      	lsls	r2, r3, #22
 800514a:	d4ef      	bmi.n	800512c <__smakebuf_r+0x18>
 800514c:	f023 0303 	bic.w	r3, r3, #3
 8005150:	f043 0302 	orr.w	r3, r3, #2
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	e7e3      	b.n	8005120 <__smakebuf_r+0xc>
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	6020      	str	r0, [r4, #0]
 800515c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005160:	81a3      	strh	r3, [r4, #12]
 8005162:	9b00      	ldr	r3, [sp, #0]
 8005164:	6163      	str	r3, [r4, #20]
 8005166:	9b01      	ldr	r3, [sp, #4]
 8005168:	6120      	str	r0, [r4, #16]
 800516a:	b15b      	cbz	r3, 8005184 <__smakebuf_r+0x70>
 800516c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005170:	4630      	mov	r0, r6
 8005172:	f000 f81d 	bl	80051b0 <_isatty_r>
 8005176:	b128      	cbz	r0, 8005184 <__smakebuf_r+0x70>
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	f023 0303 	bic.w	r3, r3, #3
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	81a3      	strh	r3, [r4, #12]
 8005184:	89a3      	ldrh	r3, [r4, #12]
 8005186:	431d      	orrs	r5, r3
 8005188:	81a5      	strh	r5, [r4, #12]
 800518a:	e7cf      	b.n	800512c <__smakebuf_r+0x18>

0800518c <_fstat_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	4d07      	ldr	r5, [pc, #28]	; (80051ac <_fstat_r+0x20>)
 8005190:	2300      	movs	r3, #0
 8005192:	4604      	mov	r4, r0
 8005194:	4608      	mov	r0, r1
 8005196:	4611      	mov	r1, r2
 8005198:	602b      	str	r3, [r5, #0]
 800519a:	f7fb ffaa 	bl	80010f2 <_fstat>
 800519e:	1c43      	adds	r3, r0, #1
 80051a0:	d102      	bne.n	80051a8 <_fstat_r+0x1c>
 80051a2:	682b      	ldr	r3, [r5, #0]
 80051a4:	b103      	cbz	r3, 80051a8 <_fstat_r+0x1c>
 80051a6:	6023      	str	r3, [r4, #0]
 80051a8:	bd38      	pop	{r3, r4, r5, pc}
 80051aa:	bf00      	nop
 80051ac:	20000a2c 	.word	0x20000a2c

080051b0 <_isatty_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4d06      	ldr	r5, [pc, #24]	; (80051cc <_isatty_r+0x1c>)
 80051b4:	2300      	movs	r3, #0
 80051b6:	4604      	mov	r4, r0
 80051b8:	4608      	mov	r0, r1
 80051ba:	602b      	str	r3, [r5, #0]
 80051bc:	f7fb ffa9 	bl	8001112 <_isatty>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_isatty_r+0x1a>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_isatty_r+0x1a>
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	20000a2c 	.word	0x20000a2c

080051d0 <_init>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr

080051dc <_fini>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	bf00      	nop
 80051e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e2:	bc08      	pop	{r3}
 80051e4:	469e      	mov	lr, r3
 80051e6:	4770      	bx	lr
