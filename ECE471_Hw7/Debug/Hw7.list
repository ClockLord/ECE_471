
Hw7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08006398  08006398  00016398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c0  080066c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080066c0  080066c0  000166c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066c8  080066c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066c8  080066c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066cc  080066cc  000166cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080066d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040ac  20000010  080066e0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040bc  080066e0  000240bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000161eb  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032ae  00000000  00000000  0003626e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  00039520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee1  00000000  00000000  0003a840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d45  00000000  00000000  0003b721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017855  00000000  00000000  00063466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f89d4  00000000  00000000  0007acbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fa0  00000000  00000000  00173690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00178630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006380 	.word	0x08006380

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08006380 	.word	0x08006380

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000002c 	.word	0x2000002c
 800053c:	20000080 	.word	0x20000080

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b0a2      	sub	sp, #136	; 0x88
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fd1c 	bl	8000f82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f88b 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f921 	bl	8000794 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000552:	f000 f8ef 	bl	8000734 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000556:	4b37      	ldr	r3, [pc, #220]	; (8000634 <main+0xf4>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b35      	ldr	r3, [pc, #212]	; (8000634 <main+0xf4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f042 0220 	orr.w	r2, r2, #32
 8000564:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of morseQueue */
  osMessageQDef(morseQueue, 16, char);
 8000566:	4b34      	ldr	r3, [pc, #208]	; (8000638 <main+0xf8>)
 8000568:	f107 0478 	add.w	r4, r7, #120	; 0x78
 800056c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800056e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  morseQueueHandle = osMessageCreate(osMessageQ(morseQueue), NULL);
 8000572:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f003 fdf3 	bl	8004164 <osMessageCreate>
 800057e:	4603      	mov	r3, r0
 8000580:	4a2e      	ldr	r2, [pc, #184]	; (800063c <main+0xfc>)
 8000582:	6013      	str	r3, [r2, #0]

  /* definition and creation of recieveBuffer */
  osMessageQDef(recieveBuffer, 20, char);
 8000584:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <main+0x100>)
 8000586:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800058a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800058c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  recieveBufferHandle = osMessageCreate(osMessageQ(recieveBuffer), NULL);
 8000590:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fde4 	bl	8004164 <osMessageCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a29      	ldr	r2, [pc, #164]	; (8000644 <main+0x104>)
 80005a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of transcodeBuffer */
  osMessageQDef(transcodeBuffer, 20, char);
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <main+0x100>)
 80005a4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80005a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  transcodeBufferHandle = osMessageCreate(osMessageQ(transcodeBuffer), NULL);
 80005ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fdd5 	bl	8004164 <osMessageCreate>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a22      	ldr	r2, [pc, #136]	; (8000648 <main+0x108>)
 80005be:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005c0:	4b22      	ldr	r3, [pc, #136]	; (800064c <main+0x10c>)
 80005c2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005c6:	461d      	mov	r5, r3
 80005c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fd62 	bl	80040a4 <osThreadCreate>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <main+0x110>)
 80005e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of transcodeFunc */
  osThreadDef(transcodeFunc, startTranscodeFunc, osPriorityNormal, 0, 128);
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <main+0x114>)
 80005e8:	f107 0420 	add.w	r4, r7, #32
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transcodeFuncHandle = osThreadCreate(osThread(transcodeFunc), NULL);
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fd4f 	bl	80040a4 <osThreadCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	4a13      	ldr	r2, [pc, #76]	; (8000658 <main+0x118>)
 800060a:	6013      	str	r3, [r2, #0]

  /* definition and creation of morseCodeGenFun */
  osThreadDef(morseCodeGenFun, startMorseCodeGenFunc, osPriorityAboveNormal, 0, 128);
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <main+0x11c>)
 800060e:	1d3c      	adds	r4, r7, #4
 8000610:	461d      	mov	r5, r3
 8000612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000616:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  morseCodeGenFunHandle = osThreadCreate(osThread(morseCodeGenFun), NULL);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fd3e 	bl	80040a4 <osThreadCreate>
 8000628:	4603      	mov	r3, r0
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <main+0x120>)
 800062c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800062e:	f003 fd32 	bl	8004096 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000632:	e7fe      	b.n	8000632 <main+0xf2>
 8000634:	20000280 	.word	0x20000280
 8000638:	080064c0 	.word	0x080064c0
 800063c:	20000314 	.word	0x20000314
 8000640:	080064d0 	.word	0x080064d0
 8000644:	20000318 	.word	0x20000318
 8000648:	2000031c 	.word	0x2000031c
 800064c:	080064ec 	.word	0x080064ec
 8000650:	20000308 	.word	0x20000308
 8000654:	08006518 	.word	0x08006518
 8000658:	2000030c 	.word	0x2000030c
 800065c:	08006544 	.word	0x08006544
 8000660:	20000310 	.word	0x20000310

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f005 fe4a 	bl	800630c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000688:	f000 ffe2 	bl	8001650 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <SystemClock_Config+0xc8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a26      	ldr	r2, [pc, #152]	; (800072c <SystemClock_Config+0xc8>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <SystemClock_Config+0xc8>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xcc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ac:	4a20      	ldr	r2, [pc, #128]	; (8000730 <SystemClock_Config+0xcc>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <SystemClock_Config+0xcc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006d8:	2348      	movs	r3, #72	; 0x48
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006e0:	2303      	movs	r3, #3
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 ffc1 	bl	8001670 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f4:	f000 fa35 	bl	8000b62 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2102      	movs	r1, #2
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fa4f 	bl	8001bb8 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000720:	f000 fa1f 	bl	8000b62 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	; 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_USART3_UART_Init+0x58>)
 800073a:	4a15      	ldr	r2, [pc, #84]	; (8000790 <MX_USART3_UART_Init+0x5c>)
 800073c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000740:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000744:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_USART3_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART3_UART_Init+0x58>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART3_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000778:	f002 fb46 	bl	8002e08 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 f9ee 	bl	8000b62 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000280 	.word	0x20000280
 8000790:	40004800 	.word	0x40004800

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b77      	ldr	r3, [pc, #476]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a76      	ldr	r2, [pc, #472]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b74      	ldr	r3, [pc, #464]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	4b71      	ldr	r3, [pc, #452]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a70      	ldr	r2, [pc, #448]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b6e      	ldr	r3, [pc, #440]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b6b      	ldr	r3, [pc, #428]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a6a      	ldr	r2, [pc, #424]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b68      	ldr	r3, [pc, #416]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b65      	ldr	r3, [pc, #404]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a64      	ldr	r2, [pc, #400]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b62      	ldr	r3, [pc, #392]	; (8000988 <MX_GPIO_Init+0x1f4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	4b5f      	ldr	r3, [pc, #380]	; (8000988 <MX_GPIO_Init+0x1f4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a5e      	ldr	r2, [pc, #376]	; (8000988 <MX_GPIO_Init+0x1f4>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b5c      	ldr	r3, [pc, #368]	; (8000988 <MX_GPIO_Init+0x1f4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000822:	4b59      	ldr	r3, [pc, #356]	; (8000988 <MX_GPIO_Init+0x1f4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a58      	ldr	r2, [pc, #352]	; (8000988 <MX_GPIO_Init+0x1f4>)
 8000828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b56      	ldr	r3, [pc, #344]	; (8000988 <MX_GPIO_Init+0x1f4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000840:	4852      	ldr	r0, [pc, #328]	; (800098c <MX_GPIO_Init+0x1f8>)
 8000842:	f000 feeb 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2140      	movs	r1, #64	; 0x40
 800084a:	4851      	ldr	r0, [pc, #324]	; (8000990 <MX_GPIO_Init+0x1fc>)
 800084c:	f000 fee6 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000856:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	484b      	ldr	r0, [pc, #300]	; (8000994 <MX_GPIO_Init+0x200>)
 8000868:	f000 fd2c 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800086c:	2332      	movs	r3, #50	; 0x32
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800087c:	230b      	movs	r3, #11
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4843      	ldr	r0, [pc, #268]	; (8000994 <MX_GPIO_Init+0x200>)
 8000888:	f000 fd1c 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800088c:	2386      	movs	r3, #134	; 0x86
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800089c:	230b      	movs	r3, #11
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	483c      	ldr	r0, [pc, #240]	; (8000998 <MX_GPIO_Init+0x204>)
 80008a8:	f000 fd0c 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ac:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4831      	ldr	r0, [pc, #196]	; (800098c <MX_GPIO_Init+0x1f8>)
 80008c6:	f000 fcfd 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008dc:	230b      	movs	r3, #11
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4829      	ldr	r0, [pc, #164]	; (800098c <MX_GPIO_Init+0x1f8>)
 80008e8:	f000 fcec 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4823      	ldr	r0, [pc, #140]	; (8000990 <MX_GPIO_Init+0x1fc>)
 8000904:	f000 fcde 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	481d      	ldr	r0, [pc, #116]	; (8000990 <MX_GPIO_Init+0x1fc>)
 800091c:	f000 fcd2 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000920:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000932:	230a      	movs	r3, #10
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4816      	ldr	r0, [pc, #88]	; (8000998 <MX_GPIO_Init+0x204>)
 800093e:	f000 fcc1 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4810      	ldr	r0, [pc, #64]	; (8000998 <MX_GPIO_Init+0x204>)
 8000958:	f000 fcb4 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800095c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800096e:	230b      	movs	r3, #11
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_GPIO_Init+0x1fc>)
 800097a:	f000 fca3 	bl	80012c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097e:	bf00      	nop
 8000980:	3730      	adds	r7, #48	; 0x30
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40020400 	.word	0x40020400
 8000990:	40021800 	.word	0x40021800
 8000994:	40020800 	.word	0x40020800
 8000998:	40020000 	.word	0x40020000

0800099c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f003 fbc9 	bl	800413c <osDelay>
 80009aa:	e7fb      	b.n	80009a4 <StartDefaultTask+0x8>

080009ac <startTranscodeFunc>:
* @brief Function implementing the transcodeFunc thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTranscodeFunc */
void startTranscodeFunc(void const *argument) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN startTranscodeFunc */
    /* Infinite loop */
    for (;;) {

        BaseType_t Status = pdFALSE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
        uint8_t data;

        if (xQueueReceive(recieveBufferHandle, &data, 1000 / portTICK_PERIOD_MS)) {
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <startTranscodeFunc+0x58>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f107 010b 	add.w	r1, r7, #11
 80009c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009c4:	4618      	mov	r0, r3
 80009c6:	f003 ff9d 	bl	8004904 <xQueueReceive>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d0f1      	beq.n	80009b4 <startTranscodeFunc+0x8>
            // Transmit data from receiveBufferHandle to transcodeBufferHandle
            Status = xQueueSend(transcodeBufferHandle, &data, 1);
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <startTranscodeFunc+0x5c>)
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	f107 010b 	add.w	r1, r7, #11
 80009d8:	2300      	movs	r3, #0
 80009da:	2201      	movs	r2, #1
 80009dc:	f003 fdec 	bl	80045b8 <xQueueGenericSend>
 80009e0:	60f8      	str	r0, [r7, #12]

            // Toggle GPIO pin based on queue status
            if (!Status) {
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d106      	bne.n	80009f6 <startTranscodeFunc+0x4a>

                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ee:	4807      	ldr	r0, [pc, #28]	; (8000a0c <startTranscodeFunc+0x60>)
 80009f0:	f000 fe14 	bl	800161c <HAL_GPIO_WritePin>
 80009f4:	e7de      	b.n	80009b4 <startTranscodeFunc+0x8>
            }
            else {

                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fc:	4803      	ldr	r0, [pc, #12]	; (8000a0c <startTranscodeFunc+0x60>)
 80009fe:	f000 fe0d 	bl	800161c <HAL_GPIO_WritePin>
    for (;;) {
 8000a02:	e7d7      	b.n	80009b4 <startTranscodeFunc+0x8>
 8000a04:	20000318 	.word	0x20000318
 8000a08:	2000031c 	.word	0x2000031c
 8000a0c:	40020400 	.word	0x40020400

08000a10 <startMorseCodeGenFunc>:
* @brief Function implementing the morseCodeGenFun thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMorseCodeGenFunc */
void startMorseCodeGenFunc(void const *argument) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
    /* Main loop for generating Morse code */
    for (;;) {
        char character;
        unsigned char tableIndex;
        unsigned char morseIndex;
        BaseType_t queueStatus = pdFALSE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]

        // Wait for a character from the input queue
        while (queueStatus == pdFALSE) {
 8000a1c:	e016      	b.n	8000a4c <startMorseCodeGenFunc+0x3c>
            queueStatus = xQueueReceive(transcodeBufferHandle, (void *)&character, 1);
 8000a1e:	4b46      	ldr	r3, [pc, #280]	; (8000b38 <startMorseCodeGenFunc+0x128>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f107 010f 	add.w	r1, r7, #15
 8000a26:	2201      	movs	r2, #1
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 ff6b 	bl	8004904 <xQueueReceive>
 8000a2e:	6138      	str	r0, [r7, #16]
            if (!queueStatus) {
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d105      	bne.n	8000a42 <startMorseCodeGenFunc+0x32>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	2101      	movs	r1, #1
 8000a3a:	4840      	ldr	r0, [pc, #256]	; (8000b3c <startMorseCodeGenFunc+0x12c>)
 8000a3c:	f000 fdee 	bl	800161c <HAL_GPIO_WritePin>
 8000a40:	e004      	b.n	8000a4c <startMorseCodeGenFunc+0x3c>
            } else {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2101      	movs	r1, #1
 8000a46:	483d      	ldr	r0, [pc, #244]	; (8000b3c <startMorseCodeGenFunc+0x12c>)
 8000a48:	f000 fde8 	bl	800161c <HAL_GPIO_WritePin>
        while (queueStatus == pdFALSE) {
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0e5      	beq.n	8000a1e <startMorseCodeGenFunc+0xe>
            }
        }

        // Convert lowercase to uppercase and check for exit signal
        if (character >= 'a' && character <= 'z') {
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	2b60      	cmp	r3, #96	; 0x60
 8000a56:	d907      	bls.n	8000a68 <startMorseCodeGenFunc+0x58>
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	2b7a      	cmp	r3, #122	; 0x7a
 8000a5c:	d804      	bhi.n	8000a68 <startMorseCodeGenFunc+0x58>
            character = character - 'a' + 'A';
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	3b20      	subs	r3, #32
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	73fb      	strb	r3, [r7, #15]
 8000a66:	e002      	b.n	8000a6e <startMorseCodeGenFunc+0x5e>
        } else if (character == 1 /* ^A */) {
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d060      	beq.n	8000b30 <startMorseCodeGenFunc+0x120>
            break; // Graceful exit strategy
        }

        // Find the Morse code for the character
        for (tableIndex = 0; tableIndex < 40; tableIndex++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	75fb      	strb	r3, [r7, #23]
 8000a72:	e009      	b.n	8000a88 <startMorseCodeGenFunc+0x78>
            if (cxTABLE[tableIndex].letter == character) {
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	4a32      	ldr	r2, [pc, #200]	; (8000b40 <startMorseCodeGenFunc+0x130>)
 8000a78:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d006      	beq.n	8000a90 <startMorseCodeGenFunc+0x80>
        for (tableIndex = 0; tableIndex < 40; tableIndex++) {
 8000a82:	7dfb      	ldrb	r3, [r7, #23]
 8000a84:	3301      	adds	r3, #1
 8000a86:	75fb      	strb	r3, [r7, #23]
 8000a88:	7dfb      	ldrb	r3, [r7, #23]
 8000a8a:	2b27      	cmp	r3, #39	; 0x27
 8000a8c:	d9f2      	bls.n	8000a74 <startMorseCodeGenFunc+0x64>
 8000a8e:	e000      	b.n	8000a92 <startMorseCodeGenFunc+0x82>
                break;
 8000a90:	bf00      	nop
            }
        }

        if (tableIndex < 40) {
 8000a92:	7dfb      	ldrb	r3, [r7, #23]
 8000a94:	2b27      	cmp	r3, #39	; 0x27
 8000a96:	d8bf      	bhi.n	8000a18 <startMorseCodeGenFunc+0x8>
            // Transmit the Morse code signals
            for (morseIndex = 0; cxTABLE[tableIndex].morse[morseIndex] != '\0'; morseIndex++) {
 8000a98:	2300      	movs	r3, #0
 8000a9a:	75bb      	strb	r3, [r7, #22]
 8000a9c:	e03d      	b.n	8000b1a <startMorseCodeGenFunc+0x10a>
                switch (cxTABLE[tableIndex].morse[morseIndex]) {
 8000a9e:	7dfb      	ldrb	r3, [r7, #23]
 8000aa0:	4a27      	ldr	r2, [pc, #156]	; (8000b40 <startMorseCodeGenFunc+0x130>)
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	7dbb      	ldrb	r3, [r7, #22]
 8000aaa:	4413      	add	r3, r2
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b2e      	cmp	r3, #46	; 0x2e
 8000ab0:	d006      	beq.n	8000ac0 <startMorseCodeGenFunc+0xb0>
 8000ab2:	2b2e      	cmp	r3, #46	; 0x2e
 8000ab4:	dc2b      	bgt.n	8000b0e <startMorseCodeGenFunc+0xfe>
 8000ab6:	2b20      	cmp	r3, #32
 8000ab8:	d024      	beq.n	8000b04 <startMorseCodeGenFunc+0xf4>
 8000aba:	2b2d      	cmp	r3, #45	; 0x2d
 8000abc:	d011      	beq.n	8000ae2 <startMorseCodeGenFunc+0xd2>
 8000abe:	e026      	b.n	8000b0e <startMorseCodeGenFunc+0xfe>
                case '.':
                    // Transmit a dot
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	481d      	ldr	r0, [pc, #116]	; (8000b3c <startMorseCodeGenFunc+0x12c>)
 8000ac6:	f000 fda9 	bl	800161c <HAL_GPIO_WritePin>
                    osDelay(60);
 8000aca:	203c      	movs	r0, #60	; 0x3c
 8000acc:	f003 fb36 	bl	800413c <osDelay>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2180      	movs	r1, #128	; 0x80
 8000ad4:	4819      	ldr	r0, [pc, #100]	; (8000b3c <startMorseCodeGenFunc+0x12c>)
 8000ad6:	f000 fda1 	bl	800161c <HAL_GPIO_WritePin>
                    osDelay(60);
 8000ada:	203c      	movs	r0, #60	; 0x3c
 8000adc:	f003 fb2e 	bl	800413c <osDelay>
                    break;
 8000ae0:	e015      	b.n	8000b0e <startMorseCodeGenFunc+0xfe>
                case '-':
                    // Transmit a dash
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	4815      	ldr	r0, [pc, #84]	; (8000b3c <startMorseCodeGenFunc+0x12c>)
 8000ae8:	f000 fd98 	bl	800161c <HAL_GPIO_WritePin>
                    osDelay(180);
 8000aec:	20b4      	movs	r0, #180	; 0xb4
 8000aee:	f003 fb25 	bl	800413c <osDelay>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	4811      	ldr	r0, [pc, #68]	; (8000b3c <startMorseCodeGenFunc+0x12c>)
 8000af8:	f000 fd90 	bl	800161c <HAL_GPIO_WritePin>
                    osDelay(60);
 8000afc:	203c      	movs	r0, #60	; 0x3c
 8000afe:	f003 fb1d 	bl	800413c <osDelay>
                    break;
 8000b02:	e004      	b.n	8000b0e <startMorseCodeGenFunc+0xfe>
                case ' ':
                    // Gap between words
                    osDelay(420);
 8000b04:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8000b08:	f003 fb18 	bl	800413c <osDelay>
                    break;
 8000b0c:	bf00      	nop
                }
                osDelay(180);
 8000b0e:	20b4      	movs	r0, #180	; 0xb4
 8000b10:	f003 fb14 	bl	800413c <osDelay>
            for (morseIndex = 0; cxTABLE[tableIndex].morse[morseIndex] != '\0'; morseIndex++) {
 8000b14:	7dbb      	ldrb	r3, [r7, #22]
 8000b16:	3301      	adds	r3, #1
 8000b18:	75bb      	strb	r3, [r7, #22]
 8000b1a:	7dfb      	ldrb	r3, [r7, #23]
 8000b1c:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <startMorseCodeGenFunc+0x130>)
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	4413      	add	r3, r2
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	7dbb      	ldrb	r3, [r7, #22]
 8000b26:	4413      	add	r3, r2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1b7      	bne.n	8000a9e <startMorseCodeGenFunc+0x8e>
    for (;;) {
 8000b2e:	e773      	b.n	8000a18 <startMorseCodeGenFunc+0x8>
            }
        }
    }
    /* USER CODE END startMorseCodeGenFunc */
}
 8000b30:	bf00      	nop
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2000031c 	.word	0x2000031c
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	08006568 	.word	0x08006568

08000b44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b54:	d101      	bne.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b56:	f000 fa21 	bl	8000f9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b66:	b672      	cpsid	i
}
 8000b68:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <Error_Handler+0x8>

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b94:	6453      	str	r3, [r2, #68]	; 0x44
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	210f      	movs	r1, #15
 8000ba6:	f06f 0001 	mvn.w	r0, #1
 8000baa:	f000 facf 	bl	800114c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0ae      	sub	sp, #184	; 0xb8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd4:	f107 0320 	add.w	r3, r7, #32
 8000bd8:	2284      	movs	r2, #132	; 0x84
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f005 fb95 	bl	800630c <memset>
  if(huart->Instance==USART2)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a5b      	ldr	r2, [pc, #364]	; (8000d54 <HAL_UART_MspInit+0x198>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d164      	bne.n	8000cb6 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf4:	f107 0320 	add.w	r3, r7, #32
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 fa35 	bl	8002068 <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c04:	f7ff ffad 	bl	8000b62 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c08:	4b53      	ldr	r3, [pc, #332]	; (8000d58 <HAL_UART_MspInit+0x19c>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	4a52      	ldr	r2, [pc, #328]	; (8000d58 <HAL_UART_MspInit+0x19c>)
 8000c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c12:	6413      	str	r3, [r2, #64]	; 0x40
 8000c14:	4b50      	ldr	r3, [pc, #320]	; (8000d58 <HAL_UART_MspInit+0x19c>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	61fb      	str	r3, [r7, #28]
 8000c1e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b4d      	ldr	r3, [pc, #308]	; (8000d58 <HAL_UART_MspInit+0x19c>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	4a4c      	ldr	r2, [pc, #304]	; (8000d58 <HAL_UART_MspInit+0x19c>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2c:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <HAL_UART_MspInit+0x19c>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	61bb      	str	r3, [r7, #24]
 8000c36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c38:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <HAL_UART_MspInit+0x19c>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4a46      	ldr	r2, [pc, #280]	; (8000d58 <HAL_UART_MspInit+0x19c>)
 8000c3e:	f043 0308 	orr.w	r3, r3, #8
 8000c42:	6313      	str	r3, [r2, #48]	; 0x30
 8000c44:	4b44      	ldr	r3, [pc, #272]	; (8000d58 <HAL_UART_MspInit+0x19c>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	f003 0308 	and.w	r3, r3, #8
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c50:	2308      	movs	r3, #8
 8000c52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4839      	ldr	r0, [pc, #228]	; (8000d5c <HAL_UART_MspInit+0x1a0>)
 8000c76:	f000 fb25 	bl	80012c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c7a:	2320      	movs	r3, #32
 8000c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c92:	2307      	movs	r3, #7
 8000c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4830      	ldr	r0, [pc, #192]	; (8000d60 <HAL_UART_MspInit+0x1a4>)
 8000ca0:	f000 fb10 	bl	80012c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2105      	movs	r1, #5
 8000ca8:	2026      	movs	r0, #38	; 0x26
 8000caa:	f000 fa4f 	bl	800114c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cae:	2026      	movs	r0, #38	; 0x26
 8000cb0:	f000 fa68 	bl	8001184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cb4:	e049      	b.n	8000d4a <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART3)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a2a      	ldr	r2, [pc, #168]	; (8000d64 <HAL_UART_MspInit+0x1a8>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d144      	bne.n	8000d4a <HAL_UART_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cca:	f107 0320 	add.w	r3, r7, #32
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 f9ca 	bl	8002068 <HAL_RCCEx_PeriphCLKConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_UART_MspInit+0x122>
      Error_Handler();
 8000cda:	f7ff ff42 	bl	8000b62 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cde:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <HAL_UART_MspInit+0x19c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <HAL_UART_MspInit+0x19c>)
 8000ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_UART_MspInit+0x19c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_UART_MspInit+0x19c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <HAL_UART_MspInit+0x19c>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_UART_MspInit+0x19c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d32:	4619      	mov	r1, r3
 8000d34:	480a      	ldr	r0, [pc, #40]	; (8000d60 <HAL_UART_MspInit+0x1a4>)
 8000d36:	f000 fac5 	bl	80012c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2105      	movs	r1, #5
 8000d3e:	2027      	movs	r0, #39	; 0x27
 8000d40:	f000 fa04 	bl	800114c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d44:	2027      	movs	r0, #39	; 0x27
 8000d46:	f000 fa1d 	bl	8001184 <HAL_NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	37b8      	adds	r7, #184	; 0xb8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40004400 	.word	0x40004400
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40020c00 	.word	0x40020c00
 8000d64:	40004800 	.word	0x40004800

08000d68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08e      	sub	sp, #56	; 0x38
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000d78:	4b34      	ldr	r3, [pc, #208]	; (8000e4c <HAL_InitTick+0xe4>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	4a33      	ldr	r2, [pc, #204]	; (8000e4c <HAL_InitTick+0xe4>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6413      	str	r3, [r2, #64]	; 0x40
 8000d84:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <HAL_InitTick+0xe4>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d90:	f107 0210 	add.w	r2, r7, #16
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 f932 	bl	8002004 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000da0:	6a3b      	ldr	r3, [r7, #32]
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d103      	bne.n	8000db2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000daa:	f001 f903 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8000dae:	6378      	str	r0, [r7, #52]	; 0x34
 8000db0:	e004      	b.n	8000dbc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000db2:	f001 f8ff 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8000db6:	4603      	mov	r3, r0
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dbe:	4a24      	ldr	r2, [pc, #144]	; (8000e50 <HAL_InitTick+0xe8>)
 8000dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc4:	0c9b      	lsrs	r3, r3, #18
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <HAL_InitTick+0xec>)
 8000dcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000dd2:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <HAL_InitTick+0xec>)
 8000dd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dd8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000dda:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <HAL_InitTick+0xec>)
 8000ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dde:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <HAL_InitTick+0xec>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_InitTick+0xec>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <HAL_InitTick+0xec>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000df2:	4818      	ldr	r0, [pc, #96]	; (8000e54 <HAL_InitTick+0xec>)
 8000df4:	f001 fd28 	bl	8002848 <HAL_TIM_Base_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000dfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d11b      	bne.n	8000e3e <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000e06:	4813      	ldr	r0, [pc, #76]	; (8000e54 <HAL_InitTick+0xec>)
 8000e08:	f001 fd80 	bl	800290c <HAL_TIM_Base_Start_IT>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d111      	bne.n	8000e3e <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e1a:	201c      	movs	r0, #28
 8000e1c:	f000 f9b2 	bl	8001184 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b0f      	cmp	r3, #15
 8000e24:	d808      	bhi.n	8000e38 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000e26:	2200      	movs	r2, #0
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	201c      	movs	r0, #28
 8000e2c:	f000 f98e 	bl	800114c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e30:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <HAL_InitTick+0xf0>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e002      	b.n	8000e3e <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3738      	adds	r7, #56	; 0x38
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	431bde83 	.word	0x431bde83
 8000e54:	20000320 	.word	0x20000320
 8000e58:	20000004 	.word	0x20000004

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <NMI_Handler+0x4>

08000e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <MemManage_Handler+0x4>

08000e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <TIM2_IRQHandler+0x10>)
 8000e8e:	f001 fdb5 	bl	80029fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000320 	.word	0x20000320

08000e9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	BaseType_t xSchedulerChanged = pdFALSE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
	uint8_t buffer;
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, &buffer, 1, 0);
 8000ea6:	1df9      	adds	r1, r7, #7
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4814      	ldr	r0, [pc, #80]	; (8000f00 <USART3_IRQHandler+0x64>)
 8000eae:	f002 f87c 	bl	8002faa <HAL_UART_Receive>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]

	if (HAL_OK == status) {
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d10e      	bne.n	8000eda <USART3_IRQHandler+0x3e>
	    // Send data to recieveBufferHandle from an ISR context
	    xQueueSendFromISR(recieveBufferHandle, &buffer, &xSchedulerChanged);
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <USART3_IRQHandler+0x68>)
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	f107 0208 	add.w	r2, r7, #8
 8000ec4:	1df9      	adds	r1, r7, #7
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f003 fc7c 	bl	80047c4 <xQueueGenericSendFromISR>
	    HAL_UART_Transmit(&huart3, &buffer, 1, HAL_MAX_DELAY);
 8000ecc:	1df9      	adds	r1, r7, #7
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	480a      	ldr	r0, [pc, #40]	; (8000f00 <USART3_IRQHandler+0x64>)
 8000ed6:	f001 ffe5 	bl	8002ea4 <HAL_UART_Transmit>
	}

	portYIELD_FROM_ISR(xSchedulerChanged);
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d007      	beq.n	8000ef0 <USART3_IRQHandler+0x54>
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <USART3_IRQHandler+0x6c>)
 8000ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	f3bf 8f4f 	dsb	sy
 8000eec:	f3bf 8f6f 	isb	sy
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <USART3_IRQHandler+0x64>)
 8000ef2:	f002 f91f 	bl	8003134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000280 	.word	0x20000280
 8000f04:	20000318 	.word	0x20000318
 8000f08:	e000ed04 	.word	0xe000ed04

08000f0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f36:	490e      	ldr	r1, [pc, #56]	; (8000f70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f38:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f3c:	e002      	b.n	8000f44 <LoopCopyDataInit>

08000f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f42:	3304      	adds	r3, #4

08000f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f48:	d3f9      	bcc.n	8000f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f4c:	4c0b      	ldr	r4, [pc, #44]	; (8000f7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f50:	e001      	b.n	8000f56 <LoopFillZerobss>

08000f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f54:	3204      	adds	r2, #4

08000f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f58:	d3fb      	bcc.n	8000f52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f5a:	f7ff ffd7 	bl	8000f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f005 f9dd 	bl	800631c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f62:	f7ff faed 	bl	8000540 <main>
  bx  lr    
 8000f66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f74:	080066d0 	.word	0x080066d0
  ldr r2, =_sbss
 8000f78:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f7c:	200040bc 	.word	0x200040bc

08000f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC_IRQHandler>

08000f82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f86:	2003      	movs	r0, #3
 8000f88:	f000 f8d5 	bl	8001136 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8c:	200f      	movs	r0, #15
 8000f8e:	f7ff feeb 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f92:	f7ff fdeb 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	2000036c 	.word	0x2000036c

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	2000036c 	.word	0x2000036c

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <__NVIC_SetPriorityGrouping+0x40>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	4313      	orrs	r3, r2
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x40>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00
 8001020:	05fa0000 	.word	0x05fa0000

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	; (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ff4c 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800115e:	f7ff ff61 	bl	8001024 <__NVIC_GetPriorityGrouping>
 8001162:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	68b9      	ldr	r1, [r7, #8]
 8001168:	6978      	ldr	r0, [r7, #20]
 800116a:	f7ff ffb1 	bl	80010d0 <NVIC_EncodePriority>
 800116e:	4602      	mov	r2, r0
 8001170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff80 	bl	800107c <__NVIC_SetPriority>
}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff54 	bl	8001040 <__NVIC_EnableIRQ>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011ae:	f7ff ff09 	bl	8000fc4 <HAL_GetTick>
 80011b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d008      	beq.n	80011d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e052      	b.n	8001278 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0216 	bic.w	r2, r2, #22
 80011e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	695a      	ldr	r2, [r3, #20]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d103      	bne.n	8001202 <HAL_DMA_Abort+0x62>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0208 	bic.w	r2, r2, #8
 8001210:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0201 	bic.w	r2, r2, #1
 8001220:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001222:	e013      	b.n	800124c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001224:	f7ff fece 	bl	8000fc4 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b05      	cmp	r3, #5
 8001230:	d90c      	bls.n	800124c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2220      	movs	r2, #32
 8001236:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2203      	movs	r2, #3
 800123c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e015      	b.n	8001278 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1e4      	bne.n	8001224 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125e:	223f      	movs	r2, #63	; 0x3f
 8001260:	409a      	lsls	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d004      	beq.n	800129e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e00c      	b.n	80012b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2205      	movs	r2, #5
 80012a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0201 	bic.w	r2, r2, #1
 80012b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	e175      	b.n	80015d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012e4:	2201      	movs	r2, #1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 8164 	bne.w	80015ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2b01      	cmp	r3, #1
 800130c:	d005      	beq.n	800131a <HAL_GPIO_Init+0x56>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d130      	bne.n	800137c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001350:	2201      	movs	r2, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 0201 	and.w	r2, r3, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b03      	cmp	r3, #3
 8001386:	d017      	beq.n	80013b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d123      	bne.n	800140c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	08da      	lsrs	r2, r3, #3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3208      	adds	r2, #8
 8001406:	69b9      	ldr	r1, [r7, #24]
 8001408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0203 	and.w	r2, r3, #3
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80be 	beq.w	80015ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <HAL_GPIO_Init+0x324>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a65      	ldr	r2, [pc, #404]	; (80015e8 <HAL_GPIO_Init+0x324>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b63      	ldr	r3, [pc, #396]	; (80015e8 <HAL_GPIO_Init+0x324>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001466:	4a61      	ldr	r2, [pc, #388]	; (80015ec <HAL_GPIO_Init+0x328>)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	220f      	movs	r2, #15
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a58      	ldr	r2, [pc, #352]	; (80015f0 <HAL_GPIO_Init+0x32c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d037      	beq.n	8001502 <HAL_GPIO_Init+0x23e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a57      	ldr	r2, [pc, #348]	; (80015f4 <HAL_GPIO_Init+0x330>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d031      	beq.n	80014fe <HAL_GPIO_Init+0x23a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a56      	ldr	r2, [pc, #344]	; (80015f8 <HAL_GPIO_Init+0x334>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d02b      	beq.n	80014fa <HAL_GPIO_Init+0x236>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a55      	ldr	r2, [pc, #340]	; (80015fc <HAL_GPIO_Init+0x338>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d025      	beq.n	80014f6 <HAL_GPIO_Init+0x232>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a54      	ldr	r2, [pc, #336]	; (8001600 <HAL_GPIO_Init+0x33c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d01f      	beq.n	80014f2 <HAL_GPIO_Init+0x22e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a53      	ldr	r2, [pc, #332]	; (8001604 <HAL_GPIO_Init+0x340>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d019      	beq.n	80014ee <HAL_GPIO_Init+0x22a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a52      	ldr	r2, [pc, #328]	; (8001608 <HAL_GPIO_Init+0x344>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d013      	beq.n	80014ea <HAL_GPIO_Init+0x226>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a51      	ldr	r2, [pc, #324]	; (800160c <HAL_GPIO_Init+0x348>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d00d      	beq.n	80014e6 <HAL_GPIO_Init+0x222>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a50      	ldr	r2, [pc, #320]	; (8001610 <HAL_GPIO_Init+0x34c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d007      	beq.n	80014e2 <HAL_GPIO_Init+0x21e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4f      	ldr	r2, [pc, #316]	; (8001614 <HAL_GPIO_Init+0x350>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d101      	bne.n	80014de <HAL_GPIO_Init+0x21a>
 80014da:	2309      	movs	r3, #9
 80014dc:	e012      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014de:	230a      	movs	r3, #10
 80014e0:	e010      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014e2:	2308      	movs	r3, #8
 80014e4:	e00e      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014e6:	2307      	movs	r3, #7
 80014e8:	e00c      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014ea:	2306      	movs	r3, #6
 80014ec:	e00a      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014ee:	2305      	movs	r3, #5
 80014f0:	e008      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014f2:	2304      	movs	r3, #4
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014f6:	2303      	movs	r3, #3
 80014f8:	e004      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e002      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_GPIO_Init+0x240>
 8001502:	2300      	movs	r3, #0
 8001504:	69fa      	ldr	r2, [r7, #28]
 8001506:	f002 0203 	and.w	r2, r2, #3
 800150a:	0092      	lsls	r2, r2, #2
 800150c:	4093      	lsls	r3, r2
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001514:	4935      	ldr	r1, [pc, #212]	; (80015ec <HAL_GPIO_Init+0x328>)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001522:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_GPIO_Init+0x354>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001546:	4a34      	ldr	r2, [pc, #208]	; (8001618 <HAL_GPIO_Init+0x354>)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800154c:	4b32      	ldr	r3, [pc, #200]	; (8001618 <HAL_GPIO_Init+0x354>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001570:	4a29      	ldr	r2, [pc, #164]	; (8001618 <HAL_GPIO_Init+0x354>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001576:	4b28      	ldr	r3, [pc, #160]	; (8001618 <HAL_GPIO_Init+0x354>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800159a:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <HAL_GPIO_Init+0x354>)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HAL_GPIO_Init+0x354>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <HAL_GPIO_Init+0x354>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	2b0f      	cmp	r3, #15
 80015d4:	f67f ae86 	bls.w	80012e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40013800 	.word	0x40013800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40020400 	.word	0x40020400
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40021000 	.word	0x40021000
 8001604:	40021400 	.word	0x40021400
 8001608:	40021800 	.word	0x40021800
 800160c:	40021c00 	.word	0x40021c00
 8001610:	40022000 	.word	0x40022000
 8001614:	40022400 	.word	0x40022400
 8001618:	40013c00 	.word	0x40013c00

0800161c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
 8001628:	4613      	mov	r3, r2
 800162a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800162c:	787b      	ldrb	r3, [r7, #1]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001638:	e003      	b.n	8001642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800163a:	887b      	ldrh	r3, [r7, #2]
 800163c:	041a      	lsls	r2, r3, #16
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	619a      	str	r2, [r3, #24]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40007000 	.word	0x40007000

08001670 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e291      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8087 	beq.w	80017a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001694:	4b96      	ldr	r3, [pc, #600]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b04      	cmp	r3, #4
 800169e:	d00c      	beq.n	80016ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016a0:	4b93      	ldr	r3, [pc, #588]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d112      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62>
 80016ac:	4b90      	ldr	r3, [pc, #576]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016b8:	d10b      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ba:	4b8d      	ldr	r3, [pc, #564]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d06c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x130>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d168      	bne.n	80017a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e26b      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x7a>
 80016dc:	4b84      	ldr	r3, [pc, #528]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a83      	ldr	r2, [pc, #524]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80016e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e02e      	b.n	8001748 <HAL_RCC_OscConfig+0xd8>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x9c>
 80016f2:	4b7f      	ldr	r3, [pc, #508]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a7e      	ldr	r2, [pc, #504]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80016f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b7c      	ldr	r3, [pc, #496]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a7b      	ldr	r2, [pc, #492]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0xd8>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0xc0>
 8001716:	4b76      	ldr	r3, [pc, #472]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a75      	ldr	r2, [pc, #468]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b73      	ldr	r3, [pc, #460]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a72      	ldr	r2, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xd8>
 8001730:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b6c      	ldr	r3, [pc, #432]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a6b      	ldr	r2, [pc, #428]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fc38 	bl	8000fc4 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fc34 	bl	8000fc4 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e21f      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b61      	ldr	r3, [pc, #388]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xe8>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff fc24 	bl	8000fc4 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fc20 	bl	8000fc4 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e20b      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x110>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d069      	beq.n	8001882 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ae:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ba:	4b4d      	ldr	r3, [pc, #308]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d11c      	bne.n	8001800 <HAL_RCC_OscConfig+0x190>
 80017c6:	4b4a      	ldr	r3, [pc, #296]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x17a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e1df      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	493d      	ldr	r1, [pc, #244]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	e040      	b.n	8001882 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d023      	beq.n	8001850 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001808:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a38      	ldr	r2, [pc, #224]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fbd6 	bl	8000fc4 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181c:	f7ff fbd2 	bl	8000fc4 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e1bd      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183a:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4929      	ldr	r1, [pc, #164]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
 800184e:	e018      	b.n	8001882 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001850:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fbb2 	bl	8000fc4 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fbae 	bl	8000fc4 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e199      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d038      	beq.n	8001900 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d019      	beq.n	80018ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800189a:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff fb8f 	bl	8000fc4 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018aa:	f7ff fb8b 	bl	8000fc4 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e176      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80018be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x23a>
 80018c8:	e01a      	b.n	8001900 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80018cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ce:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d6:	f7ff fb75 	bl	8000fc4 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018de:	f7ff fb71 	bl	8000fc4 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d903      	bls.n	80018f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e15c      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>
 80018f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f4:	4b91      	ldr	r3, [pc, #580]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 80018f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ee      	bne.n	80018de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80a4 	beq.w	8001a56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190e:	4b8b      	ldr	r3, [pc, #556]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10d      	bne.n	8001936 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b88      	ldr	r3, [pc, #544]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a87      	ldr	r2, [pc, #540]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b85      	ldr	r3, [pc, #532]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001932:	2301      	movs	r3, #1
 8001934:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001936:	4b82      	ldr	r3, [pc, #520]	; (8001b40 <HAL_RCC_OscConfig+0x4d0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d118      	bne.n	8001974 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001942:	4b7f      	ldr	r3, [pc, #508]	; (8001b40 <HAL_RCC_OscConfig+0x4d0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a7e      	ldr	r2, [pc, #504]	; (8001b40 <HAL_RCC_OscConfig+0x4d0>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194e:	f7ff fb39 	bl	8000fc4 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001956:	f7ff fb35 	bl	8000fc4 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b64      	cmp	r3, #100	; 0x64
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e120      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001968:	4b75      	ldr	r3, [pc, #468]	; (8001b40 <HAL_RCC_OscConfig+0x4d0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x31a>
 800197c:	4b6f      	ldr	r3, [pc, #444]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a6e      	ldr	r2, [pc, #440]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
 8001988:	e02d      	b.n	80019e6 <HAL_RCC_OscConfig+0x376>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x33c>
 8001992:	4b6a      	ldr	r3, [pc, #424]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001996:	4a69      	ldr	r2, [pc, #420]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	6713      	str	r3, [r2, #112]	; 0x70
 800199e:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	4a66      	ldr	r2, [pc, #408]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 80019a4:	f023 0304 	bic.w	r3, r3, #4
 80019a8:	6713      	str	r3, [r2, #112]	; 0x70
 80019aa:	e01c      	b.n	80019e6 <HAL_RCC_OscConfig+0x376>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d10c      	bne.n	80019ce <HAL_RCC_OscConfig+0x35e>
 80019b4:	4b61      	ldr	r3, [pc, #388]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 80019b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b8:	4a60      	ldr	r2, [pc, #384]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	6713      	str	r3, [r2, #112]	; 0x70
 80019c0:	4b5e      	ldr	r3, [pc, #376]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	4a5d      	ldr	r2, [pc, #372]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6713      	str	r3, [r2, #112]	; 0x70
 80019cc:	e00b      	b.n	80019e6 <HAL_RCC_OscConfig+0x376>
 80019ce:	4b5b      	ldr	r3, [pc, #364]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d2:	4a5a      	ldr	r2, [pc, #360]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	6713      	str	r3, [r2, #112]	; 0x70
 80019da:	4b58      	ldr	r3, [pc, #352]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 80019dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019de:	4a57      	ldr	r2, [pc, #348]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 80019e0:	f023 0304 	bic.w	r3, r3, #4
 80019e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d015      	beq.n	8001a1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7ff fae9 	bl	8000fc4 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f7ff fae5 	bl	8000fc4 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e0ce      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0c:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0ee      	beq.n	80019f6 <HAL_RCC_OscConfig+0x386>
 8001a18:	e014      	b.n	8001a44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1a:	f7ff fad3 	bl	8000fc4 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a20:	e00a      	b.n	8001a38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a22:	f7ff facf 	bl	8000fc4 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e0b8      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a38:	4b40      	ldr	r3, [pc, #256]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1ee      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a44:	7dfb      	ldrb	r3, [r7, #23]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d105      	bne.n	8001a56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4a:	4b3c      	ldr	r3, [pc, #240]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a3b      	ldr	r2, [pc, #236]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 80a4 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a60:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d06b      	beq.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d149      	bne.n	8001b08 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a74:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a30      	ldr	r2, [pc, #192]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7ff faa0 	bl	8000fc4 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff fa9c 	bl	8000fc4 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e087      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9a:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69da      	ldr	r2, [r3, #28]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	019b      	lsls	r3, r3, #6
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	085b      	lsrs	r3, r3, #1
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	041b      	lsls	r3, r3, #16
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	061b      	lsls	r3, r3, #24
 8001aca:	4313      	orrs	r3, r2
 8001acc:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001ace:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ad2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fa70 	bl	8000fc4 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff fa6c 	bl	8000fc4 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e057      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x478>
 8001b06:	e04f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff fa56 	bl	8000fc4 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff fa52 	bl	8000fc4 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e03d      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2e:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x4ac>
 8001b3a:	e035      	b.n	8001ba8 <HAL_RCC_OscConfig+0x538>
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_RCC_OscConfig+0x544>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d028      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d121      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d11a      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b74:	4013      	ands	r3, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d111      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	085b      	lsrs	r3, r3, #1
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800

08001bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0d0      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d910      	bls.n	8001c00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b67      	ldr	r3, [pc, #412]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 020f 	bic.w	r2, r3, #15
 8001be6:	4965      	ldr	r1, [pc, #404]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	4b63      	ldr	r3, [pc, #396]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0b8      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d020      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c18:	4b59      	ldr	r3, [pc, #356]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4a58      	ldr	r2, [pc, #352]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c30:	4b53      	ldr	r3, [pc, #332]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4a52      	ldr	r2, [pc, #328]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3c:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	494d      	ldr	r1, [pc, #308]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d040      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d115      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e07f      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7a:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e073      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e06b      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9a:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f023 0203 	bic.w	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4936      	ldr	r1, [pc, #216]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cac:	f7ff f98a 	bl	8000fc4 <HAL_GetTick>
 8001cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f7ff f986 	bl	8000fc4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e053      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 020c 	and.w	r2, r3, #12
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d1eb      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d210      	bcs.n	8001d0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 020f 	bic.w	r2, r3, #15
 8001cf2:	4922      	ldr	r1, [pc, #136]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e032      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4916      	ldr	r1, [pc, #88]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d009      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	490e      	ldr	r1, [pc, #56]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d4a:	f000 f821 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	490a      	ldr	r1, [pc, #40]	; (8001d84 <HAL_RCC_ClockConfig+0x1cc>)
 8001d5c:	5ccb      	ldrb	r3, [r1, r3]
 8001d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d62:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1d0>)
 8001d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_RCC_ClockConfig+0x1d4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fffc 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023c00 	.word	0x40023c00
 8001d80:	40023800 	.word	0x40023800
 8001d84:	080066a8 	.word	0x080066a8
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	20000004 	.word	0x20000004

08001d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d94:	b094      	sub	sp, #80	; 0x50
 8001d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001da0:	2300      	movs	r3, #0
 8001da2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da8:	4b79      	ldr	r3, [pc, #484]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d00d      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	f200 80e1 	bhi.w	8001f7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d003      	beq.n	8001dca <HAL_RCC_GetSysClockFreq+0x3a>
 8001dc2:	e0db      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dc4:	4b73      	ldr	r3, [pc, #460]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dc8:	e0db      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dca:	4b73      	ldr	r3, [pc, #460]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dce:	e0d8      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dd0:	4b6f      	ldr	r3, [pc, #444]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001dda:	4b6d      	ldr	r3, [pc, #436]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d063      	beq.n	8001eae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de6:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	099b      	lsrs	r3, r3, #6
 8001dec:	2200      	movs	r2, #0
 8001dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8001df0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e02:	4622      	mov	r2, r4
 8001e04:	462b      	mov	r3, r5
 8001e06:	f04f 0000 	mov.w	r0, #0
 8001e0a:	f04f 0100 	mov.w	r1, #0
 8001e0e:	0159      	lsls	r1, r3, #5
 8001e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e14:	0150      	lsls	r0, r2, #5
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	1a51      	subs	r1, r2, r1
 8001e1e:	6139      	str	r1, [r7, #16]
 8001e20:	4629      	mov	r1, r5
 8001e22:	eb63 0301 	sbc.w	r3, r3, r1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e34:	4659      	mov	r1, fp
 8001e36:	018b      	lsls	r3, r1, #6
 8001e38:	4651      	mov	r1, sl
 8001e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e3e:	4651      	mov	r1, sl
 8001e40:	018a      	lsls	r2, r1, #6
 8001e42:	4651      	mov	r1, sl
 8001e44:	ebb2 0801 	subs.w	r8, r2, r1
 8001e48:	4659      	mov	r1, fp
 8001e4a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e62:	4690      	mov	r8, r2
 8001e64:	4699      	mov	r9, r3
 8001e66:	4623      	mov	r3, r4
 8001e68:	eb18 0303 	adds.w	r3, r8, r3
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	462b      	mov	r3, r5
 8001e70:	eb49 0303 	adc.w	r3, r9, r3
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e82:	4629      	mov	r1, r5
 8001e84:	024b      	lsls	r3, r1, #9
 8001e86:	4621      	mov	r1, r4
 8001e88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	024a      	lsls	r2, r1, #9
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e96:	2200      	movs	r2, #0
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ea0:	f7fe f9b6 	bl	8000210 <__aeabi_uldivmod>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eac:	e058      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eae:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	099b      	lsrs	r3, r3, #6
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	4611      	mov	r1, r2
 8001eba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ebe:	623b      	str	r3, [r7, #32]
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ec8:	4642      	mov	r2, r8
 8001eca:	464b      	mov	r3, r9
 8001ecc:	f04f 0000 	mov.w	r0, #0
 8001ed0:	f04f 0100 	mov.w	r1, #0
 8001ed4:	0159      	lsls	r1, r3, #5
 8001ed6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eda:	0150      	lsls	r0, r2, #5
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ee6:	4649      	mov	r1, r9
 8001ee8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ef8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001efc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f00:	ebb2 040a 	subs.w	r4, r2, sl
 8001f04:	eb63 050b 	sbc.w	r5, r3, fp
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	00eb      	lsls	r3, r5, #3
 8001f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f16:	00e2      	lsls	r2, r4, #3
 8001f18:	4614      	mov	r4, r2
 8001f1a:	461d      	mov	r5, r3
 8001f1c:	4643      	mov	r3, r8
 8001f1e:	18e3      	adds	r3, r4, r3
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	464b      	mov	r3, r9
 8001f24:	eb45 0303 	adc.w	r3, r5, r3
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f36:	4629      	mov	r1, r5
 8001f38:	028b      	lsls	r3, r1, #10
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f40:	4621      	mov	r1, r4
 8001f42:	028a      	lsls	r2, r1, #10
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	61fa      	str	r2, [r7, #28]
 8001f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f54:	f7fe f95c 	bl	8000210 <__aeabi_uldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f7a:	e002      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3750      	adds	r7, #80	; 0x50
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	00f42400 	.word	0x00f42400
 8001f98:	007a1200 	.word	0x007a1200

08001f9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fb8:	f7ff fff0 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4903      	ldr	r1, [pc, #12]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	080066b8 	.word	0x080066b8

08001fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fe0:	f7ff ffdc 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	0b5b      	lsrs	r3, r3, #13
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	4903      	ldr	r1, [pc, #12]	; (8002000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40023800 	.word	0x40023800
 8002000:	080066b8 	.word	0x080066b8

08002004 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	220f      	movs	r2, #15
 8002012:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_RCC_GetClockConfig+0x5c>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0203 	and.w	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <HAL_RCC_GetClockConfig+0x5c>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_RCC_GetClockConfig+0x5c>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_RCC_GetClockConfig+0x5c>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	08db      	lsrs	r3, r3, #3
 800203e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <HAL_RCC_GetClockConfig+0x60>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 020f 	and.w	r2, r3, #15
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	601a      	str	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40023c00 	.word	0x40023c00

08002068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d012      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002090:	4b69      	ldr	r3, [pc, #420]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4a68      	ldr	r2, [pc, #416]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002096:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800209a:	6093      	str	r3, [r2, #8]
 800209c:	4b66      	ldr	r3, [pc, #408]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a4:	4964      	ldr	r1, [pc, #400]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80020b2:	2301      	movs	r3, #1
 80020b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d017      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020c2:	4b5d      	ldr	r3, [pc, #372]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d0:	4959      	ldr	r1, [pc, #356]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020e0:	d101      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80020e2:	2301      	movs	r3, #1
 80020e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80020ee:	2301      	movs	r3, #1
 80020f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d017      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020fe:	4b4e      	ldr	r3, [pc, #312]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002104:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	494a      	ldr	r1, [pc, #296]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800211c:	d101      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800211e:	2301      	movs	r3, #1
 8002120:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800212a:	2301      	movs	r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800213a:	2301      	movs	r3, #1
 800213c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 808b 	beq.w	8002262 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800214c:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	4a39      	ldr	r2, [pc, #228]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002156:	6413      	str	r3, [r2, #64]	; 0x40
 8002158:	4b37      	ldr	r3, [pc, #220]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002164:	4b35      	ldr	r3, [pc, #212]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a34      	ldr	r2, [pc, #208]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800216a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002170:	f7fe ff28 	bl	8000fc4 <HAL_GetTick>
 8002174:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002178:	f7fe ff24 	bl	8000fc4 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e357      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800218a:	4b2c      	ldr	r3, [pc, #176]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002196:	4b28      	ldr	r3, [pc, #160]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800219e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d035      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d02e      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021b4:	4b20      	ldr	r3, [pc, #128]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ca:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	4a1a      	ldr	r2, [pc, #104]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021d6:	4a18      	ldr	r2, [pc, #96]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d114      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7fe feec 	bl	8000fc4 <HAL_GetTick>
 80021ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ee:	e00a      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f0:	f7fe fee8 	bl	8000fc4 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e319      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0ee      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800221e:	d111      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800222e:	400b      	ands	r3, r1
 8002230:	4901      	ldr	r1, [pc, #4]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
 8002236:	e00b      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002238:	40023800 	.word	0x40023800
 800223c:	40007000 	.word	0x40007000
 8002240:	0ffffcff 	.word	0x0ffffcff
 8002244:	4baa      	ldr	r3, [pc, #680]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4aa9      	ldr	r2, [pc, #676]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800224a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800224e:	6093      	str	r3, [r2, #8]
 8002250:	4ba7      	ldr	r3, [pc, #668]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002252:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225c:	49a4      	ldr	r1, [pc, #656]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800225e:	4313      	orrs	r3, r2
 8002260:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	d010      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800226e:	4ba0      	ldr	r3, [pc, #640]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002274:	4a9e      	ldr	r2, [pc, #632]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800227a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800227e:	4b9c      	ldr	r3, [pc, #624]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002280:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	4999      	ldr	r1, [pc, #612]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800229c:	4b94      	ldr	r3, [pc, #592]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022aa:	4991      	ldr	r1, [pc, #580]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022be:	4b8c      	ldr	r3, [pc, #560]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022cc:	4988      	ldr	r1, [pc, #544]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022e0:	4b83      	ldr	r3, [pc, #524]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ee:	4980      	ldr	r1, [pc, #512]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002302:	4b7b      	ldr	r3, [pc, #492]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	4977      	ldr	r1, [pc, #476]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002324:	4b72      	ldr	r3, [pc, #456]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	496f      	ldr	r1, [pc, #444]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002346:	4b6a      	ldr	r3, [pc, #424]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	f023 020c 	bic.w	r2, r3, #12
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002354:	4966      	ldr	r1, [pc, #408]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002368:	4b61      	ldr	r3, [pc, #388]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	495e      	ldr	r1, [pc, #376]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800238a:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002390:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002398:	4955      	ldr	r1, [pc, #340]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ac:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	494d      	ldr	r1, [pc, #308]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80023ce:	4b48      	ldr	r3, [pc, #288]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023dc:	4944      	ldr	r1, [pc, #272]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80023f0:	4b3f      	ldr	r3, [pc, #252]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fe:	493c      	ldr	r1, [pc, #240]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002412:	4b37      	ldr	r3, [pc, #220]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002418:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002420:	4933      	ldr	r1, [pc, #204]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002434:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002442:	492b      	ldr	r1, [pc, #172]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d011      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002456:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002464:	4922      	ldr	r1, [pc, #136]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002474:	d101      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002476:	2301      	movs	r3, #1
 8002478:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002486:	2301      	movs	r3, #1
 8002488:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002496:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a4:	4912      	ldr	r1, [pc, #72]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024b8:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024c8:	4909      	ldr	r1, [pc, #36]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d006      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 80d9 	beq.w	8002696 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024e4:	4b02      	ldr	r3, [pc, #8]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a01      	ldr	r2, [pc, #4]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024ee:	e001      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80024f0:	40023800 	.word	0x40023800
 80024f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f6:	f7fe fd65 	bl	8000fc4 <HAL_GetTick>
 80024fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024fe:	f7fe fd61 	bl	8000fc4 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b64      	cmp	r3, #100	; 0x64
 800250a:	d901      	bls.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e194      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002510:	4b6c      	ldr	r3, [pc, #432]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d021      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252c:	2b00      	cmp	r3, #0
 800252e:	d11d      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002530:	4b64      	ldr	r3, [pc, #400]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002536:	0c1b      	lsrs	r3, r3, #16
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800253e:	4b61      	ldr	r3, [pc, #388]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002544:	0e1b      	lsrs	r3, r3, #24
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	019a      	lsls	r2, r3, #6
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	041b      	lsls	r3, r3, #16
 8002556:	431a      	orrs	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	061b      	lsls	r3, r3, #24
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	071b      	lsls	r3, r3, #28
 8002564:	4957      	ldr	r1, [pc, #348]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002580:	d00a      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800258a:	2b00      	cmp	r3, #0
 800258c:	d02e      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002596:	d129      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002598:	4b4a      	ldr	r3, [pc, #296]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800259a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ac:	0f1b      	lsrs	r3, r3, #28
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	019a      	lsls	r2, r3, #6
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	041b      	lsls	r3, r3, #16
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	061b      	lsls	r3, r3, #24
 80025c6:	431a      	orrs	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	071b      	lsls	r3, r3, #28
 80025cc:	493d      	ldr	r1, [pc, #244]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80025d4:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025da:	f023 021f 	bic.w	r2, r3, #31
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	3b01      	subs	r3, #1
 80025e4:	4937      	ldr	r1, [pc, #220]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d01d      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025f8:	4b32      	ldr	r3, [pc, #200]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025fe:	0e1b      	lsrs	r3, r3, #24
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002606:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800260c:	0f1b      	lsrs	r3, r3, #28
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	019a      	lsls	r2, r3, #6
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	041b      	lsls	r3, r3, #16
 8002620:	431a      	orrs	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	061b      	lsls	r3, r3, #24
 8002626:	431a      	orrs	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	071b      	lsls	r3, r3, #28
 800262c:	4925      	ldr	r1, [pc, #148]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d011      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	019a      	lsls	r2, r3, #6
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	041b      	lsls	r3, r3, #16
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	061b      	lsls	r3, r3, #24
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	071b      	lsls	r3, r3, #28
 800265c:	4919      	ldr	r1, [pc, #100]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002664:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800266a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800266e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002670:	f7fe fca8 	bl	8000fc4 <HAL_GetTick>
 8002674:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002678:	f7fe fca4 	bl	8000fc4 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e0d7      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2b01      	cmp	r3, #1
 800269a:	f040 80cd 	bne.w	8002838 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026aa:	f7fe fc8b 	bl	8000fc4 <HAL_GetTick>
 80026ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026b2:	f7fe fc87 	bl	8000fc4 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b64      	cmp	r3, #100	; 0x64
 80026be:	d903      	bls.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e0ba      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80026c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026c8:	4b5e      	ldr	r3, [pc, #376]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026d4:	d0ed      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x682>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d02e      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d12a      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026fe:	4b51      	ldr	r3, [pc, #324]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800270c:	4b4d      	ldr	r3, [pc, #308]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	0f1b      	lsrs	r3, r3, #28
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	019a      	lsls	r2, r3, #6
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	041b      	lsls	r3, r3, #16
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	061b      	lsls	r3, r3, #24
 800272c:	431a      	orrs	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	071b      	lsls	r3, r3, #28
 8002732:	4944      	ldr	r1, [pc, #272]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800273a:	4b42      	ldr	r3, [pc, #264]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800273c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002740:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	3b01      	subs	r3, #1
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	493d      	ldr	r1, [pc, #244]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d022      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002764:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002768:	d11d      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800276a:	4b36      	ldr	r3, [pc, #216]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002770:	0e1b      	lsrs	r3, r3, #24
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002778:	4b32      	ldr	r3, [pc, #200]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	0f1b      	lsrs	r3, r3, #28
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	019a      	lsls	r2, r3, #6
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	041b      	lsls	r3, r3, #16
 8002792:	431a      	orrs	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	061b      	lsls	r3, r3, #24
 8002798:	431a      	orrs	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	071b      	lsls	r3, r3, #28
 800279e:	4929      	ldr	r1, [pc, #164]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d028      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	0e1b      	lsrs	r3, r3, #24
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	0c1b      	lsrs	r3, r3, #16
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	019a      	lsls	r2, r3, #6
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	041b      	lsls	r3, r3, #16
 80027d8:	431a      	orrs	r2, r3
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	071b      	lsls	r3, r3, #28
 80027e6:	4917      	ldr	r1, [pc, #92]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	4911      	ldr	r1, [pc, #68]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800280a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002810:	f7fe fbd8 	bl	8000fc4 <HAL_GetTick>
 8002814:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002818:	f7fe fbd4 	bl	8000fc4 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	; 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e007      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002836:	d1ef      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800

08002848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e049      	b.n	80028ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f841 	bl	80028f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3304      	adds	r3, #4
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f000 fa00 	bl	8002c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d001      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e054      	b.n	80029ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a26      	ldr	r2, [pc, #152]	; (80029dc <HAL_TIM_Base_Start_IT+0xd0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d022      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x80>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294e:	d01d      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x80>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d018      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x80>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d013      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x80>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1f      	ldr	r2, [pc, #124]	; (80029e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00e      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x80>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1e      	ldr	r2, [pc, #120]	; (80029ec <HAL_TIM_Base_Start_IT+0xe0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x80>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d004      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x80>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d115      	bne.n	80029b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_TIM_Base_Start_IT+0xec>)
 8002994:	4013      	ands	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b06      	cmp	r3, #6
 800299c:	d015      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0xbe>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a4:	d011      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0201 	orr.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b6:	e008      	b.n	80029ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	e000      	b.n	80029cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40010000 	.word	0x40010000
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800
 80029e8:	40000c00 	.word	0x40000c00
 80029ec:	40010400 	.word	0x40010400
 80029f0:	40014000 	.word	0x40014000
 80029f4:	40001800 	.word	0x40001800
 80029f8:	00010007 	.word	0x00010007

080029fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d122      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d11b      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0202 	mvn.w	r2, #2
 8002a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f905 	bl	8002c4e <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f8f7 	bl	8002c3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f908 	bl	8002c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d122      	bne.n	8002aac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d11b      	bne.n	8002aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0204 	mvn.w	r2, #4
 8002a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2202      	movs	r2, #2
 8002a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f8db 	bl	8002c4e <HAL_TIM_IC_CaptureCallback>
 8002a98:	e005      	b.n	8002aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f8cd 	bl	8002c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f8de 	bl	8002c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d122      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d11b      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0208 	mvn.w	r2, #8
 8002ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8b1 	bl	8002c4e <HAL_TIM_IC_CaptureCallback>
 8002aec:	e005      	b.n	8002afa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f8a3 	bl	8002c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f8b4 	bl	8002c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	2b10      	cmp	r3, #16
 8002b0c:	d122      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d11b      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0210 	mvn.w	r2, #16
 8002b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2208      	movs	r2, #8
 8002b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f887 	bl	8002c4e <HAL_TIM_IC_CaptureCallback>
 8002b40:	e005      	b.n	8002b4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f879 	bl	8002c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f88a 	bl	8002c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d10e      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d107      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0201 	mvn.w	r2, #1
 8002b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fd ffe2 	bl	8000b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8a:	2b80      	cmp	r3, #128	; 0x80
 8002b8c:	d10e      	bne.n	8002bac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b98:	2b80      	cmp	r3, #128	; 0x80
 8002b9a:	d107      	bne.n	8002bac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f91a 	bl	8002de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bba:	d10e      	bne.n	8002bda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc6:	2b80      	cmp	r3, #128	; 0x80
 8002bc8:	d107      	bne.n	8002bda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f90d 	bl	8002df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b40      	cmp	r3, #64	; 0x40
 8002be6:	d10e      	bne.n	8002c06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf2:	2b40      	cmp	r3, #64	; 0x40
 8002bf4:	d107      	bne.n	8002c06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f838 	bl	8002c76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d10e      	bne.n	8002c32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d107      	bne.n	8002c32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f06f 0220 	mvn.w	r2, #32
 8002c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f8cd 	bl	8002dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a40      	ldr	r2, [pc, #256]	; (8002da0 <TIM_Base_SetConfig+0x114>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d013      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002caa:	d00f      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3d      	ldr	r2, [pc, #244]	; (8002da4 <TIM_Base_SetConfig+0x118>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00b      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a3c      	ldr	r2, [pc, #240]	; (8002da8 <TIM_Base_SetConfig+0x11c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d007      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3b      	ldr	r2, [pc, #236]	; (8002dac <TIM_Base_SetConfig+0x120>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <TIM_Base_SetConfig+0x40>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a3a      	ldr	r2, [pc, #232]	; (8002db0 <TIM_Base_SetConfig+0x124>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d108      	bne.n	8002cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a2f      	ldr	r2, [pc, #188]	; (8002da0 <TIM_Base_SetConfig+0x114>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d02b      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cec:	d027      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a2c      	ldr	r2, [pc, #176]	; (8002da4 <TIM_Base_SetConfig+0x118>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d023      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a2b      	ldr	r2, [pc, #172]	; (8002da8 <TIM_Base_SetConfig+0x11c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01f      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a2a      	ldr	r2, [pc, #168]	; (8002dac <TIM_Base_SetConfig+0x120>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01b      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <TIM_Base_SetConfig+0x124>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d017      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a28      	ldr	r2, [pc, #160]	; (8002db4 <TIM_Base_SetConfig+0x128>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d013      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <TIM_Base_SetConfig+0x12c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00f      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a26      	ldr	r2, [pc, #152]	; (8002dbc <TIM_Base_SetConfig+0x130>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00b      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a25      	ldr	r2, [pc, #148]	; (8002dc0 <TIM_Base_SetConfig+0x134>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <TIM_Base_SetConfig+0x138>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <TIM_Base_SetConfig+0x13c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d108      	bne.n	8002d50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <TIM_Base_SetConfig+0x114>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d003      	beq.n	8002d84 <TIM_Base_SetConfig+0xf8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <TIM_Base_SetConfig+0x124>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d103      	bne.n	8002d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	615a      	str	r2, [r3, #20]
}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800
 8002dac:	40000c00 	.word	0x40000c00
 8002db0:	40010400 	.word	0x40010400
 8002db4:	40014000 	.word	0x40014000
 8002db8:	40014400 	.word	0x40014400
 8002dbc:	40014800 	.word	0x40014800
 8002dc0:	40001800 	.word	0x40001800
 8002dc4:	40001c00 	.word	0x40001c00
 8002dc8:	40002000 	.word	0x40002000

08002dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e040      	b.n	8002e9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fd fec6 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2224      	movs	r2, #36	; 0x24
 8002e34:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0201 	bic.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fc66 	bl	8003718 <UART_SetConfig>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e022      	b.n	8002e9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 febe 	bl	8003be0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 ff45 	bl	8003d24 <UART_CheckIdleState>
 8002e9a:	4603      	mov	r3, r0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d171      	bne.n	8002fa0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_UART_Transmit+0x24>
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e06a      	b.n	8002fa2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2221      	movs	r2, #33	; 0x21
 8002ed8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eda:	f7fe f873 	bl	8000fc4 <HAL_GetTick>
 8002ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	88fa      	ldrh	r2, [r7, #6]
 8002ee4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	88fa      	ldrh	r2, [r7, #6]
 8002eec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef8:	d108      	bne.n	8002f0c <HAL_UART_Transmit+0x68>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d104      	bne.n	8002f0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	e003      	b.n	8002f14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f14:	e02c      	b.n	8002f70 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 ff36 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e038      	b.n	8002fa2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	3302      	adds	r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	e007      	b.n	8002f5e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1cc      	bne.n	8002f16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2200      	movs	r2, #0
 8002f84:	2140      	movs	r1, #64	; 0x40
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 ff03 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e005      	b.n	8002fa2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b08a      	sub	sp, #40	; 0x28
 8002fae:	af02      	add	r7, sp, #8
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	f040 80b1 	bne.w	8003128 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HAL_UART_Receive+0x28>
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0a9      	b.n	800312a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2222      	movs	r2, #34	; 0x22
 8002fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fec:	f7fd ffea 	bl	8000fc4 <HAL_GetTick>
 8002ff0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	88fa      	ldrh	r2, [r7, #6]
 8002ff6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	88fa      	ldrh	r2, [r7, #6]
 8002ffe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300a:	d10e      	bne.n	800302a <HAL_UART_Receive+0x80>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_UART_Receive+0x76>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f240 12ff 	movw	r2, #511	; 0x1ff
 800301a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800301e:	e02d      	b.n	800307c <HAL_UART_Receive+0xd2>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	22ff      	movs	r2, #255	; 0xff
 8003024:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003028:	e028      	b.n	800307c <HAL_UART_Receive+0xd2>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10d      	bne.n	800304e <HAL_UART_Receive+0xa4>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_Receive+0x9a>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	22ff      	movs	r2, #255	; 0xff
 800303e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003042:	e01b      	b.n	800307c <HAL_UART_Receive+0xd2>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	227f      	movs	r2, #127	; 0x7f
 8003048:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800304c:	e016      	b.n	800307c <HAL_UART_Receive+0xd2>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003056:	d10d      	bne.n	8003074 <HAL_UART_Receive+0xca>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d104      	bne.n	800306a <HAL_UART_Receive+0xc0>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	227f      	movs	r2, #127	; 0x7f
 8003064:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003068:	e008      	b.n	800307c <HAL_UART_Receive+0xd2>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	223f      	movs	r2, #63	; 0x3f
 800306e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003072:	e003      	b.n	800307c <HAL_UART_Receive+0xd2>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003082:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308c:	d108      	bne.n	80030a0 <HAL_UART_Receive+0xf6>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d104      	bne.n	80030a0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	e003      	b.n	80030a8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80030a8:	e032      	b.n	8003110 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2120      	movs	r1, #32
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fe6c 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e032      	b.n	800312a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10c      	bne.n	80030e4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	8a7b      	ldrh	r3, [r7, #18]
 80030d4:	4013      	ands	r3, r2
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	3302      	adds	r3, #2
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	e00c      	b.n	80030fe <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	8a7b      	ldrh	r3, [r7, #18]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	4013      	ands	r3, r2
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	3301      	adds	r3, #1
 80030fc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1c6      	bne.n	80030aa <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	e000      	b.n	800312a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003128:	2302      	movs	r3, #2
  }
}
 800312a:	4618      	mov	r0, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b0ba      	sub	sp, #232	; 0xe8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800315a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800315e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003162:	4013      	ands	r3, r2
 8003164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003168:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d115      	bne.n	800319c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00f      	beq.n	800319c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8297 	beq.w	80036c0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
      }
      return;
 800319a:	e291      	b.n	80036c0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800319c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8117 	beq.w	80033d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80031b6:	4b85      	ldr	r3, [pc, #532]	; (80033cc <HAL_UART_IRQHandler+0x298>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 810a 	beq.w	80033d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d011      	beq.n	80031f0 <HAL_UART_IRQHandler+0xbc>
 80031cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00b      	beq.n	80031f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2201      	movs	r2, #1
 80031de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e6:	f043 0201 	orr.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d011      	beq.n	8003220 <HAL_UART_IRQHandler+0xec>
 80031fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00b      	beq.n	8003220 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2202      	movs	r2, #2
 800320e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003216:	f043 0204 	orr.w	r2, r3, #4
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d011      	beq.n	8003250 <HAL_UART_IRQHandler+0x11c>
 800322c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00b      	beq.n	8003250 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2204      	movs	r2, #4
 800323e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003246:	f043 0202 	orr.w	r2, r3, #2
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d017      	beq.n	800328c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800325c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d105      	bne.n	8003274 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800326c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2208      	movs	r2, #8
 800327a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003282:	f043 0208 	orr.w	r2, r3, #8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800328c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <HAL_UART_IRQHandler+0x18a>
 8003298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800329c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00c      	beq.n	80032be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 81fd 	beq.w	80036c4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d005      	beq.n	8003316 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800330a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800330e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003312:	2b00      	cmp	r3, #0
 8003314:	d04f      	beq.n	80033b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fe01 	bl	8003f1e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	d141      	bne.n	80033ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3308      	adds	r3, #8
 8003330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003338:	e853 3f00 	ldrex	r3, [r3]
 800333c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3308      	adds	r3, #8
 8003352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800335a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003366:	e841 2300 	strex	r3, r2, [r1]
 800336a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800336e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1d9      	bne.n	800332a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337a:	2b00      	cmp	r3, #0
 800337c:	d013      	beq.n	80033a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003382:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <HAL_UART_IRQHandler+0x29c>)
 8003384:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd ff78 	bl	8001280 <HAL_DMA_Abort_IT>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d017      	beq.n	80033c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80033a0:	4610      	mov	r0, r2
 80033a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	e00f      	b.n	80033c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f9a0 	bl	80036ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	e00b      	b.n	80033c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f99c 	bl	80036ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b4:	e007      	b.n	80033c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f998 	bl	80036ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80033c4:	e17e      	b.n	80036c4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c6:	bf00      	nop
    return;
 80033c8:	e17c      	b.n	80036c4 <HAL_UART_IRQHandler+0x590>
 80033ca:	bf00      	nop
 80033cc:	04000120 	.word	0x04000120
 80033d0:	08003fe7 	.word	0x08003fe7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f040 814c 	bne.w	8003676 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8145 	beq.w	8003676 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 813e 	beq.w	8003676 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2210      	movs	r2, #16
 8003400:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	f040 80b6 	bne.w	800357e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800341e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8150 	beq.w	80036c8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800342e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003432:	429a      	cmp	r2, r3
 8003434:	f080 8148 	bcs.w	80036c8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800343e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344c:	f000 8086 	beq.w	800355c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800346c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800347a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800347e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003486:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1da      	bne.n	8003450 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3308      	adds	r3, #8
 80034a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3308      	adds	r3, #8
 80034ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e1      	bne.n	800349a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3308      	adds	r3, #8
 80034dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3308      	adds	r3, #8
 80034f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e3      	bne.n	80034d6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800352a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352c:	f023 0310 	bic.w	r3, r3, #16
 8003530:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800353e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003540:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003544:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800354c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e4      	bne.n	800351c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd fe22 	bl	80011a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800356e:	b29b      	uxth	r3, r3
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	b29b      	uxth	r3, r3
 8003574:	4619      	mov	r1, r3
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f8c2 	bl	8003700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800357c:	e0a4      	b.n	80036c8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800358a:	b29b      	uxth	r3, r3
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8096 	beq.w	80036cc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80035a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8091 	beq.w	80036cc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035cc:	647b      	str	r3, [r7, #68]	; 0x44
 80035ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035d4:	e841 2300 	strex	r3, r2, [r1]
 80035d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e4      	bne.n	80035aa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3308      	adds	r3, #8
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	e853 3f00 	ldrex	r3, [r3]
 80035ee:	623b      	str	r3, [r7, #32]
   return(result);
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3308      	adds	r3, #8
 8003600:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003604:	633a      	str	r2, [r7, #48]	; 0x30
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003608:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800360a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360c:	e841 2300 	strex	r3, r2, [r1]
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e3      	bne.n	80035e0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	60fb      	str	r3, [r7, #12]
   return(result);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f023 0310 	bic.w	r3, r3, #16
 8003640:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	69b9      	ldr	r1, [r7, #24]
 8003654:	69fa      	ldr	r2, [r7, #28]
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	617b      	str	r3, [r7, #20]
   return(result);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e4      	bne.n	800362c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2202      	movs	r2, #2
 8003666:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f846 	bl	8003700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003674:	e02a      	b.n	80036cc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00e      	beq.n	80036a0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01c      	beq.n	80036d0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
    }
    return;
 800369e:	e017      	b.n	80036d0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d012      	beq.n	80036d2 <HAL_UART_IRQHandler+0x59e>
 80036ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00c      	beq.n	80036d2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 fcaa 	bl	8004012 <UART_EndTransmit_IT>
    return;
 80036be:	e008      	b.n	80036d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80036c0:	bf00      	nop
 80036c2:	e006      	b.n	80036d2 <HAL_UART_IRQHandler+0x59e>
    return;
 80036c4:	bf00      	nop
 80036c6:	e004      	b.n	80036d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80036c8:	bf00      	nop
 80036ca:	e002      	b.n	80036d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80036cc:	bf00      	nop
 80036ce:	e000      	b.n	80036d2 <HAL_UART_IRQHandler+0x59e>
    return;
 80036d0:	bf00      	nop
  }

}
 80036d2:	37e8      	adds	r7, #232	; 0xe8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4ba6      	ldr	r3, [pc, #664]	; (80039dc <UART_SetConfig+0x2c4>)
 8003744:	4013      	ands	r3, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	6979      	ldr	r1, [r7, #20]
 800374c:	430b      	orrs	r3, r1
 800374e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	430a      	orrs	r2, r1
 8003788:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a94      	ldr	r2, [pc, #592]	; (80039e0 <UART_SetConfig+0x2c8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d120      	bne.n	80037d6 <UART_SetConfig+0xbe>
 8003794:	4b93      	ldr	r3, [pc, #588]	; (80039e4 <UART_SetConfig+0x2cc>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d816      	bhi.n	80037d0 <UART_SetConfig+0xb8>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <UART_SetConfig+0x90>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037b9 	.word	0x080037b9
 80037ac:	080037c5 	.word	0x080037c5
 80037b0:	080037bf 	.word	0x080037bf
 80037b4:	080037cb 	.word	0x080037cb
 80037b8:	2301      	movs	r3, #1
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e150      	b.n	8003a60 <UART_SetConfig+0x348>
 80037be:	2302      	movs	r3, #2
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e14d      	b.n	8003a60 <UART_SetConfig+0x348>
 80037c4:	2304      	movs	r3, #4
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e14a      	b.n	8003a60 <UART_SetConfig+0x348>
 80037ca:	2308      	movs	r3, #8
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e147      	b.n	8003a60 <UART_SetConfig+0x348>
 80037d0:	2310      	movs	r3, #16
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e144      	b.n	8003a60 <UART_SetConfig+0x348>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a83      	ldr	r2, [pc, #524]	; (80039e8 <UART_SetConfig+0x2d0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d132      	bne.n	8003846 <UART_SetConfig+0x12e>
 80037e0:	4b80      	ldr	r3, [pc, #512]	; (80039e4 <UART_SetConfig+0x2cc>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b0c      	cmp	r3, #12
 80037ec:	d828      	bhi.n	8003840 <UART_SetConfig+0x128>
 80037ee:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <UART_SetConfig+0xdc>)
 80037f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f4:	08003829 	.word	0x08003829
 80037f8:	08003841 	.word	0x08003841
 80037fc:	08003841 	.word	0x08003841
 8003800:	08003841 	.word	0x08003841
 8003804:	08003835 	.word	0x08003835
 8003808:	08003841 	.word	0x08003841
 800380c:	08003841 	.word	0x08003841
 8003810:	08003841 	.word	0x08003841
 8003814:	0800382f 	.word	0x0800382f
 8003818:	08003841 	.word	0x08003841
 800381c:	08003841 	.word	0x08003841
 8003820:	08003841 	.word	0x08003841
 8003824:	0800383b 	.word	0x0800383b
 8003828:	2300      	movs	r3, #0
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e118      	b.n	8003a60 <UART_SetConfig+0x348>
 800382e:	2302      	movs	r3, #2
 8003830:	77fb      	strb	r3, [r7, #31]
 8003832:	e115      	b.n	8003a60 <UART_SetConfig+0x348>
 8003834:	2304      	movs	r3, #4
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e112      	b.n	8003a60 <UART_SetConfig+0x348>
 800383a:	2308      	movs	r3, #8
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e10f      	b.n	8003a60 <UART_SetConfig+0x348>
 8003840:	2310      	movs	r3, #16
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e10c      	b.n	8003a60 <UART_SetConfig+0x348>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a68      	ldr	r2, [pc, #416]	; (80039ec <UART_SetConfig+0x2d4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d120      	bne.n	8003892 <UART_SetConfig+0x17a>
 8003850:	4b64      	ldr	r3, [pc, #400]	; (80039e4 <UART_SetConfig+0x2cc>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800385a:	2b30      	cmp	r3, #48	; 0x30
 800385c:	d013      	beq.n	8003886 <UART_SetConfig+0x16e>
 800385e:	2b30      	cmp	r3, #48	; 0x30
 8003860:	d814      	bhi.n	800388c <UART_SetConfig+0x174>
 8003862:	2b20      	cmp	r3, #32
 8003864:	d009      	beq.n	800387a <UART_SetConfig+0x162>
 8003866:	2b20      	cmp	r3, #32
 8003868:	d810      	bhi.n	800388c <UART_SetConfig+0x174>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <UART_SetConfig+0x15c>
 800386e:	2b10      	cmp	r3, #16
 8003870:	d006      	beq.n	8003880 <UART_SetConfig+0x168>
 8003872:	e00b      	b.n	800388c <UART_SetConfig+0x174>
 8003874:	2300      	movs	r3, #0
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e0f2      	b.n	8003a60 <UART_SetConfig+0x348>
 800387a:	2302      	movs	r3, #2
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e0ef      	b.n	8003a60 <UART_SetConfig+0x348>
 8003880:	2304      	movs	r3, #4
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e0ec      	b.n	8003a60 <UART_SetConfig+0x348>
 8003886:	2308      	movs	r3, #8
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e0e9      	b.n	8003a60 <UART_SetConfig+0x348>
 800388c:	2310      	movs	r3, #16
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	e0e6      	b.n	8003a60 <UART_SetConfig+0x348>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a56      	ldr	r2, [pc, #344]	; (80039f0 <UART_SetConfig+0x2d8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d120      	bne.n	80038de <UART_SetConfig+0x1c6>
 800389c:	4b51      	ldr	r3, [pc, #324]	; (80039e4 <UART_SetConfig+0x2cc>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038a6:	2bc0      	cmp	r3, #192	; 0xc0
 80038a8:	d013      	beq.n	80038d2 <UART_SetConfig+0x1ba>
 80038aa:	2bc0      	cmp	r3, #192	; 0xc0
 80038ac:	d814      	bhi.n	80038d8 <UART_SetConfig+0x1c0>
 80038ae:	2b80      	cmp	r3, #128	; 0x80
 80038b0:	d009      	beq.n	80038c6 <UART_SetConfig+0x1ae>
 80038b2:	2b80      	cmp	r3, #128	; 0x80
 80038b4:	d810      	bhi.n	80038d8 <UART_SetConfig+0x1c0>
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <UART_SetConfig+0x1a8>
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d006      	beq.n	80038cc <UART_SetConfig+0x1b4>
 80038be:	e00b      	b.n	80038d8 <UART_SetConfig+0x1c0>
 80038c0:	2300      	movs	r3, #0
 80038c2:	77fb      	strb	r3, [r7, #31]
 80038c4:	e0cc      	b.n	8003a60 <UART_SetConfig+0x348>
 80038c6:	2302      	movs	r3, #2
 80038c8:	77fb      	strb	r3, [r7, #31]
 80038ca:	e0c9      	b.n	8003a60 <UART_SetConfig+0x348>
 80038cc:	2304      	movs	r3, #4
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e0c6      	b.n	8003a60 <UART_SetConfig+0x348>
 80038d2:	2308      	movs	r3, #8
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e0c3      	b.n	8003a60 <UART_SetConfig+0x348>
 80038d8:	2310      	movs	r3, #16
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e0c0      	b.n	8003a60 <UART_SetConfig+0x348>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a44      	ldr	r2, [pc, #272]	; (80039f4 <UART_SetConfig+0x2dc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d125      	bne.n	8003934 <UART_SetConfig+0x21c>
 80038e8:	4b3e      	ldr	r3, [pc, #248]	; (80039e4 <UART_SetConfig+0x2cc>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038f6:	d017      	beq.n	8003928 <UART_SetConfig+0x210>
 80038f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038fc:	d817      	bhi.n	800392e <UART_SetConfig+0x216>
 80038fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003902:	d00b      	beq.n	800391c <UART_SetConfig+0x204>
 8003904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003908:	d811      	bhi.n	800392e <UART_SetConfig+0x216>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <UART_SetConfig+0x1fe>
 800390e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003912:	d006      	beq.n	8003922 <UART_SetConfig+0x20a>
 8003914:	e00b      	b.n	800392e <UART_SetConfig+0x216>
 8003916:	2300      	movs	r3, #0
 8003918:	77fb      	strb	r3, [r7, #31]
 800391a:	e0a1      	b.n	8003a60 <UART_SetConfig+0x348>
 800391c:	2302      	movs	r3, #2
 800391e:	77fb      	strb	r3, [r7, #31]
 8003920:	e09e      	b.n	8003a60 <UART_SetConfig+0x348>
 8003922:	2304      	movs	r3, #4
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e09b      	b.n	8003a60 <UART_SetConfig+0x348>
 8003928:	2308      	movs	r3, #8
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e098      	b.n	8003a60 <UART_SetConfig+0x348>
 800392e:	2310      	movs	r3, #16
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	e095      	b.n	8003a60 <UART_SetConfig+0x348>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2f      	ldr	r2, [pc, #188]	; (80039f8 <UART_SetConfig+0x2e0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d125      	bne.n	800398a <UART_SetConfig+0x272>
 800393e:	4b29      	ldr	r3, [pc, #164]	; (80039e4 <UART_SetConfig+0x2cc>)
 8003940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003944:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003948:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800394c:	d017      	beq.n	800397e <UART_SetConfig+0x266>
 800394e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003952:	d817      	bhi.n	8003984 <UART_SetConfig+0x26c>
 8003954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003958:	d00b      	beq.n	8003972 <UART_SetConfig+0x25a>
 800395a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800395e:	d811      	bhi.n	8003984 <UART_SetConfig+0x26c>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <UART_SetConfig+0x254>
 8003964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003968:	d006      	beq.n	8003978 <UART_SetConfig+0x260>
 800396a:	e00b      	b.n	8003984 <UART_SetConfig+0x26c>
 800396c:	2301      	movs	r3, #1
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e076      	b.n	8003a60 <UART_SetConfig+0x348>
 8003972:	2302      	movs	r3, #2
 8003974:	77fb      	strb	r3, [r7, #31]
 8003976:	e073      	b.n	8003a60 <UART_SetConfig+0x348>
 8003978:	2304      	movs	r3, #4
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e070      	b.n	8003a60 <UART_SetConfig+0x348>
 800397e:	2308      	movs	r3, #8
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e06d      	b.n	8003a60 <UART_SetConfig+0x348>
 8003984:	2310      	movs	r3, #16
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e06a      	b.n	8003a60 <UART_SetConfig+0x348>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1b      	ldr	r2, [pc, #108]	; (80039fc <UART_SetConfig+0x2e4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d138      	bne.n	8003a06 <UART_SetConfig+0x2ee>
 8003994:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <UART_SetConfig+0x2cc>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800399e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039a2:	d017      	beq.n	80039d4 <UART_SetConfig+0x2bc>
 80039a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039a8:	d82a      	bhi.n	8003a00 <UART_SetConfig+0x2e8>
 80039aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ae:	d00b      	beq.n	80039c8 <UART_SetConfig+0x2b0>
 80039b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b4:	d824      	bhi.n	8003a00 <UART_SetConfig+0x2e8>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <UART_SetConfig+0x2aa>
 80039ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039be:	d006      	beq.n	80039ce <UART_SetConfig+0x2b6>
 80039c0:	e01e      	b.n	8003a00 <UART_SetConfig+0x2e8>
 80039c2:	2300      	movs	r3, #0
 80039c4:	77fb      	strb	r3, [r7, #31]
 80039c6:	e04b      	b.n	8003a60 <UART_SetConfig+0x348>
 80039c8:	2302      	movs	r3, #2
 80039ca:	77fb      	strb	r3, [r7, #31]
 80039cc:	e048      	b.n	8003a60 <UART_SetConfig+0x348>
 80039ce:	2304      	movs	r3, #4
 80039d0:	77fb      	strb	r3, [r7, #31]
 80039d2:	e045      	b.n	8003a60 <UART_SetConfig+0x348>
 80039d4:	2308      	movs	r3, #8
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e042      	b.n	8003a60 <UART_SetConfig+0x348>
 80039da:	bf00      	nop
 80039dc:	efff69f3 	.word	0xefff69f3
 80039e0:	40011000 	.word	0x40011000
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40004400 	.word	0x40004400
 80039ec:	40004800 	.word	0x40004800
 80039f0:	40004c00 	.word	0x40004c00
 80039f4:	40005000 	.word	0x40005000
 80039f8:	40011400 	.word	0x40011400
 80039fc:	40007800 	.word	0x40007800
 8003a00:	2310      	movs	r3, #16
 8003a02:	77fb      	strb	r3, [r7, #31]
 8003a04:	e02c      	b.n	8003a60 <UART_SetConfig+0x348>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a72      	ldr	r2, [pc, #456]	; (8003bd4 <UART_SetConfig+0x4bc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d125      	bne.n	8003a5c <UART_SetConfig+0x344>
 8003a10:	4b71      	ldr	r3, [pc, #452]	; (8003bd8 <UART_SetConfig+0x4c0>)
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a1e:	d017      	beq.n	8003a50 <UART_SetConfig+0x338>
 8003a20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a24:	d817      	bhi.n	8003a56 <UART_SetConfig+0x33e>
 8003a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a2a:	d00b      	beq.n	8003a44 <UART_SetConfig+0x32c>
 8003a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a30:	d811      	bhi.n	8003a56 <UART_SetConfig+0x33e>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <UART_SetConfig+0x326>
 8003a36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a3a:	d006      	beq.n	8003a4a <UART_SetConfig+0x332>
 8003a3c:	e00b      	b.n	8003a56 <UART_SetConfig+0x33e>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	77fb      	strb	r3, [r7, #31]
 8003a42:	e00d      	b.n	8003a60 <UART_SetConfig+0x348>
 8003a44:	2302      	movs	r3, #2
 8003a46:	77fb      	strb	r3, [r7, #31]
 8003a48:	e00a      	b.n	8003a60 <UART_SetConfig+0x348>
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	77fb      	strb	r3, [r7, #31]
 8003a4e:	e007      	b.n	8003a60 <UART_SetConfig+0x348>
 8003a50:	2308      	movs	r3, #8
 8003a52:	77fb      	strb	r3, [r7, #31]
 8003a54:	e004      	b.n	8003a60 <UART_SetConfig+0x348>
 8003a56:	2310      	movs	r3, #16
 8003a58:	77fb      	strb	r3, [r7, #31]
 8003a5a:	e001      	b.n	8003a60 <UART_SetConfig+0x348>
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a68:	d15b      	bne.n	8003b22 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003a6a:	7ffb      	ldrb	r3, [r7, #31]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d828      	bhi.n	8003ac2 <UART_SetConfig+0x3aa>
 8003a70:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <UART_SetConfig+0x360>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003a9d 	.word	0x08003a9d
 8003a7c:	08003aa5 	.word	0x08003aa5
 8003a80:	08003aad 	.word	0x08003aad
 8003a84:	08003ac3 	.word	0x08003ac3
 8003a88:	08003ab3 	.word	0x08003ab3
 8003a8c:	08003ac3 	.word	0x08003ac3
 8003a90:	08003ac3 	.word	0x08003ac3
 8003a94:	08003ac3 	.word	0x08003ac3
 8003a98:	08003abb 	.word	0x08003abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a9c:	f7fe fa8a 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8003aa0:	61b8      	str	r0, [r7, #24]
        break;
 8003aa2:	e013      	b.n	8003acc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa4:	f7fe fa9a 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 8003aa8:	61b8      	str	r0, [r7, #24]
        break;
 8003aaa:	e00f      	b.n	8003acc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aac:	4b4b      	ldr	r3, [pc, #300]	; (8003bdc <UART_SetConfig+0x4c4>)
 8003aae:	61bb      	str	r3, [r7, #24]
        break;
 8003ab0:	e00c      	b.n	8003acc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ab2:	f7fe f96d 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 8003ab6:	61b8      	str	r0, [r7, #24]
        break;
 8003ab8:	e008      	b.n	8003acc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003abe:	61bb      	str	r3, [r7, #24]
        break;
 8003ac0:	e004      	b.n	8003acc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	77bb      	strb	r3, [r7, #30]
        break;
 8003aca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d074      	beq.n	8003bbc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	005a      	lsls	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	441a      	add	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b0f      	cmp	r3, #15
 8003aec:	d916      	bls.n	8003b1c <UART_SetConfig+0x404>
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af4:	d212      	bcs.n	8003b1c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f023 030f 	bic.w	r3, r3, #15
 8003afe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	085b      	lsrs	r3, r3, #1
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	89fb      	ldrh	r3, [r7, #14]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	89fa      	ldrh	r2, [r7, #14]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	e04f      	b.n	8003bbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	77bb      	strb	r3, [r7, #30]
 8003b20:	e04c      	b.n	8003bbc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b22:	7ffb      	ldrb	r3, [r7, #31]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d828      	bhi.n	8003b7a <UART_SetConfig+0x462>
 8003b28:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <UART_SetConfig+0x418>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b55 	.word	0x08003b55
 8003b34:	08003b5d 	.word	0x08003b5d
 8003b38:	08003b65 	.word	0x08003b65
 8003b3c:	08003b7b 	.word	0x08003b7b
 8003b40:	08003b6b 	.word	0x08003b6b
 8003b44:	08003b7b 	.word	0x08003b7b
 8003b48:	08003b7b 	.word	0x08003b7b
 8003b4c:	08003b7b 	.word	0x08003b7b
 8003b50:	08003b73 	.word	0x08003b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b54:	f7fe fa2e 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8003b58:	61b8      	str	r0, [r7, #24]
        break;
 8003b5a:	e013      	b.n	8003b84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b5c:	f7fe fa3e 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 8003b60:	61b8      	str	r0, [r7, #24]
        break;
 8003b62:	e00f      	b.n	8003b84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b64:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <UART_SetConfig+0x4c4>)
 8003b66:	61bb      	str	r3, [r7, #24]
        break;
 8003b68:	e00c      	b.n	8003b84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6a:	f7fe f911 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 8003b6e:	61b8      	str	r0, [r7, #24]
        break;
 8003b70:	e008      	b.n	8003b84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b76:	61bb      	str	r3, [r7, #24]
        break;
 8003b78:	e004      	b.n	8003b84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	77bb      	strb	r3, [r7, #30]
        break;
 8003b82:	bf00      	nop
    }

    if (pclk != 0U)
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d018      	beq.n	8003bbc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	085a      	lsrs	r2, r3, #1
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	441a      	add	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b0f      	cmp	r3, #15
 8003ba2:	d909      	bls.n	8003bb8 <UART_SetConfig+0x4a0>
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003baa:	d205      	bcs.n	8003bb8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60da      	str	r2, [r3, #12]
 8003bb6:	e001      	b.n	8003bbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003bc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40007c00 	.word	0x40007c00
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	00f42400 	.word	0x00f42400

08003be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01a      	beq.n	8003cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cde:	d10a      	bne.n	8003cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	605a      	str	r2, [r3, #4]
  }
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d34:	f7fd f946 	bl	8000fc4 <HAL_GetTick>
 8003d38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d10e      	bne.n	8003d66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f81b 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e011      	b.n	8003d8a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b09c      	sub	sp, #112	; 0x70
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da2:	e0a7      	b.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	f000 80a3 	beq.w	8003ef4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dae:	f7fd f909 	bl	8000fc4 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d13f      	bne.n	8003e44 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dd8:	667b      	str	r3, [r7, #100]	; 0x64
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003de2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003de4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003de8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1e6      	bne.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3308      	adds	r3, #8
 8003e14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e16:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e5      	bne.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e068      	b.n	8003f16 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d050      	beq.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e60:	d148      	bne.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e6a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e8c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e6      	bne.n	8003e6c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	613b      	str	r3, [r7, #16]
   return(result);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3308      	adds	r3, #8
 8003ebc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ebe:	623a      	str	r2, [r7, #32]
 8003ec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	69f9      	ldr	r1, [r7, #28]
 8003ec4:	6a3a      	ldr	r2, [r7, #32]
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e5      	bne.n	8003e9e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e010      	b.n	8003f16 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69da      	ldr	r2, [r3, #28]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4013      	ands	r3, r2
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	f43f af48 	beq.w	8003da4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3770      	adds	r7, #112	; 0x70
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b095      	sub	sp, #84	; 0x54
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f44:	643b      	str	r3, [r7, #64]	; 0x40
 8003f46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e6      	bne.n	8003f26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3308      	adds	r3, #8
 8003f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d118      	bne.n	8003fc6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f023 0310 	bic.w	r3, r3, #16
 8003fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	6979      	ldr	r1, [r7, #20]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e6      	bne.n	8003f94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fda:	bf00      	nop
 8003fdc:	3754      	adds	r7, #84	; 0x54
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f7ff fb71 	bl	80036ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b088      	sub	sp, #32
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	60bb      	str	r3, [r7, #8]
   return(result);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	6979      	ldr	r1, [r7, #20]
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	613b      	str	r3, [r7, #16]
   return(result);
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e6      	bne.n	800401a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff fb3d 	bl	80036d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800405e:	bf00      	nop
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004066:	b480      	push	{r7}
 8004068:	b085      	sub	sp, #20
 800406a:	af00      	add	r7, sp, #0
 800406c:	4603      	mov	r3, r0
 800406e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004078:	2b84      	cmp	r3, #132	; 0x84
 800407a:	d005      	beq.n	8004088 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800407c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	3303      	adds	r3, #3
 8004086:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004088:	68fb      	ldr	r3, [r7, #12]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800409a:	f000 fffb 	bl	8005094 <vTaskStartScheduler>
  
  return osOK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80040a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af04      	add	r7, sp, #16
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d020      	beq.n	80040f8 <osThreadCreate+0x54>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d01c      	beq.n	80040f8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685c      	ldr	r4, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691e      	ldr	r6, [r3, #16]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff ffc8 	bl	8004066 <makeFreeRtosPriority>
 80040d6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040e0:	9202      	str	r2, [sp, #8]
 80040e2:	9301      	str	r3, [sp, #4]
 80040e4:	9100      	str	r1, [sp, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	4632      	mov	r2, r6
 80040ea:	4629      	mov	r1, r5
 80040ec:	4620      	mov	r0, r4
 80040ee:	f000 fdff 	bl	8004cf0 <xTaskCreateStatic>
 80040f2:	4603      	mov	r3, r0
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	e01c      	b.n	8004132 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685c      	ldr	r4, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004104:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff ffaa 	bl	8004066 <makeFreeRtosPriority>
 8004112:	4602      	mov	r2, r0
 8004114:	f107 030c 	add.w	r3, r7, #12
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	9200      	str	r2, [sp, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	4632      	mov	r2, r6
 8004120:	4629      	mov	r1, r5
 8004122:	4620      	mov	r0, r4
 8004124:	f000 fe47 	bl	8004db6 <xTaskCreate>
 8004128:	4603      	mov	r3, r0
 800412a:	2b01      	cmp	r3, #1
 800412c:	d001      	beq.n	8004132 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800412e:	2300      	movs	r3, #0
 8004130:	e000      	b.n	8004134 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004132:	68fb      	ldr	r3, [r7, #12]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800413c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <osDelay+0x16>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	e000      	b.n	8004154 <osDelay+0x18>
 8004152:	2301      	movs	r3, #1
 8004154:	4618      	mov	r0, r3
 8004156:	f000 ff67 	bl	8005028 <vTaskDelay>
  
  return osOK;
 800415a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004164:	b590      	push	{r4, r7, lr}
 8004166:	b085      	sub	sp, #20
 8004168:	af02      	add	r7, sp, #8
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d011      	beq.n	800419a <osMessageCreate+0x36>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00d      	beq.n	800419a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6859      	ldr	r1, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2400      	movs	r4, #0
 8004190:	9400      	str	r4, [sp, #0]
 8004192:	f000 f92d 	bl	80043f0 <xQueueGenericCreateStatic>
 8004196:	4603      	mov	r3, r0
 8004198:	e008      	b.n	80041ac <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	4619      	mov	r1, r3
 80041a6:	f000 f9a5 	bl	80044f4 <xQueueGenericCreate>
 80041aa:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd90      	pop	{r4, r7, pc}

080041b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f103 0208 	add.w	r2, r3, #8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f04f 32ff 	mov.w	r2, #4294967295
 80041cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f103 0208 	add.w	r2, r3, #8
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f103 0208 	add.w	r2, r3, #8
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d103      	bne.n	8004276 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e00c      	b.n	8004290 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3308      	adds	r3, #8
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e002      	b.n	8004284 <vListInsert+0x2e>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	429a      	cmp	r2, r3
 800428e:	d2f6      	bcs.n	800427e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	601a      	str	r2, [r3, #0]
}
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6892      	ldr	r2, [r2, #8]
 80042de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6852      	ldr	r2, [r2, #4]
 80042e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d103      	bne.n	80042fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	1e5a      	subs	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10c      	bne.n	800434a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	b672      	cpsid	i
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	b662      	cpsie	i
 8004344:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800434a:	f001 fccf 	bl	8005cec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004356:	68f9      	ldr	r1, [r7, #12]
 8004358:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	441a      	add	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	3b01      	subs	r3, #1
 800437c:	68f9      	ldr	r1, [r7, #12]
 800437e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	441a      	add	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	22ff      	movs	r2, #255	; 0xff
 800438e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	22ff      	movs	r2, #255	; 0xff
 8004396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d114      	bne.n	80043ca <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01a      	beq.n	80043de <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3310      	adds	r3, #16
 80043ac:	4618      	mov	r0, r3
 80043ae:	f001 f8bf 	bl	8005530 <xTaskRemoveFromEventList>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d012      	beq.n	80043de <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <xQueueGenericReset+0xd0>)
 80043ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	e009      	b.n	80043de <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3310      	adds	r3, #16
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fef0 	bl	80041b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3324      	adds	r3, #36	; 0x24
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff feeb 	bl	80041b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043de:	f001 fcb9 	bl	8005d54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043e2:	2301      	movs	r3, #1
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	e000ed04 	.word	0xe000ed04

080043f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08e      	sub	sp, #56	; 0x38
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10c      	bne.n	800441e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	b672      	cpsid	i
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	b662      	cpsie	i
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800441a:	bf00      	nop
 800441c:	e7fe      	b.n	800441c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10c      	bne.n	800443e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	b672      	cpsid	i
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	b662      	cpsie	i
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
}
 800443a:	bf00      	nop
 800443c:	e7fe      	b.n	800443c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <xQueueGenericCreateStatic+0x5a>
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <xQueueGenericCreateStatic+0x5e>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <xQueueGenericCreateStatic+0x60>
 800444e:	2300      	movs	r3, #0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10c      	bne.n	800446e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004458:	b672      	cpsid	i
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	b662      	cpsie	i
 8004468:	623b      	str	r3, [r7, #32]
}
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d102      	bne.n	800447a <xQueueGenericCreateStatic+0x8a>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <xQueueGenericCreateStatic+0x8e>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <xQueueGenericCreateStatic+0x90>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10c      	bne.n	800449e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	b672      	cpsid	i
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	b662      	cpsie	i
 8004498:	61fb      	str	r3, [r7, #28]
}
 800449a:	bf00      	nop
 800449c:	e7fe      	b.n	800449c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800449e:	2348      	movs	r3, #72	; 0x48
 80044a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b48      	cmp	r3, #72	; 0x48
 80044a6:	d00c      	beq.n	80044c2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80044a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ac:	b672      	cpsid	i
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	b662      	cpsie	i
 80044bc:	61bb      	str	r3, [r7, #24]
}
 80044be:	bf00      	nop
 80044c0:	e7fe      	b.n	80044c0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80044c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80044da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	4613      	mov	r3, r2
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f847 	bl	8004578 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3730      	adds	r7, #48	; 0x30
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	; 0x28
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10c      	bne.n	8004522 <xQueueGenericCreate+0x2e>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	b672      	cpsid	i
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	b662      	cpsie	i
 800451c:	613b      	str	r3, [r7, #16]
}
 800451e:	bf00      	nop
 8004520:	e7fe      	b.n	8004520 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d102      	bne.n	800452e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004528:	2300      	movs	r3, #0
 800452a:	61fb      	str	r3, [r7, #28]
 800452c:	e004      	b.n	8004538 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	3348      	adds	r3, #72	; 0x48
 800453c:	4618      	mov	r0, r3
 800453e:	f001 fd01 	bl	8005f44 <pvPortMalloc>
 8004542:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d011      	beq.n	800456e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	3348      	adds	r3, #72	; 0x48
 8004552:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800455c:	79fa      	ldrb	r2, [r7, #7]
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	4613      	mov	r3, r2
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f805 	bl	8004578 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800456e:	69bb      	ldr	r3, [r7, #24]
	}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d103      	bne.n	8004594 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e002      	b.n	800459a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045a6:	2101      	movs	r1, #1
 80045a8:	69b8      	ldr	r0, [r7, #24]
 80045aa:	f7ff feb7 	bl	800431c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08e      	sub	sp, #56	; 0x38
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045c6:	2300      	movs	r3, #0
 80045c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10c      	bne.n	80045ee <xQueueGenericSend+0x36>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	b672      	cpsid	i
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	b662      	cpsie	i
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d103      	bne.n	80045fc <xQueueGenericSend+0x44>
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <xQueueGenericSend+0x48>
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <xQueueGenericSend+0x4a>
 8004600:	2300      	movs	r3, #0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10c      	bne.n	8004620 <xQueueGenericSend+0x68>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	b672      	cpsid	i
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	b662      	cpsie	i
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d103      	bne.n	800462e <xQueueGenericSend+0x76>
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <xQueueGenericSend+0x7a>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <xQueueGenericSend+0x7c>
 8004632:	2300      	movs	r3, #0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10c      	bne.n	8004652 <xQueueGenericSend+0x9a>
	__asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	b672      	cpsid	i
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	b662      	cpsie	i
 800464c:	623b      	str	r3, [r7, #32]
}
 800464e:	bf00      	nop
 8004650:	e7fe      	b.n	8004650 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004652:	f001 f931 	bl	80058b8 <xTaskGetSchedulerState>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <xQueueGenericSend+0xaa>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <xQueueGenericSend+0xae>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <xQueueGenericSend+0xb0>
 8004666:	2300      	movs	r3, #0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10c      	bne.n	8004686 <xQueueGenericSend+0xce>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	b672      	cpsid	i
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	b662      	cpsie	i
 8004680:	61fb      	str	r3, [r7, #28]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004686:	f001 fb31 	bl	8005cec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004692:	429a      	cmp	r2, r3
 8004694:	d302      	bcc.n	800469c <xQueueGenericSend+0xe4>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d129      	bne.n	80046f0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046a2:	f000 fa15 	bl	8004ad0 <prvCopyDataToQueue>
 80046a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d010      	beq.n	80046d2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	3324      	adds	r3, #36	; 0x24
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 ff3b 	bl	8005530 <xTaskRemoveFromEventList>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d013      	beq.n	80046e8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046c0:	4b3f      	ldr	r3, [pc, #252]	; (80047c0 <xQueueGenericSend+0x208>)
 80046c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	e00a      	b.n	80046e8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046d8:	4b39      	ldr	r3, [pc, #228]	; (80047c0 <xQueueGenericSend+0x208>)
 80046da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046e8:	f001 fb34 	bl	8005d54 <vPortExitCritical>
				return pdPASS;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e063      	b.n	80047b8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d103      	bne.n	80046fe <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046f6:	f001 fb2d 	bl	8005d54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	e05c      	b.n	80047b8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004700:	2b00      	cmp	r3, #0
 8004702:	d106      	bne.n	8004712 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004704:	f107 0314 	add.w	r3, r7, #20
 8004708:	4618      	mov	r0, r3
 800470a:	f000 ff75 	bl	80055f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800470e:	2301      	movs	r3, #1
 8004710:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004712:	f001 fb1f 	bl	8005d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004716:	f000 fd21 	bl	800515c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800471a:	f001 fae7 	bl	8005cec <vPortEnterCritical>
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004724:	b25b      	sxtb	r3, r3
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472a:	d103      	bne.n	8004734 <xQueueGenericSend+0x17c>
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800473a:	b25b      	sxtb	r3, r3
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d103      	bne.n	800474a <xQueueGenericSend+0x192>
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800474a:	f001 fb03 	bl	8005d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800474e:	1d3a      	adds	r2, r7, #4
 8004750:	f107 0314 	add.w	r3, r7, #20
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f000 ff64 	bl	8005624 <xTaskCheckForTimeOut>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d124      	bne.n	80047ac <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004764:	f000 faac 	bl	8004cc0 <prvIsQueueFull>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d018      	beq.n	80047a0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	3310      	adds	r3, #16
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4611      	mov	r1, r2
 8004776:	4618      	mov	r0, r3
 8004778:	f000 feb4 	bl	80054e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800477c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800477e:	f000 fa37 	bl	8004bf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004782:	f000 fcf9 	bl	8005178 <xTaskResumeAll>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	f47f af7c 	bne.w	8004686 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800478e:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <xQueueGenericSend+0x208>)
 8004790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	e772      	b.n	8004686 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a2:	f000 fa25 	bl	8004bf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047a6:	f000 fce7 	bl	8005178 <xTaskResumeAll>
 80047aa:	e76c      	b.n	8004686 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ae:	f000 fa1f 	bl	8004bf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047b2:	f000 fce1 	bl	8005178 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3738      	adds	r7, #56	; 0x38
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	e000ed04 	.word	0xe000ed04

080047c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08e      	sub	sp, #56	; 0x38
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10c      	bne.n	80047f6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	b672      	cpsid	i
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	b662      	cpsie	i
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d103      	bne.n	8004804 <xQueueGenericSendFromISR+0x40>
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <xQueueGenericSendFromISR+0x44>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <xQueueGenericSendFromISR+0x46>
 8004808:	2300      	movs	r3, #0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10c      	bne.n	8004828 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	b672      	cpsid	i
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	b662      	cpsie	i
 8004822:	623b      	str	r3, [r7, #32]
}
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d103      	bne.n	8004836 <xQueueGenericSendFromISR+0x72>
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <xQueueGenericSendFromISR+0x76>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <xQueueGenericSendFromISR+0x78>
 800483a:	2300      	movs	r3, #0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10c      	bne.n	800485a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	b672      	cpsid	i
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	b662      	cpsie	i
 8004854:	61fb      	str	r3, [r7, #28]
}
 8004856:	bf00      	nop
 8004858:	e7fe      	b.n	8004858 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800485a:	f001 fb2f 	bl	8005ebc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800485e:	f3ef 8211 	mrs	r2, BASEPRI
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	b672      	cpsid	i
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	b662      	cpsie	i
 8004876:	61ba      	str	r2, [r7, #24]
 8004878:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800487a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800487c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <xQueueGenericSendFromISR+0xcc>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d12c      	bne.n	80048ea <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048a0:	f000 f916 	bl	8004ad0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ac:	d112      	bne.n	80048d4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d016      	beq.n	80048e4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	3324      	adds	r3, #36	; 0x24
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fe38 	bl	8005530 <xTaskRemoveFromEventList>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00e      	beq.n	80048e4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00b      	beq.n	80048e4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	e007      	b.n	80048e4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048d8:	3301      	adds	r3, #1
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	b25a      	sxtb	r2, r3
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80048e4:	2301      	movs	r3, #1
 80048e6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80048e8:	e001      	b.n	80048ee <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	637b      	str	r3, [r7, #52]	; 0x34
 80048ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3738      	adds	r7, #56	; 0x38
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08c      	sub	sp, #48	; 0x30
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004910:	2300      	movs	r3, #0
 8004912:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10c      	bne.n	8004938 <xQueueReceive+0x34>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	b672      	cpsid	i
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	b662      	cpsie	i
 8004932:	623b      	str	r3, [r7, #32]
}
 8004934:	bf00      	nop
 8004936:	e7fe      	b.n	8004936 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d103      	bne.n	8004946 <xQueueReceive+0x42>
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <xQueueReceive+0x46>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <xQueueReceive+0x48>
 800494a:	2300      	movs	r3, #0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10c      	bne.n	800496a <xQueueReceive+0x66>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	b672      	cpsid	i
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	b662      	cpsie	i
 8004964:	61fb      	str	r3, [r7, #28]
}
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800496a:	f000 ffa5 	bl	80058b8 <xTaskGetSchedulerState>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d102      	bne.n	800497a <xQueueReceive+0x76>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <xQueueReceive+0x7a>
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <xQueueReceive+0x7c>
 800497e:	2300      	movs	r3, #0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10c      	bne.n	800499e <xQueueReceive+0x9a>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	b672      	cpsid	i
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	b662      	cpsie	i
 8004998:	61bb      	str	r3, [r7, #24]
}
 800499a:	bf00      	nop
 800499c:	e7fe      	b.n	800499c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800499e:	f001 f9a5 	bl	8005cec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d01f      	beq.n	80049ee <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b2:	f000 f8f7 	bl	8004ba4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	1e5a      	subs	r2, r3, #1
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00f      	beq.n	80049e6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	3310      	adds	r3, #16
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fdb0 	bl	8005530 <xTaskRemoveFromEventList>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049d6:	4b3d      	ldr	r3, [pc, #244]	; (8004acc <xQueueReceive+0x1c8>)
 80049d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049e6:	f001 f9b5 	bl	8005d54 <vPortExitCritical>
				return pdPASS;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e069      	b.n	8004ac2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d103      	bne.n	80049fc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049f4:	f001 f9ae 	bl	8005d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049f8:	2300      	movs	r3, #0
 80049fa:	e062      	b.n	8004ac2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a02:	f107 0310 	add.w	r3, r7, #16
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fdf6 	bl	80055f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a10:	f001 f9a0 	bl	8005d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a14:	f000 fba2 	bl	800515c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a18:	f001 f968 	bl	8005cec <vPortEnterCritical>
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a22:	b25b      	sxtb	r3, r3
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d103      	bne.n	8004a32 <xQueueReceive+0x12e>
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a38:	b25b      	sxtb	r3, r3
 8004a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3e:	d103      	bne.n	8004a48 <xQueueReceive+0x144>
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a48:	f001 f984 	bl	8005d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a4c:	1d3a      	adds	r2, r7, #4
 8004a4e:	f107 0310 	add.w	r3, r7, #16
 8004a52:	4611      	mov	r1, r2
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fde5 	bl	8005624 <xTaskCheckForTimeOut>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d123      	bne.n	8004aa8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a62:	f000 f917 	bl	8004c94 <prvIsQueueEmpty>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d017      	beq.n	8004a9c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	3324      	adds	r3, #36	; 0x24
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	4611      	mov	r1, r2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fd35 	bl	80054e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a7c:	f000 f8b8 	bl	8004bf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a80:	f000 fb7a 	bl	8005178 <xTaskResumeAll>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d189      	bne.n	800499e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004a8a:	4b10      	ldr	r3, [pc, #64]	; (8004acc <xQueueReceive+0x1c8>)
 8004a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	e780      	b.n	800499e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a9e:	f000 f8a7 	bl	8004bf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aa2:	f000 fb69 	bl	8005178 <xTaskResumeAll>
 8004aa6:	e77a      	b.n	800499e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aaa:	f000 f8a1 	bl	8004bf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004aae:	f000 fb63 	bl	8005178 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab4:	f000 f8ee 	bl	8004c94 <prvIsQueueEmpty>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f43f af6f 	beq.w	800499e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ac0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3730      	adds	r7, #48	; 0x30
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	e000ed04 	.word	0xe000ed04

08004ad0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10d      	bne.n	8004b0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d14d      	bne.n	8004b92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fefa 	bl	80058f4 <xTaskPriorityDisinherit>
 8004b00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	609a      	str	r2, [r3, #8]
 8004b08:	e043      	b.n	8004b92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d119      	bne.n	8004b44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6858      	ldr	r0, [r3, #4]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	461a      	mov	r2, r3
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	f001 fc22 	bl	8006364 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	441a      	add	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d32b      	bcc.n	8004b92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	e026      	b.n	8004b92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	68d8      	ldr	r0, [r3, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	f001 fc08 	bl	8006364 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	425b      	negs	r3, r3
 8004b5e:	441a      	add	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d207      	bcs.n	8004b80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	425b      	negs	r3, r3
 8004b7a:	441a      	add	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d105      	bne.n	8004b92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b9a:	697b      	ldr	r3, [r7, #20]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d018      	beq.n	8004be8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	441a      	add	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d303      	bcc.n	8004bd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68d9      	ldr	r1, [r3, #12]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	461a      	mov	r2, r3
 8004be2:	6838      	ldr	r0, [r7, #0]
 8004be4:	f001 fbbe 	bl	8006364 <memcpy>
	}
}
 8004be8:	bf00      	nop
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004bf8:	f001 f878 	bl	8005cec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c04:	e011      	b.n	8004c2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d012      	beq.n	8004c34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3324      	adds	r3, #36	; 0x24
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fc8c 	bl	8005530 <xTaskRemoveFromEventList>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c1e:	f000 fd67 	bl	80056f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	dce9      	bgt.n	8004c06 <prvUnlockQueue+0x16>
 8004c32:	e000      	b.n	8004c36 <prvUnlockQueue+0x46>
					break;
 8004c34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	22ff      	movs	r2, #255	; 0xff
 8004c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c3e:	f001 f889 	bl	8005d54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c42:	f001 f853 	bl	8005cec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c4e:	e011      	b.n	8004c74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d012      	beq.n	8004c7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3310      	adds	r3, #16
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fc67 	bl	8005530 <xTaskRemoveFromEventList>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c68:	f000 fd42 	bl	80056f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c6c:	7bbb      	ldrb	r3, [r7, #14]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	dce9      	bgt.n	8004c50 <prvUnlockQueue+0x60>
 8004c7c:	e000      	b.n	8004c80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	22ff      	movs	r2, #255	; 0xff
 8004c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c88:	f001 f864 	bl	8005d54 <vPortExitCritical>
}
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c9c:	f001 f826 	bl	8005cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	e001      	b.n	8004cb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cb2:	f001 f84f 	bl	8005d54 <vPortExitCritical>

	return xReturn;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cc8:	f001 f810 	bl	8005cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d102      	bne.n	8004cde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e001      	b.n	8004ce2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ce2:	f001 f837 	bl	8005d54 <vPortExitCritical>

	return xReturn;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08e      	sub	sp, #56	; 0x38
 8004cf4:	af04      	add	r7, sp, #16
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10c      	bne.n	8004d1e <xTaskCreateStatic+0x2e>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	b672      	cpsid	i
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	b662      	cpsie	i
 8004d18:	623b      	str	r3, [r7, #32]
}
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10c      	bne.n	8004d3e <xTaskCreateStatic+0x4e>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	b672      	cpsid	i
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	b662      	cpsie	i
 8004d38:	61fb      	str	r3, [r7, #28]
}
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d3e:	2354      	movs	r3, #84	; 0x54
 8004d40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b54      	cmp	r3, #84	; 0x54
 8004d46:	d00c      	beq.n	8004d62 <xTaskCreateStatic+0x72>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	b672      	cpsid	i
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	b662      	cpsie	i
 8004d5c:	61bb      	str	r3, [r7, #24]
}
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d01e      	beq.n	8004da8 <xTaskCreateStatic+0xb8>
 8004d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01b      	beq.n	8004da8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d82:	2300      	movs	r3, #0
 8004d84:	9303      	str	r3, [sp, #12]
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	9302      	str	r3, [sp, #8]
 8004d8a:	f107 0314 	add.w	r3, r7, #20
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f850 	bl	8004e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004da2:	f000 f8d7 	bl	8004f54 <prvAddNewTaskToReadyList>
 8004da6:	e001      	b.n	8004dac <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004dac:	697b      	ldr	r3, [r7, #20]
	}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3728      	adds	r7, #40	; 0x28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b08c      	sub	sp, #48	; 0x30
 8004dba:	af04      	add	r7, sp, #16
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	603b      	str	r3, [r7, #0]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004dc6:	88fb      	ldrh	r3, [r7, #6]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f001 f8ba 	bl	8005f44 <pvPortMalloc>
 8004dd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00e      	beq.n	8004df6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004dd8:	2054      	movs	r0, #84	; 0x54
 8004dda:	f001 f8b3 	bl	8005f44 <pvPortMalloc>
 8004dde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
 8004dec:	e005      	b.n	8004dfa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004dee:	6978      	ldr	r0, [r7, #20]
 8004df0:	f001 f972 	bl	80060d8 <vPortFree>
 8004df4:	e001      	b.n	8004dfa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d017      	beq.n	8004e30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e08:	88fa      	ldrh	r2, [r7, #6]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	9303      	str	r3, [sp, #12]
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	9302      	str	r3, [sp, #8]
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f80e 	bl	8004e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e24:	69f8      	ldr	r0, [r7, #28]
 8004e26:	f000 f895 	bl	8004f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	e002      	b.n	8004e36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e30:	f04f 33ff 	mov.w	r3, #4294967295
 8004e34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e36:	69bb      	ldr	r3, [r7, #24]
	}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3720      	adds	r7, #32
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004e58:	440b      	add	r3, r1
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	f023 0307 	bic.w	r3, r3, #7
 8004e66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00c      	beq.n	8004e8c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	b672      	cpsid	i
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	b662      	cpsie	i
 8004e86:	617b      	str	r3, [r7, #20]
}
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01f      	beq.n	8004ed2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	e012      	b.n	8004ebe <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	7819      	ldrb	r1, [r3, #0]
 8004ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3334      	adds	r3, #52	; 0x34
 8004ea8:	460a      	mov	r2, r1
 8004eaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d006      	beq.n	8004ec6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	2b0f      	cmp	r3, #15
 8004ec2:	d9e9      	bls.n	8004e98 <prvInitialiseNewTask+0x58>
 8004ec4:	e000      	b.n	8004ec8 <prvInitialiseNewTask+0x88>
			{
				break;
 8004ec6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ed0:	e003      	b.n	8004eda <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	2b06      	cmp	r3, #6
 8004ede:	d901      	bls.n	8004ee4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ee0:	2306      	movs	r3, #6
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ee8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	3304      	adds	r3, #4
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff f97a 	bl	80041f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	3318      	adds	r3, #24
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff f975 	bl	80041f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	f1c3 0207 	rsb	r2, r3, #7
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	2200      	movs	r2, #0
 8004f24:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	68f9      	ldr	r1, [r7, #12]
 8004f32:	69b8      	ldr	r0, [r7, #24]
 8004f34:	f000 fdce 	bl	8005ad4 <pxPortInitialiseStack>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f4a:	bf00      	nop
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f5c:	f000 fec6 	bl	8005cec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f60:	4b2a      	ldr	r3, [pc, #168]	; (800500c <prvAddNewTaskToReadyList+0xb8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3301      	adds	r3, #1
 8004f66:	4a29      	ldr	r2, [pc, #164]	; (800500c <prvAddNewTaskToReadyList+0xb8>)
 8004f68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f6a:	4b29      	ldr	r3, [pc, #164]	; (8005010 <prvAddNewTaskToReadyList+0xbc>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d109      	bne.n	8004f86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f72:	4a27      	ldr	r2, [pc, #156]	; (8005010 <prvAddNewTaskToReadyList+0xbc>)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f78:	4b24      	ldr	r3, [pc, #144]	; (800500c <prvAddNewTaskToReadyList+0xb8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d110      	bne.n	8004fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f80:	f000 fbda 	bl	8005738 <prvInitialiseTaskLists>
 8004f84:	e00d      	b.n	8004fa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f86:	4b23      	ldr	r3, [pc, #140]	; (8005014 <prvAddNewTaskToReadyList+0xc0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d109      	bne.n	8004fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f8e:	4b20      	ldr	r3, [pc, #128]	; (8005010 <prvAddNewTaskToReadyList+0xbc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d802      	bhi.n	8004fa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f9c:	4a1c      	ldr	r2, [pc, #112]	; (8005010 <prvAddNewTaskToReadyList+0xbc>)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fa2:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <prvAddNewTaskToReadyList+0xc4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	4a1b      	ldr	r2, [pc, #108]	; (8005018 <prvAddNewTaskToReadyList+0xc4>)
 8004faa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	409a      	lsls	r2, r3
 8004fb4:	4b19      	ldr	r3, [pc, #100]	; (800501c <prvAddNewTaskToReadyList+0xc8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	4a18      	ldr	r2, [pc, #96]	; (800501c <prvAddNewTaskToReadyList+0xc8>)
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4a15      	ldr	r2, [pc, #84]	; (8005020 <prvAddNewTaskToReadyList+0xcc>)
 8004fcc:	441a      	add	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	f7ff f91a 	bl	800420e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004fda:	f000 febb 	bl	8005d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fde:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <prvAddNewTaskToReadyList+0xc0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00e      	beq.n	8005004 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <prvAddNewTaskToReadyList+0xbc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d207      	bcs.n	8005004 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <prvAddNewTaskToReadyList+0xd0>)
 8004ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005004:	bf00      	nop
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000470 	.word	0x20000470
 8005010:	20000370 	.word	0x20000370
 8005014:	2000047c 	.word	0x2000047c
 8005018:	2000048c 	.word	0x2000048c
 800501c:	20000478 	.word	0x20000478
 8005020:	20000374 	.word	0x20000374
 8005024:	e000ed04 	.word	0xe000ed04

08005028 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d019      	beq.n	800506e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800503a:	4b14      	ldr	r3, [pc, #80]	; (800508c <vTaskDelay+0x64>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00c      	beq.n	800505c <vTaskDelay+0x34>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	b672      	cpsid	i
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	b662      	cpsie	i
 8005056:	60bb      	str	r3, [r7, #8]
}
 8005058:	bf00      	nop
 800505a:	e7fe      	b.n	800505a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800505c:	f000 f87e 	bl	800515c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005060:	2100      	movs	r1, #0
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fcd0 	bl	8005a08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005068:	f000 f886 	bl	8005178 <xTaskResumeAll>
 800506c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d107      	bne.n	8005084 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005074:	4b06      	ldr	r3, [pc, #24]	; (8005090 <vTaskDelay+0x68>)
 8005076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005084:	bf00      	nop
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000498 	.word	0x20000498
 8005090:	e000ed04 	.word	0xe000ed04

08005094 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08a      	sub	sp, #40	; 0x28
 8005098:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050a2:	463a      	mov	r2, r7
 80050a4:	1d39      	adds	r1, r7, #4
 80050a6:	f107 0308 	add.w	r3, r7, #8
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fb fa2e 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050b0:	6839      	ldr	r1, [r7, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	9202      	str	r2, [sp, #8]
 80050b8:	9301      	str	r3, [sp, #4]
 80050ba:	2300      	movs	r3, #0
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	2300      	movs	r3, #0
 80050c0:	460a      	mov	r2, r1
 80050c2:	4920      	ldr	r1, [pc, #128]	; (8005144 <vTaskStartScheduler+0xb0>)
 80050c4:	4820      	ldr	r0, [pc, #128]	; (8005148 <vTaskStartScheduler+0xb4>)
 80050c6:	f7ff fe13 	bl	8004cf0 <xTaskCreateStatic>
 80050ca:	4603      	mov	r3, r0
 80050cc:	4a1f      	ldr	r2, [pc, #124]	; (800514c <vTaskStartScheduler+0xb8>)
 80050ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050d0:	4b1e      	ldr	r3, [pc, #120]	; (800514c <vTaskStartScheduler+0xb8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050d8:	2301      	movs	r3, #1
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e001      	b.n	80050e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d118      	bne.n	800511a <vTaskStartScheduler+0x86>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ec:	b672      	cpsid	i
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	b662      	cpsie	i
 80050fc:	613b      	str	r3, [r7, #16]
}
 80050fe:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005100:	4b13      	ldr	r3, [pc, #76]	; (8005150 <vTaskStartScheduler+0xbc>)
 8005102:	f04f 32ff 	mov.w	r2, #4294967295
 8005106:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005108:	4b12      	ldr	r3, [pc, #72]	; (8005154 <vTaskStartScheduler+0xc0>)
 800510a:	2201      	movs	r2, #1
 800510c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <vTaskStartScheduler+0xc4>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005114:	f000 fd6c 	bl	8005bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005118:	e010      	b.n	800513c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d10c      	bne.n	800513c <vTaskStartScheduler+0xa8>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	b672      	cpsid	i
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	b662      	cpsie	i
 8005136:	60fb      	str	r3, [r7, #12]
}
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <vTaskStartScheduler+0xa6>
}
 800513c:	bf00      	nop
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	08006560 	.word	0x08006560
 8005148:	08005709 	.word	0x08005709
 800514c:	20000494 	.word	0x20000494
 8005150:	20000490 	.word	0x20000490
 8005154:	2000047c 	.word	0x2000047c
 8005158:	20000474 	.word	0x20000474

0800515c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005160:	4b04      	ldr	r3, [pc, #16]	; (8005174 <vTaskSuspendAll+0x18>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3301      	adds	r3, #1
 8005166:	4a03      	ldr	r2, [pc, #12]	; (8005174 <vTaskSuspendAll+0x18>)
 8005168:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800516a:	bf00      	nop
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	20000498 	.word	0x20000498

08005178 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005186:	4b42      	ldr	r3, [pc, #264]	; (8005290 <xTaskResumeAll+0x118>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10c      	bne.n	80051a8 <xTaskResumeAll+0x30>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	b672      	cpsid	i
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	b662      	cpsie	i
 80051a2:	603b      	str	r3, [r7, #0]
}
 80051a4:	bf00      	nop
 80051a6:	e7fe      	b.n	80051a6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051a8:	f000 fda0 	bl	8005cec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051ac:	4b38      	ldr	r3, [pc, #224]	; (8005290 <xTaskResumeAll+0x118>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	4a37      	ldr	r2, [pc, #220]	; (8005290 <xTaskResumeAll+0x118>)
 80051b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051b6:	4b36      	ldr	r3, [pc, #216]	; (8005290 <xTaskResumeAll+0x118>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d161      	bne.n	8005282 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051be:	4b35      	ldr	r3, [pc, #212]	; (8005294 <xTaskResumeAll+0x11c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d05d      	beq.n	8005282 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051c6:	e02e      	b.n	8005226 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c8:	4b33      	ldr	r3, [pc, #204]	; (8005298 <xTaskResumeAll+0x120>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3318      	adds	r3, #24
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff f877 	bl	80042c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3304      	adds	r3, #4
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff f872 	bl	80042c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	2201      	movs	r2, #1
 80051ea:	409a      	lsls	r2, r3
 80051ec:	4b2b      	ldr	r3, [pc, #172]	; (800529c <xTaskResumeAll+0x124>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	4a2a      	ldr	r2, [pc, #168]	; (800529c <xTaskResumeAll+0x124>)
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4a27      	ldr	r2, [pc, #156]	; (80052a0 <xTaskResumeAll+0x128>)
 8005204:	441a      	add	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3304      	adds	r3, #4
 800520a:	4619      	mov	r1, r3
 800520c:	4610      	mov	r0, r2
 800520e:	f7fe fffe 	bl	800420e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005216:	4b23      	ldr	r3, [pc, #140]	; (80052a4 <xTaskResumeAll+0x12c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	429a      	cmp	r2, r3
 800521e:	d302      	bcc.n	8005226 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005220:	4b21      	ldr	r3, [pc, #132]	; (80052a8 <xTaskResumeAll+0x130>)
 8005222:	2201      	movs	r2, #1
 8005224:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005226:	4b1c      	ldr	r3, [pc, #112]	; (8005298 <xTaskResumeAll+0x120>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1cc      	bne.n	80051c8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005234:	f000 fb20 	bl	8005878 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005238:	4b1c      	ldr	r3, [pc, #112]	; (80052ac <xTaskResumeAll+0x134>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d010      	beq.n	8005266 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005244:	f000 f836 	bl	80052b4 <xTaskIncrementTick>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800524e:	4b16      	ldr	r3, [pc, #88]	; (80052a8 <xTaskResumeAll+0x130>)
 8005250:	2201      	movs	r2, #1
 8005252:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3b01      	subs	r3, #1
 8005258:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f1      	bne.n	8005244 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005260:	4b12      	ldr	r3, [pc, #72]	; (80052ac <xTaskResumeAll+0x134>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005266:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <xTaskResumeAll+0x130>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d009      	beq.n	8005282 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800526e:	2301      	movs	r3, #1
 8005270:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005272:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <xTaskResumeAll+0x138>)
 8005274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005282:	f000 fd67 	bl	8005d54 <vPortExitCritical>

	return xAlreadyYielded;
 8005286:	68bb      	ldr	r3, [r7, #8]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20000498 	.word	0x20000498
 8005294:	20000470 	.word	0x20000470
 8005298:	20000430 	.word	0x20000430
 800529c:	20000478 	.word	0x20000478
 80052a0:	20000374 	.word	0x20000374
 80052a4:	20000370 	.word	0x20000370
 80052a8:	20000484 	.word	0x20000484
 80052ac:	20000480 	.word	0x20000480
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052be:	4b4f      	ldr	r3, [pc, #316]	; (80053fc <xTaskIncrementTick+0x148>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f040 808a 	bne.w	80053dc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052c8:	4b4d      	ldr	r3, [pc, #308]	; (8005400 <xTaskIncrementTick+0x14c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3301      	adds	r3, #1
 80052ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052d0:	4a4b      	ldr	r2, [pc, #300]	; (8005400 <xTaskIncrementTick+0x14c>)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d122      	bne.n	8005322 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80052dc:	4b49      	ldr	r3, [pc, #292]	; (8005404 <xTaskIncrementTick+0x150>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00c      	beq.n	8005300 <xTaskIncrementTick+0x4c>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	b672      	cpsid	i
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	b662      	cpsie	i
 80052fa:	603b      	str	r3, [r7, #0]
}
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <xTaskIncrementTick+0x4a>
 8005300:	4b40      	ldr	r3, [pc, #256]	; (8005404 <xTaskIncrementTick+0x150>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	4b40      	ldr	r3, [pc, #256]	; (8005408 <xTaskIncrementTick+0x154>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a3e      	ldr	r2, [pc, #248]	; (8005404 <xTaskIncrementTick+0x150>)
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	4a3e      	ldr	r2, [pc, #248]	; (8005408 <xTaskIncrementTick+0x154>)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	4b3d      	ldr	r3, [pc, #244]	; (800540c <xTaskIncrementTick+0x158>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3301      	adds	r3, #1
 800531a:	4a3c      	ldr	r2, [pc, #240]	; (800540c <xTaskIncrementTick+0x158>)
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	f000 faab 	bl	8005878 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005322:	4b3b      	ldr	r3, [pc, #236]	; (8005410 <xTaskIncrementTick+0x15c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	429a      	cmp	r2, r3
 800532a:	d348      	bcc.n	80053be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800532c:	4b35      	ldr	r3, [pc, #212]	; (8005404 <xTaskIncrementTick+0x150>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005336:	4b36      	ldr	r3, [pc, #216]	; (8005410 <xTaskIncrementTick+0x15c>)
 8005338:	f04f 32ff 	mov.w	r2, #4294967295
 800533c:	601a      	str	r2, [r3, #0]
					break;
 800533e:	e03e      	b.n	80053be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005340:	4b30      	ldr	r3, [pc, #192]	; (8005404 <xTaskIncrementTick+0x150>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	d203      	bcs.n	8005360 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005358:	4a2d      	ldr	r2, [pc, #180]	; (8005410 <xTaskIncrementTick+0x15c>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800535e:	e02e      	b.n	80053be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	3304      	adds	r3, #4
 8005364:	4618      	mov	r0, r3
 8005366:	f7fe ffaf 	bl	80042c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536e:	2b00      	cmp	r3, #0
 8005370:	d004      	beq.n	800537c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	3318      	adds	r3, #24
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe ffa6 	bl	80042c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	2201      	movs	r2, #1
 8005382:	409a      	lsls	r2, r3
 8005384:	4b23      	ldr	r3, [pc, #140]	; (8005414 <xTaskIncrementTick+0x160>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4313      	orrs	r3, r2
 800538a:	4a22      	ldr	r2, [pc, #136]	; (8005414 <xTaskIncrementTick+0x160>)
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4a1f      	ldr	r2, [pc, #124]	; (8005418 <xTaskIncrementTick+0x164>)
 800539c:	441a      	add	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	4610      	mov	r0, r2
 80053a6:	f7fe ff32 	bl	800420e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ae:	4b1b      	ldr	r3, [pc, #108]	; (800541c <xTaskIncrementTick+0x168>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d3b9      	bcc.n	800532c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80053b8:	2301      	movs	r3, #1
 80053ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053bc:	e7b6      	b.n	800532c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053be:	4b17      	ldr	r3, [pc, #92]	; (800541c <xTaskIncrementTick+0x168>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c4:	4914      	ldr	r1, [pc, #80]	; (8005418 <xTaskIncrementTick+0x164>)
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	440b      	add	r3, r1
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d907      	bls.n	80053e6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80053d6:	2301      	movs	r3, #1
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	e004      	b.n	80053e6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80053dc:	4b10      	ldr	r3, [pc, #64]	; (8005420 <xTaskIncrementTick+0x16c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3301      	adds	r3, #1
 80053e2:	4a0f      	ldr	r2, [pc, #60]	; (8005420 <xTaskIncrementTick+0x16c>)
 80053e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80053e6:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <xTaskIncrementTick+0x170>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80053ee:	2301      	movs	r3, #1
 80053f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80053f2:	697b      	ldr	r3, [r7, #20]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20000498 	.word	0x20000498
 8005400:	20000474 	.word	0x20000474
 8005404:	20000428 	.word	0x20000428
 8005408:	2000042c 	.word	0x2000042c
 800540c:	20000488 	.word	0x20000488
 8005410:	20000490 	.word	0x20000490
 8005414:	20000478 	.word	0x20000478
 8005418:	20000374 	.word	0x20000374
 800541c:	20000370 	.word	0x20000370
 8005420:	20000480 	.word	0x20000480
 8005424:	20000484 	.word	0x20000484

08005428 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800542e:	4b28      	ldr	r3, [pc, #160]	; (80054d0 <vTaskSwitchContext+0xa8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005436:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <vTaskSwitchContext+0xac>)
 8005438:	2201      	movs	r2, #1
 800543a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800543c:	e041      	b.n	80054c2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800543e:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <vTaskSwitchContext+0xac>)
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005444:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <vTaskSwitchContext+0xb0>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	fab3 f383 	clz	r3, r3
 8005450:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005452:	7afb      	ldrb	r3, [r7, #11]
 8005454:	f1c3 031f 	rsb	r3, r3, #31
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	4920      	ldr	r1, [pc, #128]	; (80054dc <vTaskSwitchContext+0xb4>)
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10c      	bne.n	8005488 <vTaskSwitchContext+0x60>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	b672      	cpsid	i
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	b662      	cpsie	i
 8005482:	607b      	str	r3, [r7, #4]
}
 8005484:	bf00      	nop
 8005486:	e7fe      	b.n	8005486 <vTaskSwitchContext+0x5e>
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4a12      	ldr	r2, [pc, #72]	; (80054dc <vTaskSwitchContext+0xb4>)
 8005494:	4413      	add	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	3308      	adds	r3, #8
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d104      	bne.n	80054b8 <vTaskSwitchContext+0x90>
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	605a      	str	r2, [r3, #4]
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	4a08      	ldr	r2, [pc, #32]	; (80054e0 <vTaskSwitchContext+0xb8>)
 80054c0:	6013      	str	r3, [r2, #0]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	20000498 	.word	0x20000498
 80054d4:	20000484 	.word	0x20000484
 80054d8:	20000478 	.word	0x20000478
 80054dc:	20000374 	.word	0x20000374
 80054e0:	20000370 	.word	0x20000370

080054e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10c      	bne.n	800550e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	b672      	cpsid	i
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	b662      	cpsie	i
 8005508:	60fb      	str	r3, [r7, #12]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800550e:	4b07      	ldr	r3, [pc, #28]	; (800552c <vTaskPlaceOnEventList+0x48>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3318      	adds	r3, #24
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fe fe9d 	bl	8004256 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800551c:	2101      	movs	r1, #1
 800551e:	6838      	ldr	r0, [r7, #0]
 8005520:	f000 fa72 	bl	8005a08 <prvAddCurrentTaskToDelayedList>
}
 8005524:	bf00      	nop
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	20000370 	.word	0x20000370

08005530 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10c      	bne.n	8005560 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	b672      	cpsid	i
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	b662      	cpsie	i
 800555a:	60fb      	str	r3, [r7, #12]
}
 800555c:	bf00      	nop
 800555e:	e7fe      	b.n	800555e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	3318      	adds	r3, #24
 8005564:	4618      	mov	r0, r3
 8005566:	f7fe feaf 	bl	80042c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800556a:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <xTaskRemoveFromEventList+0xb0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d11c      	bne.n	80055ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	3304      	adds	r3, #4
 8005576:	4618      	mov	r0, r3
 8005578:	f7fe fea6 	bl	80042c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	2201      	movs	r2, #1
 8005582:	409a      	lsls	r2, r3
 8005584:	4b17      	ldr	r3, [pc, #92]	; (80055e4 <xTaskRemoveFromEventList+0xb4>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4313      	orrs	r3, r2
 800558a:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <xTaskRemoveFromEventList+0xb4>)
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4a13      	ldr	r2, [pc, #76]	; (80055e8 <xTaskRemoveFromEventList+0xb8>)
 800559c:	441a      	add	r2, r3
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	3304      	adds	r3, #4
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f7fe fe32 	bl	800420e <vListInsertEnd>
 80055aa:	e005      	b.n	80055b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	3318      	adds	r3, #24
 80055b0:	4619      	mov	r1, r3
 80055b2:	480e      	ldr	r0, [pc, #56]	; (80055ec <xTaskRemoveFromEventList+0xbc>)
 80055b4:	f7fe fe2b 	bl	800420e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055bc:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <xTaskRemoveFromEventList+0xc0>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d905      	bls.n	80055d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055c6:	2301      	movs	r3, #1
 80055c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055ca:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <xTaskRemoveFromEventList+0xc4>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	e001      	b.n	80055d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80055d6:	697b      	ldr	r3, [r7, #20]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20000498 	.word	0x20000498
 80055e4:	20000478 	.word	0x20000478
 80055e8:	20000374 	.word	0x20000374
 80055ec:	20000430 	.word	0x20000430
 80055f0:	20000370 	.word	0x20000370
 80055f4:	20000484 	.word	0x20000484

080055f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005600:	4b06      	ldr	r3, [pc, #24]	; (800561c <vTaskInternalSetTimeOutState+0x24>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005608:	4b05      	ldr	r3, [pc, #20]	; (8005620 <vTaskInternalSetTimeOutState+0x28>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	605a      	str	r2, [r3, #4]
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	20000488 	.word	0x20000488
 8005620:	20000474 	.word	0x20000474

08005624 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10c      	bne.n	800564e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	b672      	cpsid	i
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	b662      	cpsie	i
 8005648:	613b      	str	r3, [r7, #16]
}
 800564a:	bf00      	nop
 800564c:	e7fe      	b.n	800564c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10c      	bne.n	800566e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	b672      	cpsid	i
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	b662      	cpsie	i
 8005668:	60fb      	str	r3, [r7, #12]
}
 800566a:	bf00      	nop
 800566c:	e7fe      	b.n	800566c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800566e:	f000 fb3d 	bl	8005cec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005672:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <xTaskCheckForTimeOut+0xc4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568a:	d102      	bne.n	8005692 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800568c:	2300      	movs	r3, #0
 800568e:	61fb      	str	r3, [r7, #28]
 8005690:	e023      	b.n	80056da <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	4b15      	ldr	r3, [pc, #84]	; (80056ec <xTaskCheckForTimeOut+0xc8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d007      	beq.n	80056ae <xTaskCheckForTimeOut+0x8a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d302      	bcc.n	80056ae <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056a8:	2301      	movs	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	e015      	b.n	80056da <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d20b      	bcs.n	80056d0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	1ad2      	subs	r2, r2, r3
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff ff97 	bl	80055f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	e004      	b.n	80056da <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056d6:	2301      	movs	r3, #1
 80056d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056da:	f000 fb3b 	bl	8005d54 <vPortExitCritical>

	return xReturn;
 80056de:	69fb      	ldr	r3, [r7, #28]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3720      	adds	r7, #32
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20000474 	.word	0x20000474
 80056ec:	20000488 	.word	0x20000488

080056f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056f4:	4b03      	ldr	r3, [pc, #12]	; (8005704 <vTaskMissedYield+0x14>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	601a      	str	r2, [r3, #0]
}
 80056fa:	bf00      	nop
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	20000484 	.word	0x20000484

08005708 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005710:	f000 f852 	bl	80057b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <prvIdleTask+0x28>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d9f9      	bls.n	8005710 <prvIdleTask+0x8>
			{
				taskYIELD();
 800571c:	4b05      	ldr	r3, [pc, #20]	; (8005734 <prvIdleTask+0x2c>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800572c:	e7f0      	b.n	8005710 <prvIdleTask+0x8>
 800572e:	bf00      	nop
 8005730:	20000374 	.word	0x20000374
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	e00c      	b.n	800575e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	4613      	mov	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4a12      	ldr	r2, [pc, #72]	; (8005798 <prvInitialiseTaskLists+0x60>)
 8005750:	4413      	add	r3, r2
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe fd2e 	bl	80041b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3301      	adds	r3, #1
 800575c:	607b      	str	r3, [r7, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b06      	cmp	r3, #6
 8005762:	d9ef      	bls.n	8005744 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005764:	480d      	ldr	r0, [pc, #52]	; (800579c <prvInitialiseTaskLists+0x64>)
 8005766:	f7fe fd25 	bl	80041b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800576a:	480d      	ldr	r0, [pc, #52]	; (80057a0 <prvInitialiseTaskLists+0x68>)
 800576c:	f7fe fd22 	bl	80041b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005770:	480c      	ldr	r0, [pc, #48]	; (80057a4 <prvInitialiseTaskLists+0x6c>)
 8005772:	f7fe fd1f 	bl	80041b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005776:	480c      	ldr	r0, [pc, #48]	; (80057a8 <prvInitialiseTaskLists+0x70>)
 8005778:	f7fe fd1c 	bl	80041b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800577c:	480b      	ldr	r0, [pc, #44]	; (80057ac <prvInitialiseTaskLists+0x74>)
 800577e:	f7fe fd19 	bl	80041b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005782:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <prvInitialiseTaskLists+0x78>)
 8005784:	4a05      	ldr	r2, [pc, #20]	; (800579c <prvInitialiseTaskLists+0x64>)
 8005786:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <prvInitialiseTaskLists+0x7c>)
 800578a:	4a05      	ldr	r2, [pc, #20]	; (80057a0 <prvInitialiseTaskLists+0x68>)
 800578c:	601a      	str	r2, [r3, #0]
}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000374 	.word	0x20000374
 800579c:	20000400 	.word	0x20000400
 80057a0:	20000414 	.word	0x20000414
 80057a4:	20000430 	.word	0x20000430
 80057a8:	20000444 	.word	0x20000444
 80057ac:	2000045c 	.word	0x2000045c
 80057b0:	20000428 	.word	0x20000428
 80057b4:	2000042c 	.word	0x2000042c

080057b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057be:	e019      	b.n	80057f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057c0:	f000 fa94 	bl	8005cec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c4:	4b10      	ldr	r3, [pc, #64]	; (8005808 <prvCheckTasksWaitingTermination+0x50>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fe fd79 	bl	80042c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057d6:	4b0d      	ldr	r3, [pc, #52]	; (800580c <prvCheckTasksWaitingTermination+0x54>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3b01      	subs	r3, #1
 80057dc:	4a0b      	ldr	r2, [pc, #44]	; (800580c <prvCheckTasksWaitingTermination+0x54>)
 80057de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <prvCheckTasksWaitingTermination+0x58>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	4a0a      	ldr	r2, [pc, #40]	; (8005810 <prvCheckTasksWaitingTermination+0x58>)
 80057e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057ea:	f000 fab3 	bl	8005d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f810 	bl	8005814 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057f4:	4b06      	ldr	r3, [pc, #24]	; (8005810 <prvCheckTasksWaitingTermination+0x58>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e1      	bne.n	80057c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057fc:	bf00      	nop
 80057fe:	bf00      	nop
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000444 	.word	0x20000444
 800580c:	20000470 	.word	0x20000470
 8005810:	20000458 	.word	0x20000458

08005814 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005822:	2b00      	cmp	r3, #0
 8005824:	d108      	bne.n	8005838 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fc54 	bl	80060d8 <vPortFree>
				vPortFree( pxTCB );
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fc51 	bl	80060d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005836:	e01a      	b.n	800586e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800583e:	2b01      	cmp	r3, #1
 8005840:	d103      	bne.n	800584a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fc48 	bl	80060d8 <vPortFree>
	}
 8005848:	e011      	b.n	800586e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005850:	2b02      	cmp	r3, #2
 8005852:	d00c      	beq.n	800586e <prvDeleteTCB+0x5a>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	b672      	cpsid	i
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	b662      	cpsie	i
 8005868:	60fb      	str	r3, [r7, #12]
}
 800586a:	bf00      	nop
 800586c:	e7fe      	b.n	800586c <prvDeleteTCB+0x58>
	}
 800586e:	bf00      	nop
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800587e:	4b0c      	ldr	r3, [pc, #48]	; (80058b0 <prvResetNextTaskUnblockTime+0x38>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d104      	bne.n	8005892 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005888:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <prvResetNextTaskUnblockTime+0x3c>)
 800588a:	f04f 32ff 	mov.w	r2, #4294967295
 800588e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005890:	e008      	b.n	80058a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005892:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <prvResetNextTaskUnblockTime+0x38>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	4a04      	ldr	r2, [pc, #16]	; (80058b4 <prvResetNextTaskUnblockTime+0x3c>)
 80058a2:	6013      	str	r3, [r2, #0]
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	20000428 	.word	0x20000428
 80058b4:	20000490 	.word	0x20000490

080058b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058be:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <xTaskGetSchedulerState+0x34>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d102      	bne.n	80058cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058c6:	2301      	movs	r3, #1
 80058c8:	607b      	str	r3, [r7, #4]
 80058ca:	e008      	b.n	80058de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058cc:	4b08      	ldr	r3, [pc, #32]	; (80058f0 <xTaskGetSchedulerState+0x38>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d102      	bne.n	80058da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058d4:	2302      	movs	r3, #2
 80058d6:	607b      	str	r3, [r7, #4]
 80058d8:	e001      	b.n	80058de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058da:	2300      	movs	r3, #0
 80058dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058de:	687b      	ldr	r3, [r7, #4]
	}
 80058e0:	4618      	mov	r0, r3
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	2000047c 	.word	0x2000047c
 80058f0:	20000498 	.word	0x20000498

080058f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005900:	2300      	movs	r3, #0
 8005902:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d072      	beq.n	80059f0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800590a:	4b3c      	ldr	r3, [pc, #240]	; (80059fc <xTaskPriorityDisinherit+0x108>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	429a      	cmp	r2, r3
 8005912:	d00c      	beq.n	800592e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	b672      	cpsid	i
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	b662      	cpsie	i
 8005928:	60fb      	str	r3, [r7, #12]
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10c      	bne.n	8005950 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	b672      	cpsid	i
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	b662      	cpsie	i
 800594a:	60bb      	str	r3, [r7, #8]
}
 800594c:	bf00      	nop
 800594e:	e7fe      	b.n	800594e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005954:	1e5a      	subs	r2, r3, #1
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005962:	429a      	cmp	r2, r3
 8005964:	d044      	beq.n	80059f0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800596a:	2b00      	cmp	r3, #0
 800596c:	d140      	bne.n	80059f0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	3304      	adds	r3, #4
 8005972:	4618      	mov	r0, r3
 8005974:	f7fe fca8 	bl	80042c8 <uxListRemove>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d115      	bne.n	80059aa <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005982:	491f      	ldr	r1, [pc, #124]	; (8005a00 <xTaskPriorityDisinherit+0x10c>)
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <xTaskPriorityDisinherit+0xb6>
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	2201      	movs	r2, #1
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	43da      	mvns	r2, r3
 80059a0:	4b18      	ldr	r3, [pc, #96]	; (8005a04 <xTaskPriorityDisinherit+0x110>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4013      	ands	r3, r2
 80059a6:	4a17      	ldr	r2, [pc, #92]	; (8005a04 <xTaskPriorityDisinherit+0x110>)
 80059a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	f1c3 0207 	rsb	r2, r3, #7
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	2201      	movs	r2, #1
 80059c4:	409a      	lsls	r2, r3
 80059c6:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <xTaskPriorityDisinherit+0x110>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	4a0d      	ldr	r2, [pc, #52]	; (8005a04 <xTaskPriorityDisinherit+0x110>)
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4a08      	ldr	r2, [pc, #32]	; (8005a00 <xTaskPriorityDisinherit+0x10c>)
 80059de:	441a      	add	r2, r3
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	3304      	adds	r3, #4
 80059e4:	4619      	mov	r1, r3
 80059e6:	4610      	mov	r0, r2
 80059e8:	f7fe fc11 	bl	800420e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059ec:	2301      	movs	r3, #1
 80059ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059f0:	697b      	ldr	r3, [r7, #20]
	}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000370 	.word	0x20000370
 8005a00:	20000374 	.word	0x20000374
 8005a04:	20000478 	.word	0x20000478

08005a08 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a12:	4b29      	ldr	r3, [pc, #164]	; (8005ab8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a18:	4b28      	ldr	r3, [pc, #160]	; (8005abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe fc52 	bl	80042c8 <uxListRemove>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10b      	bne.n	8005a42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005a2a:	4b24      	ldr	r3, [pc, #144]	; (8005abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	2201      	movs	r2, #1
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	43da      	mvns	r2, r3
 8005a38:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	4a20      	ldr	r2, [pc, #128]	; (8005ac0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a48:	d10a      	bne.n	8005a60 <prvAddCurrentTaskToDelayedList+0x58>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a50:	4b1a      	ldr	r3, [pc, #104]	; (8005abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3304      	adds	r3, #4
 8005a56:	4619      	mov	r1, r3
 8005a58:	481a      	ldr	r0, [pc, #104]	; (8005ac4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a5a:	f7fe fbd8 	bl	800420e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a5e:	e026      	b.n	8005aae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4413      	add	r3, r2
 8005a66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a68:	4b14      	ldr	r3, [pc, #80]	; (8005abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d209      	bcs.n	8005a8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a78:	4b13      	ldr	r3, [pc, #76]	; (8005ac8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3304      	adds	r3, #4
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f7fe fbe6 	bl	8004256 <vListInsert>
}
 8005a8a:	e010      	b.n	8005aae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a8c:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <prvAddCurrentTaskToDelayedList+0xc4>)
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3304      	adds	r3, #4
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f7fe fbdc 	bl	8004256 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d202      	bcs.n	8005aae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005aa8:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	6013      	str	r3, [r2, #0]
}
 8005aae:	bf00      	nop
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20000474 	.word	0x20000474
 8005abc:	20000370 	.word	0x20000370
 8005ac0:	20000478 	.word	0x20000478
 8005ac4:	2000045c 	.word	0x2000045c
 8005ac8:	2000042c 	.word	0x2000042c
 8005acc:	20000428 	.word	0x20000428
 8005ad0:	20000490 	.word	0x20000490

08005ad4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3b04      	subs	r3, #4
 8005ae4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3b04      	subs	r3, #4
 8005af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f023 0201 	bic.w	r2, r3, #1
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3b04      	subs	r3, #4
 8005b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b04:	4a0c      	ldr	r2, [pc, #48]	; (8005b38 <pxPortInitialiseStack+0x64>)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	3b14      	subs	r3, #20
 8005b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3b04      	subs	r3, #4
 8005b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f06f 0202 	mvn.w	r2, #2
 8005b22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3b20      	subs	r3, #32
 8005b28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	08005b3d 	.word	0x08005b3d

08005b3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b46:	4b14      	ldr	r3, [pc, #80]	; (8005b98 <prvTaskExitError+0x5c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4e:	d00c      	beq.n	8005b6a <prvTaskExitError+0x2e>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	b672      	cpsid	i
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	b662      	cpsie	i
 8005b64:	60fb      	str	r3, [r7, #12]
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <prvTaskExitError+0x2c>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	b672      	cpsid	i
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	b662      	cpsie	i
 8005b7e:	60bb      	str	r3, [r7, #8]
}
 8005b80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b82:	bf00      	nop
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0fc      	beq.n	8005b84 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	2000000c 	.word	0x2000000c
 8005b9c:	00000000 	.word	0x00000000

08005ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ba0:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <pxCurrentTCBConst2>)
 8005ba2:	6819      	ldr	r1, [r3, #0]
 8005ba4:	6808      	ldr	r0, [r1, #0]
 8005ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005baa:	f380 8809 	msr	PSP, r0
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f04f 0000 	mov.w	r0, #0
 8005bb6:	f380 8811 	msr	BASEPRI, r0
 8005bba:	4770      	bx	lr
 8005bbc:	f3af 8000 	nop.w

08005bc0 <pxCurrentTCBConst2>:
 8005bc0:	20000370 	.word	0x20000370
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop

08005bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005bc8:	4808      	ldr	r0, [pc, #32]	; (8005bec <prvPortStartFirstTask+0x24>)
 8005bca:	6800      	ldr	r0, [r0, #0]
 8005bcc:	6800      	ldr	r0, [r0, #0]
 8005bce:	f380 8808 	msr	MSP, r0
 8005bd2:	f04f 0000 	mov.w	r0, #0
 8005bd6:	f380 8814 	msr	CONTROL, r0
 8005bda:	b662      	cpsie	i
 8005bdc:	b661      	cpsie	f
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	df00      	svc	0
 8005be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bea:	bf00      	nop
 8005bec:	e000ed08 	.word	0xe000ed08

08005bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bf6:	4b37      	ldr	r3, [pc, #220]	; (8005cd4 <xPortStartScheduler+0xe4>)
 8005bf8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	22ff      	movs	r2, #255	; 0xff
 8005c06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	4b2f      	ldr	r3, [pc, #188]	; (8005cd8 <xPortStartScheduler+0xe8>)
 8005c1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c1e:	4b2f      	ldr	r3, [pc, #188]	; (8005cdc <xPortStartScheduler+0xec>)
 8005c20:	2207      	movs	r2, #7
 8005c22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c24:	e009      	b.n	8005c3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005c26:	4b2d      	ldr	r3, [pc, #180]	; (8005cdc <xPortStartScheduler+0xec>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	4a2b      	ldr	r2, [pc, #172]	; (8005cdc <xPortStartScheduler+0xec>)
 8005c2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c3a:	78fb      	ldrb	r3, [r7, #3]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c42:	2b80      	cmp	r3, #128	; 0x80
 8005c44:	d0ef      	beq.n	8005c26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c46:	4b25      	ldr	r3, [pc, #148]	; (8005cdc <xPortStartScheduler+0xec>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f1c3 0307 	rsb	r3, r3, #7
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d00c      	beq.n	8005c6c <xPortStartScheduler+0x7c>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	b672      	cpsid	i
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	b662      	cpsie	i
 8005c66:	60bb      	str	r3, [r7, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c6c:	4b1b      	ldr	r3, [pc, #108]	; (8005cdc <xPortStartScheduler+0xec>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	4a1a      	ldr	r2, [pc, #104]	; (8005cdc <xPortStartScheduler+0xec>)
 8005c74:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c76:	4b19      	ldr	r3, [pc, #100]	; (8005cdc <xPortStartScheduler+0xec>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c7e:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <xPortStartScheduler+0xec>)
 8005c80:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c8a:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <xPortStartScheduler+0xf0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a14      	ldr	r2, [pc, #80]	; (8005ce0 <xPortStartScheduler+0xf0>)
 8005c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c94:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c96:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <xPortStartScheduler+0xf0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a11      	ldr	r2, [pc, #68]	; (8005ce0 <xPortStartScheduler+0xf0>)
 8005c9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ca0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ca2:	f000 f8dd 	bl	8005e60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ca6:	4b0f      	ldr	r3, [pc, #60]	; (8005ce4 <xPortStartScheduler+0xf4>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005cac:	f000 f8fc 	bl	8005ea8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005cb0:	4b0d      	ldr	r3, [pc, #52]	; (8005ce8 <xPortStartScheduler+0xf8>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a0c      	ldr	r2, [pc, #48]	; (8005ce8 <xPortStartScheduler+0xf8>)
 8005cb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005cba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005cbc:	f7ff ff84 	bl	8005bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005cc0:	f7ff fbb2 	bl	8005428 <vTaskSwitchContext>
	prvTaskExitError();
 8005cc4:	f7ff ff3a 	bl	8005b3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	e000e400 	.word	0xe000e400
 8005cd8:	2000049c 	.word	0x2000049c
 8005cdc:	200004a0 	.word	0x200004a0
 8005ce0:	e000ed20 	.word	0xe000ed20
 8005ce4:	2000000c 	.word	0x2000000c
 8005ce8:	e000ef34 	.word	0xe000ef34

08005cec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	b672      	cpsid	i
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	b662      	cpsie	i
 8005d06:	607b      	str	r3, [r7, #4]
}
 8005d08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d0a:	4b10      	ldr	r3, [pc, #64]	; (8005d4c <vPortEnterCritical+0x60>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	4a0e      	ldr	r2, [pc, #56]	; (8005d4c <vPortEnterCritical+0x60>)
 8005d12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d14:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <vPortEnterCritical+0x60>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d111      	bne.n	8005d40 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d1c:	4b0c      	ldr	r3, [pc, #48]	; (8005d50 <vPortEnterCritical+0x64>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00c      	beq.n	8005d40 <vPortEnterCritical+0x54>
	__asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2a:	b672      	cpsid	i
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	b662      	cpsie	i
 8005d3a:	603b      	str	r3, [r7, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	e7fe      	b.n	8005d3e <vPortEnterCritical+0x52>
	}
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	2000000c 	.word	0x2000000c
 8005d50:	e000ed04 	.word	0xe000ed04

08005d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d5a:	4b13      	ldr	r3, [pc, #76]	; (8005da8 <vPortExitCritical+0x54>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10c      	bne.n	8005d7c <vPortExitCritical+0x28>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	b672      	cpsid	i
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	b662      	cpsie	i
 8005d76:	607b      	str	r3, [r7, #4]
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <vPortExitCritical+0x54>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	4a09      	ldr	r2, [pc, #36]	; (8005da8 <vPortExitCritical+0x54>)
 8005d84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d86:	4b08      	ldr	r3, [pc, #32]	; (8005da8 <vPortExitCritical+0x54>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d105      	bne.n	8005d9a <vPortExitCritical+0x46>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	f383 8811 	msr	BASEPRI, r3
}
 8005d98:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	2000000c 	.word	0x2000000c
 8005dac:	00000000 	.word	0x00000000

08005db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005db0:	f3ef 8009 	mrs	r0, PSP
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <pxCurrentTCBConst>)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	f01e 0f10 	tst.w	lr, #16
 8005dc0:	bf08      	it	eq
 8005dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dca:	6010      	str	r0, [r2, #0]
 8005dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005dd4:	b672      	cpsid	i
 8005dd6:	f380 8811 	msr	BASEPRI, r0
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	b662      	cpsie	i
 8005de4:	f7ff fb20 	bl	8005428 <vTaskSwitchContext>
 8005de8:	f04f 0000 	mov.w	r0, #0
 8005dec:	f380 8811 	msr	BASEPRI, r0
 8005df0:	bc09      	pop	{r0, r3}
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	6808      	ldr	r0, [r1, #0]
 8005df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfa:	f01e 0f10 	tst.w	lr, #16
 8005dfe:	bf08      	it	eq
 8005e00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e04:	f380 8809 	msr	PSP, r0
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop

08005e10 <pxCurrentTCBConst>:
 8005e10:	20000370 	.word	0x20000370
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop

08005e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	b672      	cpsid	i
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	b662      	cpsie	i
 8005e32:	607b      	str	r3, [r7, #4]
}
 8005e34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e36:	f7ff fa3d 	bl	80052b4 <xTaskIncrementTick>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e40:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <SysTick_Handler+0x44>)
 8005e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	2300      	movs	r3, #0
 8005e4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	f383 8811 	msr	BASEPRI, r3
}
 8005e52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e54:	bf00      	nop
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	e000ed04 	.word	0xe000ed04

08005e60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e64:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <vPortSetupTimerInterrupt+0x34>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e6a:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <vPortSetupTimerInterrupt+0x38>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e70:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <vPortSetupTimerInterrupt+0x3c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <vPortSetupTimerInterrupt+0x40>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	099b      	lsrs	r3, r3, #6
 8005e7c:	4a09      	ldr	r2, [pc, #36]	; (8005ea4 <vPortSetupTimerInterrupt+0x44>)
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e82:	4b04      	ldr	r3, [pc, #16]	; (8005e94 <vPortSetupTimerInterrupt+0x34>)
 8005e84:	2207      	movs	r2, #7
 8005e86:	601a      	str	r2, [r3, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	e000e010 	.word	0xe000e010
 8005e98:	e000e018 	.word	0xe000e018
 8005e9c:	20000000 	.word	0x20000000
 8005ea0:	10624dd3 	.word	0x10624dd3
 8005ea4:	e000e014 	.word	0xe000e014

08005ea8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ea8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005eb8 <vPortEnableVFP+0x10>
 8005eac:	6801      	ldr	r1, [r0, #0]
 8005eae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005eb2:	6001      	str	r1, [r0, #0]
 8005eb4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005eb6:	bf00      	nop
 8005eb8:	e000ed88 	.word	0xe000ed88

08005ebc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ec2:	f3ef 8305 	mrs	r3, IPSR
 8005ec6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b0f      	cmp	r3, #15
 8005ecc:	d916      	bls.n	8005efc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ece:	4a19      	ldr	r2, [pc, #100]	; (8005f34 <vPortValidateInterruptPriority+0x78>)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ed8:	4b17      	ldr	r3, [pc, #92]	; (8005f38 <vPortValidateInterruptPriority+0x7c>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	7afa      	ldrb	r2, [r7, #11]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d20c      	bcs.n	8005efc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee6:	b672      	cpsid	i
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	b662      	cpsie	i
 8005ef6:	607b      	str	r3, [r7, #4]
}
 8005ef8:	bf00      	nop
 8005efa:	e7fe      	b.n	8005efa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005efc:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <vPortValidateInterruptPriority+0x80>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f04:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <vPortValidateInterruptPriority+0x84>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d90c      	bls.n	8005f26 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	b672      	cpsid	i
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	b662      	cpsie	i
 8005f20:	603b      	str	r3, [r7, #0]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <vPortValidateInterruptPriority+0x68>
	}
 8005f26:	bf00      	nop
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	e000e3f0 	.word	0xe000e3f0
 8005f38:	2000049c 	.word	0x2000049c
 8005f3c:	e000ed0c 	.word	0xe000ed0c
 8005f40:	200004a0 	.word	0x200004a0

08005f44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08a      	sub	sp, #40	; 0x28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f50:	f7ff f904 	bl	800515c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f54:	4b5b      	ldr	r3, [pc, #364]	; (80060c4 <pvPortMalloc+0x180>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f5c:	f000 f91a 	bl	8006194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f60:	4b59      	ldr	r3, [pc, #356]	; (80060c8 <pvPortMalloc+0x184>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4013      	ands	r3, r2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f040 8092 	bne.w	8006092 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01f      	beq.n	8005fb4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005f74:	2208      	movs	r2, #8
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4413      	add	r3, r2
 8005f7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d016      	beq.n	8005fb4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f023 0307 	bic.w	r3, r3, #7
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00c      	beq.n	8005fb4 <pvPortMalloc+0x70>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	b672      	cpsid	i
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	b662      	cpsie	i
 8005fae:	617b      	str	r3, [r7, #20]
}
 8005fb0:	bf00      	nop
 8005fb2:	e7fe      	b.n	8005fb2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d06b      	beq.n	8006092 <pvPortMalloc+0x14e>
 8005fba:	4b44      	ldr	r3, [pc, #272]	; (80060cc <pvPortMalloc+0x188>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d866      	bhi.n	8006092 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fc4:	4b42      	ldr	r3, [pc, #264]	; (80060d0 <pvPortMalloc+0x18c>)
 8005fc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fc8:	4b41      	ldr	r3, [pc, #260]	; (80060d0 <pvPortMalloc+0x18c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fce:	e004      	b.n	8005fda <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d903      	bls.n	8005fec <pvPortMalloc+0xa8>
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f1      	bne.n	8005fd0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fec:	4b35      	ldr	r3, [pc, #212]	; (80060c4 <pvPortMalloc+0x180>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d04d      	beq.n	8006092 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2208      	movs	r2, #8
 8005ffc:	4413      	add	r3, r2
 8005ffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	1ad2      	subs	r2, r2, r3
 8006010:	2308      	movs	r3, #8
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	429a      	cmp	r2, r3
 8006016:	d921      	bls.n	800605c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4413      	add	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00c      	beq.n	8006044 <pvPortMalloc+0x100>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	b672      	cpsid	i
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	b662      	cpsie	i
 800603e:	613b      	str	r3, [r7, #16]
}
 8006040:	bf00      	nop
 8006042:	e7fe      	b.n	8006042 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	1ad2      	subs	r2, r2, r3
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006056:	69b8      	ldr	r0, [r7, #24]
 8006058:	f000 f8fe 	bl	8006258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800605c:	4b1b      	ldr	r3, [pc, #108]	; (80060cc <pvPortMalloc+0x188>)
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	4a19      	ldr	r2, [pc, #100]	; (80060cc <pvPortMalloc+0x188>)
 8006068:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800606a:	4b18      	ldr	r3, [pc, #96]	; (80060cc <pvPortMalloc+0x188>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4b19      	ldr	r3, [pc, #100]	; (80060d4 <pvPortMalloc+0x190>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d203      	bcs.n	800607e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006076:	4b15      	ldr	r3, [pc, #84]	; (80060cc <pvPortMalloc+0x188>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a16      	ldr	r2, [pc, #88]	; (80060d4 <pvPortMalloc+0x190>)
 800607c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	4b11      	ldr	r3, [pc, #68]	; (80060c8 <pvPortMalloc+0x184>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	431a      	orrs	r2, r3
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006092:	f7ff f871 	bl	8005178 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00c      	beq.n	80060ba <pvPortMalloc+0x176>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	b672      	cpsid	i
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	b662      	cpsie	i
 80060b4:	60fb      	str	r3, [r7, #12]
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <pvPortMalloc+0x174>
	return pvReturn;
 80060ba:	69fb      	ldr	r3, [r7, #28]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3728      	adds	r7, #40	; 0x28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	200040ac 	.word	0x200040ac
 80060c8:	200040b8 	.word	0x200040b8
 80060cc:	200040b0 	.word	0x200040b0
 80060d0:	200040a4 	.word	0x200040a4
 80060d4:	200040b4 	.word	0x200040b4

080060d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d04c      	beq.n	8006184 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060ea:	2308      	movs	r3, #8
 80060ec:	425b      	negs	r3, r3
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4413      	add	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	4b23      	ldr	r3, [pc, #140]	; (800618c <vPortFree+0xb4>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4013      	ands	r3, r2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10c      	bne.n	8006120 <vPortFree+0x48>
	__asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	b672      	cpsid	i
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	b662      	cpsie	i
 800611a:	60fb      	str	r3, [r7, #12]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00c      	beq.n	8006142 <vPortFree+0x6a>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	b672      	cpsid	i
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	b662      	cpsie	i
 800613c:	60bb      	str	r3, [r7, #8]
}
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	4b11      	ldr	r3, [pc, #68]	; (800618c <vPortFree+0xb4>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4013      	ands	r3, r2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d019      	beq.n	8006184 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d115      	bne.n	8006184 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	4b0b      	ldr	r3, [pc, #44]	; (800618c <vPortFree+0xb4>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	43db      	mvns	r3, r3
 8006162:	401a      	ands	r2, r3
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006168:	f7fe fff8 	bl	800515c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	4b07      	ldr	r3, [pc, #28]	; (8006190 <vPortFree+0xb8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4413      	add	r3, r2
 8006176:	4a06      	ldr	r2, [pc, #24]	; (8006190 <vPortFree+0xb8>)
 8006178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800617a:	6938      	ldr	r0, [r7, #16]
 800617c:	f000 f86c 	bl	8006258 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006180:	f7fe fffa 	bl	8005178 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006184:	bf00      	nop
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	200040b8 	.word	0x200040b8
 8006190:	200040b0 	.word	0x200040b0

08006194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800619a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800619e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061a0:	4b27      	ldr	r3, [pc, #156]	; (8006240 <prvHeapInit+0xac>)
 80061a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00c      	beq.n	80061c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3307      	adds	r3, #7
 80061b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0307 	bic.w	r3, r3, #7
 80061ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	4a1f      	ldr	r2, [pc, #124]	; (8006240 <prvHeapInit+0xac>)
 80061c4:	4413      	add	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061cc:	4a1d      	ldr	r2, [pc, #116]	; (8006244 <prvHeapInit+0xb0>)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061d2:	4b1c      	ldr	r3, [pc, #112]	; (8006244 <prvHeapInit+0xb0>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	4413      	add	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061e0:	2208      	movs	r2, #8
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0307 	bic.w	r3, r3, #7
 80061ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4a15      	ldr	r2, [pc, #84]	; (8006248 <prvHeapInit+0xb4>)
 80061f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061f6:	4b14      	ldr	r3, [pc, #80]	; (8006248 <prvHeapInit+0xb4>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2200      	movs	r2, #0
 80061fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061fe:	4b12      	ldr	r3, [pc, #72]	; (8006248 <prvHeapInit+0xb4>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	1ad2      	subs	r2, r2, r3
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006214:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <prvHeapInit+0xb4>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	4a0a      	ldr	r2, [pc, #40]	; (800624c <prvHeapInit+0xb8>)
 8006222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	4a09      	ldr	r2, [pc, #36]	; (8006250 <prvHeapInit+0xbc>)
 800622a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800622c:	4b09      	ldr	r3, [pc, #36]	; (8006254 <prvHeapInit+0xc0>)
 800622e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006232:	601a      	str	r2, [r3, #0]
}
 8006234:	bf00      	nop
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	200004a4 	.word	0x200004a4
 8006244:	200040a4 	.word	0x200040a4
 8006248:	200040ac 	.word	0x200040ac
 800624c:	200040b4 	.word	0x200040b4
 8006250:	200040b0 	.word	0x200040b0
 8006254:	200040b8 	.word	0x200040b8

08006258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006260:	4b28      	ldr	r3, [pc, #160]	; (8006304 <prvInsertBlockIntoFreeList+0xac>)
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	e002      	b.n	800626c <prvInsertBlockIntoFreeList+0x14>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	429a      	cmp	r2, r3
 8006274:	d8f7      	bhi.n	8006266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	4413      	add	r3, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	429a      	cmp	r2, r3
 8006286:	d108      	bne.n	800629a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	441a      	add	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	441a      	add	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d118      	bne.n	80062e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b15      	ldr	r3, [pc, #84]	; (8006308 <prvInsertBlockIntoFreeList+0xb0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d00d      	beq.n	80062d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	441a      	add	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	e008      	b.n	80062e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062d6:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <prvInsertBlockIntoFreeList+0xb0>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	e003      	b.n	80062e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d002      	beq.n	80062f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062f6:	bf00      	nop
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	200040a4 	.word	0x200040a4
 8006308:	200040ac 	.word	0x200040ac

0800630c <memset>:
 800630c:	4402      	add	r2, r0
 800630e:	4603      	mov	r3, r0
 8006310:	4293      	cmp	r3, r2
 8006312:	d100      	bne.n	8006316 <memset+0xa>
 8006314:	4770      	bx	lr
 8006316:	f803 1b01 	strb.w	r1, [r3], #1
 800631a:	e7f9      	b.n	8006310 <memset+0x4>

0800631c <__libc_init_array>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	4d0d      	ldr	r5, [pc, #52]	; (8006354 <__libc_init_array+0x38>)
 8006320:	4c0d      	ldr	r4, [pc, #52]	; (8006358 <__libc_init_array+0x3c>)
 8006322:	1b64      	subs	r4, r4, r5
 8006324:	10a4      	asrs	r4, r4, #2
 8006326:	2600      	movs	r6, #0
 8006328:	42a6      	cmp	r6, r4
 800632a:	d109      	bne.n	8006340 <__libc_init_array+0x24>
 800632c:	4d0b      	ldr	r5, [pc, #44]	; (800635c <__libc_init_array+0x40>)
 800632e:	4c0c      	ldr	r4, [pc, #48]	; (8006360 <__libc_init_array+0x44>)
 8006330:	f000 f826 	bl	8006380 <_init>
 8006334:	1b64      	subs	r4, r4, r5
 8006336:	10a4      	asrs	r4, r4, #2
 8006338:	2600      	movs	r6, #0
 800633a:	42a6      	cmp	r6, r4
 800633c:	d105      	bne.n	800634a <__libc_init_array+0x2e>
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	f855 3b04 	ldr.w	r3, [r5], #4
 8006344:	4798      	blx	r3
 8006346:	3601      	adds	r6, #1
 8006348:	e7ee      	b.n	8006328 <__libc_init_array+0xc>
 800634a:	f855 3b04 	ldr.w	r3, [r5], #4
 800634e:	4798      	blx	r3
 8006350:	3601      	adds	r6, #1
 8006352:	e7f2      	b.n	800633a <__libc_init_array+0x1e>
 8006354:	080066c8 	.word	0x080066c8
 8006358:	080066c8 	.word	0x080066c8
 800635c:	080066c8 	.word	0x080066c8
 8006360:	080066cc 	.word	0x080066cc

08006364 <memcpy>:
 8006364:	440a      	add	r2, r1
 8006366:	4291      	cmp	r1, r2
 8006368:	f100 33ff 	add.w	r3, r0, #4294967295
 800636c:	d100      	bne.n	8006370 <memcpy+0xc>
 800636e:	4770      	bx	lr
 8006370:	b510      	push	{r4, lr}
 8006372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800637a:	4291      	cmp	r1, r2
 800637c:	d1f9      	bne.n	8006372 <memcpy+0xe>
 800637e:	bd10      	pop	{r4, pc}

08006380 <_init>:
 8006380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006382:	bf00      	nop
 8006384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006386:	bc08      	pop	{r3}
 8006388:	469e      	mov	lr, r3
 800638a:	4770      	bx	lr

0800638c <_fini>:
 800638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638e:	bf00      	nop
 8006390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006392:	bc08      	pop	{r3}
 8006394:	469e      	mov	lr, r3
 8006396:	4770      	bx	lr
